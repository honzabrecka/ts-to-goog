/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/arcgis-js-api v3/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri"
/** @const */
tsickle_declare_module.esri = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri */
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.AGSMouseEvent = function() {};
 /** @type {!Graphic} */
tsickle_declare_module.esri.AGSMouseEvent.prototype.graphic;
 /** @type {!Point} */
tsickle_declare_module.esri.AGSMouseEvent.prototype.mapPoint;
 /** @type {!ScreenPoint} */
tsickle_declare_module.esri.AGSMouseEvent.prototype.screenPoint;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.AddOptions = function() {};
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.AddOptions.prototype.addedGraphics;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.AddOptions.prototype.featureLayer;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.AggregatePointsOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.analysisGpServer;
 /** @type {string} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.groupByField;
 /** @type {boolean} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.keepBoundariesWithNoPoints;
 /** @type {!Map} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.outputLayerName;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.pointLayer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.polygonLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.polygonLayers;
 /** @type {string} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.showSelectFolder;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.AggregatePointsOptions.prototype.summaryFields;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.className;
 /** @type {string} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.gdbVersion;
 /** @type {string} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.id;
 /** @type {!ImageParameters} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.imageParameters;
 /** @type {?} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.infoTemplates;
 /** @type {number} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.opacity;
 /** @type {number} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.refreshInterval;
 /** @type {?} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.resourceInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.useMapImage;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.useMapTime;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISDynamicMapServiceLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.id;
 /** @type {!ImageServiceParameters} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.imageServiceParameters;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.infoTemplate;
 /** @type {number} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.opacity;
 /** @type {?} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.resourceInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.useMapImage;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.useMapTime;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISImageServiceLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ArcGISImageServiceVectorLayerOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.ArcGISImageServiceVectorLayerOptions.prototype.pixelFilter;
 /** @type {string} */
tsickle_declare_module.esri.ArcGISImageServiceVectorLayerOptions.prototype.rendererStyle;
 /** @type {number} */
tsickle_declare_module.esri.ArcGISImageServiceVectorLayerOptions.prototype.symbolTileSize;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.className;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.displayLevels;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.exclusionAreas;
 /** @type {string} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.id;
 /** @type {?} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.infoTemplates;
 /** @type {number} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.opacity;
 /** @type {number} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.refreshInterval;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.resampling;
 /** @type {number} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.resamplingTolerance;
 /** @type {?} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.resourceInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.showAttribution;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.tileServers;
 /** @type {boolean} */
tsickle_declare_module.esri.ArcGISTiledMapServiceLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.AttributeInspectorOptions = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri.AttributeInspectorOptions.prototype.layerInfos;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.AttributionOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.AttributionOptions.prototype.itemDelimiter;
 /** @type {!Map} */
tsickle_declare_module.esri.AttributionOptions.prototype.map;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.BasemapGalleryOptions = function() {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.basemapIds;
 /** @type {!Array<!Basemap>} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.basemaps;
 /** @type {?} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.basemapsGroup;
 /** @type {string} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.bingMapsKey;
 /** @type {!Map} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.portalUrl;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.referenceIds;
 /** @type {boolean} */
tsickle_declare_module.esri.BasemapGalleryOptions.prototype.showArcGISBasemaps;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.BasemapLayerOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.bandIds;
 /** @type {string} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.copyright;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.displayLevels;
 /** @type {!Extent} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.initialExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.isReference;
 /** @type {number} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.opacity;
 /** @type {string} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.styleUrl;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.subDomains;
 /** @type {string} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.templateUrl;
 /** @type {!TileInfo} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.tileInfo;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.tileServer;
 /** @type {string} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.type;
 /** @type {string} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.url;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.BasemapLayerOptions.prototype.visibleLayers;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.BasemapOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.BasemapOptions.prototype.id;
 /** @type {!Array<!BasemapLayer>} */
tsickle_declare_module.esri.BasemapOptions.prototype.layers;
 /** @type {string} */
tsickle_declare_module.esri.BasemapOptions.prototype.thumbnailUrl;
 /** @type {string} */
tsickle_declare_module.esri.BasemapOptions.prototype.title;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.BasemapToggleOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.BasemapToggleOptions.prototype.basemap;
 /** @type {?} */
tsickle_declare_module.esri.BasemapToggleOptions.prototype.basemaps;
 /** @type {!Map} */
tsickle_declare_module.esri.BasemapToggleOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.BasemapToggleOptions.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri.BasemapToggleOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.BlendRendererOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.BlendRendererOptions.prototype.blendMode;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.BlendRendererOptions.prototype.fields;
 /** @type {string} */
tsickle_declare_module.esri.BlendRendererOptions.prototype.normalizationField;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.BlendRendererOptions.prototype.opacityStops;
 /** @type {!Symbol} */
tsickle_declare_module.esri.BlendRendererOptions.prototype.symbol;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.BookmarkItemOptions = function() {};
 /** @type {!Extent} */
tsickle_declare_module.esri.BookmarkItemOptions.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri.BookmarkItemOptions.prototype.name;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.BookmarksOptions = function() {};
 /** @type {!Array<!BookmarkItem>} */
tsickle_declare_module.esri.BookmarksOptions.prototype.bookmarks;
 /** @type {boolean} */
tsickle_declare_module.esri.BookmarksOptions.prototype.editable;
 /** @type {!Map} */
tsickle_declare_module.esri.BookmarksOptions.prototype.map;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CSVLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.columnDelimiter;
 /** @type {string} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.copyright;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.fields;
 /** @type {string} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.latitudeFieldName;
 /** @type {string} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.longitudeFieldName;
 /** @type {number} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.opacity;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.outFields;
 /** @type {number} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.refreshInterval;
 /** @type {!TimeInfo} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.timeInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.CSVLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.analysisGpServer;
 /** @type {number} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.candidateCount;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.candidateFacilitiesCapacity;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.candidateFacilitiesCapacityField;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.candidateFacilitiesLayer;
 /** @type {number} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.demand;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.demandField;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.demandLocationLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.demandLocationLayers;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.enableTravelModes;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.featureLayers;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.folderId;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.folderName;
 /** @type {!Map} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.maxTravelRange;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.maxTravelRangeField;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.outputLayerName;
 /** @type {number} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.percentDemandCoverage;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.portalUrl;
 /** @type {number} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.requiredFacilitiesCapacity;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.requiredFacilitiesCapacityField;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.requiredFacilitiesLayer;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.showReadyToUseLayers;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.showSelectFolder;
 /** @type {string} */
tsickle_declare_module.esri.ChooseBestFacilitiesOptions.prototype.title;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CircleOptions1 = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.CircleOptions1.prototype.geodesic;
 /** @type {number} */
tsickle_declare_module.esri.CircleOptions1.prototype.numberOfPoints;
 /** @type {number} */
tsickle_declare_module.esri.CircleOptions1.prototype.radius;
 /** @type {string} */
tsickle_declare_module.esri.CircleOptions1.prototype.radiusUnit;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CircleOptions2 = function() {};
 /** @type {(!Point|!Array<number>)} */
tsickle_declare_module.esri.CircleOptions2.prototype.center;
 /** @type {boolean} */
tsickle_declare_module.esri.CircleOptions2.prototype.geodesic;
 /** @type {number} */
tsickle_declare_module.esri.CircleOptions2.prototype.numberOfPoints;
 /** @type {number} */
tsickle_declare_module.esri.CircleOptions2.prototype.radius;
 /** @type {string} */
tsickle_declare_module.esri.CircleOptions2.prototype.radiusUnit;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ClassedColorSliderOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.breakInfos;
 /** @type {string} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.classificationMethod;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.histogramWidth;
 /** @type {string} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.normalizationType;
 /** @type {number} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.showTicks;
 /** @type {?} */
tsickle_declare_module.esri.ClassedColorSliderOptions.prototype.statistics;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ClassedSizeSliderOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.breakInfos;
 /** @type {string} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.classificationMethod;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.histogramWidth;
 /** @type {string} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.normalizationType;
 /** @type {number} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.showTicks;
 /** @type {?} */
tsickle_declare_module.esri.ClassedSizeSliderOptions.prototype.statistics;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ColorInfoSliderOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.colorInfo;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.minValue;
 /** @type {number} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.showLabels;
 /** @type {(string|boolean)} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.showRatioLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.showTicks;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.showTransparentBackground;
 /** @type {?} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.statistics;
 /** @type {?} */
tsickle_declare_module.esri.ColorInfoSliderOptions.prototype.zoomOptions;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ColorPickerOptions = function() {};
 /** @type {!Color} */
tsickle_declare_module.esri.ColorPickerOptions.prototype.color;
 /** @type {number} */
tsickle_declare_module.esri.ColorPickerOptions.prototype.colorsPerRow;
 /** @type {!Array<!Color>} */
tsickle_declare_module.esri.ColorPickerOptions.prototype.palette;
 /** @type {!Array<!Color>} */
tsickle_declare_module.esri.ColorPickerOptions.prototype.recentColors;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorPickerOptions.prototype.required;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorPickerOptions.prototype.showRecentColors;
 /** @type {boolean} */
tsickle_declare_module.esri.ColorPickerOptions.prototype.showTransparencySlider;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.analysisGpServer;
 /** @type {string} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.distanceDefaultUnits;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.featureLayers;
 /** @type {!Map} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.map;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.originsLayers;
 /** @type {string} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.ConnectOriginsToDestinationsOptions.prototype.showSelectAnalysisLayer;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CoordinatesLocationProviderOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.CoordinatesLocationProviderOptions.prototype.xField;
 /** @type {string} */
tsickle_declare_module.esri.CoordinatesLocationProviderOptions.prototype.yField;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CreateBuffersOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.analysisGpServer;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.bufferDistance;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.showChooseExtent;
 /** @type {string} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateBuffersOptions.prototype.showSelectFolder;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.analysisGpServer;
 /** @type {string} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.breakUnits;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.breakValues;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.inputLayer;
 /** @type {string} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.inputType;
 /** @type {!Map} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.overlapPolicy;
 /** @type {string} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateDriveTimeAreasOptions.prototype.showSelectFolder;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CreateViewshedOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.CreateViewshedOptions.prototype.analysisGpServer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.CreateViewshedOptions.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri.CreateViewshedOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.CreateViewshedOptions.prototype.portalUrl;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CreateWatershedsOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.CreateWatershedsOptions.prototype.analysisGpServer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.CreateWatershedsOptions.prototype.inputLayers;
 /** @type {!Map} */
tsickle_declare_module.esri.CreateWatershedsOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.CreateWatershedsOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.CreateWatershedsOptions.prototype.showSelectAnalysisLayer;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.CutOptions = function() {};
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.CutOptions.prototype.addedGraphics;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.CutOptions.prototype.featureLayer;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.CutOptions.prototype.postUpdatedGraphics;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.CutOptions.prototype.preUpdatedGraphics;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DataAdapterFeatureLayerOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.DataAdapterFeatureLayerOptions.prototype.dataAdapterQuery;
 /** @type {!LocationProviderBase} */
tsickle_declare_module.esri.DataAdapterFeatureLayerOptions.prototype.locationProvider;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DataBrowserOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.allowHierarchies;
 /** @type {boolean} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.countryBox;
 /** @type {string} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.countryID;
 /** @type {string} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.hierarchyID;
 /** @type {string} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.pageBackButton;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.selection;
 /** @type {boolean} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.shoppingCart;
 /** @type {string} */
tsickle_declare_module.esri.DataBrowserOptions.prototype.title;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DeleteOptions = function() {};
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.DeleteOptions.prototype.deletedGraphics;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.DeleteOptions.prototype.featureLayer;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DirectionsOptions = function() {};
 /** @type {(string|boolean|!Array<string>)} */
tsickle_declare_module.esri.DirectionsOptions.prototype.alphabet;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.autoSolve;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.canModifyStops;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.centerAtSegmentStart;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.directionsLanguage;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.directionsLengthUnits;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.dragging;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.focusOnNewStop;
 /** @type {!PictureMarkerSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.fromSymbol;
 /** @type {!PictureMarkerSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.fromSymbolDrag;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.geometryTaskUrl;
 /** @type {!Map} */
tsickle_declare_module.esri.DirectionsOptions.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.mapClickActive;
 /** @type {number} */
tsickle_declare_module.esri.DirectionsOptions.prototype.maxStops;
 /** @type {number} */
tsickle_declare_module.esri.DirectionsOptions.prototype.minStops;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.optimalRoute;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.portalUrl;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.printPage;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.printTaskUrl;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.printTemplate;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.returnToStart;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.routeSymbol;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.routeTaskUrl;
 /** @type {?} */
tsickle_declare_module.esri.DirectionsOptions.prototype.searchOptions;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.DirectionsOptions.prototype.segmentInfoTemplate;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.segmentSymbol;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showActivateButton;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showBarriersButton;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showClearButton;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showMilesKilometersOption;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showOptimalRouteOption;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showPrintPage;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showReturnToStartOption;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showReverseStopsButton;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showSaveButton;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showSegmentHighlight;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showSegmentPopup;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showTrafficOption;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.showTravelModesOption;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.solving;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.DirectionsOptions.prototype.stopGraphics;
 /** @type {(!Array<?>|!Array<string>|!Array<!Point>|!Array<!Array<number>>)} */
tsickle_declare_module.esri.DirectionsOptions.prototype.stops;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.DirectionsOptions.prototype.stopsInfoTemplate;
 /** @type {!PictureMarkerSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.stopSymbol;
 /** @type {!PictureMarkerSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.stopSymbolDrag;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.DirectionsOptions.prototype.textGraphics;
 /** @type {!Color} */
tsickle_declare_module.esri.DirectionsOptions.prototype.textSymbolColor;
 /** @type {!Font} */
tsickle_declare_module.esri.DirectionsOptions.prototype.textSymbolFont;
 /** @type {?} */
tsickle_declare_module.esri.DirectionsOptions.prototype.textSymbolOffset;
 /** @type {string} */
tsickle_declare_module.esri.DirectionsOptions.prototype.theme;
 /** @type {!PictureMarkerSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.toSymbol;
 /** @type {!PictureMarkerSymbol} */
tsickle_declare_module.esri.DirectionsOptions.prototype.toSymbolDrag;
 /** @type {boolean} */
tsickle_declare_module.esri.DirectionsOptions.prototype.traffic;
 /** @type {!ArcGISDynamicMapServiceLayer} */
tsickle_declare_module.esri.DirectionsOptions.prototype.trafficLayer;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DissolveBoundariesOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.analysisGpServer;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.dissolveFields;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.showSelectFolder;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.DissolveBoundariesOptions.prototype.summaryFields;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DotDensityRendererOptions = function() {};
 /** @type {!Color} */
tsickle_declare_module.esri.DotDensityRendererOptions.prototype.backgroundColor;
 /** @type {string} */
tsickle_declare_module.esri.DotDensityRendererOptions.prototype.dotShape;
 /** @type {number} */
tsickle_declare_module.esri.DotDensityRendererOptions.prototype.dotSize;
 /** @type {number} */
tsickle_declare_module.esri.DotDensityRendererOptions.prototype.dotValue;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.DotDensityRendererOptions.prototype.fields;
 /** @type {!LineSymbol} */
tsickle_declare_module.esri.DotDensityRendererOptions.prototype.outline;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DrawOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.DrawOptions.prototype.drawTime;
 /** @type {boolean} */
tsickle_declare_module.esri.DrawOptions.prototype.showTooltips;
 /** @type {number} */
tsickle_declare_module.esri.DrawOptions.prototype.tolerance;
 /** @type {number} */
tsickle_declare_module.esri.DrawOptions.prototype.tooltipOffset;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.DriveBufferOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.DriveBufferOptions.prototype.radius;
 /** @type {string} */
tsickle_declare_module.esri.DriveBufferOptions.prototype.units;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.EditOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.EditOptions.prototype.allowAddVertices;
 /** @type {boolean} */
tsickle_declare_module.esri.EditOptions.prototype.allowDeleteVertices;
 /** @type {!LineSymbol} */
tsickle_declare_module.esri.EditOptions.prototype.ghostLineSymbol;
 /** @type {!MarkerSymbol} */
tsickle_declare_module.esri.EditOptions.prototype.ghostVertexSymbol;
 /** @type {(string|!Node)} */
tsickle_declare_module.esri.EditOptions.prototype.textSymbolEditorHolder;
 /** @type {boolean} */
tsickle_declare_module.esri.EditOptions.prototype.uniformScaling;
 /** @type {!MarkerSymbol} */
tsickle_declare_module.esri.EditOptions.prototype.vertexSymbol;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.EditorOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.EditorOptions.prototype.settings;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ElevationProfileOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.ElevationProfileOptions.prototype.chartOptions;
 /** @type {!Map} */
tsickle_declare_module.esri.ElevationProfileOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.ElevationProfileOptions.prototype.profileTaskUrl;
 /** @type {string} */
tsickle_declare_module.esri.ElevationProfileOptions.prototype.scalebarUnits;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.EnrichLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.analysisGpServer;
 /** @type {number} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.distance;
 /** @type {boolean} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.enableTravelModes;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.showSelectFolder;
 /** @type {boolean} */
tsickle_declare_module.esri.EnrichLayerOptions.prototype.showTrafficWidget;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ExtractDataOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.analysisGpServer;
 /** @type {boolean} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.clip;
 /** @type {string} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.dataFormat;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.featureLayers;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.inputLayers;
 /** @type {!Map} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.ExtractDataOptions.prototype.showSelectFolder;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.FeatureLayerOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.allowUpdateWithoutMValues;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.autoGeneralize;
 /** @type {string} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.className;
 /** @type {string} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.definitionExpression;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.displayOnPan;
 /** @type {!Function} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.editSummaryCallback;
 /** @type {string} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.gdbVersion;
 /** @type {string} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.id;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.infoTemplate;
 /** @type {number} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.maxAllowableOffset;
 /** @type {number} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.mode;
 /** @type {number} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.opacity;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.orderByFields;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.outFields;
 /** @type {number} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.refreshInterval;
 /** @type {?} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.resourceInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.showLabels;
 /** @type {!LayerSource} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.source;
 /** @type {number} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.tileHeight;
 /** @type {number} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.tileWidth;
 /** @type {string} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.trackIdField;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.useMapTime;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.FeatureLayerStatisticsOptions = function() {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.FeatureLayerStatisticsOptions.prototype.layer;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.FeatureTableOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.batchCount;
 /** @type {?} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.dateOptions;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.editable;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.featureLayer;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.fieldInfos;
 /** @type {?} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.gridMenu;
 /** @type {?} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.gridOptions;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.hiddenFields;
 /** @type {!Map} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.map;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.menuFunctions;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.outFields;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showAttachments;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showColumnHeaderTooltips;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showCyclicalRelationships;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showDataTypes;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showFeatureCount;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showGridHeader;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showGridMenu;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showRelatedRecords;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.showStatistics;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.syncSelection;
 /** @type {boolean} */
tsickle_declare_module.esri.FeatureTableOptions.prototype.zoomToSelection;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.FindHotSpotsOptions = function() {};
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.aggregationPolygonLayers;
 /** @type {string} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.analysisField;
 /** @type {string} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.analysisGpServer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.analysisLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.boundingPolygonLayers;
 /** @type {boolean} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.isProcessInfo;
 /** @type {!Map} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.FindHotSpotsOptions.prototype.showSelectFolder;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.FindNearestOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.FindNearestOptions.prototype.analysisGpServer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.FindNearestOptions.prototype.analysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri.FindNearestOptions.prototype.enableTravelModes;
 /** @type {!Map} */
tsickle_declare_module.esri.FindNearestOptions.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri.FindNearestOptions.prototype.maxCount;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.FindNearestOptions.prototype.nearLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.FindNearestOptions.prototype.nearLayers;
 /** @type {string} */
tsickle_declare_module.esri.FindNearestOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.FindNearestOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.FindNearestOptions.prototype.returnFeatureCollection;
 /** @type {number} */
tsickle_declare_module.esri.FindNearestOptions.prototype.searchCutoff;
 /** @type {string} */
tsickle_declare_module.esri.FindNearestOptions.prototype.searchCutoffUnits;
 /** @type {boolean} */
tsickle_declare_module.esri.FindNearestOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.FindNearestOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.FindNearestOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.FindNearestOptions.prototype.showSelectFolder;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.FindTaskOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.FindTaskOptions.prototype.gdbVersion;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.GalleryOptions = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri.GalleryOptions.prototype.items;
 /** @type {boolean} */
tsickle_declare_module.esri.GalleryOptions.prototype.showTitle;
 /** @type {string} */
tsickle_declare_module.esri.GalleryOptions.prototype.thumbnailStyle;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.GaugeOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.caption;
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.color;
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.dataField;
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.dataFormat;
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.dataLabelField;
 /** @type {boolean} */
tsickle_declare_module.esri.GaugeOptions.prototype.fromWebmap;
 /** @type {!GraphicsLayer} */
tsickle_declare_module.esri.GaugeOptions.prototype.layer;
 /** @type {number} */
tsickle_declare_module.esri.GaugeOptions.prototype.maxDataValue;
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.noDataLabel;
 /** @type {?} */
tsickle_declare_module.esri.GaugeOptions.prototype.numberFormat;
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri.GaugeOptions.prototype.unitLabel;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.GenerateRendererTaskOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.GenerateRendererTaskOptions.prototype.checkValueRange;
 /** @type {string} */
tsickle_declare_module.esri.GenerateRendererTaskOptions.prototype.gdbVersion;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.GeoRSSLayerOptions = function() {};
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.GeoRSSLayerOptions.prototype.infoTemplate;
 /** @type {number} */
tsickle_declare_module.esri.GeoRSSLayerOptions.prototype.opacity;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri.GeoRSSLayerOptions.prototype.outSpatialReference;
 /** @type {!Symbol} */
tsickle_declare_module.esri.GeoRSSLayerOptions.prototype.pointSymbol;
 /** @type {!Symbol} */
tsickle_declare_module.esri.GeoRSSLayerOptions.prototype.polygonSymbol;
 /** @type {!Symbol} */
tsickle_declare_module.esri.GeoRSSLayerOptions.prototype.polylineSymbol;
 /** @type {number} */
tsickle_declare_module.esri.GeoRSSLayerOptions.prototype.refreshInterval;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.GeocoderOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.GeocoderOptions.prototype.arcgisGeocoder;
 /** @type {boolean} */
tsickle_declare_module.esri.GeocoderOptions.prototype.autoComplete;
 /** @type {boolean} */
tsickle_declare_module.esri.GeocoderOptions.prototype.autoNavigate;
 /** @type {boolean} */
tsickle_declare_module.esri.GeocoderOptions.prototype.geocoderMenu;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.GeocoderOptions.prototype.geocoders;
 /** @type {!GraphicsLayer} */
tsickle_declare_module.esri.GeocoderOptions.prototype.graphicsLayer;
 /** @type {boolean} */
tsickle_declare_module.esri.GeocoderOptions.prototype.highlightLocation;
 /** @type {!Map} */
tsickle_declare_module.esri.GeocoderOptions.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri.GeocoderOptions.prototype.maxLocations;
 /** @type {number} */
tsickle_declare_module.esri.GeocoderOptions.prototype.minCharacters;
 /** @type {number} */
tsickle_declare_module.esri.GeocoderOptions.prototype.searchDelay;
 /** @type {boolean} */
tsickle_declare_module.esri.GeocoderOptions.prototype.showResults;
 /** @type {!Symbol} */
tsickle_declare_module.esri.GeocoderOptions.prototype.symbol;
 /** @type {string} */
tsickle_declare_module.esri.GeocoderOptions.prototype.theme;
 /** @type {string} */
tsickle_declare_module.esri.GeocoderOptions.prototype.value;
 /** @type {number} */
tsickle_declare_module.esri.GeocoderOptions.prototype.zoomScale;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.GeometryLocationProviderOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.GeometryLocationProviderOptions.prototype.geometryField;
 /** @type {string} */
tsickle_declare_module.esri.GeometryLocationProviderOptions.prototype.geometryType;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.GraphicsLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.className;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.dataAttributes;
 /** @type {boolean} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.displayOnPan;
 /** @type {string} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.id;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.infoTemplate;
 /** @type {number} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.opacity;
 /** @type {number} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.refreshInterval;
 /** @type {boolean} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.styling;
 /** @type {boolean} */
tsickle_declare_module.esri.GraphicsLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.Handle = function() {};

/**
 * Remove the listener
 * @return {void}
 */
tsickle_declare_module.esri.Handle.prototype.remove = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.HeatmapRendererOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.HeatmapRendererOptions.prototype.blurRadius;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.HeatmapRendererOptions.prototype.colors;
 /** @type {string} */
tsickle_declare_module.esri.HeatmapRendererOptions.prototype.field;
 /** @type {number} */
tsickle_declare_module.esri.HeatmapRendererOptions.prototype.maxPixelIntensity;
 /** @type {number} */
tsickle_declare_module.esri.HeatmapRendererOptions.prototype.minPixelIntensity;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.HeatmapSliderOptions = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.colorStops;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.handles;
 /** @type {number} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.minValue;
 /** @type {number} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.HeatmapSliderOptions.prototype.showTicks;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.HistogramTimeSliderOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.HistogramTimeSliderOptions.prototype.color;
 /** @type {string} */
tsickle_declare_module.esri.HistogramTimeSliderOptions.prototype.dateFormat;
 /** @type {!Array<!Layer>} */
tsickle_declare_module.esri.HistogramTimeSliderOptions.prototype.layers;
 /** @type {string} */
tsickle_declare_module.esri.HistogramTimeSliderOptions.prototype.mode;
 /** @type {string} */
tsickle_declare_module.esri.HistogramTimeSliderOptions.prototype.timeInterval;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.HomeButtonOptions = function() {};
 /** @type {!Extent} */
tsickle_declare_module.esri.HomeButtonOptions.prototype.extent;
 /** @type {!Map} */
tsickle_declare_module.esri.HomeButtonOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.HomeButtonOptions.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri.HomeButtonOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.HorizontalSliderOptions = function() {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri.HorizontalSliderOptions.prototype.labels;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.IdentifyTaskOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.IdentifyTaskOptions.prototype.gdbVersion;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ImageServiceMeasureOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.angularUnit;
 /** @type {string} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.areaUnit;
 /** @type {boolean} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.displayMeasureResultInPopup;
 /** @type {!SimpleFillSymbol} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.fillSymbol;
 /** @type {!ArcGISImageServiceLayer} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.layer;
 /** @type {string} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.layout;
 /** @type {string} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.linearUnit;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.lineSymbol;
 /** @type {!Map} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.map;
 /** @type {!SimpleMarkerSymbol} */
tsickle_declare_module.esri.ImageServiceMeasureOptions.prototype.markerSymbol;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.angularUnit;
 /** @type {string} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.areaUnit;
 /** @type {!SimpleFillSymbol} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.fillSymbol;
 /** @type {!ArcGISImageServiceLayer} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.layer;
 /** @type {string} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.linearUnit;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.lineSymbol;
 /** @type {!Map} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.map;
 /** @type {!SimpleMarkerSymbol} */
tsickle_declare_module.esri.ImageServiceMeasureToolOptions.prototype.markerSymbol;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ImageSpatialReferenceOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.ImageSpatialReferenceOptions.prototype.ics;
 /** @type {number} */
tsickle_declare_module.esri.ImageSpatialReferenceOptions.prototype.icsid;
 /** @type {string} */
tsickle_declare_module.esri.ImageSpatialReferenceOptions.prototype.url;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.KMLLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.KMLLayerOptions.prototype.className;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri.KMLLayerOptions.prototype.outSR;
 /** @type {number} */
tsickle_declare_module.esri.KMLLayerOptions.prototype.refreshInterval;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.LabelLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.LabelLayerOptions.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri.LabelLayerOptions.prototype.mode;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.LayerListOptions = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri.LayerListOptions.prototype.layers;
 /** @type {!Map} */
tsickle_declare_module.esri.LayerListOptions.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri.LayerListOptions.prototype.removeUnderscores;
 /** @type {boolean} */
tsickle_declare_module.esri.LayerListOptions.prototype.showLegend;
 /** @type {boolean} */
tsickle_declare_module.esri.LayerListOptions.prototype.showOpacitySlider;
 /** @type {boolean} */
tsickle_declare_module.esri.LayerListOptions.prototype.showSubLayers;
 /** @type {string} */
tsickle_declare_module.esri.LayerListOptions.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri.LayerListOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.LayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.LayerOptions.prototype.className;
 /** @type {number} */
tsickle_declare_module.esri.LayerOptions.prototype.refreshInterval;
 /** @type {boolean} */
tsickle_declare_module.esri.LayerOptions.prototype.showAttribution;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.LayerSwipeOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.clip;
 /** @type {boolean} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.enabled;
 /** @type {!Array<!Layer>} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.layers;
 /** @type {number} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.left;
 /** @type {!Map} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.theme;
 /** @type {number} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.top;
 /** @type {string} */
tsickle_declare_module.esri.LayerSwipeOptions.prototype.type;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.LegendOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.LegendOptions.prototype.arrangement;
 /** @type {boolean} */
tsickle_declare_module.esri.LegendOptions.prototype.autoUpdate;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.LegendOptions.prototype.layerInfos;
 /** @type {!Map} */
tsickle_declare_module.esri.LegendOptions.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri.LegendOptions.prototype.respectCurrentMapScale;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.LocateButtonOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.centerAt;
 /** @type {?} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.geolocationOptions;
 /** @type {!GraphicsLayer} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.graphicsLayer;
 /** @type {boolean} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.highlightLocation;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.infoTemplate;
 /** @type {!Map} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.scale;
 /** @type {boolean} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.setScale;
 /** @type {!Symbol} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.symbol;
 /** @type {string} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.useTracking;
 /** @type {boolean} */
tsickle_declare_module.esri.LocateButtonOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.LocatorLocationProviderOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.LocatorLocationProviderOptions.prototype.addressFields;
 /** @type {!Locator} */
tsickle_declare_module.esri.LocatorLocationProviderOptions.prototype.locator;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.MapImageOptions = function() {};
 /** @type {!Extent} */
tsickle_declare_module.esri.MapImageOptions.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri.MapImageOptions.prototype.href;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.MapOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.attributionWidth;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.autoResize;
 /** @type {string} */
tsickle_declare_module.esri.MapOptions.prototype.basemap;
 /** @type {(!Point|!Array<number>)} */
tsickle_declare_module.esri.MapOptions.prototype.center;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.displayGraphicsOnPan;
 /** @type {!Extent} */
tsickle_declare_module.esri.MapOptions.prototype.extent;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.fadeOnZoom;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.fitExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.force3DTransforms;
 /** @type {!InfoWindowBase} */
tsickle_declare_module.esri.MapOptions.prototype.infoWindow;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isClickRecenter;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isDoubleClickZoom;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isKeyboardNavigation;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isMapNavigation;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isPan;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isPinchZoom;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isRubberBandZoom;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.isScrollWheel;
 /** @type {!Array<!LOD>} */
tsickle_declare_module.esri.MapOptions.prototype.lods;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.logo;
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.maxZoom;
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.minScale;
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.minZoom;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.nav;
 /** @type {string} */
tsickle_declare_module.esri.MapOptions.prototype.navigationMode;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.optimizePanAnimation;
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.resizeDelay;
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.scale;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.showInfoWindowOnClick;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.slider;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.MapOptions.prototype.sliderLabels;
 /** @type {string} */
tsickle_declare_module.esri.MapOptions.prototype.sliderOrientation;
 /** @type {string} */
tsickle_declare_module.esri.MapOptions.prototype.sliderPosition;
 /** @type {string} */
tsickle_declare_module.esri.MapOptions.prototype.sliderStyle;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.smartNavigation;
 /** @type {boolean} */
tsickle_declare_module.esri.MapOptions.prototype.wrapAround180;
 /** @type {number} */
tsickle_declare_module.esri.MapOptions.prototype.zoom;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.MeasurementOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.MeasurementOptions.prototype.advancedLocationUnits;
 /** @type {string} */
tsickle_declare_module.esri.MeasurementOptions.prototype.defaultAreaUnit;
 /** @type {string} */
tsickle_declare_module.esri.MeasurementOptions.prototype.defaultLengthUnit;
 /** @type {!SimpleFillSymbol} */
tsickle_declare_module.esri.MeasurementOptions.prototype.fillSymbol;
 /** @type {(!Point|!Polyline|!Polygon)} */
tsickle_declare_module.esri.MeasurementOptions.prototype.geometry;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri.MeasurementOptions.prototype.lineSymbol;
 /** @type {!Map} */
tsickle_declare_module.esri.MeasurementOptions.prototype.map;
 /** @type {!MarkerSymbol} */
tsickle_declare_module.esri.MeasurementOptions.prototype.pointSymbol;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.MergeLayersOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.analysisGpServer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.map;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.mergeLayers;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.mergingAttributes;
 /** @type {string} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.MergeLayersOptions.prototype.showSelectFolder;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.NAOutputLine = function() {};
 /** @type {?} */
tsickle_declare_module.esri.NAOutputLine.prototype.NONE;
 /** @type {?} */
tsickle_declare_module.esri.NAOutputLine.prototype.STRAIGHT;
 /** @type {?} */
tsickle_declare_module.esri.NAOutputLine.prototype.TRUE_SHAPE;
 /** @type {?} */
tsickle_declare_module.esri.NAOutputLine.prototype.TRUE_SHAPE_WITH_MEASURE;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.NAOutputPolygon = function() {};
 /** @type {?} */
tsickle_declare_module.esri.NAOutputPolygon.prototype.DETAILED;
 /** @type {?} */
tsickle_declare_module.esri.NAOutputPolygon.prototype.NONE;
 /** @type {?} */
tsickle_declare_module.esri.NAOutputPolygon.prototype.SIMPLIFIED;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.NATravelDirection = function() {};
 /** @type {?} */
tsickle_declare_module.esri.NATravelDirection.prototype.FROM_FACILITY;
 /** @type {?} */
tsickle_declare_module.esri.NATravelDirection.prototype.TO_FACILITY;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.NAUTurn = function() {};
 /** @type {?} */
tsickle_declare_module.esri.NAUTurn.prototype.ALLOW_BACKTRACK;
 /** @type {?} */
tsickle_declare_module.esri.NAUTurn.prototype.AT_DEAD_ENDS_AND_INTERSECTIONS;
 /** @type {?} */
tsickle_declare_module.esri.NAUTurn.prototype.AT_DEAD_ENDS_ONLY;
 /** @type {?} */
tsickle_declare_module.esri.NAUTurn.prototype.NO_BACKTRACK;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.OAuthInfoOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.appId;
 /** @type {string} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.authNamespace;
 /** @type {number} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.expiration;
 /** @type {string} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.locale;
 /** @type {number} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.minTimeUntilExpiration;
 /** @type {boolean} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.popup;
 /** @type {string} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.popupCallbackUrl;
 /** @type {string} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.popupWindowFeatures;
 /** @type {string} */
tsickle_declare_module.esri.OAuthInfoOptions.prototype.portalUrl;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ObliqueViewerOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.azimuthAngle;
 /** @type {string} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.azimuthField;
 /** @type {number} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.azimuthTolerance;
 /** @type {string} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.elevationField;
 /** @type {number} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.elevationThreshold;
 /** @type {!ArcGISImageServiceLayer} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.imageServiceLayer;
 /** @type {!Map} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.noQueryOnExtentChange;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.rasterInfoFields;
 /** @type {(string|!Node)} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.rasterListDiv;
 /** @type {boolean} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.rasterListRefresh;
 /** @type {(string|!Node)} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.rotationDiv;
 /** @type {boolean} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.showThumbnail;
 /** @type {!Function} */
tsickle_declare_module.esri.ObliqueViewerOptions.prototype.sorter;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.OpacitySliderOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.minValue;
 /** @type {?} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.opacityInfo;
 /** @type {number} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.showTicks;
 /** @type {boolean} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.showTransparentBackground;
 /** @type {?} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.statistics;
 /** @type {?} */
tsickle_declare_module.esri.OpacitySliderOptions.prototype.zoomOptions;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.OpenStreetMapLayerOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.OpenStreetMapLayerOptions.prototype.displayLevels;
 /** @type {string} */
tsickle_declare_module.esri.OpenStreetMapLayerOptions.prototype.id;
 /** @type {number} */
tsickle_declare_module.esri.OpenStreetMapLayerOptions.prototype.opacity;
 /** @type {boolean} */
tsickle_declare_module.esri.OpenStreetMapLayerOptions.prototype.resampling;
 /** @type {number} */
tsickle_declare_module.esri.OpenStreetMapLayerOptions.prototype.resamplingTolerance;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.OpenStreetMapLayerOptions.prototype.tileServers;
 /** @type {boolean} */
tsickle_declare_module.esri.OpenStreetMapLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.OperationBaseOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.OperationBaseOptions.prototype.label;
 /** @type {string} */
tsickle_declare_module.esri.OperationBaseOptions.prototype.type;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.OverlayLayersOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.analysisGpServer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.outputLayerName;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.overlayLayer;
 /** @type {string} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.overlayType;
 /** @type {string} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.showSelectFolder;
 /** @type {boolean} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.snapToInput;
 /** @type {number} */
tsickle_declare_module.esri.OverlayLayersOptions.prototype.tolerance;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.OverviewMapOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.attachTo;
 /** @type {!Layer} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.baseLayer;
 /** @type {string} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.color;
 /** @type {number} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.expandFactor;
 /** @type {number} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.height;
 /** @type {string} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.id;
 /** @type {!Map} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.maximizeButton;
 /** @type {number} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.opacity;
 /** @type {boolean} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.visible;
 /** @type {number} */
tsickle_declare_module.esri.OverviewMapOptions.prototype.width;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.PixelBlockOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.PixelBlockOptions.prototype.height;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.PixelBlockOptions.prototype.mask;
 /** @type {!Array<!Array<number>>} */
tsickle_declare_module.esri.PixelBlockOptions.prototype.pixels;
 /** @type {string} */
tsickle_declare_module.esri.PixelBlockOptions.prototype.pixelType;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.PixelBlockOptions.prototype.statistics;
 /** @type {number} */
tsickle_declare_module.esri.PixelBlockOptions.prototype.width;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.PopupMobileOptions = function() {};
 /** @type {!FillSymbol} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.fillSymbol;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.highlight;
 /** @type {!LineSymbol} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.lineSymbol;
 /** @type {number} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.marginLeft;
 /** @type {number} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.marginTop;
 /** @type {!MarkerSymbol} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.markerSymbol;
 /** @type {number} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.offsetX;
 /** @type {number} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.offsetY;
 /** @type {number} */
tsickle_declare_module.esri.PopupMobileOptions.prototype.zoomFactor;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.PopupOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.PopupOptions.prototype.anchor;
 /** @type {!FillSymbol} */
tsickle_declare_module.esri.PopupOptions.prototype.fillSymbol;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.hideDelay;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.highlight;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.keepHighlightOnHide;
 /** @type {!LineSymbol} */
tsickle_declare_module.esri.PopupOptions.prototype.lineSymbol;
 /** @type {number} */
tsickle_declare_module.esri.PopupOptions.prototype.marginLeft;
 /** @type {number} */
tsickle_declare_module.esri.PopupOptions.prototype.marginTop;
 /** @type {!MarkerSymbol} */
tsickle_declare_module.esri.PopupOptions.prototype.markerSymbol;
 /** @type {number} */
tsickle_declare_module.esri.PopupOptions.prototype.offsetX;
 /** @type {number} */
tsickle_declare_module.esri.PopupOptions.prototype.offsetY;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.pagingControls;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.pagingInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.popupWindow;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.titleInBody;
 /** @type {boolean} */
tsickle_declare_module.esri.PopupOptions.prototype.visibleWhenEmpty;
 /** @type {number} */
tsickle_declare_module.esri.PopupOptions.prototype.zoomFactor;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.PopupTemplateOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.PopupTemplateOptions.prototype.utcOffset;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.PrintOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.PrintOptions.prototype.async;
 /** @type {?} */
tsickle_declare_module.esri.PrintOptions.prototype.extraParameters;
 /** @type {!Map} */
tsickle_declare_module.esri.PrintOptions.prototype.map;
 /** @type {!Array<!PrintTemplate>} */
tsickle_declare_module.esri.PrintOptions.prototype.templates;
 /** @type {string} */
tsickle_declare_module.esri.PrintOptions.prototype.url;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.PrintTaskOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.PrintTaskOptions.prototype.async;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ProcessorOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.ProcessorOptions.prototype.autostart;
 /** @type {boolean} */
tsickle_declare_module.esri.ProcessorOptions.prototype.drawFeatures;
 /** @type {boolean} */
tsickle_declare_module.esri.ProcessorOptions.prototype.fetchWithWorker;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.ProcessorOptions.prototype.layers;
 /** @type {!Map} */
tsickle_declare_module.esri.ProcessorOptions.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri.ProcessorOptions.prototype.passFeatures;
 /** @type {boolean} */
tsickle_declare_module.esri.ProcessorOptions.prototype.requireWorkerSupport;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.QueryTaskLocationProviderOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.QueryTaskLocationProviderOptions.prototype.queryParameters;
 /** @type {!QueryTask} */
tsickle_declare_module.esri.QueryTaskLocationProviderOptions.prototype.queryTask;
 /** @type {boolean} */
tsickle_declare_module.esri.QueryTaskLocationProviderOptions.prototype.unicode;
 /** @type {?} */
tsickle_declare_module.esri.QueryTaskLocationProviderOptions.prototype.whereFields;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.QueryTaskOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.QueryTaskOptions.prototype.gdbVersion;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.RasterLayerOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.RasterLayerOptions.prototype.drawMode;
 /** @type {string} */
tsickle_declare_module.esri.RasterLayerOptions.prototype.drawType;
 /** @type {!ImageServiceParameters} */
tsickle_declare_module.esri.RasterLayerOptions.prototype.imageServiceParameters;
 /** @type {?} */
tsickle_declare_module.esri.RasterLayerOptions.prototype.pixelFilter;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.RendererSliderOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.handles;
 /** @type {number} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.maximum;
 /** @type {string} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.maxLabel;
 /** @type {number} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.minimum;
 /** @type {string} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.minLabel;
 /** @type {number} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.precision;
 /** @type {number} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.primaryHandle;
 /** @type {boolean} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.showHandles;
 /** @type {(boolean|!Array<string>)} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.showTicks;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.RendererSliderOptions.prototype.values;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.RingBufferOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.RingBufferOptions.prototype.radii;
 /** @type {string} */
tsickle_declare_module.esri.RingBufferOptions.prototype.units;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ScaleDependentRendererOptions = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri.ScaleDependentRendererOptions.prototype.rendererInfos;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.ScalebarOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.ScalebarOptions.prototype.attachTo;
 /** @type {!Map} */
tsickle_declare_module.esri.ScalebarOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.ScalebarOptions.prototype.scalebarStyle;
 /** @type {string} */
tsickle_declare_module.esri.ScalebarOptions.prototype.scalebarUnit;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.SearchOptions = function() {};
 /** @type {(string|number)} */
tsickle_declare_module.esri.SearchOptions.prototype.activeSourceIndex;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.addLayersFromMap;
 /** @type {string} */
tsickle_declare_module.esri.SearchOptions.prototype.allPlaceholder;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.autoNavigate;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.autoSelect;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableButtonMode;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableHighlight;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableInfoWindow;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableLabel;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableSearchingAll;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableSourcesMenu;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableSuggestions;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.enableSuggestionsMenu;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.expanded;
 /** @type {!Layer} */
tsickle_declare_module.esri.SearchOptions.prototype.graphicsLayer;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.SearchOptions.prototype.infoTemplate;
 /** @type {!TextSymbol} */
tsickle_declare_module.esri.SearchOptions.prototype.labelSymbol;
 /** @type {number} */
tsickle_declare_module.esri.SearchOptions.prototype.locationToAddressDistance;
 /** @type {!Map} */
tsickle_declare_module.esri.SearchOptions.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri.SearchOptions.prototype.maxResults;
 /** @type {number} */
tsickle_declare_module.esri.SearchOptions.prototype.maxSuggestions;
 /** @type {number} */
tsickle_declare_module.esri.SearchOptions.prototype.minCharacters;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.showInfoWindowOnSelect;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.SearchOptions.prototype.sources;
 /** @type {number} */
tsickle_declare_module.esri.SearchOptions.prototype.suggestionDelay;
 /** @type {string} */
tsickle_declare_module.esri.SearchOptions.prototype.theme;
 /** @type {string} */
tsickle_declare_module.esri.SearchOptions.prototype.value;
 /** @type {boolean} */
tsickle_declare_module.esri.SearchOptions.prototype.visible;
 /** @type {number} */
tsickle_declare_module.esri.SearchOptions.prototype.zoomScale;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.SizeInfoSliderOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.minValue;
 /** @type {number} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.showTicks;
 /** @type {?} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.sizeInfo;
 /** @type {?} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.statistics;
 /** @type {!Symbol} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.symbol;
 /** @type {?} */
tsickle_declare_module.esri.SizeInfoSliderOptions.prototype.zoomOptions;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.SnappingManagerOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.SnappingManagerOptions.prototype.alwaysSnap;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.SnappingManagerOptions.prototype.layerInfos;
 /** @type {!Map} */
tsickle_declare_module.esri.SnappingManagerOptions.prototype.map;
 /** @type {?} */
tsickle_declare_module.esri.SnappingManagerOptions.prototype.snapKey;
 /** @type {!SimpleMarkerSymbol} */
tsickle_declare_module.esri.SnappingManagerOptions.prototype.snapPointSymbol;
 /** @type {number} */
tsickle_declare_module.esri.SnappingManagerOptions.prototype.tolerance;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.SpatialIndexOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.autostart;
 /** @type {boolean} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.drawFeatures;
 /** @type {boolean} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.fetchWithWorkers;
 /** @type {?} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.indexOptions;
 /** @type {string} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.indexType;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.layers;
 /** @type {!Map} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.passFeatures;
 /** @type {boolean} */
tsickle_declare_module.esri.SpatialIndexOptions.prototype.requireWorkerSupport;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.StandardGeographyQueryLocationProviderOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.StandardGeographyQueryLocationProviderOptions.prototype.geographyQueryTemplate;
 /** @type {?} */
tsickle_declare_module.esri.StandardGeographyQueryLocationProviderOptions.prototype.queryParameters;
 /** @type {!StandardGeographyQueryTask} */
tsickle_declare_module.esri.StandardGeographyQueryLocationProviderOptions.prototype.standardGeographyQueryTask;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.StreamLayerOptions1 = function() {};
 /** @type {string} */
tsickle_declare_module.esri.StreamLayerOptions1.prototype.className;
 /** @type {string} */
tsickle_declare_module.esri.StreamLayerOptions1.prototype.definitionExpression;
 /** @type {!Extent} */
tsickle_declare_module.esri.StreamLayerOptions1.prototype.geometryDefinition;
 /** @type {number} */
tsickle_declare_module.esri.StreamLayerOptions1.prototype.maximumTrackPoints;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.StreamLayerOptions1.prototype.outFields;
 /** @type {?} */
tsickle_declare_module.esri.StreamLayerOptions1.prototype.purgeOptions;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.StreamLayerOptions2 = function() {};
 /** @type {string} */
tsickle_declare_module.esri.StreamLayerOptions2.prototype.className;
 /** @type {!Extent} */
tsickle_declare_module.esri.StreamLayerOptions2.prototype.geometryDefinition;
 /** @type {number} */
tsickle_declare_module.esri.StreamLayerOptions2.prototype.maximumTrackPoints;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.StreamLayerOptions2.prototype.outFields;
 /** @type {?} */
tsickle_declare_module.esri.StreamLayerOptions2.prototype.purgeOptions;
 /** @type {string} */
tsickle_declare_module.esri.StreamLayerOptions2.prototype.socketUrl;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.StretchFilterOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.dra;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.gamma;
 /** @type {number} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.max;
 /** @type {number} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.maxPercent;
 /** @type {number} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.min;
 /** @type {number} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.minPercent;
 /** @type {number} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.numberOfStandardDeviations;
 /** @type {string} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.outputPixelType;
 /** @type {!Array<!Array<?>>} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.statistics;
 /** @type {number} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.stretchType;
 /** @type {boolean} */
tsickle_declare_module.esri.StretchFilterOptions.prototype.useGamma;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.SummarizeNearbyOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.analysisGpServer;
 /** @type {!Array<number>} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.distance;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.enableTravelModes;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.groupByField;
 /** @type {!Map} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.nearType;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.returnFeatureCollection;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.shapeUnits;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.showSelectFolder;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.summaryFields;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.summaryLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.summaryLayers;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.sumNearbyLayers;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.sumShape;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeNearbyOptions.prototype.units;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.SummarizeWithinOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.analysisGpServer;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.groupByField;
 /** @type {!Map} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.showSelectFolder;
 /** @type {string} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.summaryFields;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.summaryLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.summaryLayers;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.SummarizeWithinOptions.prototype.sumWithinLayer;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.SymbolStylerOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.SymbolStylerOptions.prototype.portal;
 /** @type {?} */
tsickle_declare_module.esri.SymbolStylerOptions.prototype.portalSelf;
 /** @type {string} */
tsickle_declare_module.esri.SymbolStylerOptions.prototype.portalUrl;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.TemplatePickerOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.columns;
 /** @type {string} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.emptyMessage;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.featureLayers;
 /** @type {boolean} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.grouping;
 /** @type {!Array<?>} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.items;
 /** @type {number} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.maxLabelLength;
 /** @type {number} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.rows;
 /** @type {boolean} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.showTooltip;
 /** @type {string} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.style;
 /** @type {boolean} */
tsickle_declare_module.esri.TemplatePickerOptions.prototype.useLegend;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.TimeClassBreaksAgerOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.TimeClassBreaksAgerOptions.prototype.alpha;
 /** @type {!Color} */
tsickle_declare_module.esri.TimeClassBreaksAgerOptions.prototype.color;
 /** @type {number} */
tsickle_declare_module.esri.TimeClassBreaksAgerOptions.prototype.maxAge;
 /** @type {number} */
tsickle_declare_module.esri.TimeClassBreaksAgerOptions.prototype.minAge;
 /** @type {number} */
tsickle_declare_module.esri.TimeClassBreaksAgerOptions.prototype.size;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.TimeSliderOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri.TimeSliderOptions.prototype.excludeDataAtLeadingThumb;
 /** @type {boolean} */
tsickle_declare_module.esri.TimeSliderOptions.prototype.excludeDataAtTrailingThumb;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.UndoManagerOptions = function() {};
 /** @type {number} */
tsickle_declare_module.esri.UndoManagerOptions.prototype.maxOperations;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.UnionOptions = function() {};
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.UnionOptions.prototype.deletedGraphics;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.UnionOptions.prototype.featureLayer;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.UnionOptions.prototype.postUpdatedGraphics;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.UnionOptions.prototype.preUpdatedGraphics;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.UpdateOptions = function() {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri.UpdateOptions.prototype.featureLayer;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.UpdateOptions.prototype.postUpdatedGraphics;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri.UpdateOptions.prototype.preUpdatedGraphics;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.VEGeocoderOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.VEGeocoderOptions.prototype.bingMapsKey;
 /** @type {string} */
tsickle_declare_module.esri.VEGeocoderOptions.prototype.culture;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.VETiledLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.VETiledLayerOptions.prototype.bingMapsKey;
 /** @type {string} */
tsickle_declare_module.esri.VETiledLayerOptions.prototype.className;
 /** @type {string} */
tsickle_declare_module.esri.VETiledLayerOptions.prototype.culture;
 /** @type {string} */
tsickle_declare_module.esri.VETiledLayerOptions.prototype.mapStyle;
 /** @type {number} */
tsickle_declare_module.esri.VETiledLayerOptions.prototype.refreshInterval;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.VectorFieldRendererOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.VectorFieldRendererOptions.prototype.flowRepresentation;
 /** @type {!Symbol} */
tsickle_declare_module.esri.VectorFieldRendererOptions.prototype.singleArrowSymbol;
 /** @type {string} */
tsickle_declare_module.esri.VectorFieldRendererOptions.prototype.style;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.VectorTileLayerOptions = function() {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri.VectorTileLayerOptions.prototype.displayLevels;
 /** @type {number} */
tsickle_declare_module.esri.VectorTileLayerOptions.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri.VectorTileLayerOptions.prototype.minScale;
 /** @type {number} */
tsickle_declare_module.esri.VectorTileLayerOptions.prototype.opacity;
 /** @type {boolean} */
tsickle_declare_module.esri.VectorTileLayerOptions.prototype.visible;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.VisibleScaleRangeSliderOptions = function() {};
 /** @type {!Layer} */
tsickle_declare_module.esri.VisibleScaleRangeSliderOptions.prototype.layer;
 /** @type {!Map} */
tsickle_declare_module.esri.VisibleScaleRangeSliderOptions.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri.VisibleScaleRangeSliderOptions.prototype.region;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WCSConnectionOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.WCSConnectionOptions.prototype.coverageId;
 /** @type {string} */
tsickle_declare_module.esri.WCSConnectionOptions.prototype.version;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WCSLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.WCSLayerOptions.prototype.coverageId;
 /** @type {boolean} */
tsickle_declare_module.esri.WCSLayerOptions.prototype.drawMode;
 /** @type {string} */
tsickle_declare_module.esri.WCSLayerOptions.prototype.drawType;
 /** @type {!Function} */
tsickle_declare_module.esri.WCSLayerOptions.prototype.pixelFilter;
 /** @type {string} */
tsickle_declare_module.esri.WCSLayerOptions.prototype.version;
 /** @type {!WCSConnection} */
tsickle_declare_module.esri.WCSLayerOptions.prototype.wcsConnection;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WFSLayerOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.customParameters;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.infoTemplate;
 /** @type {number} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.maxFeatures;
 /** @type {string} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.mode;
 /** @type {string} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.name;
 /** @type {string} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.url;
 /** @type {string} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.version;
 /** @type {string} */
tsickle_declare_module.esri.WFSLayerOptions.prototype.wkid;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WMSLayerInfoOptions = function() {};
 /** @type {!Array<!Extent>} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.allExtents;
 /** @type {string} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.description;
 /** @type {!Extent} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.legendURL;
 /** @type {string} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.name;
 /** @type {boolean} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.queryable;
 /** @type {boolean} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.showPopup;
 /** @type {!Array<!SpatialReference>} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.spatialReferences;
 /** @type {!Array<!WMSLayerInfo>} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.subLayers;
 /** @type {string} */
tsickle_declare_module.esri.WMSLayerInfoOptions.prototype.title;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WMSLayerOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.WMSLayerOptions.prototype.customLayerParameters;
 /** @type {?} */
tsickle_declare_module.esri.WMSLayerOptions.prototype.customParameters;
 /** @type {string} */
tsickle_declare_module.esri.WMSLayerOptions.prototype.format;
 /** @type {?} */
tsickle_declare_module.esri.WMSLayerOptions.prototype.resourceInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.WMSLayerOptions.prototype.transparent;
 /** @type {string} */
tsickle_declare_module.esri.WMSLayerOptions.prototype.version;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.WMSLayerOptions.prototype.visibleLayers;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WMTSLayerInfoOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.format;
 /** @type {!Extent} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.fullExtent;
 /** @type {string} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.identifier;
 /** @type {!Extent} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.initialExtent;
 /** @type {string} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.style;
 /** @type {!TileInfo} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.tileInfo;
 /** @type {string} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.tileMatrixSet;
 /** @type {string} */
tsickle_declare_module.esri.WMTSLayerInfoOptions.prototype.title;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WMTSLayerOptions = function() {};
 /** @type {?} */
tsickle_declare_module.esri.WMTSLayerOptions.prototype.customLayerParameters;
 /** @type {?} */
tsickle_declare_module.esri.WMTSLayerOptions.prototype.customParameters;
 /** @type {!WMTSLayerInfo} */
tsickle_declare_module.esri.WMTSLayerOptions.prototype.layerInfo;
 /** @type {boolean} */
tsickle_declare_module.esri.WMTSLayerOptions.prototype.resampling;
 /** @type {number} */
tsickle_declare_module.esri.WMTSLayerOptions.prototype.resamplingTolerance;
 /** @type {?} */
tsickle_declare_module.esri.WMTSLayerOptions.prototype.resourceInfo;
 /** @type {string} */
tsickle_declare_module.esri.WMTSLayerOptions.prototype.serviceMode;
/**
 * @record
 * @struct
 */
tsickle_declare_module.esri.WebTiledLayerOptions = function() {};
 /** @type {string} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.copyright;
 /** @type {!Extent} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.initialExtent;
 /** @type {boolean} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.resampling;
 /** @type {number} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.resamplingTolerance;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.subDomains;
 /** @type {!TileInfo} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.tileInfo;
 /** @type {!Array<string>} */
tsickle_declare_module.esri.WebTiledLayerOptions.prototype.tileServers;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/Color"
/** @const */
tsickle_declare_module.esri_Color = {};

/**
 * @constructor
 * @struct
 * Creates a new Color object.
 * @param {?=} color A named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another Color object.
 */
tsickle_declare_module.esri_Color.Color = function(color) {};
 /** @type {?} */
tsickle_declare_module.esri_Color.Color.named;
 /** @type {number} */
tsickle_declare_module.esri_Color.Color.prototype.a;
 /** @type {number} */
tsickle_declare_module.esri_Color.Color.prototype.b;
 /** @type {number} */
tsickle_declare_module.esri_Color.Color.prototype.g;
 /** @type {number} */
tsickle_declare_module.esri_Color.Color.prototype.r;

/**
 * Blend colors start and end with weight from 0 to 1, 0.5 being a 50/50 blend.
 * @param {!Color} start The start color.
 * @param {!Color} end The end color.
 * @param {number} weight The weight value.
 * @param {!Color=} obj A previously allocated Color object to reuse for the result.
 * @return {!Color}
 */
tsickle_declare_module.esri_Color.Color.blendColors = function(start, end, weight, obj) {};

/**
 * Builds a Color from a 3 or 4 element array, mapping each element in sequence to the rgb(a) values of the color.
 * @param {!Array<number>} a The input array.
 * @param {!Color=} obj A previously allocated Color object to reuse for the result.
 * @return {!Color}
 */
tsickle_declare_module.esri_Color.Color.fromArray = function(a, obj) {};

/**
 * Converts a hex string with a '#' prefix to a color object.
 * @param {string} color The input color.
 * @param {!Color=} obj A previously allocated Color object to reuse for the result.
 * @return {!Color}
 */
tsickle_declare_module.esri_Color.Color.fromHex = function(color, obj) {};

/**
 * Returns a Color instance from a string of the form "rgb()" or "rgba()".
 * @param {string} color The input color.
 * @param {!Color=} obj A previously allocated Color object to reuse for the result.
 * @return {!Color}
 */
tsickle_declare_module.esri_Color.Color.fromRgb = function(color, obj) {};

/**
 * Parses str for a color value.
 * @param {string} str The input value.
 * @param {!Color=} obj A previously allocated Color object to reuse for the result.
 * @return {!Color}
 */
tsickle_declare_module.esri_Color.Color.fromString = function(str, obj) {};

/**
 * Takes a named string, hex string, array of rgb or rgba values, an object with r, g, b, and a properties, or another Color object and sets this color instance to that value.
 * @param {?} color The new color value.
 * @return {!Color}
 */
tsickle_declare_module.esri_Color.Color.prototype.setColor = function(color) {};

/**
 * Returns a css color string in rgb(a) representation.
 * @param {boolean=} includeAlpha If true, the alpha value will be included in the result.
 * @return {string}
 */
tsickle_declare_module.esri_Color.Color.prototype.toCss = function(includeAlpha) {};

/**
 * Returns a CSS color string in hexadecimal representation.
 * @return {string}
 */
tsickle_declare_module.esri_Color.Color.prototype.toHex = function() {};

/**
 * Returns a 3 component array of rgb values.
 * @return {!Array<number>}
 */
tsickle_declare_module.esri_Color.Color.prototype.toRgb = function() {};

/**
 * Returns a 4 component array of rgba values.
 * @return {!Array<number>}
 */
tsickle_declare_module.esri_Color.Color.prototype.toRgba = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_Color */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/Credential"
/** @const */
tsickle_declare_module.esri_Credential = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_Credential */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_Credential.Credential = function() {};
 /** @type {number} */
tsickle_declare_module.esri_Credential.Credential.prototype.expires;
 /** @type {boolean} */
tsickle_declare_module.esri_Credential.Credential.prototype.isAdmin;
 /** @type {?} */
tsickle_declare_module.esri_Credential.Credential.prototype.oAuthState;
 /** @type {string} */
tsickle_declare_module.esri_Credential.Credential.prototype.server;
 /** @type {boolean} */
tsickle_declare_module.esri_Credential.Credential.prototype.ssl;
 /** @type {string} */
tsickle_declare_module.esri_Credential.Credential.prototype.token;
 /** @type {string} */
tsickle_declare_module.esri_Credential.Credential.prototype.userId;

/**
 * Destroy a credential.
 * @return {void}
 */
tsickle_declare_module.esri_Credential.Credential.prototype.destroy = function() {};

/**
 * Generate a new token and update the Credential's token property with the newly acquired token.
 * @return {?}
 */
tsickle_declare_module.esri_Credential.Credential.prototype.refreshToken = function() {};

/**
 * Return the properties of this object in JSON.
 * @return {?}
 */
tsickle_declare_module.esri_Credential.Credential.prototype.toJson = function() {};

/**
 * Fired when a credential object is destroyed.
 * Fired when the token associated with the credential is updated or changed.
 * @param {string} type
 * @param {function({target: !Credential}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_Credential.Credential.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_Credential */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/IdentityManager"
/** @const */
tsickle_declare_module.esri_IdentityManager = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_IdentityManager */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_IdentityManager */
/**
 * @extends {IdentityManagerBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_IdentityManager.IdentityManager = function() {};
 /** @type {?} */
tsickle_declare_module.esri_IdentityManager.IdentityManager.prototype.dialog;

/**
 * When accessing secure resources via OAuth2 from ArcGIS.com or one of its sub-domains the IdentityManager redirects the user to the ArcGIS.com or Portal for ArcGIS sign-in page.
 * @param {!Function} handlerFunction When called, the function passed to setOAuthRedirectionHandler receives an object containing the redirection properties.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManager.IdentityManager.prototype.setOAuthRedirectionHandler = function(handlerFunction) {};

/**
 * Use this method in the popup callback page to pass the token and other values back to the IdentityManager.
 * @param {string} hash The token information in addition to any other values needed to be passed back to the IdentityManager.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManager.IdentityManager.prototype.setOAuthResponseHash = function(hash) {};

/**
 * This method is called by the base identity manager implementation.
 * @return {?}
 */
tsickle_declare_module.esri_IdentityManager.IdentityManager.prototype.signIn = function() {};

/**
 * Fired when the user clicks the cancel button on the dialog box widget.
 * Fired when the dialog box widget, used to prompt users for their credentials, is created.
 * @param {string} type
 * @param {function({info: ?, target: !IdentityManager}): void|function({target: !IdentityManager}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_IdentityManager.IdentityManager.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_IdentityManager */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/IdentityManagerBase"
/** @const */
tsickle_declare_module.esri_IdentityManagerBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_IdentityManagerBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_IdentityManagerBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_IdentityManagerBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_IdentityManagerBase */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase = function() {};
 /** @type {number} */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.tokenValidity;

/**
 * Returns the credential (via Deferred) if the user has already signed in to access the given resource.
 * @param {string} resUrl The resource URL.
 * @return {?}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.checkSignInStatus = function(resUrl) {};

/**
 * Destroys all credentials.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.destroyCredentials = function() {};

/**
 * Returns the credential for the resource identified by the specified url.
 * @param {string} url The url to a server.
 * @param {string=} userId The userId for which you want to obtain credentials.
 * @return {!Credential}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.findCredential = function(url, userId) {};

/**
 * Returns the OAuth configuration for the passed in Portal server URL.
 * @param {string} url The ArcGIS for Portal URL, for example "https://www.arcgis.com" for ArcGIS Online and "https://www.example.com/portal" for your in-house portal.
 * @return {!OAuthInfo}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.findOAuthInfo = function(url) {};

/**
 * Returns information about the server that is hosting the specified url.
 * @param {string} url The url to a server.
 * @return {!ServerInfo}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.findServerInfo = function(url) {};

/**
 * Returns an object containing a token and its expiration time.
 * @param {!ServerInfo} serverInfo A ServerInfo object that contains a token service URL.
 * @param {?} userInfo A user info object containing a user name and password.
 * @param {?=} options Optional parameters.
 * @return {?}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.generateToken = function(serverInfo, userInfo, options) {};

/**
 * Returns a Credential object that can be used to access the secured resource identified by the input url.
 * @param {string} url The url for the secure resource.
 * @param {?=} options Optional parameters.
 * @return {?}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.getCredential = function(url, options) {};

/**
 * Call this method (during your application initialization) with JSON previously obtained from toJson method to re-hydrate the state of identity manager.
 * @param {!Object} json The JSON obtained from the toJson method.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.initialize = function(json) {};

/**
 * Returns true if the identity manager is busy accepting user input, i.e., the user has invoked signIn and is waiting for a response.
 * @return {boolean}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.isBusy = function() {};

/**
 * Sub-classes must implement this method if OAuth support is required.
 * @param {string} resUrl The resource URL.
 * @param {!ServerInfo} serverInfo  A ServerInfo object that contains the token service url.
 * @param {!OAuthInfo} OAuthInfo A OAuthInfo object that contains the authorization configuration.
 * @param {?=} options Optional parameters.
 * @return {?}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.oAuthSignIn = function(resUrl, serverInfo, OAuthInfo, options) {};

/**
 * Registers OAuth configurations.
 * @param {!Array<!OAuthInfo>} oAuthInfos An OAuthInfos object that defines the OAuth configurations.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.registerOAuthInfos = function(oAuthInfos) {};

/**
 * Register secure servers and the token endpoints.
 * @param {!Array<!ServerInfo>} serverInfos A ServerInfos object that defines the secure service and token endpoint.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.registerServers = function(serverInfos) {};

/**
 * Registers the given OAuth2 access token with the identity manager.
 * @param {?} properties See the object specifications table below for the structure of the properties object.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.registerToken = function(properties) {};

/**
 * When accessing secured resources, identity manager may prompt for username and password and send them to the server using a secure connection.
 * @param {!Function} handlerFunction The function to call when the protocol is mismatched.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.setProtocolErrorHandler = function(handlerFunction) {};

/**
 * When accessing secure resources from ArcGIS.com or one of its sub-domains the IdentityManager redirects the user to the ArcGIS.com sign-in page.
 * @param {!Function} handlerFunction When called, the function passed to setRedirectionHandler receives an object containing redirection properties.
 * @return {void}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.setRedirectionHandler = function(handlerFunction) {};

/**
 * Sub-classes must implement this method to create and manager the user interface that is used to obtain a username and password from the end-user.
 * @param {string} url Url for the secure resource.
 * @param {!ServerInfo} serverInfo A ServerInfo object that contains the token service url.
 * @param {?=} options Optional parameters.
 * @return {?}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.signIn = function(url, serverInfo, options) {};

/**
 * Return properties of this object in JSON.
 * @return {?}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.toJson = function() {};

/**
 * Fired when a credential is created.
 * Fired when all credentials are destroyed.
 * @param {string} type
 * @param {function({credential: !Credential, target: !IdentityManagerBase}): void|function({target: !IdentityManagerBase}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_IdentityManagerBase.IdentityManagerBase.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_IdentityManagerBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/ImageSpatialReference"
/** @const */
tsickle_declare_module.esri_ImageSpatialReference = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_ImageSpatialReference */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_ImageSpatialReference */

/**
 * @constructor
 * @struct
 * Creates an instance of ImageSpatialReference.
 * @param {!ImageSpatialReferenceOptions} params Options that may be passed into the constructor.
 */
tsickle_declare_module.esri_ImageSpatialReference.ImageSpatialReference = function(params) {};
 /** @type {?} */
tsickle_declare_module.esri_ImageSpatialReference.ImageSpatialReference.prototype.ics;
 /** @type {number} */
tsickle_declare_module.esri_ImageSpatialReference.ImageSpatialReference.prototype.icsid;

/**
 * Tests whether the input image coordinate system equals the image coordinate system of the instance calling this method.
 * @param {!ImageSpatialReference} inSR The ImageSpatialReference to test the equality against this instance.
 * @return {boolean}
 */
tsickle_declare_module.esri_ImageSpatialReference.ImageSpatialReference.prototype.equals = function(inSR) {};

/**
 * Converts the ImageSpatialReference instance to a JSON object.
 * @param {boolean=} preserveUrl Indicates whether to preserve the URL in the output JSON object.
 * @return {boolean}
 */
tsickle_declare_module.esri_ImageSpatialReference.ImageSpatialReference.prototype.toJson = function(preserveUrl) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_ImageSpatialReference */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/InfoTemplate"
/** @const */
tsickle_declare_module.esri_InfoTemplate = {};

/**
 * @constructor
 * @struct
 * Creates a new empty InfoTemplate object.
 * Creates a new InfoTemplate object.
 * Creates a new InfoTemplate object using a JSON object.
 * @param {(string|!Function)|!Object=} title_or_json The template for defining how to format the title used in an InfoWindow. / JSON object representing the InfoTemplate.
 * @param {(string|!Function)=} content The template for defining how to format the content used in an InfoWindow.
 */
tsickle_declare_module.esri_InfoTemplate.InfoTemplate = function(title_or_json, content) {};
 /** @type {(string|!Function)} */
tsickle_declare_module.esri_InfoTemplate.InfoTemplate.prototype.content;
 /** @type {(string|!Function)} */
tsickle_declare_module.esri_InfoTemplate.InfoTemplate.prototype.title;

/**
 * Sets the content template.
 * @param {(string|!Function)} template The template for the content.
 * @return {!InfoTemplate}
 */
tsickle_declare_module.esri_InfoTemplate.InfoTemplate.prototype.setContent = function(template) {};

/**
 * Sets the title template.
 * @param {(string|!Function)} template The template for the title.
 * @return {!InfoTemplate}
 */
tsickle_declare_module.esri_InfoTemplate.InfoTemplate.prototype.setTitle = function(template) {};

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_InfoTemplate.InfoTemplate.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_InfoTemplate */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/InfoWindowBase"
/** @const */
tsickle_declare_module.esri_InfoWindowBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_InfoWindowBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_InfoWindowBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_InfoWindowBase */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase = function() {};
 /** @type {?} */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.domNode;
 /** @type {boolean} */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.isShowing;

/**
 * Helper method.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.destroyDijits = function() {};

/**
 * Hide the info window.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.hide = function() {};

/**
 * Helper method.
 * @param {(string|!HTMLElement)} value A string with HTML tags or a DOM node.
 * @param {!Node} parentNode The parent node where the value will be placed.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.place = function(value, parentNode) {};

/**
 * Resize the info window to the specified width and height (in pixels).
 * @param {number} width The new width of the InfoWindow in pixels.
 * @param {number} height The new height of the InfoWindow in pixels.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.resize = function(width, height) {};

/**
 * Define the info window content.
 * @param {?} content The content argument can be any of the following.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.setContent = function(content) {};

/**
 * This method is called by the map when the object is set as its info window.
 * @param {!Map} map The map object.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.setMap = function(map) {};

/**
 * Set the input value as the title for the info window.
 * @param {?} title  In most cases the title will be a string value but the same options are available as for the setContent method.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.setTitle = function(title) {};

/**
 * Display the info window at the specified location.
 * @param {!Point} location Location is an instance of esri.geometry.Point.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.show = function(location) {};

/**
 * Helper method.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.startupDijits = function() {};

/**
 * This method is called by the map when the object is no longer the map's info window.
 * @param {!Map} map The map object.
 * @return {void}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.unsetMap = function(map) {};

/**
 * Fires after the info window is hidden.
 * Fires after the info window becomes visible.
 * @param {string} type
 * @param {function({target: !InfoWindowBase}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_InfoWindowBase.InfoWindowBase.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_InfoWindowBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/OperationBase"
/** @const */
tsickle_declare_module.esri_OperationBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_OperationBase */

/**
 * @constructor
 * @struct
 * Creates a new OperationBase object.
 * @param {!OperationBaseOptions} params See options list for parameters.
 */
tsickle_declare_module.esri_OperationBase.OperationBase = function(params) {};
 /** @type {string} */
tsickle_declare_module.esri_OperationBase.OperationBase.prototype.label;
 /** @type {string} */
tsickle_declare_module.esri_OperationBase.OperationBase.prototype.type;

/**
 * Re-perform the last undo operation.
 * @return {void}
 */
tsickle_declare_module.esri_OperationBase.OperationBase.prototype.performRedo = function() {};

/**
 * Reverse the operation.
 * @return {void}
 */
tsickle_declare_module.esri_OperationBase.OperationBase.prototype.performUndo = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_OperationBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/ServerInfo"
/** @const */
tsickle_declare_module.esri_ServerInfo = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_ServerInfo.ServerInfo = function() {};
 /** @type {string} */
tsickle_declare_module.esri_ServerInfo.ServerInfo.prototype.adminTokenServiceUrl;
 /** @type {number} */
tsickle_declare_module.esri_ServerInfo.ServerInfo.prototype.currentVersion;
 /** @type {string} */
tsickle_declare_module.esri_ServerInfo.ServerInfo.prototype.server;
 /** @type {number} */
tsickle_declare_module.esri_ServerInfo.ServerInfo.prototype.shortLivedTokenValidity;
 /** @type {string} */
tsickle_declare_module.esri_ServerInfo.ServerInfo.prototype.tokenServiceUrl;

/**
 * Return the properties of this object in JSON.
 * @return {?}
 */
tsickle_declare_module.esri_ServerInfo.ServerInfo.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_ServerInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/SnappingManager"
/** @const */
tsickle_declare_module.esri_SnappingManager = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_SnappingManager */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_SnappingManager */

/**
 * @constructor
 * @struct
 * Create a new SnappingManager object.
 * @param {!SnappingManagerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_SnappingManager.SnappingManager = function(options) {};

/**
 * Destroy the SnappingManager object.
 * @return {void}
 */
tsickle_declare_module.esri_SnappingManager.SnappingManager.prototype.destroy = function() {};

/**
 * Returns a deferred object, which can be added to a callback to find the snap point.
 * @param {!Point} screenPoint The input screen point for which to find the snapping location.
 * @return {?}
 */
tsickle_declare_module.esri_SnappingManager.SnappingManager.prototype.getSnappingPoint = function(screenPoint) {};

/**
 * An array of layerInfo objects used to specify the target snapping layers.
 * @param {!Array<?>} layerInfos An array of layerInfo objects that define the snapping target layers.
 * @return {void}
 */
tsickle_declare_module.esri_SnappingManager.SnappingManager.prototype.setLayerInfos = function(layerInfos) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_SnappingManager */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/SpatialReference"
/** @const */
tsickle_declare_module.esri_SpatialReference = {};

/**
 * @constructor
 * @struct
 * Creates a new SpatialReference object.
 * Create a spatial reference object and initialize it with a well-known ID (wkid).
 * Create a spatial reference object and initialize it with the given well-known text (wkt).
 * @param {!Object|number|string} json_or_wkid_or_wkt The REST JSON representation of the spatial reference. / The well-known id (wkid) of the coordinate system. / The well-known text (wkt) of the coordinate system.
 */
tsickle_declare_module.esri_SpatialReference.SpatialReference = function(json_or_wkid_or_wkt) {};
 /** @type {number} */
tsickle_declare_module.esri_SpatialReference.SpatialReference.prototype.wkid;
 /** @type {string} */
tsickle_declare_module.esri_SpatialReference.SpatialReference.prototype.wkt;

/**
 * Returns true if the input spatial reference object has the same wkid or wkt as this spatial reference object.
 * @param {!SpatialReference} sr The spatial reference to compare.
 * @return {boolean}
 */
tsickle_declare_module.esri_SpatialReference.SpatialReference.prototype.equals = function(sr) {};

/**
 * Returns true if the wkid of the spatial reference object is one of the following values: 102113, 102100, 3857.
 * @return {boolean}
 */
tsickle_declare_module.esri_SpatialReference.SpatialReference.prototype.isWebMercator = function() {};

/**
 * Returns an easily serializable object representation of the spatial reference.
 * @return {?}
 */
tsickle_declare_module.esri_SpatialReference.SpatialReference.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_SpatialReference */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/TimeExtent"
/** @const */
tsickle_declare_module.esri_TimeExtent = {};

/**
 * @constructor
 * @struct
 * Creates a new TimeExtent object with the specifed start and end time.
 * @param {!Date} startTime The start time for the specified time extent.
 * @param {!Date} endTime The end time for the specified time extent.
 */
tsickle_declare_module.esri_TimeExtent.TimeExtent = function(startTime, endTime) {};
 /** @type {!Date} */
tsickle_declare_module.esri_TimeExtent.TimeExtent.prototype.endTime;
 /** @type {!Date} */
tsickle_declare_module.esri_TimeExtent.TimeExtent.prototype.startTime;

/**
 * Returns a new time extent indicating the intersection between "this" and the argument time extent.
 * @param {!TimeExtent} timeExtent The input time extent.
 * @return {!TimeExtent}
 */
tsickle_declare_module.esri_TimeExtent.TimeExtent.prototype.intersection = function(timeExtent) {};

/**
 * Returns a new time extent with the given offset from "this' time extent.
 * @param {number} offsetValue The length of time to offset from "this" time extent.
 * @param {string} offsetUnits The offset units, see the TimeInfo constants for a list of valid values.
 * @return {!TimeExtent}
 */
tsickle_declare_module.esri_TimeExtent.TimeExtent.prototype.offset = function(offsetValue, offsetUnits) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_TimeExtent */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/arcgis/OAuthInfo"
/** @const */
tsickle_declare_module.esri_arcgis_OAuthInfo = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_arcgis_OAuthInfo */

/**
 * @constructor
 * @struct
 * Creates a new OAuthInfo given the specified parameters.
 * @param {!OAuthInfoOptions} params Various options to configure the OAuthInfo object.
 */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo = function(params) {};
 /** @type {string} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.appId;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.authNamespace;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.expiration;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.locale;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.minTimeUntilExpiration;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.popup;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.popupCallbackUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.popupWindowFeatures;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.portalUrl;

/**
 * Returns an easily serializable object representation of the OAuthInfo.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_OAuthInfo.OAuthInfo.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_arcgis_OAuthInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/arcgis/Portal"
/** @const */
tsickle_declare_module.esri_arcgis_Portal = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_arcgis_Portal */

/**
 * @constructor
 * @struct
 * Creates a new Portal object.
 * @param {string} url The ArcGIS for Portal URL, for example "https://www.arcgis.com" for ArcGIS Online and "https://www.example.com/arcgis" for your in-house portal.
 */
tsickle_declare_module.esri_arcgis_Portal.Portal = function(url) {};
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.access;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.allSSL;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.basemapGalleryGroupQuery;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.bingKey;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canListApps;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canListData;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canListPreProvisionedItems;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canProvisionDirectPurchase;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canSearchPublic;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canShareBingPublic;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canSharePublic;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canSignInArcGIS;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.canSignInIDP;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.colorSetsGroupQuery;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.commentsEnabled;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.created;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.culture;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.customBaseUrl;
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.defaultBasemap;
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.defaultExtent;
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.defaultVectorBasemap;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.description;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.featuredGroups;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.featuredGroupsId;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.featuredItemsGroupQuery;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.galleryTemplatesGroupQuery;
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.helperServices;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.homePageFeaturedContent;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.homePageFeaturedContentCount;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.httpPort;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.httpsPort;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.ipCntryCode;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.isOrganization;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.isPortal;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.layerTemplatesGroupQuery;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.maxTokenExpirationMinutes;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.modified;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.name;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.portalHostname;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.portalMode;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.portalName;
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.portalProperties;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.portalThumbnail;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.portalUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.region;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.rotatorPanels;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.showHomePageDescription;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.supportsHostedServices;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.supportsOAuth;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.symbolSetsGroupQuery;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.templatesGroupQuery;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.thumbnail;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.thumbnailUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.units;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.url;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.urlKey;
 /** @type {!PortalUser} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.user;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.useStandardizedQuery;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.useVectorBasemaps;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.vectorBasemapGalleryGroupQuery;

/**
 * Returns a PortalUser object that describes the user currently signed in to the portal.
 * @return {!PortalUser}
 */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.getPortalUser = function() {};

/**
 * Execute a query against the Portal to return a deferred that when resolved returns PortalQueryResult that contain a results array of PortalGroup objects for all the groups that match the input query.
 * @param {?=} queryParams The input query parameters.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.queryGroups = function(queryParams) {};

/**
 * Execute a query against the Portal to return a deferred that when resolved returns PortalQueryResult that contain a results array of PortalItem objects that match the input query.
 * @param {?=} queryParams The input query parameters.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.queryItems = function(queryParams) {};

/**
 * Execute a query against the Portal to return a deferred that when resolved returns PortalQueryResult that contain a results array of PortalUser objects that match the input query.
 * @param {?=} queryParams The input query parameters.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.queryUsers = function(queryParams) {};

/**
 * Prompts the user using the IdentityManager and returns a deferred that, when resolved, returns the PortalUser for the input credentials.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.signIn = function() {};

/**
 * Sign out of the Portal which resets the Portal and disables identity checking.
 * @return {!Portal}
 */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.signOut = function() {};

/**
 * Fires when the signIn() call fails or if the Portal is not able to load.
 * Fired when the portal has loaded.
 * @param {string} type
 * @param {function({error: !Error, target: !Portal}): void|function({target: !Portal}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_arcgis_Portal.Portal.prototype.on = function(type, listener) {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_arcgis_Portal.PortalComment = function() {};
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalComment.prototype.comment;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalComment.prototype.created;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalComment.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalComment.prototype.owner;
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_arcgis_Portal.PortalFolder = function() {};
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalFolder.prototype.created;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalFolder.prototype.id;
 /** @type {!Portal} */
tsickle_declare_module.esri_arcgis_Portal.PortalFolder.prototype.portal;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalFolder.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalFolder.prototype.url;

/**
 * Find all the items in the folder.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalFolder.prototype.getItems = function() {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup = function() {};
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.access;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.created;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.id;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.isInvitationOnly;
 /** @type {boolean} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.isViewOnly;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.modified;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.owner;
 /** @type {!Portal} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.portal;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.snippet;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.tags;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.thumbnailUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.url;

/**
 * Get the current members for the group.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.getMembers = function() {};

/**
 * Get the URL to the thumbnail image for the portal group.
 * @param {number=} width The desired image width.
 * @return {string}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.getThumbnailUrl = function(width) {};

/**
 * Execute a query against the group to return a deferred that when resolved returns PortalQueryResult that contain a results array of PortalItem objects that match the input query.
 * @param {?=} queryParams The input query parameters.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalGroup.prototype.queryItems = function(queryParams) {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem = function() {};
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.access;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.accessInformation;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.avgRating;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.created;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.culture;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.description;
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.itemDataUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.itemUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.licenseInfo;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.modified;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.name;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.numComments;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.numRatings;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.numViews;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.owner;
 /** @type {!Portal} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.portal;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.size;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.snippet;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.spatialReference;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.tags;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.thumbnailUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.type;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.typeKeywords;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.url;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.userItemUrl;

/**
 * Add a comment to the item.
 * @param {string} comment The text for the comment.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.addComment = function(comment) {};

/**
 * Add a rating to an item that you have access to.
 * @param {number} rating Rating to set for the item.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.addRating = function(rating) {};

/**
 * Deletes an item comment.
 * @param {!PortalComment} comment The PortalComment to delete.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.deleteComment = function(comment) {};

/**
 * Delete a rating that you created for the specified item.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.deleteRating = function() {};

/**
 * Get the comments associated with the item.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.getComments = function() {};

/**
 * Returns the rating (if any) given to the item.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.getRating = function() {};

/**
 * Get the URL to the thumbnail image for the portal item.
 * @param {number=} width The desired image width.
 * @return {string}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.getThumbnailUrl = function(width) {};

/**
 * Updates an item comment.
 * @param {!PortalComment} comment A PortalComment that contains the comment updates.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalItem.prototype.updateComment = function(comment) {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_arcgis_Portal.PortalQueryResult = function() {};
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.PortalQueryResult.prototype.nextQueryParams;
 /** @type {?} */
tsickle_declare_module.esri_arcgis_Portal.PortalQueryResult.prototype.queryParams;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_arcgis_Portal.PortalQueryResult.prototype.results;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.PortalQueryResult.prototype.total;
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_arcgis_Portal.PortalRating = function() {};
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalRating.prototype.created;
 /** @type {number} */
tsickle_declare_module.esri_arcgis_Portal.PortalRating.prototype.rating;
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser = function() {};
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.access;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.created;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.culture;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.email;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.fullName;
 /** @type {!Date} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.modified;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.orgId;
 /** @type {!Portal} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.portal;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.preferredView;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.region;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.role;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.tags;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.thumbnailUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.userContentUrl;
 /** @type {string} */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.username;

/**
 * Find folders for the portal user.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getFolders = function() {};

/**
 * Provides access to the group invitations for the portal user.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getGroupInvitations = function() {};

/**
 * Find all the groups that the portal user has permissions to access.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getGroups = function() {};

/**
 * Get the portal item along with folder info for the input item id.
 * @param {string} itemId The id of the item.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getItem = function(itemId) {};

/**
 * Retrieve all the items in the specified folder.
 * @param {string=} folderId The id of the folder that contains the items to retrieve.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getItems = function(folderId) {};

/**
 * Get information about any notifications for the portal user.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getNotifications = function() {};

/**
 * Access the tag objects that have been created by the portal user.
 * @return {?}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getTags = function() {};

/**
 * Get the URL to the thumbnail image for the portal user.
 * @param {number=} width The desired image width.
 * @return {string}
 */
tsickle_declare_module.esri_arcgis_Portal.PortalUser.prototype.getThumbnailUrl = function(width) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/arcgis/utils"
/** @const */
tsickle_declare_module.esri_arcgis_utils = {};
 /** @type {{arcgisUrl: string, createMap: function(?, string, ?): ?, getItem: function(string): ?, getLayerList: function(?): !Array<?>, getLegendLayers: function(?): !Array<?>}} */
tsickle_declare_module.esri_arcgis_utils.utils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_arcgis_utils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/basemaps"
/** @const */
tsickle_declare_module.esri_basemaps = {};
 /** @type {{gray: ?, hybrid: ?, oceans: ?, osm: ?, satellite: ?, streets: ?, terrain: ?, topo: ?}} */
tsickle_declare_module.esri_basemaps.basemaps;

/* TODO: ExportAssignment in tsickle_declare_module.esri_basemaps */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/config"
/** @const */
tsickle_declare_module.esri_config = {};
 /** @type {{defaults: ?}} */
tsickle_declare_module.esri_config.config;

/* TODO: ExportAssignment in tsickle_declare_module.esri_config */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/AttributeInspector"
/** @const */
tsickle_declare_module.esri_dijit_AttributeInspector = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_AttributeInspector */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_AttributeInspector */

/**
 * @constructor
 * @struct
 * Creates a new Attribute Inspector object.
 * @param {!AttributeInspectorOptions} params See options list.
 * @param {(string|!Node)} srcNodeRef HTML element where the attribute inspector should be rendered.
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.STRING_FIELD_OPTION_RICHTEXT;
 /** @type {?} */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.STRING_FIELD_OPTION_TEXTAREA;
 /** @type {?} */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.STRING_FIELD_OPTION_TEXTBOX;

/**
 * Destroys the widget, used for page clean up.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.destroy = function() {};

/**
 * Moves to the first feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.first = function() {};

/**
 * Moves to the last feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.last = function() {};

/**
 * Move to the next feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.next = function() {};

/**
 * Move to the previous feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.previous = function() {};

/**
 * Updates the contents of the AttributeInspector.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.refresh = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.startup = function() {};

/**
 * Fires when a fields value changes.
 * Fires when the AttributeInspector's delete button is pressed.
 * Fires when the AttributeInspector's next or back button is pressed.
 * @param {string} type
 * @param {function({feature: !Graphic, fieldName: string, fieldValue: string, target: !AttributeInspector}): void|function({feature: !Graphic, target: !AttributeInspector}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_AttributeInspector.AttributeInspector.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_AttributeInspector */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Attribution"
/** @const */
tsickle_declare_module.esri_dijit_Attribution = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Attribution */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Attribution */

/**
 * @constructor
 * @struct
 * Creates a new Attribution object.
 * @param {!AttributionOptions} options An object that defines the attribution options.
 * @param {(string|!Node)} srcNodeRef HTML element where the time slider should be rendered.
 */
tsickle_declare_module.esri_dijit_Attribution.Attribution = function(options, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_Attribution.Attribution.prototype.itemDelimiter;
 /** @type {?} */
tsickle_declare_module.esri_dijit_Attribution.Attribution.prototype.itemNodes;
 /** @type {!HTMLSpanElement} */
tsickle_declare_module.esri_dijit_Attribution.Attribution.prototype.listNode;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_Attribution.Attribution.prototype.map;

/**
 * Destroy the attribution widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Attribution.Attribution.prototype.destroy = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Attribution.Attribution.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Attribution */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Basemap"
/** @const */
tsickle_declare_module.esri_dijit_Basemap = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Basemap */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Basemap */

/**
 * @constructor
 * @struct
 * Creates a new Basemap Object.
 * @param {!BasemapOptions} params Set of parameters used to create a basemap.
 */
tsickle_declare_module.esri_dijit_Basemap.Basemap = function(params) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_Basemap.Basemap.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Basemap.Basemap.prototype.thumbnailUrl;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Basemap.Basemap.prototype.title;

/**
 * The list of layers contained in the basemap or a dojo.Deferred if a call to ArcGIS.com needs to be made to retrieve the list of ArcGIS.com basemaps.
 * @return {!Array<!BasemapLayer>}
 */
tsickle_declare_module.esri_dijit_Basemap.Basemap.prototype.getLayers = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Basemap.Basemap.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Basemap */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/BasemapGallery"
/** @const */
tsickle_declare_module.esri_dijit_BasemapGallery = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BasemapGallery */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BasemapGallery */

/**
 * @constructor
 * @struct
 * Creates a new BasemapGallery dijit.
 * @param {!BasemapGalleryOptions} params Parameters used to configure the widget.
 * @param {(string|!Node)=} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery = function(params, srcNodeRef) {};
 /** @type {!Array<!Basemap>} */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.basemaps;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.loaded;
 /** @type {string} */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.portalUrl;

/**
 * Add a new basemap to the BasemapGallery's list of basemaps.
 * @param {!Basemap} basemap The basemap to add to the map.
 * @return {boolean}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.add = function(basemap) {};

/**
 * Destroys the basemap gallery.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.destroy = function() {};

/**
 * Return the basemap with the specified id.
 * @param {string} id The basemap id.
 * @return {!Basemap}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.get = function(id) {};

/**
 * Gets the currently selected basemap.
 * @return {!Basemap}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.getSelected = function() {};

/**
 * Remove a basemap from the BasemapGallery's list of basemaps.
 * @param {string} id The basemap id.
 * @return {!Basemap}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.remove = function(id) {};

/**
 * Select a new basemap for the map.
 * @param {string} id The basemap id.
 * @return {!Basemap}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.select = function(id) {};

/**
 * Finalizes the creation of the basemap gallery.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.startup = function() {};

/**
 * Fires when a basemap is added to the BasemapGallery's list of basemaps.
 * Fires when an error occurs while switching basemaps.
 * Fires when the BasemapGallery retrieves the ArcGIS.com basemaps.
 * Fires when a basemap is removed from the BasemapGallery's list of basemaps.
 * Fires after the map is updated with a new basemap.
 * @param {string} type
 * @param {function({basemap: !Basemap, target: !BasemapGallery}): void|function({target: !BasemapGallery}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_BasemapGallery.BasemapGallery.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_BasemapGallery */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/BasemapLayer"
/** @const */
tsickle_declare_module.esri_dijit_BasemapLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BasemapLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BasemapLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BasemapLayer */

/**
 * @constructor
 * @struct
 * Creates a new BasemapLayer object.
 * @param {!BasemapLayerOptions} params Set of parameters used to create a basemap layer.
 */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer = function(params) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.copyright;
 /** @type {!Extent} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.initialExtent;
 /** @type {string} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.styleUrl;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.subDomains;
 /** @type {!TileInfo} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.tileInfo;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.tileServer;
 /** @type {string} */
tsickle_declare_module.esri_dijit_BasemapLayer.BasemapLayer.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_BasemapLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/BasemapToggle"
/** @const */
tsickle_declare_module.esri_dijit_BasemapToggle = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BasemapToggle */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BasemapToggle */

/**
 * @constructor
 * @struct
 * Creates a new BasemapToggle dijit using the given DOM node.
 * @param {!BasemapToggleOptions} params Various parameters to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.basemap;
 /** @type {?} */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.basemaps;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.loaded;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.visible;

/**
 * Destroys the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.destroy = function() {};

/**
 * Hides the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.hide = function() {};

/**
 * Shows the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.show = function() {};

/**
 * Finalizes the creation of this dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.startup = function() {};

/**
 * Toggles to the next basemap.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.toggle = function() {};

/**
 * Fires when the widget has been loaded.
 * Fires when the toggle method has been called.
 * @param {string} type
 * @param {function({target: !BasemapToggle}): void|function({currentBasemap: string, error: ?, previousBasemap: string, target: !BasemapToggle}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_BasemapToggle.BasemapToggle.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_BasemapToggle */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/BookmarkItem"
/** @const */
tsickle_declare_module.esri_dijit_BookmarkItem = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_BookmarkItem */

/**
 * @constructor
 * @struct
 * Creates a new BookmarkItem.
 * @param {!BookmarkItemOptions=} params See options list for parameters.
 */
tsickle_declare_module.esri_dijit_BookmarkItem.BookmarkItem = function(params) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_BookmarkItem */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Bookmarks"
/** @const */
tsickle_declare_module.esri_dijit_Bookmarks = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Bookmarks */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Bookmarks */

/**
 * @constructor
 * @struct
 * Creates a new Bookmark widget
 * @param {!BookmarksOptions} params See options list for parameters.
 * @param {(string|!Node)} srcNodeRef HTML element where the bookmark widget should be rendered.
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks = function(params, srcNodeRef) {};
 /** @type {!Array<!BookmarkItem>} */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.bookmarks;

/**
 * Add a new bookmark to the bookmark widget.
 * @param {!BookmarkItem} bookmarkItem A BookmarkItem or json object with the same structure that defines the new location.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.addBookmark = function(bookmarkItem) {};

/**
 * Destroy the bookmark widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.destroy = function() {};

/**
 * Hides the Bookmark widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.hide = function() {};

/**
 * Remove a bookmark from the bookmark widget.
 * @param {string} bookmarkName The name of the bookmark to remove from the bookmark widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.removeBookmark = function(bookmarkName) {};

/**
 * Show the Bookmark widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.show = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.startup = function() {};

/**
 * Returns an array of json objects with the following structure:  [{   name:bookmarkName,   extent:bookmarkExtent }]
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.toJson = function() {};

/**
 * Fired when a bookmark item is clicked.
 * Fired after the bookmark item is edited.
 * Fired when a bookmark item is removed.
 * @param {string} type
 * @param {function({target: !Bookmarks}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Bookmarks.Bookmarks.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Bookmarks */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/ClassedColorSlider"
/** @const */
tsickle_declare_module.esri_dijit_ClassedColorSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ClassedColorSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ClassedColorSlider */

/**
 * @constructor
 * @struct
 * Creates a new ClassedColorSlider widget.
 * @param {!ClassedColorSliderOptions} params Set of parameters used to specify the ClassedColorSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.breakInfos;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.classificationMethod;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.histogram;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.minValue;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.normalizationType;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.showTicks;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.statistics;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.startup = function() {};

/**
 * Fires when the ClassedColorSlider widget properties change.
 * Fires when  minValue or  maxValue of the ClassedColorSlider changes.
 * Fires when a ClassedColorSlider handle is moved.
 * @param {string} type
 * @param {function({breakInfos: ?, target: !ClassedColorSlider}): void|function({breakInfos: ?, maxValue: number, minValue: number, target: !ClassedColorSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_ClassedColorSlider.ClassedColorSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_ClassedColorSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/ClassedSizeSlider"
/** @const */
tsickle_declare_module.esri_dijit_ClassedSizeSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ClassedSizeSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ClassedSizeSlider */

/**
 * @constructor
 * @struct
 * Creates a new ClassedSizeSlider widget within the provided DOM node srcNodeRef.
 * @param {!ClassedSizeSliderOptions} params Set of parameters used to specify the ClassedSizeSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.breakInfos;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.classificationMethod;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.minValue;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.normalizationType;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.showTicks;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.statistics;

/**
 * Fires when ClassedSizeSlider changes.
 * Fires when  minValue or  maxValue of the ClassedSizeSlider changes.
 * Fires when a ClassedSizeSlider handle is moved.
 * @param {string} type
 * @param {function({breakInfos: ?, target: !ClassedSizeSlider}): void|function({breakInfos: ?, maxValue: number, minValue: number, target: !ClassedSizeSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_ClassedSizeSlider.ClassedSizeSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_ClassedSizeSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/ColorInfoSlider"
/** @const */
tsickle_declare_module.esri_dijit_ColorInfoSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ColorInfoSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ColorInfoSlider */

/**
 * @constructor
 * @struct
 * Creates a new ColorInfoSlider widget within the provided DOM node srcNodeRef.
 * @param {!ColorInfoSliderOptions} params Set of parameters used to specify the ColorInfoSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.classificationMethod;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.colorInfo;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.minValue;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.normalizationType;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.showLabels;
 /** @type {(string|boolean)} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.showRatioLabels;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.showTicks;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.showTransparentBackground;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.statistics;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.zoomOptions;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.startup = function() {};

/**
 * Fires when ColorInfoSlider changes.
 * Fires when  minValue or  maxValue of the ColorInfoSlider changes.
 * Fires when a ColorInfoSlider handle is moved.
 * Fires when the zoom state changes.
 * @param {string} type
 * @param {function({colorInfo: ?, target: !ColorInfoSlider}): void|function({colorInfo: ?, maxValue: number, minValue: number, target: !ColorInfoSlider}): void|function({zoomed: boolean, target: !ColorInfoSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_ColorInfoSlider.ColorInfoSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_ColorInfoSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/ColorPicker"
/** @const */
tsickle_declare_module.esri_dijit_ColorPicker = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ColorPicker */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ColorPicker */

/**
 * @constructor
 * @struct
 * Creates a new ColorPicker widget.
 * @param {!ColorPickerOptions} params Set of parameters used to specify the ColorPicker widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_ColorPicker.ColorPicker = function(params, srcNodeRef) {};
 /** @type {!Color} */
tsickle_declare_module.esri_dijit_ColorPicker.ColorPicker.prototype.color;
 /** @type {!Array<!Color>} */
tsickle_declare_module.esri_dijit_ColorPicker.ColorPicker.prototype.palette;
 /** @type {!Array<!Color>} */
tsickle_declare_module.esri_dijit_ColorPicker.ColorPicker.prototype.recentColors;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ColorPicker.ColorPicker.prototype.startup = function() {};

/**
 * Fires when the selected color has changed.
 * @param {string} type
 * @param {function({target: !ColorPicker}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_ColorPicker.ColorPicker.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_ColorPicker */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Directions"
/** @const */
tsickle_declare_module.esri_dijit_Directions = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Directions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Directions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Directions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Directions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Directions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Directions */

/**
 * @constructor
 * @struct
 * Creates a new Directions dijit using the given DOM node.
 * @param {!DirectionsOptions} options Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_Directions.Directions = function(options, srcNodeRef) {};
 /** @type {!DirectionsFeatureSet} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.directions;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.mapClickActive;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.maxStopsReached;
 /** @type {!Graphic} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.mergedRouteGraphic;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.portalUrl;
 /** @type {!RouteTask} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.routeTask;
 /** @type {?} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.serviceDescription;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.showActivateButton;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.showBarriersButton;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.showClearButton;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.showMilesKilometersOption;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.showSaveButton;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.showTravelModesOption;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.stops;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.theme;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.travelModeName;

/**
 * Deprecated at v3.13.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.activate = function() {};

/**
 * Add a stop to the directions widget at the specified index location.
 * @param {?} stop A point that defines the stop location.
 * @param {number=} index The index location where the stop should be added.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.addStop = function(stop, index) {};

/**
 * Add multiple stops to the directions list starting at the specified location.
 * @param {(!Array<?>|!Array<string>|!Array<!Point>|!Array<!Array<number>>)} stops An array of points that define the stop locations.
 * @param {number=} index The index location where the stops will be added.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.addStops = function(stops, index) {};

/**
 * Center the map at the start of the specified route segment.
 * @param {number} index The index of the segment where the map should be centered.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.centerAtSegmentStart = function(index) {};

/**
 * Remove the route directions from the directions list.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.clearDirections = function() {};

/**
 * Deprecated at v3.13.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.deactivate = function() {};

/**
 * Destroy the Directions widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.destroy = function() {};

/**
 * Calculate the route to the input locations and display the list of directions.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.getDirections = function() {};

/**
 * If widget runs with Travel Modes enabled, call this method to obtain the list of supported Travel Mode names.
 * @return {!Array<string>}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.getSupportedTravelModeNames = function() {};

/**
 * Highlight the specified route segment on the map.
 * @param {number} index The index of the route segment to highlight.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.highlightSegment = function(index) {};

/**
 * Loads a stored route layer from either ArcGIS Online or Portal
 * @param {string} itemId The itemId of the stored route layer from either ArcGIS Online or Portal.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.loadRoute = function(itemId) {};

/**
 * Remove the stop at the specified index.
 * @param {number} index The index of the stop to remove.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.removeStop = function(index) {};

/**
 * Removes the existing stops from the directions widget.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.removeStops = function() {};

/**
 * Resets the directions widget removing any directions, stops and map graphics.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.reset = function() {};

/**
 * Specify the language used for the directions.
 * @param {string} locale The locale used for the directions.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.setDirectionsLanguage = function(locale) {};

/**
 * Specify the length units used for the directions widget.
 * @param {string} units The length units used for the directions widget.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.setDirectionsLengthUnits = function(units) {};

/**
 * If widget runs with Travel Modes enabled, call this method to switch to particular Travel mode programmatically.
 * @param {string} travelModeName Travel mode.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.setTravelMode = function(travelModeName) {};

/**
 * Finalizes the creation of this dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.startup = function() {};

/**
 * Removes the highlight symbol from the currently highlighted route segment.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.unhighlightSegment = function() {};

/**
 * Update the existing stop at the specified index location.
 * @param {?} stop A point that defines the stop location.
 * @param {number} index The index of the stop to update.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.updateStop = function(stop, index) {};

/**
 * Update multiple stops in the directions widget by specifying an array of stops information.
 * @param {(!Array<?>|!Array<string>|!Array<!Point>|!Array<!Array<number>>)} stops An array of points that define the stop locations.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.updateStops = function(stops) {};

/**
 * Sets the corresponding stop to point at the user's current location.
 * @param {number} stopIndex Index of the stop that will point to the user's current location.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.useMyCurrentLocation = function(stopIndex) {};

/**
 * Zoom so that the full route is displayed within the current map extent.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.zoomToFullRoute = function() {};

/**
 * Zoom to the specified route segment.
 * @param {number} index The index for a route segment.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.zoomToSegment = function(index) {};

/**
 * Deprecated at v3.13.
 * Deprecated at v3.13.
 * Fires when the directions display is reset.
 * Fires when the route service has calculated the route and the directions are ready for display.
 * Fires when the route services starts to calculate the route.
 * Fires after a user clicks the Save or Save as New button and subsequently does not have permission to create an item in ArcGIS Online or Portal.
 * Fires when the directions widget has fully loaded.
 * Fires when the widget starts or stops listening for map clicks.
 * Fires after a user clicks the Save or Save as New button for the first time in order to store a new route in either ArcGIS Online or Portal.
 * Fires when a existing route layer item is successfully updated in ArcGIS Online or Portal after user clicks the Save button.
 * Fired when you hover over a route segment in the directions display.
 * Fires when a route segment is selected in the directions display.
 * @param {string} type
 * @param {function({target: !Directions}): void|function({result: !RouteResult, target: !Directions}): void|function({mapClickActive: boolean, target: !Directions}): void|function({graphic: !Graphic, target: !Directions}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Directions.Directions.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Directions */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/ElevationProfile"
/** @const */
tsickle_declare_module.esri_dijit_ElevationProfile = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ElevationProfile */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ElevationProfile */

/**
 * @constructor
 * @struct
 * Create a new ElevationProfile widget using the given DOM node.
 * @param {!ElevationProfileOptions} options See options table below for the full descriptions of the properties needed for this object.
 * @param {(string|!Node)} srcNode Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile = function(options, srcNode) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile.prototype.measureUnits;
 /** @type {!Geometry} */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile.prototype.profileGeometry;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile.prototype.title;

/**
 * Clears the elevation profile chart.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile.prototype.clearProfile = function() {};

/**
 * Destroy the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile.prototype.destroy = function() {};

/**
 * Finalizes the creation of the ElevationProfile widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile.prototype.startup = function() {};

/**
 * Fires when the elevation profile is cleared.
 * Fires after the profile is generated.
 * Fires when the widget has fully loaded.
 * Fires when the title of the elevation profile is changed
 * Fires when the elevation profile is updated.
 * @param {string} type
 * @param {function({target: !ElevationProfile}): void|function({data: ?, target: !ElevationProfile}): void|function({profileResults: ?, target: !ElevationProfile}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_ElevationProfile.ElevationProfile.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_ElevationProfile */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/FeatureTable"
/** @const */
tsickle_declare_module.esri_dijit_FeatureTable = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_FeatureTable */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_FeatureTable */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_FeatureTable */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_FeatureTable */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_FeatureTable */

/**
 * @constructor
 * @struct
 * Creates an instance of the FeatureTable widget within the provided DOM node.
 * @param {!FeatureTableOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable = function(params, srcNodeRef) {};
 /** @type {number} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.batchCount;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.columns;
 /** @type {?} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.dataStore;
 /** @type {?} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.dateOptions;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.editable;
 /** @type {?} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.editOn;
 /** @type {number} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.featureCount;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.featureLayer;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.fieldInfos;
 /** @type {?} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.grid;
 /** @type {?} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.gridMenu;
 /** @type {?} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.gridOptions;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.hiddenFields;
 /** @type {string} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.idProperty;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.loaded;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.map;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.menuFunctions;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.outFields;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.selectedRowIds;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.selectedRows;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showAttachments;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showColumnHeaderTooltips;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showCyclicalRelationships;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showDataTypes;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showFeatureCount;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showGridHeader;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showGridMenu;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showRelatedRecords;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.showStatistics;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.syncSelection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.zoomToSelection;

/**
 * Centers the map on combined extent of selected rows.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.centerOnSelection = function() {};

/**
 * Removes all filters and selections in the table.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.clearFilter = function() {};

/**
 * Removes all selections.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.clearSelection = function() {};

/**
 * Destroys the FeatureTable widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.destroy = function() {};

/**
 * Filters the table based on the provided row ids.
 * @param {!Array<number>} ids Array of row ids.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.filterRecordsByIds = function(ids) {};

/**
 * Allows users to see the sub-set of records.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.filterSelectedRecords = function() {};

/**
 * Queries and gets selected features from the FeatureLayer instead of the store.
 * @param {(number|!Array<number>)} id Row id or an array of row ids
 * @return {?}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.getFeatureDataById = function(id) {};

/**
 * Gets row object by the row ID.
 * @param {number} id row ID
 * @return {?}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.getRowDataById = function(id) {};

/**
 * Refreshes the data in the table.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.refresh = function() {};

/**
 * Resizes the grid's container.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.resize = function() {};

/**
 * Allows users to select rows(s) based on row id(s).
 * @param {(number|!Array<number>)} ids Row id or an array of row ids
 * @param {boolean=} scrollToRow Indicates whether the table should scroll to selected rows.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.selectRows = function(ids, scrollToRow) {};

/**
 * Sorts a given field in ascending or descending order.
 * @param {string} field Name of the field
 * @param {boolean=} descending Defines whether the specified field will be sorted in ascending or descending order.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.sort = function(field, descending) {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.startup = function() {};

/**
 * This event fires in response to clearSelection() method.
 * Fires when the grid column is resized.
 * Fires when a column is hidden or shown via 'Options' drop-down menu.
 * Fires when grid editor field loses focus after being changed.
 * Fires when grid editor is hidden.
 * Fires when grid editor is shown.
 * Fires when editing is complete.
 * Fires when an error occurs in the grid.
 * Fires when grid is filtered.
 * Fires when the FeatureTable is loaded.
 * Fires when the grid is refreshed.
 * Fires when a row is deselected.
 * Fires when a row is selected.
 * Fires when attachment is displayed in the table.
 * Fires when related records are displayed in the table.
 * Fires when the statistics dialog box shows the calculated statistics on a column with numeric data.
 * Fires when a column is sorted.
 * @param {string} type
 * @param {function({target: !FeatureTable}): void|function({resizeEvent: ?, target: !FeatureTable}): void|function({stateChangeEvent: ?, target: !FeatureTable}): void|function({adds: !Array<!FeatureEditResult>, deletes: !Array<!FeatureEditResult>, updates: !Array<!FeatureEditResult>, target: !FeatureTable}): void|function({ids: !Array<number>, target: !FeatureTable}): void|function({event: ?, target: !FeatureTable}): void|function({attachments: ?, dialog: ?, featureId: number, target: !FeatureTable}): void|function({features: !Array<!Graphic>, relationship: ?, row: ?, target: !FeatureTable}): void|function({statistics: ?, target: !FeatureTable}): void|function({sortEvent: ?, target: !FeatureTable}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_FeatureTable.FeatureTable.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_FeatureTable */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Gallery"
/** @const */
tsickle_declare_module.esri_dijit_Gallery = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Gallery */

/**
 * @constructor
 * @struct
 * Creates a new mobile Gallery.
 * @param {!GalleryOptions} params See options list.
 * @param {(string|!Node)} srcNodeRef HTML element where the  gallery should be rendered.
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery = function(params, srcNodeRef) {};

/**
 * Removes any object references and associated objects created by the gallery.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.destroy = function() {};

/**
 * Gets the item with the current focus.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.getFocusedItem = function() {};

/**
 * Get the currently selected item.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.getSelectedItem = function() {};

/**
 * Move the gallery to the next page of items.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.next = function() {};

/**
 * Move the gallery to the previous page of items.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.previous = function() {};

/**
 * Select an item in the gallery.
 * @param {?} item The item to select.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.select = function(item) {};

/**
 * Set the focus to the specified item.
 * @param {?} item The item which will have focus.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.setFocus = function(item) {};

/**
 * Finalize the creation of the gallery.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.startup = function() {};

/**
 * Fires when the items setFocus method is called.
 * Fires when an item is selected.
 * @param {string} type
 * @param {function({item: ?, target: !Gallery}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Gallery.Gallery.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Gallery */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Gauge"
/** @const */
tsickle_declare_module.esri_dijit_Gauge = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Gauge */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Gauge */

/**
 * @constructor
 * @struct
 * Create a new Gauge object.
 * @param {!GaugeOptions} params See options list for parameters.
 * @param {(string|!Node)} srcNodeRef HTML element where the  gauge should be rendered.
 */
tsickle_declare_module.esri_dijit_Gauge.Gauge = function(params, srcNodeRef) {};

/**
 * Destroy the gauge.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gauge.Gauge.prototype.destroy = function() {};

/**
 * Get the value of the property from the Gauge.
 * @param {string} name Property to get value.
 * @return {(string|number|!Graphic)}
 */
tsickle_declare_module.esri_dijit_Gauge.Gauge.prototype.get = function(name) {};

/**
 * Set the value of a property from the Gauge.
 * @param {string} name Property to set value.
 * @param {(string|number|!Graphic)} value Value to set.
 * @return {!Gauge}
 */
tsickle_declare_module.esri_dijit_Gauge.Gauge.prototype.set = function(name, value) {};

/**
 * Finalizes the creation of the gauge.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Gauge.Gauge.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Gauge */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Geocoder"
/** @const */
tsickle_declare_module.esri_dijit_Geocoder = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Geocoder */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Geocoder */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Geocoder */

/**
 * @constructor
 * @struct
 * Create a new Geocoder widget using the given DOM node.
 * @param {!GeocoderOptions} params Set of parameters used to specify Geocoder options.
 * @param {(string|!Node)} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.activeGeocoder;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.activeGeocoderIndex;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.autoComplete;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.autoNavigate;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.geocoderMenu;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.geocoders;
 /** @type {!GraphicsLayer} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.graphicsLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.highlightLocation;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.maxLocations;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.minCharacters;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.results;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.searchDelay;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.showResults;
 /** @type {!Symbol} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.symbol;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.theme;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.value;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.zoomScale;

/**
 * Unfocus the widget's text input.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.blur = function() {};

/**
 * Clears the values currently set in the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.clear = function() {};

/**
 * Releases all the resources used by the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.destroy = function() {};

/**
 * Executes a search using the current value of the geocoder.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.find = function() {};

/**
 * Brings focus to the widget's text input.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.focus = function() {};

/**
 * Hide the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.hide = function() {};

/**
 * Select a result using a result object.
 * @param {?} result An object with the following properties.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.select = function(result) {};

/**
 * Show the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.show = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.startup = function() {};

/**
 * Fired when results are returned from an auto-complete.
 * Fired when a result is cleared from the input box or a new result is selected.
 * Fired when results are returned from a search.
 * Fired when a geocoder is selected.
 * Fired when a result has been selected, the submit button is pressed, or the enter key is fired.
 * @param {string} type
 * @param {function({results: ?, target: !Geocoder}): void|function({target: !Geocoder}): void|function({geocoder: ?, target: !Geocoder}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Geocoder.Geocoder.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Geocoder */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/HeatmapSlider"
/** @const */
tsickle_declare_module.esri_dijit_HeatmapSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_HeatmapSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_HeatmapSlider */

/**
 * @constructor
 * @struct
 * Creates a new HeatmapSlider widget within the provided DOM node srcNodeRef.
 * @param {!HeatmapSliderOptions} params Set of parameters used to specify the HeatmapSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.colorStops;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.handles;
 /** @type {number} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.minValue;
 /** @type {number} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.showTicks;

/**
 * Fires when HeatmapSlider changes.
 * Fires when HeatmapSlider handle is moved.
 * @param {string} type
 * @param {function({colorStops: ?, target: !HeatmapSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_HeatmapSlider.HeatmapSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_HeatmapSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/HistogramTimeSlider"
/** @const */
tsickle_declare_module.esri_dijit_HistogramTimeSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_HistogramTimeSlider */

/**
 * @constructor
 * @struct
 * Creates a new HistogramTimeSlider dijit using the given DOM node.
 * @param {!HistogramTimeSliderOptions} params Input parameters.
 * @param {(string|!Node)} srcNodeRef HTML element where the tool should be rendered.
 */
tsickle_declare_module.esri_dijit_HistogramTimeSlider.HistogramTimeSlider = function(params, srcNodeRef) {};

/**
 * Set related objects as null and hide the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_HistogramTimeSlider.HistogramTimeSlider.prototype.destroy = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_HistogramTimeSlider.HistogramTimeSlider.prototype.startup = function() {};

/**
 * Fires whenever the slider moved, and the visible time extent is changed.
 * Fires fires each time the histogram is drawn.
 * @param {string} type
 * @param {function({target: !HistogramTimeSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_HistogramTimeSlider.HistogramTimeSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_HistogramTimeSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/HomeButton"
/** @const */
tsickle_declare_module.esri_dijit_HomeButton = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_HomeButton */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_HomeButton */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_HomeButton */

/**
 * @constructor
 * @struct
 * Creates a new HomeButton dijit using the given DOM node.
 * @param {!HomeButtonOptions} params Various parameters to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton = function(params, srcNodeRef) {};
 /** @type {!Extent} */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.extent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.loaded;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.visible;

/**
 * Destroys the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.destroy = function() {};

/**
 * Hides the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.hide = function() {};

/**
 * Goes to the home extent.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.home = function() {};

/**
 * Shows the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.show = function() {};

/**
 * Finalizes the creation of this dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.startup = function() {};

/**
 * Fires when the home method has been called.
 * Fires when the widget has been loaded.
 * @param {string} type
 * @param {function({error: ?, extent: !Extent, target: !HomeButton}): void|function({target: !HomeButton}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_HomeButton.HomeButton.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_HomeButton */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/HorizontalSlider"
/** @const */
tsickle_declare_module.esri_dijit_HorizontalSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_HorizontalSlider */

/**
 * @constructor
 * @struct
 * Creates a new HorizontalSlider widget.
 * @param {!HorizontalSliderOptions} params Set of parameters used to specify the HorizontalSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_HorizontalSlider.HorizontalSlider = function(params, srcNodeRef) {};
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_HorizontalSlider.HorizontalSlider.prototype.showButtons;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_HorizontalSlider.HorizontalSlider.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_HorizontalSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/ImageServiceMeasure"
/** @const */
tsickle_declare_module.esri_dijit_ImageServiceMeasure = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ImageServiceMeasure */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ImageServiceMeasure */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ImageServiceMeasure */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ImageServiceMeasure */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ImageServiceMeasure */

/**
 * @constructor
 * @struct
 * Creates an instance of the ImageServiceMeasure widget.
 * @param {!ImageServiceMeasureOptions} params An Object containing constructor options.
 * @param {(string|!Node)} srcNode Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_ImageServiceMeasure.ImageServiceMeasure = function(params, srcNode) {};
 /** @type {!SimpleFillSymbol} */
tsickle_declare_module.esri_dijit_ImageServiceMeasure.ImageServiceMeasure.prototype.fillSymbol;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri_dijit_ImageServiceMeasure.ImageServiceMeasure.prototype.lineSymbol;
 /** @type {!SimpleMarkerSymbol} */
tsickle_declare_module.esri_dijit_ImageServiceMeasure.ImageServiceMeasure.prototype.markerSymbol;
 /** @type {!ImageServiceMeasureTool} */
tsickle_declare_module.esri_dijit_ImageServiceMeasure.ImageServiceMeasure.prototype.measureToolbar;

/**
 * Destroys the ImageServiceMeasure widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ImageServiceMeasure.ImageServiceMeasure.prototype.destroy = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ImageServiceMeasure.ImageServiceMeasure.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_ImageServiceMeasure */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/InfoWindow"
/** @const */
tsickle_declare_module.esri_dijit_InfoWindow = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_InfoWindow */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_InfoWindow */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_InfoWindow */

/**
 * @constructor
 * @struct
 * Create a new Info Window.
 * @param {?} params Optional parameters.
 * @param {(string|!Node)} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.ANCHOR_LOWERLEFT;
 /** @type {?} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.ANCHOR_LOWERRIGHT;
 /** @type {?} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.ANCHOR_UPPERLEFT;
 /** @type {?} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.ANCHOR_UPPERRIGHT;
 /** @type {string} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.anchor;
 /** @type {!Point} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.coords;
 /** @type {string} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.fixedAnchor;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.isShowing;

/**
 * Hides the InfoWindow.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.hide = function() {};

/**
 * Moves the InfoWindow to the specified screen point.
 * @param {!Point} point The new anchor point when moving the InfoWindow.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.move = function(point) {};

/**
 * Resizes the InfoWindow to the specified height and width in pixels.
 * @param {number} width The new width of the InfoWindow in pixels.
 * @param {number} height The new height of the InfoWindow in pixels.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.resize = function(width, height) {};

/**
 * Sets the content in the InfoWindow.
 * @param {?} content The content for the InfoWindow.
 * @return {!InfoWindow}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.setContent = function(content) {};

/**
 * Sets the fixed location of the InfoWindow anchor.
 * @param {string} anchor Fixed anchor that cannot be overridden by InfoWindow.show().
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.setFixedAnchor = function(anchor) {};

/**
 * Sets the title for the InfoWindow.
 * @param {string} title The title for the InfoWindow.
 * @return {!InfoWindow}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.setTitle = function(title) {};

/**
 * Display the InfoWindow at the specified location.
 * @param {!Point} point Location to place anchor.
 * @param {string=} placement Placement of the InfoWindow with respect to the graphic.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.show = function(point, placement) {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.startup = function() {};

/**
 * Fires when an infoWindow is hidden.
 * Fires when an InfoWindow is visible.
 * @param {string} type
 * @param {function({target: !InfoWindow}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_InfoWindow.InfoWindow.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_InfoWindow */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/InfoWindowLite"
/** @const */
tsickle_declare_module.esri_dijit_InfoWindowLite = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_InfoWindowLite */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_InfoWindowLite */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_InfoWindowLite */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_InfoWindowLite */
/**
 * @extends {InfoWindowBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite = function() {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.anchor;
 /** @type {!Point} */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.coords;
 /** @type {string} */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.fixedAnchor;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.isShowing;

/**
 * Hides the InfoWindow.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.hide = function() {};

/**
 * Moves the InfoWindow to the specified screen point.
 * @param {!Point} point The new anchor point when moving the InfoWindowLite.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.move = function(point) {};

/**
 * Resizes the InfoWindowLite to the specified height and width in pixels.
 * @param {number} width The new width of the InfoWindowLite in pixels.
 * @param {number} height The new height of the InfoWindowLite in pixels.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.resize = function(width, height) {};

/**
 * Sets the content in the InfoWindow.
 * @param {?} content The content for the InfoWindow.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.setContent = function(content) {};

/**
 * Set the fixed location of the InfoWindowLite anchor.
 * @param {string} anchor Fixed anchor that cannot be overridden by InfoWindowLite.show().
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.setFixedAnchor = function(anchor) {};

/**
 * Define the title for the InfoWindowLite.
 * @param {string} title The title for the InfoWindowLite.
 * @return {!InfoWindow}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.setTitle = function(title) {};

/**
 * Display the InfoWindow at the specified location.
 * @param {!Point} point Location to place anchor.
 * @param {string=} placement Placement of the InfoWindow with respect to the graphic.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.show = function(point, placement) {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.startup = function() {};

/**
 * Fires when an infoWindow is hidden.
 * Fires when an InfoWindowLite is displayed.
 * @param {string} type
 * @param {function({target: !InfoWindowLite}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_InfoWindowLite.InfoWindowLite.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_InfoWindowLite */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/LayerList"
/** @const */
tsickle_declare_module.esri_dijit_LayerList = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LayerList */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LayerList */

/**
 * @constructor
 * @struct
 * Create a new LayerList widget using the given DOM node.
 * @param {!LayerListOptions} options Set of options used to specify LayerList options.
 * @param {(string|!Node)} srcNode Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_LayerList.LayerList = function(options, srcNode) {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.layers;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.loaded;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.removeUnderscores;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.showLegend;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.showOpacitySlider;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.showSubLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.visible;

/**
 * Destroy the LayerList widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.destroy = function() {};

/**
 * Reloads all layers and properties that may have changed.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.refresh = function() {};

/**
 * Finalizes the creation of the LayerList widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.startup = function() {};

/**
 * Fired when the LayerList widget has fully loaded.
 * Fired when refresh() is called on the widget.
 * Fired when the layer is toggled on/off within the widget.
 * @param {string} type
 * @param {function({target: !LayerList}): void|function({layerIndex: number, subLayerIndex: number, visible: boolean, target: !LayerList}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_LayerList.LayerList.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_LayerList */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/LayerSwipe"
/** @const */
tsickle_declare_module.esri_dijit_LayerSwipe = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LayerSwipe */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LayerSwipe */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LayerSwipe */

/**
 * @constructor
 * @struct
 * Creates a new LayerSwipe dijit using the given DOM node.
 * @param {!LayerSwipeOptions} params Various parameters to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe = function(params, srcNodeRef) {};
 /** @type {number} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.clip;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.enabled;
 /** @type {!Array<!Layer>} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.layers;
 /** @type {number} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.left;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.loaded;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.theme;
 /** @type {number} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.top;
 /** @type {string} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.type;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.visible;

/**
 * Destroys the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.destroy = function() {};

/**
 * Disables the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.disable = function() {};

/**
 * Enables the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.enable = function() {};

/**
 * Finalizes the creation of this dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.startup = function() {};

/**
 * Updates the map to the position of the swipe node.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.swipe = function() {};

/**
 * Event is fired when the widget has been loaded.
 * Event is fired when the tool has moved.
 * @param {string} type
 * @param {function({target: !LayerSwipe}): void|function({layers: !Array<?>, target: !LayerSwipe}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_LayerSwipe.LayerSwipe.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_LayerSwipe */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Legend"
/** @const */
tsickle_declare_module.esri_dijit_Legend = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Legend */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Legend */

/**
 * @constructor
 * @struct
 * Creates a new Legend dijit.
 * @param {!LegendOptions} params Parameters used to configure the dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_Legend.Legend = function(params, srcNodeRef) {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_Legend.Legend.prototype.layerInfos;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_Legend.Legend.prototype.map;

/**
 * Destroys the legend.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Legend.Legend.prototype.destroy = function() {};

/**
 * Refresh the legend.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Legend.Legend.prototype.refresh = function() {};

/**
 * Finalizes the creation of the legend .
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Legend.Legend.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Legend */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/LocateButton"
/** @const */
tsickle_declare_module.esri_dijit_LocateButton = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LocateButton */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LocateButton */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LocateButton */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LocateButton */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LocateButton */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_LocateButton */

/**
 * @constructor
 * @struct
 * Creates a new LocateButton dijit using the given DOM node.
 * @param {!LocateButtonOptions} params Various parameters to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton = function(params, srcNodeRef) {};
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.centerAt;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.clearOnTrackingStop;
 /** @type {?} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.geolocationOptions;
 /** @type {!GraphicsLayer} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.graphicsLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.highlightLocation;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.infoTemplate;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.loaded;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.scale;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.setScale;
 /** @type {!Symbol} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.symbol;
 /** @type {string} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.theme;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.tracking;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.useTracking;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.visible;

/**
 * Clears the point graphic.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.clear = function() {};

/**
 * Destroys the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.destroy = function() {};

/**
 * Hides the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.hide = function() {};

/**
 * Goes to the users extent.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.locate = function() {};

/**
 * Shows the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.show = function() {};

/**
 * Finalizes the creation of this dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.startup = function() {};

/**
 * Fires when the widget has been loaded.
 * Fires when the locate method has been called.
 * @param {string} type
 * @param {function({target: !LocateButton}): void|function({error: ?, graphic: !Graphic, position: ?, scale: number, target: !LocateButton}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_LocateButton.LocateButton.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_LocateButton */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Measurement"
/** @const */
tsickle_declare_module.esri_dijit_Measurement = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Measurement */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Measurement */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Measurement */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Measurement */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Measurement */

/**
 * @constructor
 * @struct
 * Creates a new Measurement widget.
 * @param {!MeasurementOptions} params See options list for parameters.
 * @param {(string|!Node)} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement = function(params, srcNodeRef) {};

/**
 * Remove the measurement graphics and results.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.clearResult = function() {};

/**
 * Destroy the measurement widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.destroy = function() {};

/**
 * Returns an Object with two properties: toolName and unitName.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.getTool = function() {};

/**
 * Returns current measurement unit of the active tool.
 * @return {string}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.getUnit = function() {};

/**
 * Hide the measurement widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.hide = function() {};

/**
 * Hide the specified tool.
 * @param {string} toolName Valid values are "area", "distance" or "location".
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.hideTool = function(toolName) {};

/**
 * Invoke the measurement functionality of the widget by passing in a previously created geometry.
 * @param {(!Point|!Polyline|!Polygon)} geometry Geometry to be measured.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.measure = function(geometry) {};

/**
 * Activate or deactivate a tool.
 * @param {string} toolName The name of the tool to activate or deactivate.
 * @param {boolean} activate When true, the specified tool is activated.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.setTool = function(toolName, activate) {};

/**
 * Show the measurement widget after it has been hidden using the hide method.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.show = function() {};

/**
 * Display the specified tool.
 * @param {string} toolName Valid values are "area", "distance" or "location".
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.showTool = function(toolName) {};

/**
 * Finalizes the creation of the measurement widget .
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.startup = function() {};

/**
 * Fires any time the mouse pointer moves while doing a distance measurement.
 * Fired when the measurement is complete.
 * Fires when a measurement operation begins (single-click).
 * Fires when the primary tool is changed.
 * Fires when the units currently being used by the Measurement widget changes.
 * @param {string} type
 * @param {function({geometry: !Geometry, segmentLength: number, toolName: string, unitName: string, values: number, target: !Measurement}): void|function({geometry: !Geometry, toolName: string, unitName: string, values: (number|!Array<number>), target: !Measurement}): void|function({toolName: string, unitName: string, target: !Measurement}): void|function({previousToolName: string, toolName: string, unitName: string, target: !Measurement}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Measurement.Measurement.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Measurement */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/ObliqueViewer"
/** @const */
tsickle_declare_module.esri_dijit_ObliqueViewer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ObliqueViewer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ObliqueViewer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ObliqueViewer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ObliqueViewer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ObliqueViewer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_ObliqueViewer */

/**
 * @constructor
 * @struct
 * Creates an instance of the ObliqueViewer widget.
 * @param {!ObliqueViewerOptions} params Constructor options.
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer = function(params) {};
 /** @type {number} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.azimuthAngle;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.azimuthField;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.azimuthTolerance;
 /** @type {string} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.elevationField;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.elevationThreshold;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.filteredRecords;
 /** @type {!ArcGISImageServiceLayer} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.imageServiceLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.isNadir;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.noQueryOnExtentChange;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.rasterInfoFields;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.rasterListRefresh;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.records;
 /** @type {?} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.selectedRaster;
 /** @type {number} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.selectedRasterId;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.showThumbnail;

/**
 * Queries and displays the best image in a specific direction.
 * @param {!Geometry} geometry The specified input geometry needed for querying for the best image in a given azimuth direction.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.locate = function(geometry) {};

/**
 * Projects the input geometry to the specified spatial reference.
 * @param {!Geometry} geometry The geometry to project.
 * @param {!SpatialReference} outSpatialReference The spatial reference to project the geometry to.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.projectGeometry = function(geometry, outSpatialReference) {};

/**
 * Performs a query on the image service for oblique images covering the input geometry.
 * @param {!Geometry} geometry The input geometry to use for the search.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.search = function(geometry) {};

/**
 * Sets the records and extent on the viewer.
 * @param {!Array<?>} records An array of raster data objects.
 * @param {!Extent} extent The extent to set the viewer to.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.setData = function(records, extent) {};

/**
 * Projects the given extent to the map's spatial reference and sets the extent.
 * @param {!Extent} extent The extent to project the map's spatial reference to.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.setExtent = function(extent) {};

/**
 * Sets the input image (based on the image ID) to the given extent.
 * @param {number} id The ID of the raster image.
 * @param {!Extent} extent The extent to set the raster image to.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.setImage = function(id, extent) {};

/**
 * Sets the map extent to the currently selected image.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.zoomToSelectedImage = function() {};

/**
 * Fires when the azimuth is changed.
 * Fires when the selected raster is changed.
 * Fires when the viewer records are refreshed.
 * @param {string} type
 * @param {function({azimuth: number, target: !ObliqueViewer}): void|function({selectedRasterId: number, target: !ObliqueViewer}): void|function({filteredRecords: !Array<?>, records: !Array<?>, target: !ObliqueViewer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_ObliqueViewer.ObliqueViewer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_ObliqueViewer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/OpacitySlider"
/** @const */
tsickle_declare_module.esri_dijit_OpacitySlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_OpacitySlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_OpacitySlider */

/**
 * @constructor
 * @struct
 * Creates a new OpacitySlider widget within the provided DOM node srcNodeRef.
 * @param {!OpacitySliderOptions} params Set of parameters used to specify the OpacitySlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider = function(params, srcNodeRef) {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.minValue;
 /** @type {?} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.opacityInfo;
 /** @type {number} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.showTicks;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.showTransparentBackground;
 /** @type {?} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.statistics;
 /** @type {?} */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.zoomOptions;

/**
 * Fires when OpacitySlider changes.
 * Fires when  minValue or  maxValue of the OpacitySlider changes.
 * Fires when an OpacitySlider handle is moved.
 * Fires when the zoom state changes.
 * @param {string} type
 * @param {function({opacityInfo: ?, target: !OpacitySlider}): void|function({maxValue: number, minValue: number, opacityInfo: ?, target: !OpacitySlider}): void|function({zoomed: boolean, target: !OpacitySlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_OpacitySlider.OpacitySlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_OpacitySlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/OverviewMap"
/** @const */
tsickle_declare_module.esri_dijit_OverviewMap = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_OverviewMap */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_OverviewMap */

/**
 * @constructor
 * @struct
 * Creates a new OverviewMap object.
 * @param {!OverviewMapOptions} params Parameters that define the functionality of the OverviewMap widget.
 * @param {(string|!Node)=} srcNodeRef HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_OverviewMap.OverviewMap = function(params, srcNodeRef) {};
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_OverviewMap.OverviewMap.prototype.overviewMap;

/**
 * Releases  the resources used by the dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_OverviewMap.OverviewMap.prototype.destroy = function() {};

/**
 * Hide the overview map.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_OverviewMap.OverviewMap.prototype.hide = function() {};

/**
 * Resize the widget.
 * @param {?} size Object containing width and height of the desired size.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_OverviewMap.OverviewMap.prototype.resize = function(size) {};

/**
 * Show the overview map.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_OverviewMap.OverviewMap.prototype.show = function() {};

/**
 * Finalizes the creation of the OverviewMap dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_OverviewMap.OverviewMap.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_OverviewMap */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Popup"
/** @const */
tsickle_declare_module.esri_dijit_Popup = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Popup */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Popup */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Popup */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Popup */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Popup */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Popup */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Popup */

/**
 * @constructor
 * @struct
 * Create a new Popup object.
 * @param {!PopupOptions} options Optional parameters.
 * @param {(string|!Node)} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_Popup.Popup = function(options, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.anchor;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.count;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.deferreds;
 /** @type {?} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.domNode;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.features;
 /** @type {!FillSymbol} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.fillSymbol;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.hideDelay;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.highlight;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.isShowing;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.keepHighlightOnHide;
 /** @type {!LineSymbol} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.lineSymbol;
 /** @type {!Point} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.location;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.marginLeft;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.marginTop;
 /** @type {!MarkerSymbol} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.markerSymbol;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.offsetX;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.offsetY;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.pagingControls;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.pagingInfo;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.popupWindow;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.selectedIndex;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.titleInBody;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.visibleWhenEmpty;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.zoomFactor;

/**
 * Removes all features and destroys any pending deferreds.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.clearFeatures = function() {};

/**
 * Destroy the popup.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.destroy = function() {};

/**
 * Get the currently selected feature.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.getSelectedFeature = function() {};

/**
 * Hide the info window.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.hide = function() {};

/**
 * Maximize the info window.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.maximize = function() {};

/**
 * Re-calculates the popup's position with respect to the map location it is pointing to.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.reposition = function() {};

/**
 * Resize the info window to the specified height (in pixels).
 * @param {number} width The new width of the InfoWindow in pixels.
 * @param {number} height The new height of the InfoWindow in pixels.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.resize = function(width, height) {};

/**
 * Restore the info window to the pre-maximized state.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.restore = function() {};

/**
 * Selects the feature at the specified index.
 * @param {number} index The index of the feature to select.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.select = function(index) {};

/**
 * Go to the next feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.selectNext = function() {};

/**
 * Go to the previous feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.selectPrevious = function() {};

/**
 * Set the value of a property.
 * @param {string} name Property to set value.
 * @param {?} value Value to set.
 * @return {!Popup}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.set = function(name, value) {};

/**
 * Set the content for the info window.
 * @param {(string|!Function)} content The content for the info window.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.setContent = function(content) {};

/**
 * Associate an array of features or an array of deferreds that return features with the info window.
 * @param {(!Array<?>|!Array<!Graphic>)} features An array of features or deferreds.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.setFeatures = function(features) {};

/**
 * Sets the info window title.
 * @param {(string|!Function)} title The text for the title.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.setTitle = function(title) {};

/**
 * Display the info window at the specified location.
 * @param {!Point} location An instance of esri.geometry.Point that represents the geographic location to display the popup.
 * @param {?=} options See the object specifications table below for the structure of the  options  object.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.show = function(location, options) {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.startup = function() {};

/**
 * Fired when clearFeatures is called.
 * Fired when the info window is hidden.
 * Fired when the popup has finished maximizing.
 * Fired when the popup has been restored from its maximized state.
 * Fired when the selection changes.
 * Fired after registering an array of features.
 * Fired when the info window becomes visible.
 * @param {string} type
 * @param {function({target: !Popup}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Popup.Popup.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Popup */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/PopupMobile"
/** @const */
tsickle_declare_module.esri_dijit_PopupMobile = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_PopupMobile */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_PopupMobile */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_PopupMobile */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_PopupMobile */

/**
 * @constructor
 * @struct
 * Create a new PopupMobile object.
 * @param {!PopupMobileOptions} options Optional parameters.
 * @param {(string|!Node)} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile = function(options, srcNodeRef) {};
 /** @type {!Point} */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.location;

/**
 * Removes all features and destroys any pending deferreds.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.clearFeatures = function() {};

/**
 * Destroy the popup.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.destroy = function() {};

/**
 * Get the currently selected feature.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.getSelectedFeature = function() {};

/**
 * Hide the info window.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.hide = function() {};

/**
 * Selects the feature at the specified index.
 * @param {number} index The index of the feature to select.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.select = function(index) {};

/**
 * Go to the next feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.selectNext = function() {};

/**
 * Go to the previous feature.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.selectPrevious = function() {};

/**
 * Set the content for the info window.
 * @param {(string|!Function)} content The content for the info window.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.setContent = function(content) {};

/**
 * Associate an array of features or an array of deferreds that return features with the info window.
 * @param {(!Array<?>|!Array<!Graphic>)} features An array of features or deferreds.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.setFeatures = function(features) {};

/**
 * Sets the info window title.
 * @param {(string|!Function)} title The text for the title.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.setTitle = function(title) {};

/**
 * Display the info window at the specified location.
 * @param {!Point} location An instance of esri.geometry.Point that represents the geographic location to display the popup.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.show = function(location) {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.startup = function() {};

/**
 * Fired when clearFeatures is called.
 * Fired when the info window is hidden.
 * Fired when the selection changes.
 * Fired after registering an array of features.
 * Fired when the info window becomes visible.
 * @param {string} type
 * @param {function({target: !PopupMobile}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_PopupMobile.PopupMobile.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_PopupMobile */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/PopupTemplate"
/** @const */
tsickle_declare_module.esri_dijit_PopupTemplate = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_PopupTemplate */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_PopupTemplate */

/**
 * @constructor
 * @struct
 * Create a new PopupTemplate object.
 * @param {?} popupInfo An object that defines popup content.
 * @param {!PopupTemplateOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_dijit_PopupTemplate.PopupTemplate = function(popupInfo, options) {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_PopupTemplate.PopupTemplate.prototype.expressionInfos;
 /** @type {?} */
tsickle_declare_module.esri_dijit_PopupTemplate.PopupTemplate.prototype.info;

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_PopupTemplate */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Print"
/** @const */
tsickle_declare_module.esri_dijit_Print = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Print */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Print */

/**
 * @constructor
 * @struct
 * Creates a new Print widget.
 * @param {!PrintOptions} params Parameters for the print widget.
 * @param {(string|!Node)} srcNodeRef HTML element where the print widget button and drop down list will be rendered.
 */
tsickle_declare_module.esri_dijit_Print.Print = function(params, srcNodeRef) {};

/**
 * Destroys the print widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Print.Print.prototype.destroy = function() {};

/**
 * Hide the print widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Print.Print.prototype.hide = function() {};

/**
 * User can call this function so that it programatically print the map.
 * @param {!PrintTemplate} template Print template.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Print.Print.prototype.printMap = function(template) {};

/**
 * Set the print widget's visibility to true.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Print.Print.prototype.show = function() {};

/**
 * Finalizes the creation of the print widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Print.Print.prototype.startup = function() {};

/**
 * Fired when an error occurs during the print request.
 * Fired when the print job has succeeded.
 * Fired when the request is sent to the print service.
 * @param {string} type
 * @param {function({error: !Error, target: !Print}): void|function({value: ?, target: !Print}): void|function({target: !Print}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Print.Print.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Print */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/RendererSlider"
/** @const */
tsickle_declare_module.esri_dijit_RendererSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_RendererSlider */

/**
 * @constructor
 * @struct
 * Creates a new RendererSlider widget.
 * @param {!RendererSliderOptions} params Set of parameters used to specify the RendererSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider = function(params, srcNodeRef) {};
 /** @type {number} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.maximum;
 /** @type {string} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.maxLabel;
 /** @type {number} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.minimum;
 /** @type {string} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.minLabel;
 /** @type {number} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.precision;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.showHandles;
 /** @type {(boolean|!Array<string>)} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.showTicks;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.values;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.startup = function() {};

/**
 * Fires when the user actively slides the handle.
 * Fires when the user lets go of the handle.
 * @param {string} type
 * @param {function({values: !Array<number>, target: !RendererSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_RendererSlider.RendererSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_RendererSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Scalebar"
/** @const */
tsickle_declare_module.esri_dijit_Scalebar = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Scalebar */

/**
 * @constructor
 * @struct
 * Creates a new Scalebar dijit.
 * @param {!ScalebarOptions} params Parameters used to configure the widget.
 * @param {(string|!Node)=} srcNodeRef Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_Scalebar.Scalebar = function(params, srcNodeRef) {};

/**
 * Destroy the scalebar.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Scalebar.Scalebar.prototype.destroy = function() {};

/**
 * Hide the scalebar dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Scalebar.Scalebar.prototype.hide = function() {};

/**
 * Set the scalebar's visibility to true.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Scalebar.Scalebar.prototype.show = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Scalebar.Scalebar.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Scalebar */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/Search"
/** @const */
tsickle_declare_module.esri_dijit_Search = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Search */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Search */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Search */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Search */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Search */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Search */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_Search */

/**
 * @constructor
 * @struct
 * Create a new Search widget using the given DOM node.
 * @param {!SearchOptions} options Set of options used to specify Search options.
 * @param {(string|!Node)} srcNode Reference or id of the HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_Search.Search = function(options, srcNode) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.activeSource;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.activeSourceIndex;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.addLayersFromMap;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.allPlaceholder;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.autoNavigate;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.autoSelect;
 /** @type {?} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.defaultSource;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableButtonMode;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableHighlight;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableInfoWindow;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableLabel;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableSearchingAll;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableSourcesMenu;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableSuggestions;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.enableSuggestionsMenu;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.expanded;
 /** @type {!Layer} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.graphicsLayer;
 /** @type {!Graphic} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.highlightGraphic;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.infoTemplate;
 /** @type {!Graphic} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.labelGraphic;
 /** @type {!TextSymbol} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.labelSymbol;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.loaded;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.locationToAddressDistance;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.maxResults;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.maxSuggestions;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.minCharacters;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.searchResults;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.showInfoWindowOnSelect;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.sources;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.suggestionDelay;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.suggestResults;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.theme;
 /** @type {string} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.value;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.visible;
 /** @type {number} */
tsickle_declare_module.esri_dijit_Search.Search.prototype.zoomScale;

/**
 * Unfocus the widget's text input.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.blur = function() {};

/**
 * Clears the current value, search results, suggest results, graphic, and/or graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.clear = function() {};

/**
 * Closes the widget from button mode.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.collapse = function() {};

/**
 * Destroys the Search widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.destroy = function() {};

/**
 * Opens the widget from button mode.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.expand = function() {};

/**
 * Brings focus to the widget's text input.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.focus = function() {};

/**
 * Get the value of the property from the Search widget.
 * @param {string} name String value indicating the property to get.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.get = function(name) {};

/**
 * Hides the Search widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.hide = function() {};

/**
 * Depending on the sources specified, search() queries the feature layer(s) and/or performs address matching using any specified Locator(s) and returns any applicable results.
 * @param {?=} value This value can be a string, geometry, suggest candidate object, or an array of [latitude,longitude].
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.search = function(value) {};

/**
 * Selects a result.
 * @param {?} value The result object to select.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.select = function(value) {};

/**
 * Sets the value of a non "read-only" property from the widget.
 * @param {string} name The string value to set.
 * @param {?} value The value to set the specified property to.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.set = function(name, value) {};

/**
 * Show the Search widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.show = function() {};

/**
 * Finalizes the creation of the Search widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.startup = function() {};

/**
 * Performs a suggest() request on the active Locator or feature layer.
 * @param {string=} value The string value used to suggest() on an active locator or feature layer.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.suggest = function(value) {};

/**
 * Fired when the widget's text input loses focus.
 * Fired when a result is cleared from the input box or a new result is selected.
 * Fired when the widget's text input sets focus.
 * Fired when the search widget has fully loaded.
 * Fires when the search method is called and returns its results.
 * Fired when a search result is selected.
 * Fired when the suggest method is called and returns its results.
 * @param {string} type
 * @param {function({target: !Search}): void|function({activeSourceIndex: number, errors: !Array<!Error>, numErrors: number, numResults: number, results: !Array<?>, value: string, target: !Search}): void|function({result: ?, source: ?, sourceIndex: number, target: !Search}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_Search.Search.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_Search */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/SizeInfoSlider"
/** @const */
tsickle_declare_module.esri_dijit_SizeInfoSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_SizeInfoSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_SizeInfoSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_SizeInfoSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_SizeInfoSlider */

/**
 * @constructor
 * @struct
 * Creates a new SizeInfoSlider widget.
 * @param {!SizeInfoSliderOptions} params Set of parameters used to specify the SizeInfoSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.classificationMethod;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.handles;
 /** @type {?} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.histogram;
 /** @type {number} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.histogramWidth;
 /** @type {number} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.minValue;
 /** @type {string} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.normalizationType;
 /** @type {number} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.primaryHandle;
 /** @type {number} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.rampWidth;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.showHandles;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.showHistogram;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.showLabels;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.showTicks;
 /** @type {?} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.sizeInfo;
 /** @type {?} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.statistics;
 /** @type {(!SimpleLineSymbol|!SimpleMarkerSymbol)} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.symbol;
 /** @type {?} */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.zoomOptions;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.startup = function() {};

/**
 * Fires when the SizeInfoSlider properties change.
 * Fires when  minValue or  maxValue of the SizeInfoSlider changes.
 * Fires when a SizeInfoSlider handle is moved.
 * Fires when the zoom state changes.
 * @param {string} type
 * @param {function({sizeInfo: ?, target: !SizeInfoSlider}): void|function({maxValue: number, minValue: number, sizeInfo: ?, target: !SizeInfoSlider}): void|function({zoomed: boolean, target: !SizeInfoSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_SizeInfoSlider.SizeInfoSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_SizeInfoSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/SymbolStyler"
/** @const */
tsickle_declare_module.esri_dijit_SymbolStyler = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_SymbolStyler */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_SymbolStyler */

/**
 * @constructor
 * @struct
 * Creates a new SymbolStyler widget.
 * @param {!SymbolStylerOptions} params Set of parameters used to specify the SymbolStyler widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_SymbolStyler.SymbolStyler = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_SymbolStyler.SymbolStyler.prototype.activeTab;

/**
 * Sets the symbol to edit.
 * @param {!Symbol} symbol Symbol to edit.
 * @param {?} options Styling options.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_SymbolStyler.SymbolStyler.prototype.edit = function(symbol, options) {};

/**
 * Returns the current style.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_SymbolStyler.SymbolStyler.prototype.getStyle = function() {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_SymbolStyler.SymbolStyler.prototype.startup = function() {};

/**
 * Saves the recent fill and outline colors.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_SymbolStyler.SymbolStyler.prototype.storeColors = function() {};

/**
 * Fired every time an edit is committed.
 * @param {string} type
 * @param {function({target: !SymbolStyler}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_SymbolStyler.SymbolStyler.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_SymbolStyler */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/TimeSlider"
/** @const */
tsickle_declare_module.esri_dijit_TimeSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_TimeSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_TimeSlider */

/**
 * @constructor
 * @struct
 * Creates a new TimeSlider object.
 * @param {!TimeSliderOptions} params Parameters for the time slider object.
 * @param {(string|!Node)} srcNodeRef HTML element where the time slider should be rendered.
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider = function(params, srcNodeRef) {};
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.loop;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.playing;
 /** @type {number} */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.thumbCount;
 /** @type {number} */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.thumbMovingRate;
 /** @type {!Array<!Date>} */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.timeStops;

/**
 * The specified number of time stops are created for the input time extent.
 * @param {!TimeExtent} timeExtent The time extent used to define the time slider's start and end time stops.
 * @param {number=} count The number of time stops to create.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.createTimeStopsByCount = function(timeExtent, count) {};

/**
 * Create a time stop for each interval specified, i.e., (week, month, day).
 * @param {!TimeExtent} timeExtent The time extent used to define the time slider's start and end time stops.
 * @param {number=} timeInterval The length of the time interval.
 * @param {string=} timeIntervalUnits  Valid values are listed in the TimeInfo constants table.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.createTimeStopsByTimeInterval = function(timeExtent, timeInterval, timeIntervalUnits) {};

/**
 * Gets the current time extent for the time slider.
 * @return {!TimeExtent}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.getCurrentTimeExtent = function() {};

/**
 * Move to the next time step.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.next = function() {};

/**
 * Pause the time slider.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.pause = function() {};

/**
 * Play the time slider.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.play = function() {};

/**
 * Move to the previous time step.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.previous = function() {};

/**
 * Specify an array of strings to be used as labels.
 * @param {!Array<string>} labels An array of strings that define the labels for each tick.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.setLabels = function(labels) {};

/**
 * Determines whether or not loop.
 * @param {boolean} loop True plays the time slider continuously.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.setLoop = function(loop) {};

/**
 * The number of thumbs to display.
 * @param {number} thumbCount The number of thumbs to display.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.setThumbCount = function(thumbCount) {};

/**
 * Array of two integers, the first value determines where to put the first thumb.
 * @param {!Array<number>} indexes Array of two integers.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.setThumbIndexes = function(indexes) {};

/**
 * Change the rate at which the time animation plays.
 * @param {number} thumbMovingRate The rate at which the time slider plays.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.setThumbMovingRate = function(thumbMovingRate) {};

/**
 * Specify the number of ticks to display on the time slider.
 * @param {number} count The number of ticks to display on the slider.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.setTickCount = function(count) {};

/**
 * Manually define the time stop locations by providing an array of dates.
 * @param {!Array<!Date>} timeStops Array of dates
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.setTimeStops = function(timeStops) {};

/**
 * Determine if the time is displayed for an instant in time.
 * @param {boolean} createTimeInstants When true, the time slider displays features for the current point in time.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.singleThumbAsTimeInstant = function(createTimeInstants) {};

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.startup = function() {};

/**
 * Fires when the next button is clicked or TimeSlider.next() method is invoked.
 * Fires when the pause button is clicked or TImeSlider.pause() method is invoked.
 * Fires once when the play button is clicked or Timeslider.play() method is invoked.
 * Fires when the previous button is clicked or TimeSlider.previous() is invoked.
 * Fires when the timeExtent of the TimeSlider is changed.
 * @param {string} type
 * @param {function({timeExtent: !TimeExtent, target: !TimeSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_TimeSlider.TimeSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_TimeSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/VisibleScaleRangeSlider"
/** @const */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider */

/**
 * @constructor
 * @struct
 * Creates a new VisibleScaleRangeSlider widget.
 * @param {!VisibleScaleRangeSliderOptions} params Set of parameters used to specify the VisibleScaleRangeSlider widget options.
 * @param {(string|!Node)} srcNodeRef Reference or ID of the HTMLElement where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider = function(params, srcNodeRef) {};
 /** @type {!Layer} */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.layer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.maximum;
 /** @type {number} */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.minimum;
 /** @type {number} */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.minScale;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.startup = function() {};

/**
 * Dispatched whenever minScale or maxScale changes.
 * @param {string} type
 * @param {function({maxScale: number, minScale: number, target: !VisibleScaleRangeSlider}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider.VisibleScaleRangeSlider.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_VisibleScaleRangeSlider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/AggregatePoints"
/** @const */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_AggregatePoints */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_AggregatePoints */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_AggregatePoints */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_AggregatePoints */

/**
 * @constructor
 * @struct
 * Creates a new AggregatePoints dijit using the given DOM node.
 * @param {!AggregatePointsOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.groupByField;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.keepBoundariesWithNoPoints;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.minorityMajority;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.percentPoints;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.pointLayer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.polygonLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.polygonLayers;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.showSelectFolder;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.summaryFields;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_AggregatePoints.AggregatePoints.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_AggregatePoints */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/AnalysisBase"
/** @const */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_AnalysisBase */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase = function() {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.analysisGpServer;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.folderId;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.folderName;
 /** @type {?} */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.portalSelf;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.portalUrl;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.showReadyToUseLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.title;

/**
 * Cancels an analysis job that is being processed.
 * @param {?} jobInfo An object containing job information including job ID, status, message, etc returned by the job-status event.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.cancel = function(jobInfo) {};

/**
 * Starts checking the analysis job status for the given jobId.
 * @param {string} jobId Job id of the analysis job to check.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.checkJobStatus = function(jobId) {};

/**
 * Starts an analysis tool.
 * @param {string} params See the object specifications table below for the structure of the params object.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.execute = function(params) {};

/**
 * Gets credits estimate for a specific analysis job.
 * @param {string} toolName The name of the analysis tool from which a credits estimate will be returned.
 * @param {string} jobParams The input job parameters.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.getCreditsEstimate = function(toolName, jobParams) {};

/**
 * Fires when close icon is clicked or when run analysis button is clicked.
 * Fires when the drawn boundaries option is activated.
 * Fires when the drawn boundaries option is deactivated.
 * Fires when the job in cancelled.
 * Fires when the job fails.
 * Fires after the job fetches result data.
 * Fires when the job execution status is received.
 * Fires when the job is submitted to the server for asynchronous processing.
 * Fires when the job succeeds.
 * Fires when the execute method is called.
 * @param {string} type
 * @param {function({target: !AnalysisBase}): void|function({response: ?, target: !AnalysisBase}): void|function({error: ?, target: !AnalysisBase}): void|function({result: ?, target: !AnalysisBase}): void|function({jobInfo: ?, target: !AnalysisBase}): void|function({params: ?, target: !AnalysisBase}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_analysis_AnalysisBase.AnalysisBase.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_AnalysisBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/CalculateDensity"
/** @const */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CalculateDensity */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CalculateDensity */

/**
 * @constructor
 * @struct
 * Creates a new CalculateDensity dijit using the given DOM node.
 * @param {?} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.areaUnits;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.boundingPolygonLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.boundingPolygonLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.classificationType;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.inputLayer;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.numClasses;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.outputLayerName;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.radius;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.radiusUnits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_CalculateDensity.CalculateDensity.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_CalculateDensity */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/ChooseBestFacilities"
/** @const */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities */

/**
 * @constructor
 * @struct
 * Creates a new ChooseBestFacilities dijit using the given DOM node.
 * @param {!ChooseBestFacilitiesOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.analysisGpServer;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.candidateCount;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.candidateFacilitiesCapacity;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.candidateFacilitiesCapacityField;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.candidateFacilitiesLayer;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.demand;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.demandField;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.demandLocationLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.demandLocationLayers;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.enableTravelModes;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.featureLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.folderId;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.folderName;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.maxTravelRange;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.maxTravelRangeField;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.outputLayerName;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.percentDemandCoverage;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.portalUrl;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.requiredFacilitiesCapacity;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.requiredFacilitiesCapacityField;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.requiredFacilitiesLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.showReadyToUseLayers;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.showSelectFolder;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities.ChooseBestFacilities.prototype.title;

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_ChooseBestFacilities */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/ConnectOriginsToDestinations"
/** @const */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations */

/**
 * @constructor
 * @struct
 * Creates a new ConnectOriginsToDestinations dijit using the given DOM node.
 * @param {!ConnectOriginsToDestinationsOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.distanceDefaultUnits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.enableTravelModes;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.featureLayers;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.map;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.originsLayer;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations.ConnectOriginsToDestinations.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_ConnectOriginsToDestinations */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/CreateBuffers"
/** @const */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateBuffers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateBuffers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateBuffers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateBuffers */

/**
 * @constructor
 * @struct
 * Creates a new CreateBuffers dijit using the given DOM node.
 * @param {!CreateBuffersOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers = function(params, srcNodeRef) {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.bufferDistance;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.showSelectFolder;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.units;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_CreateBuffers.CreateBuffers.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_CreateBuffers */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/CreateDriveTimeAreas"
/** @const */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas */

/**
 * @constructor
 * @struct
 * Creates a new CreateDriveTimeAreas dijit using the given DOM node.
 * @param {!CreateDriveTimeAreasOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.breakUnits;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.breakValues;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.inputLayer;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.inputType;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.outputLayerName;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.overlapPolicy;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas.CreateDriveTimeAreas.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_CreateDriveTimeAreas */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/CreateViewshed"
/** @const */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateViewshed */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateViewshed */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateViewshed */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateViewshed */

/**
 * @constructor
 * @struct
 * Creates a new CreateViewshed dijit using the given DOM node.
 * @param {!CreateViewshedOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.maxDistanceUnits;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.maximumDistance;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.observerHeight;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.observerHeightUnits;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.showSelectFolder;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.targetHeight;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.targetHeightUnits;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_CreateViewshed.CreateViewshed.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_CreateViewshed */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/CreateWatersheds"
/** @const */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateWatersheds */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateWatersheds */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateWatersheds */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_CreateWatersheds */

/**
 * @constructor
 * @struct
 * Creates a new CreateWatersheds dijit using the given DOM node.
 * @param {!CreateWatershedsOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.returnFeatureCollection;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.searchUnits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_CreateWatersheds.CreateWatersheds.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_CreateWatersheds */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/DeriveNewLocations"
/** @const */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations */

/**
 * @constructor
 * @struct
 * Creates a new DeriveNewLocations dijit using the given DOM node.
 * @param {?} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.analysisLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.inputLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations.DeriveNewLocations.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_DeriveNewLocations */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/DissolveBoundaries"
/** @const */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries */

/**
 * @constructor
 * @struct
 * Creates a new DissolveBoundaries dijit using the given DOM node.
 * @param {!DissolveBoundariesOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries = function(params, srcNodeRef) {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.dissolveFields;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.showSelectFolder;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.summaryFields;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries.DissolveBoundaries.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_DissolveBoundaries */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/EnrichLayer"
/** @const */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_EnrichLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_EnrichLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_EnrichLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_EnrichLayer */

/**
 * @constructor
 * @struct
 * Creates a new EnrichLayer dijit using the given DOM node.
 * @param {!EnrichLayerOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer = function(params, srcNodeRef) {};
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.distance;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.enableTravelModes;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.showSelectFolder;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.showTrafficWidget;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_EnrichLayer.EnrichLayer.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_EnrichLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/ExtractData"
/** @const */
tsickle_declare_module.esri_dijit_analysis_ExtractData = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ExtractData */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ExtractData */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ExtractData */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_ExtractData */

/**
 * @constructor
 * @struct
 * Creates a new ExtractData dijit using the given DOM node.
 * @param {!ExtractDataOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData = function(params, srcNodeRef) {};
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.clip;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.dataFormat;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.featureLayers;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.inputLayers;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_ExtractData.ExtractData.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_ExtractData */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/FindExistingLocations"
/** @const */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindExistingLocations */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindExistingLocations */

/**
 * @constructor
 * @struct
 * Creates a new FindExistingLocations dijit using the given DOM node.
 * @param {?} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.analysisLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.inputLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_FindExistingLocations.FindExistingLocations.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_FindExistingLocations */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/FindHotSpots"
/** @const */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindHotSpots */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindHotSpots */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindHotSpots */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindHotSpots */

/**
 * @constructor
 * @struct
 * Creates a new FindHotSpots dijit using the given DOM node.
 * @param {!FindHotSpotsOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots = function(params, srcNodeRef) {};
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.aggregationPolygonLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.analysisField;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.analysisLayer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.boundingPolygonLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.boundingPolygonLayers;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.returnProcessInfo;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_FindHotSpots.FindHotSpots.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_FindHotSpots */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/FindNearest"
/** @const */
tsickle_declare_module.esri_dijit_analysis_FindNearest = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindNearest */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindNearest */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindNearest */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindNearest */

/**
 * @constructor
 * @struct
 * Creates a new FindNearest dijit using the given DOM node.
 * @param {!FindNearestOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.analysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.enableTravelModes;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.map;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.maxCount;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.nearLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.nearLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.returnFeatureCollection;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.searchCutoff;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.searchCutoffUnits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_FindNearest.FindNearest.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_FindNearest */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/FindSimilarLocations"
/** @const */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations */

/**
 * @constructor
 * @struct
 * Creates a new FindSimilarLocations dijit using the given DOM node.
 * @param {?} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.inputLayer;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.returnProcessInfo;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.searchLayers;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.startup = function() {};

/**
 * Fires when the select tool option is activated.
 * Fires when the select tool option is deactivated.
 * @param {string} type
 * @param {function({target: !FindSimilarLocations}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations.FindSimilarLocations.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_FindSimilarLocations */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/InterpolatePoints"
/** @const */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_InterpolatePoints */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_InterpolatePoints */

/**
 * @constructor
 * @struct
 * Creates a new InterpolatePoints dijit using the given DOM node.
 * @param {?} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.boundingPolygonLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.boundingPolygonLayers;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.classificationType;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.inputLayer;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.maxClasses;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.minClasses;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.numClasses;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.outputLayerName;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.predictAtPointLayers;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_InterpolatePoints.InterpolatePoints.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_InterpolatePoints */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/MergeLayers"
/** @const */
tsickle_declare_module.esri_dijit_analysis_MergeLayers = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_MergeLayers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_MergeLayers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_MergeLayers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_MergeLayers */

/**
 * @constructor
 * @struct
 * Creates a new MergeLayers dijit using the given DOM node.
 * @param {!MergeLayersOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.analysisGpServer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.map;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.mergeLayers;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.mergingAttributes;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.showSelectFolder;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_MergeLayers.MergeLayers.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_MergeLayers */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/OverlayLayers"
/** @const */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_OverlayLayers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_OverlayLayers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_OverlayLayers */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_OverlayLayers */

/**
 * @constructor
 * @struct
 * Creates a new OverlayLayers dijit using the given DOM node.
 * @param {!OverlayLayersOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.inputLayer;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.map;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.outputLayerName;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.overlayLayer;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.overlayType;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.showSelectFolder;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.snapToInput;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.tolerance;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_OverlayLayers.OverlayLayers.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_OverlayLayers */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/PlanRoutes"
/** @const */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_PlanRoutes */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_PlanRoutes */

/**
 * @constructor
 * @struct
 * Creates a new PlanRoutes dijit using the given DOM node.
 * @param {?} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.distanceDefaultUnits;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.endLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.featureLayers;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.limitMaxTimePerRoute;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.maxStopsPerRoute;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.returnToStart;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.routeCount;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.showSelectFolder;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.startLayer;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.stopsLayer;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_PlanRoutes.PlanRoutes.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_PlanRoutes */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/SummarizeNearby"
/** @const */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeNearby */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeNearby */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeNearby */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeNearby */

/**
 * @constructor
 * @struct
 * Creates a new SummarizeNearby dijit using the given DOM node.
 * @param {!SummarizeNearbyOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby = function(params, srcNodeRef) {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.distances;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.enableTravelModes;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.groupByField;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.minorityMajority;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.nearType;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.percentPoints;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.returnFeatureCollection;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.shapeUnits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.showSelectFolder;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.summaryFields;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.summaryLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.summaryLayers;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.sumNearbyLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.sumShape;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.units;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_SummarizeNearby.SummarizeNearby.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_SummarizeNearby */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/SummarizeWithin"
/** @const */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeWithin */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeWithin */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeWithin */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_SummarizeWithin */

/**
 * @constructor
 * @struct
 * Creates a new SummarizeWithin dijit using the given DOM node.
 * @param {!SummarizeWithinOptions} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin = function(params, srcNodeRef) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.groupByField;
 /** @type {!Map} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.map;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.minorityMajority;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.percentPoints;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.showSelectFolder;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.summaryFields;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.summaryLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.summaryLayers;
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.sumWithinLayer;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_SummarizeWithin.SummarizeWithin.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_SummarizeWithin */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/analysis/TraceDownstream"
/** @const */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_TraceDownstream */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_analysis_TraceDownstream */

/**
 * @constructor
 * @struct
 * Creates a new TraceDownstream dijit using the given DOM node.
 * @param {?} params Various options to configure this dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of a HTML element that this dijit is rendered into.
 */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream = function(params, srcNodeRef) {};
 /** @type {!FeatureLayer} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.boundingPolygonLayer;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.boundingPolygonLayers;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.maxDistance;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.maxDistanceUnits;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.outputLayerName;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.returnFeatureCollection;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.showChooseExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.showCloseIcon;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.showCredits;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.showHelp;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.showSelectAnalysisLayer;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.showSelectFolder;
 /** @type {number} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.splitDistance;
 /** @type {string} */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.splitUnits;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_analysis_TraceDownstream.TraceDownstream.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_analysis_TraceDownstream */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/Add"
/** @const */
tsickle_declare_module.esri_dijit_editing_Add = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Add */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Add */

/**
 * @constructor
 * @struct
 * Create a new Add operation.
 * @param {!AddOptions} params See options list for parameters.
 */
tsickle_declare_module.esri_dijit_editing_Add.Add = function(params) {};

/**
 * Redo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Add.Add.prototype.performRedo = function() {};

/**
 * Undo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Add.Add.prototype.performUndo = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_Add */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/AttachmentEditor"
/** @const */
tsickle_declare_module.esri_dijit_editing_AttachmentEditor = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_AttachmentEditor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_AttachmentEditor */

/**
 * @constructor
 * @struct
 * Creates a new AttachmentEditor object.
 * @param {?} params No parameter options.
 * @param {(string|!Node)} srcNodeRef HTML element where the widget is rendered.
 */
tsickle_declare_module.esri_dijit_editing_AttachmentEditor.AttachmentEditor = function(params, srcNodeRef) {};

/**
 * Display the attachment editor.
 * @param {!Graphic} graphic Graphic, with attachments, to display in the attachment editor.
 * @param {!FeatureLayer} featureLayer The feature layer to display attachments for.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_AttachmentEditor.AttachmentEditor.prototype.showAttachments = function(graphic, featureLayer) {};

/**
 * Finalizes the creation of the attachment editor.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_AttachmentEditor.AttachmentEditor.prototype.startup = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_AttachmentEditor */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/Cut"
/** @const */
tsickle_declare_module.esri_dijit_editing_Cut = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Cut */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Cut */

/**
 * @constructor
 * @struct
 * Create a new Cut operation.
 * @param {!CutOptions} params See options list for parameters.
 */
tsickle_declare_module.esri_dijit_editing_Cut.Cut = function(params) {};

/**
 * Redo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Cut.Cut.prototype.performRedo = function() {};

/**
 * Undo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Cut.Cut.prototype.performUndo = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_Cut */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/Delete"
/** @const */
tsickle_declare_module.esri_dijit_editing_Delete = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Delete */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Delete */

/**
 * @constructor
 * @struct
 * Create a new Delete operation.
 * @param {!DeleteOptions} params See options list for parameters.
 */
tsickle_declare_module.esri_dijit_editing_Delete.Delete = function(params) {};

/**
 * Redo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Delete.Delete.prototype.performRedo = function() {};

/**
 * Undo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Delete.Delete.prototype.performUndo = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_Delete */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/Editor"
/** @const */
tsickle_declare_module.esri_dijit_editing_Editor = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Editor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Editor */

/**
 * @constructor
 * @struct
 * Creates a new Editor object.
 * @param {!EditorOptions} params Parameters that define the functionality of the editor widget.
 * @param {(string|!Node)} srcNodeRef HTML element where the widget should be rendered.
 */
tsickle_declare_module.esri_dijit_editing_Editor.Editor = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_ARROW;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_AUTOCOMPLETE;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_CIRCLE;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_ELLIPSE;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_FREEHAND_POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_FREEHAND_POLYLINE;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_POLYLINE;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_RECTANGLE;
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.CREATE_TOOL_TRIANGLE;
 /** @type {!Edit} */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.prototype.editToolbar;

/**
 * Finalizes the creation of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.prototype.startup = function() {};

/**
 * Fires when the widget has fully loaded.
 * @param {string} type
 * @param {function({target: !Editor}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_editing_Editor.Editor.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_Editor */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/TemplatePicker"
/** @const */
tsickle_declare_module.esri_dijit_editing_TemplatePicker = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_TemplatePicker */

/**
 * @constructor
 * @struct
 * Creates a new TemplatePicker object that displays a gallery of templates from the input feature layers or items.
 * @param {!TemplatePickerOptions} params FeatureLayers or items are required all other parameters are optional.
 * @param {(string|!Node)} srcNodeRef HTML element where the TemplatePicker will be rendered.
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker = function(params, srcNodeRef) {};
 /** @type {?} */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.grid;
 /** @type {!HTMLDivElement} */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.tooltip;

/**
 * Get or set the properties of the template picker.
 * @param {string} name Name of the attribute of interest.
 * @param {?=} value Value for the specified attribute.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.attr = function(name, value) {};

/**
 * Clears the current selection.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.clearSelection = function() {};

/**
 * Destroys the template picker.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.destroy = function() {};

/**
 * Gets the selected item picked by the user.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.getSelected = function() {};

/**
 * Finalizes the creation of the template picker.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.startup = function() {};

/**
 * Updates the templatePicker after modifying the properties of the widget.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.update = function() {};

/**
 * Fires when an item is selected or unselected in the template picker.
 * @param {string} type
 * @param {function({target: !TemplatePicker}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_editing_TemplatePicker.TemplatePicker.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_TemplatePicker */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/Union"
/** @const */
tsickle_declare_module.esri_dijit_editing_Union = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Union */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Union */

/**
 * @constructor
 * @struct
 * Create a new Union operation.
 * @param {!UnionOptions} params See options list for parameters.
 */
tsickle_declare_module.esri_dijit_editing_Union.Union = function(params) {};

/**
 * Redo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Union.Union.prototype.performRedo = function() {};

/**
 * Undo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Union.Union.prototype.performUndo = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_Union */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/editing/Update"
/** @const */
tsickle_declare_module.esri_dijit_editing_Update = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Update */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_editing_Update */

/**
 * @constructor
 * @struct
 * Create a new Update operation.
 * @param {!UpdateOptions} params See options list for parameters.
 */
tsickle_declare_module.esri_dijit_editing_Update.Update = function(params) {};

/**
 * Redo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Update.Update.prototype.performRedo = function() {};

/**
 * Undo the current operation.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_editing_Update.Update.prototype.performUndo = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_editing_Update */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/geoenrichment/DataBrowser"
/** @const */
tsickle_declare_module.esri_dijit_geoenrichment_DataBrowser = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_DataBrowser */

/**
 * @constructor
 * @struct
 * Creates a new DataBrowser dijit using the given DOM node.
 * @param {!DataBrowserOptions} options Optional parameters used to create the layer.
 * @param {(string|!Node)} srcNodeRef Reference or id of an HTML element where the DataBrowser should be rendered.
 */
tsickle_declare_module.esri_dijit_geoenrichment_DataBrowser.DataBrowser = function(options, srcNodeRef) {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_dijit_geoenrichment_DataBrowser.DataBrowser.prototype.variables;

/**
 * Finalizes the creation of the DataBrowser.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_geoenrichment_DataBrowser.DataBrowser.prototype.startup = function() {};

/**
 * Fires when user clicks the Back button.
 * Fires when user clicks the Cancel button.
 * Fires when user clicks the OK button.
 * Fires when variables are selected.
 * @param {string} type
 * @param {function({target: !DataBrowser}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_geoenrichment_DataBrowser.DataBrowser.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_geoenrichment_DataBrowser */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/geoenrichment/Infographic"
/** @const */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_Infographic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_Infographic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_Infographic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_Infographic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_Infographic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_Infographic */

/**
 * @constructor
 * @struct
 * Creates a new Infographic dijit using the given DOM node.
 * @param {?} params Various optional parameters that can be used to configure the dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of an HTML element where the Infographic should be rendered.
 */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic = function(params, srcNodeRef) {};
 /** @type {number} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.cacheLimit;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.countryID;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.datasetID;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.expanded;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.returnGeometry;
 /** @type {!GeometryStudyArea} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.studyArea;
 /** @type {(!RingBuffer|!DriveBuffer|!IntersectingGeographies)} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.studyAreaOptions;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.subtitle;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.type;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.variables;

/**
 * Define the infographic data.
 * @param {!FeatureSet} data Specify the FeatureSet containing the custom data to display in the Infographic.
 * @param {?=} metadata Define the mappings of feature set attributes to Infographic display fields.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.setData = function(data, metadata) {};

/**
 * Finalizes the creation of this dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.startup = function() {};

/**
 * Fires if an error occurs in retrieving data for the study area.
 * Fires when loading data for the study area.
 * Fires when data for the study area is ready.
 * Fires when requesting data for the study area.
 * Fires when the Infographic is resized.
 * @param {string} type
 * @param {function({error: ?, target: !Infographic}): void|function({target: !Infographic}): void|function({provider: ?, target: !Infographic}): void|function({size: !Array<number>, target: !Infographic}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_geoenrichment_Infographic.Infographic.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_geoenrichment_Infographic */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/geoenrichment/InfographicsCarousel"
/** @const */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel */

/**
 * @constructor
 * @struct
 * Creates a new InfographicsCarousel dijit using the given DOM node.
 * @param {?} params Various optional parameters that can be used to configure the dijit.
 * @param {(string|!Node)} srcNodeRef Reference or id of an HTML element where the Directions widget should be rendered.
 */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel = function(params, srcNodeRef) {};
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.expanded;
 /** @type {!InfographicsOptions} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.options;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.returnGeometry;
 /** @type {number} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.selectedIndex;
 /** @type {!GeometryStudyArea} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.studyArea;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.studyAreaTitle;

/**
 * Finalizes the creation of this dijit.
 * @return {void}
 */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.startup = function() {};

/**
 * Fires if an error occurs in retrieving data for the study area.
 * Fires when loading data for the study area.
 * Fires when data for the study area is ready.
 * Fires when the InfographicsCarousel is resized.
 * @param {string} type
 * @param {function({error: ?, target: !InfographicsCarousel}): void|function({target: !InfographicsCarousel}): void|function({provider: ?, target: !InfographicsCarousel}): void|function({size: !Array<number>, target: !InfographicsCarousel}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel.InfographicsCarousel.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsCarousel */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/geoenrichment/InfographicsOptions"
/** @const */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions */

/**
 * @constructor
 * @struct
 * Constructs instance from serialized state.
 * @param {!Object=} json Various options to configure this InfographicsOptions.
 */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions.InfographicsOptions = function(json) {};
 /** @type {(!RingBuffer|!DriveBuffer|!IntersectingGeographies)} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions.InfographicsOptions.prototype.studyAreaOptions;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions.InfographicsOptions.prototype.theme;

/**
 * Gets an array of default InfographicsOptions.Item's in the InfographicsCarousel with a countryID.
 * @param {string} countryID The ID of the country for which data is retrieved.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions.InfographicsOptions.prototype.getItems = function(countryID) {};

/**
 * Converts object to its JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions.InfographicsOptions.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptions */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/geoenrichment/InfographicsOptionsItem"
/** @const */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem = {};

/**
 * @constructor
 * @struct
 * Constructs an InfographicsOptionsItem object.
 * @param {string} type The type of the Infographic.
 * @param {!Array<string>} variables The set of variables displayed in this InfographicsOptionsItem.
 */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem.InfographicsOptionsItem = function(type, variables) {};
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem.InfographicsOptionsItem.prototype.datasetID;
 /** @type {boolean} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem.InfographicsOptionsItem.prototype.isVisible;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem.InfographicsOptionsItem.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem.InfographicsOptionsItem.prototype.type;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem.InfographicsOptionsItem.prototype.variables;

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_geoenrichment_InfographicsOptionsItem */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/dijit/util/busyIndicator"
/** @const */
tsickle_declare_module.esri_dijit_util_busyIndicator = {};
 /** @type {{create: function(?, ?): ?}} */
tsickle_declare_module.esri_dijit_util_busyIndicator.busyIndicator;

/* TODO: ExportAssignment in tsickle_declare_module.esri_dijit_util_busyIndicator */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/domUtils"
/** @const */
tsickle_declare_module.esri_domUtils = {};
 /** @type {{documentBox: ?, getNode: function(?): !Node, hide: function(?): void, show: function(?): void, toggle: function(?): void}} */
tsickle_declare_module.esri_domUtils.domUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_domUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/Circle"
/** @const */
tsickle_declare_module.esri_geometry_Circle = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Circle */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Circle */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Circle */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Circle */

/**
 * @constructor
 * @struct
 * Create a new Circle by specifying an input center location using either an esri.geometry.Point object or a latitude/longitude array and an object with the following optional properties: radius, radiusUnits, geodesic and numberOfPoints.
 * Create a new Circle by specifying an object with a required center location, defined as a longitude/latitude array or an esri.geometry.Point, and the following additional optional parameters: radius, radiusUnits, geodesic, and numberOfPoints.
 * @param {(!Point|!Array<number>)|!CircleOptions2} center_or_params Center point of the circle. / If no center parameter is provided, it must be set within the options.
 * @param {!CircleOptions1=} options See options descriptions for further information.
 */
tsickle_declare_module.esri_geometry_Circle.Circle = function(center_or_params, options) {};
 /** @type {(!Point|!Array<number>)} */
tsickle_declare_module.esri_geometry_Circle.Circle.prototype.center;
 /** @type {number} */
tsickle_declare_module.esri_geometry_Circle.Circle.prototype.radius;
 /** @type {string} */
tsickle_declare_module.esri_geometry_Circle.Circle.prototype.radiusUnit;
 /** @type {!Array<!Array<!Array<number>>>} */
tsickle_declare_module.esri_geometry_Circle.Circle.prototype.rings;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_geometry_Circle.Circle.prototype.spatialReference;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_Circle */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/Extent"
/** @const */
tsickle_declare_module.esri_geometry_Extent = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Extent */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Extent */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Extent */

/**
 * @constructor
 * @struct
 * Creates a new Extent object.
 * Creates a new Extent object using a JSON object.
 * @param {number|!Object} xmin_or_json Bottom-left X-coordinate of an extent envelope. / JSON object representing the geometry.
 * @param {number=} ymin Bottom-left Y-coordinate of an extent envelope.
 * @param {number=} xmax Top-right X-coordinate of an extent envelope.
 * @param {number=} ymax Top-right Y-coordinate of an extent envelope.
 * @param {!SpatialReference=} spatialReference Spatial reference of the geometry.
 */
tsickle_declare_module.esri_geometry_Extent.Extent = function(xmin_or_json, ymin, xmax, ymax, spatialReference) {};
 /** @type {number} */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.xmax;
 /** @type {number} */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.xmin;
 /** @type {number} */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.ymax;
 /** @type {number} */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.ymin;

/**
 * A new extent is returned with the same width and height centered at the argument point.
 * @param {!Point} point Centers the extent on the specified x,y location.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.centerAt = function(point) {};

/**
 * When "true", the geometry in the argument is contained in this extent.
 * @param {!Geometry} geometry Can be a Point or Extent.
 * @return {boolean}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.contains = function(geometry) {};

/**
 * Expands the extent by the factor given.
 * @param {number} factor The multiplier value.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.expand = function(factor) {};

/**
 * Returns the center point of the extent in map units.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.getCenter = function() {};

/**
 * Distance between ymin and ymax.
 * @return {number}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.getHeight = function() {};

/**
 * Distance between xmin and xmax.
 * @return {number}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.getWidth = function() {};

/**
 * Returns the intersection extent if the input geometry is an extent that intersects this extent.
 * @param {!Geometry} geometry The geometry used to test the intersection.
 * @return {(boolean|!Extent)}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.intersects = function(geometry) {};

/**
 * Returns an array with either one Extent that's been shifted to within +/- 180 or two Extents if the original extent intersects the dateline.
 * @return {!Array<!Extent>}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.normalize = function() {};

/**
 * Returns a new Extent with x and y offsets.
 * @param {number} dx The offset distance in map units for the x-coordinate.
 * @param {number} dy The offset distance in map units for the y-coordinate.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.offset = function(dx, dy) {};

/**
 * Returns an extent with a spatial reference with a custom shifted central meridian if the extent intersects the dateline.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.shiftCentralMeridian = function() {};

/**
 * Expands this extent to include the extent of the argument.NOTE: Performing a Union returns a new extent as opposed to modifying the existing extent.
 * @param {!Extent} extent The minx, miny, maxx, and maxy bounding box.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.union = function(extent) {};

/**
 * Updates this extent with the specified parameters.
 * @param {number} xmin Bottom-left X-coordinate of an extent envelope.
 * @param {number} ymin Bottom-left Y-coordinate of an extent envelope.
 * @param {number} xmax Top-right X-coordinate of an extent envelope.
 * @param {number} ymax Top-right Y-coordinate of an extent envelope.
 * @param {!SpatialReference} spatialReference Spatial reference of the geometry.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Extent.Extent.prototype.update = function(xmin, ymin, xmax, ymax, spatialReference) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_Extent */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/Geometry"
/** @const */
tsickle_declare_module.esri_geometry_Geometry = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Geometry */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_geometry_Geometry.Geometry = function() {};
 /** @type {?} */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.cache;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.spatialReference;
 /** @type {string} */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.type;

/**
 * Sets the cache property to undefined.
 * @return {void}
 */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.clearCache = function() {};

/**
 * Returns the value for a named property stored in the cache.
 * @param {string} name The property name of the value to retrieve from the cache.
 * @return {?}
 */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.getCacheValue = function(name) {};

/**
 * Sets the value for a named property stored in the cache.
 * @param {string} name The property name for the value Object to store in the cache.
 * @param {?} value The value Object for a named property to store in the cache.
 * @return {void}
 */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.setCacheValue = function(name, value) {};

/**
 * Sets the spatial reference.
 * @param {!SpatialReference} sr Spatial reference of the geometry.
 * @return {!Geometry}
 */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.setSpatialReference = function(sr) {};

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_geometry_Geometry.Geometry.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_Geometry */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/Multipoint"
/** @const */
tsickle_declare_module.esri_geometry_Multipoint = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Multipoint */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Multipoint */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Multipoint */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Multipoint */

/**
 * @constructor
 * @struct
 * Creates a new Multipoint object.
 * Creates a new Multipoint object using a JSON object.
 * @param {!SpatialReference|!Object} spatialReference_or_json Spatial reference of the geometry. / JSON object representing the geometry.
 */
tsickle_declare_module.esri_geometry_Multipoint.Multipoint = function(spatialReference_or_json) {};
 /** @type {!Array<!Array<number>>} */
tsickle_declare_module.esri_geometry_Multipoint.Multipoint.prototype.points;

/**
 * Adds a point to the Multipoint.
 * @param {(!Point|!Array<number>)} point The point to add.
 * @return {!Multipoint}
 */
tsickle_declare_module.esri_geometry_Multipoint.Multipoint.prototype.addPoint = function(point) {};

/**
 * Gets the extent of all the points.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Multipoint.Multipoint.prototype.getExtent = function() {};

/**
 * Returns the point at the specified index.
 * @param {number} index Positional index of the point in the points property.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Multipoint.Multipoint.prototype.getPoint = function(index) {};

/**
 * Removes a point from the Multipoint.
 * @param {number} index The index of the point to remove.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Multipoint.Multipoint.prototype.removePoint = function(index) {};

/**
 * Updates the point at the specified index.
 * @param {number} index Positional index of the point in the points property.
 * @param {!Point} point Point that specifies the new location.
 * @return {!Multipoint}
 */
tsickle_declare_module.esri_geometry_Multipoint.Multipoint.prototype.setPoint = function(index, point) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_Multipoint */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/Point"
/** @const */
tsickle_declare_module.esri_geometry_Point = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Point */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Point */

/**
 * @constructor
 * @struct
 * Creates a new Point object using x, y, and a spatial reference.
 * Creates a new Point object using an array containing an x,y coordinate value and a spatial reference.
 * Creates a new Point object using a JSON object.
 * Create a point object and initialize it with specified longitude and latitude.
 * Create a point object and initialize it with an array containing longitude and latitude values.
 * Create a point object and initialize it with an object that has latitude and longitude properties.
 * @param {number|!Array<number>|!Object|?} x_or_coords_or_json_or_long_or_point X-coordinate of a point in map units. / An array that includes an x,y coordinate. / A JSON object that contains an x,y coordinate. / Longitude value. / An input array containing the longitude and latitude values for the point. / An object with latitude and longitude properties.
 * @param {number|!SpatialReference=} y_or_spatialReference_or_lat Y-coordinate of a point in map units. / Spatial reference of the geometry. / Latitude value.
 * @param {!SpatialReference=} spatialReference Spatial reference of the geometry.
 */
tsickle_declare_module.esri_geometry_Point.Point = function(x_or_coords_or_json_or_long_or_point, y_or_spatialReference_or_lat, spatialReference) {};
 /** @type {number} */
tsickle_declare_module.esri_geometry_Point.Point.prototype.x;
 /** @type {number} */
tsickle_declare_module.esri_geometry_Point.Point.prototype.y;

/**
 * Returns the latitude coordinate for this point if the spatial reference of the point is Web Mercator or Geographic (4326).
 * @return {number}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.getLatitude = function() {};

/**
 * Returns the longitude coordinate for this point if the spatial reference of the point is Web Mercator or Geographic (4326).
 * @return {number}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.getLongitude = function() {};

/**
 * Shifts the x coordinate to within +/- 180 span.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.normalize = function() {};

/**
 * Returns a new Point with x and y offsets.
 * @param {number} dx The offset distance in map units from the x-coordinate.
 * @param {number} dy The offset distance in map units from the y-coordinate.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.offset = function(dx, dy) {};

/**
 * Sets the latitude coordinate for this point to the specified value if the point's spatial reference is Web Mercator or Geographic (4326).
 * @param {number} lat A valid latitude value.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.setLatitude = function(lat) {};

/**
 * Sets the longitude coordinate for this point to the specified value if the point's spatial reference is Web Mercator or Geographic (4326).
 * @param {number} lon A valid longitude value.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.setLongitude = function(lon) {};

/**
 * Sets x-coordinate of point.
 * @param {number} x Value for x-coordinate of point.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.setX = function(x) {};

/**
 * Sets y-coordinate of point.
 * @param {number} y Value for y-coordinate of point.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.setY = function(y) {};

/**
 * Updates a point.
 * @param {number} x X-coordinate of the updated point.
 * @param {number} y Y-coordinate of the updated point.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Point.Point.prototype.update = function(x, y) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_Point */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/Polygon"
/** @const */
tsickle_declare_module.esri_geometry_Polygon = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polygon */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polygon */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polygon */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polygon */

/**
 * @constructor
 * @struct
 * Creates a new Polygon object.
 * Creates a new Polygon object using a JSON object.
 * Create a new polygon by providing an array of geographic coordinate pairs.
 * @param {!SpatialReference|!Object|(!Array<!Array<number>>|!Array<!Array<!Array<number>>>)} spatialReference_or_json_or_coordinates Spatial reference of the geometry. / JSON object representing the geometry. / An array of geographic coordinates that define the polygon.
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon = function(spatialReference_or_json_or_coordinates) {};
 /** @type {!Array<!Array<!Array<number>>>} */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.rings;

/**
 * Adds a ring to the Polygon.
 * @param {(!Array<!Point>|!Array<!Array<number>>)} ring A polygon ring.
 * @return {!Polygon}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.addRing = function(ring) {};

/**
 * Checks on the client if the specified point is inside the polygon.
 * @param {!Point} point The location defined by an X- and Y- coordinate in map units.
 * @return {boolean}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.contains = function(point) {};

/**
 * Returns a new Polygon with one ring containing points equivalent to the coordinates of the extent.
 * @param {!Extent} extent The Extent geometry to convert to a Polygon.
 * @return {!Polygon}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.fromExtent = function(extent) {};

/**
 * Returns the centroid of the polygon as defined here.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.getCentroid = function() {};

/**
 * Returns the extent of the polygon.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.getExtent = function() {};

/**
 * Returns a point specified by a ring and point in the path.
 * @param {number} ringIndex The index of a ring.
 * @param {number} pointIndex The index of a point in a ring.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.getPoint = function(ringIndex, pointIndex) {};

/**
 * Inserts a new point into a polygon.
 * @param {number} ringIndex Ring index to insert point.
 * @param {number} pointIndex The index of the inserted point in the ring.
 * @param {!Point} point Point to insert into the ring.
 * @return {!Polygon}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.insertPoint = function(ringIndex, pointIndex, point) {};

/**
 * Checks if a Polygon ring is clockwise.
 * @param {(!Array<!Point>|!Array<!Array<number>>)} ring A polygon ring.
 * @return {boolean}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.isClockwise = function(ring) {};

/**
 * When true, the polygon is self-intersecting which means that the ring of the polygon crosses itself.
 * @param {!Polygon} polygon The polygon to test for self-intersection.
 * @return {boolean}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.isSelfIntersecting = function(polygon) {};

/**
 * Remove a point from the polygon at the given pointIndex within the ring identified by ringIndex.
 * @param {number} ringIndex The index of the ring containing the point.
 * @param {number} pointIndex The index of the point within the ring.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.removePoint = function(ringIndex, pointIndex) {};

/**
 * Removes a ring from the Polygon.
 * @param {number} ringIndex The index of the ring to remove.
 * @return {!Array<!Point>}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.removeRing = function(ringIndex) {};

/**
 * Updates a point in a polygon.
 * @param {number} ringIndex Ring index for updated point.
 * @param {number} pointIndex The index of the updated point in the ring.
 * @param {!Point} point Point to update in the ring.
 * @return {!Polygon}
 */
tsickle_declare_module.esri_geometry_Polygon.Polygon.prototype.setPoint = function(ringIndex, pointIndex, point) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_Polygon */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/Polyline"
/** @const */
tsickle_declare_module.esri_geometry_Polyline = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polyline */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polyline */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polyline */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_Polyline */

/**
 * @constructor
 * @struct
 * Creates a new Polyline object.
 * Creates a new Polyline object using a JSON object.
 * Create a new polyline by providing an array of geographic coordinates.
 * @param {!SpatialReference|!Object|(!Array<!Array<number>>|!Array<!Array<!Array<number>>>)} spatialReference_or_json_or_coordinates Spatial reference of the geometry. / JSON object representing the geometry. / An array of geographic coordinates that define the polyline.
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline = function(spatialReference_or_json_or_coordinates) {};
 /** @type {!Array<!Array<!Array<number>>>} */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.paths;

/**
 * Adds a path to the Polyline.
 * @param {(!Array<!Point>|!Array<!Array<number>>)} path Path to add to the Polyline.
 * @return {!Polyline}
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.addPath = function(path) {};

/**
 * Returns the extent of the Polyline.
 * @return {!Extent}
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.getExtent = function() {};

/**
 * Returns a point specified by a path and point in the path.
 * @param {number} pathIndex The index of a path in a polyline.
 * @param {number} pointIndex The index of a point in a path.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.getPoint = function(pathIndex, pointIndex) {};

/**
 * Inserts a new point into a polyline.
 * @param {number} pathIndex Path index to insert point.
 * @param {number} pointIndex The index of the inserted point in the path.
 * @param {!Point} point Point to insert into the path.
 * @return {!Polyline}
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.insertPoint = function(pathIndex, pointIndex, point) {};

/**
 * Removes a path from the Polyline.
 * @param {number} pathIndex The index of a path to remove.
 * @return {!Array<!Point>}
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.removePath = function(pathIndex) {};

/**
 * Remove a point from the polyline at the given pointIndex within the path identified by the given pathIndex.
 * @param {number} pathIndex The index of the path containing the point.
 * @param {number} pointIndex The index of the point within the path.
 * @return {!Point}
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.removePoint = function(pathIndex, pointIndex) {};

/**
 * Updates a point in a polyline.
 * @param {number} pathIndex Path index for updated point.
 * @param {number} pointIndex The index of the updated point in the path.
 * @param {!Point} point Point to update in the path.
 * @return {!Polyline}
 */
tsickle_declare_module.esri_geometry_Polyline.Polyline.prototype.setPoint = function(pathIndex, pointIndex, point) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_Polyline */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/ScreenPoint"
/** @const */
tsickle_declare_module.esri_geometry_ScreenPoint = {};

/**
 * @constructor
 * @struct
 * Creates a new ScreenPoint object with X-, Y- coordinates.
 * Creates a new ScreenPoint object with an array containing X-, Y- coordinates.
 * Creates a new ScreenPoint object with a JSON object.
 * @param {number|!Array<number>|!Object} x_or_coords_or_json X-coordinate relative to the top-left corner of the map control in pixels. / An array that includes X-, Y- coordinates. / A JSON object that includes X-, Y- coordinates.
 * @param {number=} y Y-coordinate relative to the top-left corner of the map control in pixels.
 */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint = function(x_or_coords_or_json, y) {};
 /** @type {number} */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint.prototype.x;
 /** @type {number} */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint.prototype.y;

/**
 * Offsets the point in an x and y direction.
 * @param {number} dx Value for x-coordinate of point.
 * @param {number} dy Value for y-coordinate of point.
 * @return {!ScreenPoint}
 */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint.prototype.offset = function(dx, dy) {};

/**
 * Sets x-coordinate of point.
 * @param {number} x Value for x-coordinate of point.
 * @return {!ScreenPoint}
 */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint.prototype.setX = function(x) {};

/**
 * Sets y-coordinate of point.
 * @param {number} y Value for y-coordinate of point.
 * @return {!ScreenPoint}
 */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint.prototype.setY = function(y) {};

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint.prototype.toJson = function() {};

/**
 * Updates a ScreenPoint.
 * @param {number} x X-coordinate relative to the top-left corner of the map control in pixels.
 * @param {number} y Y-coordinate relative to the top-left corner of the map control in pixels.
 * @return {!ScreenPoint}
 */
tsickle_declare_module.esri_geometry_ScreenPoint.ScreenPoint.prototype.update = function(x, y) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_ScreenPoint */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/geodesicUtils"
/** @const */
tsickle_declare_module.esri_geometry_geodesicUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geodesicUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geodesicUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geodesicUtils */
 /** @type {{geodesicAreas: function(!Array<!Polygon>, string): !Array<number>, geodesicDensify: function(!Geometry, number): !Geometry, geodesicLengths: function(!Array<!Polyline>, string): !Array<number>}} */
tsickle_declare_module.esri_geometry_geodesicUtils.geodesicUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_geodesicUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/geometryEngine"
/** @const */
tsickle_declare_module.esri_geometry_geometryEngine = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngine */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngine */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngine */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngine */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngine */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngine */
 /** @type {{buffer: function((!Geometry|!Array<!Geometry>), (number|!Array<number>), (string|number), boolean): (!Polygon|!Array<!Polygon>), clip: function(!Geometry, !Extent): !Geometry, contains: function(!Geometry, !Geometry): boolean, convexHull: function((!Geometry|!Array<!Geometry>), boolean): (!Geometry|!Array<!Geometry>), crosses: function(!Geometry, !Geometry): boolean, cut: function(!Geometry, !Polyline): !Array<!Geometry>, densify: function(!Geometry, number, (string|number)): !Geometry, difference: function((!Geometry|!Array<!Geometry>), !Geometry): (!Geometry|!Array<!Geometry>), disjoint: function(!Geometry, !Geometry): boolean, distance: function(!Geometry, !Geometry, (string|number)): number, equals: function(!Geometry, !Geometry): boolean, extendedSpatialReferenceInfo: function(!SpatialReference): ?, flipHorizontal: function(!Geometry, !Point): !Geometry, flipVertical: function(!Geometry, !Point): !Geometry, generalize: function(!Geometry, number, boolean, (string|number)): !Geometry, geodesicArea: function(!Geometry, (string|number)): number, geodesicBuffer: function((!Geometry|!Array<!Geometry>), (number|!Array<number>), (string|number), boolean): (!Polygon|!Array<!Polygon>), geodesicDensify: function((!Polyline|!Polygon), number, number): !Geometry, geodesicLength: function(!Geometry, (string|number)): number, intersect: function((!Geometry|!Array<!Geometry>), !Geometry): (!Geometry|!Array<!Geometry>), intersects: function(!Geometry, !Geometry): boolean, isSimple: function(!Geometry): boolean, nearestCoordinate: function(!Geometry, !Point): ?, nearestVertex: function(!Geometry, !Point): ?, nearestVertices: function(!Geometry, !Point, number, number): !Array<?>, offset: function((!Geometry|!Array<!Geometry>), number, (string|number), string, number, number): (!Geometry|!Array<!Geometry>), overlaps: function(!Geometry, !Geometry): boolean, planarArea: function(!Geometry, (string|number)): number, planarLength: function(!Geometry, (string|number)): number, relate: function(!Geometry, !Geometry, string): boolean, rotate: function(!Geometry, number, !Point): !Geometry, simplify: function(!Geometry): !Geometry, symmetricDifference: function((!Geometry|!Array<!Geometry>), !Geometry): (!Geometry|!Array<!Geometry>), touches: function(!Geometry, !Geometry): boolean, union: function(!Array<!Geometry>): !Geometry, within: function(!Geometry, !Geometry): boolean}} */
tsickle_declare_module.esri_geometry_geometryEngine.geometryEngine;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_geometryEngine */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/geometryEngineAsync"
/** @const */
tsickle_declare_module.esri_geometry_geometryEngineAsync = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngineAsync */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngineAsync */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngineAsync */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngineAsync */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngineAsync */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_geometryEngineAsync */
 /** @type {{buffer: function((!Geometry|!Array<!Geometry>), (number|!Array<number>), (string|number), boolean): ?, clip: function(!Geometry, !Extent): ?, contains: function(!Geometry, !Geometry): ?, convexHull: function((!Geometry|!Array<!Geometry>), boolean): ?, crosses: function(!Geometry, !Geometry): ?, cut: function(!Geometry, !Polyline): ?, densify: function(!Geometry, number, (string|number)): ?, difference: function((!Geometry|!Array<!Geometry>), !Geometry): ?, disjoint: function(!Geometry, !Geometry): ?, distance: function(!Geometry, !Geometry, (string|number)): ?, equals: function(!Geometry, !Geometry): ?, extendedSpatialReferenceInfo: function(!SpatialReference): ?, flipHorizontal: function(!Geometry, !Point): ?, flipVertical: function(!Geometry, !Point): ?, generalize: function(!Geometry, number, boolean, (string|number)): ?, geodesicArea: function(!Geometry, (string|number)): ?, geodesicBuffer: function((!Geometry|!Array<!Geometry>), (number|!Array<number>), (string|number), boolean): ?, geodesicDensify: function((!Polyline|!Polygon), number, number): ?, geodesicLength: function(!Geometry, (string|number)): ?, intersect: function((!Geometry|!Array<!Geometry>), !Geometry): ?, intersects: function(!Geometry, !Geometry): ?, isSimple: function(!Geometry): ?, nearestCoordinate: function(!Geometry, !Point): ?, nearestVertex: function(!Geometry, !Point): ?, nearestVertices: function(!Geometry, !Point, number, number): ?, offset: function((!Geometry|!Array<!Geometry>), number, (string|number), string, number, number): ?, overlaps: function(!Geometry, !Geometry): ?, planarArea: function(!Geometry, (string|number)): ?, planarLength: function(!Geometry, (string|number)): ?, relate: function(!Geometry, !Geometry, string): ?, rotate: function(!Geometry, number, !Point): ?, simplify: function(!Geometry): ?, symmetricDifference: function((!Geometry|!Array<!Geometry>), !Geometry): ?, touches: function(!Geometry, !Geometry): ?, union: function(!Array<!Geometry>): ?, within: function(!Geometry, !Geometry): ?}} */
tsickle_declare_module.esri_geometry_geometryEngineAsync.geometryEngineAsync;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_geometryEngineAsync */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/jsonUtils"
/** @const */
tsickle_declare_module.esri_geometry_jsonUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_jsonUtils */
 /** @type {{fromJson: function(!Object): !Geometry, getJsonType: function(!Geometry): string}} */
tsickle_declare_module.esri_geometry_jsonUtils.jsonUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_jsonUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/mathUtils"
/** @const */
tsickle_declare_module.esri_geometry_mathUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_mathUtils */
 /** @type {{getLength: function(!Point, !Point): number, getLineIntersection: function(!Point, !Point, !Point, !Point): !Point}} */
tsickle_declare_module.esri_geometry_mathUtils.mathUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_mathUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/normalizeUtils"
/** @const */
tsickle_declare_module.esri_geometry_normalizeUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_normalizeUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_normalizeUtils */
 /** @type {{normalizeCentralMeridian: function(!Array<!Geometry>, !GeometryService, !Function, !Function): ?}} */
tsickle_declare_module.esri_geometry_normalizeUtils.normalizeUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_normalizeUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/scaleUtils"
/** @const */
tsickle_declare_module.esri_geometry_scaleUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_scaleUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_scaleUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_scaleUtils */
 /** @type {{getExtentForScale: function(!Map, number): !Extent, getScale: function(!Map): number, getUnitValueForSR: function((string|number|!SpatialReference)): number}} */
tsickle_declare_module.esri_geometry_scaleUtils.scaleUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_scaleUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/screenUtils"
/** @const */
tsickle_declare_module.esri_geometry_screenUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_screenUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_screenUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_screenUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_screenUtils */
 /** @type {{toMapGeometry: function(!Extent, number, number, !Geometry): !Geometry, toMapPoint: function(!Extent, number, number, !ScreenPoint): !Point, toScreenGeometry: function(!Extent, number, number, !Geometry): !Geometry, toScreenPoint: function(!Extent, number, number, !Point): !ScreenPoint}} */
tsickle_declare_module.esri_geometry_screenUtils.screenUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_screenUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/geometry/webMercatorUtils"
/** @const */
tsickle_declare_module.esri_geometry_webMercatorUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_webMercatorUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_geometry_webMercatorUtils */
 /** @type {{canProject: function(?, ?): boolean, geographicToWebMercator: function(!Geometry): !Geometry, lngLatToXY: function(number, number): !Array<number>, project: function(!Geometry, ?): ?, webMercatorToGeographic: function(!Geometry, boolean): !Geometry, xyToLngLat: function(number, number): !Array<number>}} */
tsickle_declare_module.esri_geometry_webMercatorUtils.webMercatorUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_geometry_webMercatorUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/graphic"
/** @const */
tsickle_declare_module.esri_graphic = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_graphic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_graphic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_graphic */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_graphic */

/**
 * @constructor
 * @struct
 * Creates a new Graphic object.
 * Creates a new Graphic object using a JSON object.
 * @param {!Geometry|!Object=} geometry_or_json The geometry that defines the graphic. / JSON object representing the graphic.
 * @param {!Symbol=} symbol Symbol used for drawing the graphic.
 * @param {?=} attributes Name value pairs of fields and field values associated with the graphic.
 * @param {!InfoTemplate=} infoTemplate The content for display in an InfoWindow.
 */
tsickle_declare_module.esri_graphic.Graphic = function(geometry_or_json, symbol, attributes, infoTemplate) {};
 /** @type {?} */
tsickle_declare_module.esri_graphic.Graphic.prototype.attributes;
 /** @type {!Geometry} */
tsickle_declare_module.esri_graphic.Graphic.prototype.geometry;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri_graphic.Graphic.prototype.infoTemplate;
 /** @type {!Symbol} */
tsickle_declare_module.esri_graphic.Graphic.prototype.symbol;
 /** @type {boolean} */
tsickle_declare_module.esri_graphic.Graphic.prototype.visible;

/**
 * Adds a new attribute or changes the value of an existing attribute on the graphic's DOM node.
 * @param {string} name The name of the attribute.
 * @param {string} value The value of the attribute.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.attr = function(name, value) {};

/**
 * Draws the graphic.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.draw = function() {};

/**
 * Returns the content string based on attributes and infoTemplate values.
 * @return {string}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getContent = function() {};

/**
 * Returns the dojo/gfx/shape.Shape of the Esri graphic.
 * @return {?}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getDojoShape = function() {};

/**
 * Returns the info template associated with the graphic.
 * @return {!InfoTemplate}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getInfoTemplate = function() {};

/**
 * Returns a reference to the associated layer.
 * @return {!Layer}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getLayer = function() {};

/**
 * Returns the DOM node used to draw the graphic.
 * @return {?}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getNode = function() {};

/**
 * Returns one or more DOM nodes used to draw the graphic.
 * @return {?}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getNodes = function() {};

/**
 * Returns the dojox/gfx/shape.Shape of the Esri graphic.
 * @return {?}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getShape = function() {};

/**
 * Returns one or more dojox/gfx/shape.Shape used to draw the graphic.
 * @return {!Array<?>}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getShapes = function() {};

/**
 * In contrast to the getLayer method, getSouceLayer does not change when a graphic is added to another layer.
 * @return {!Layer}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getSourceLayer = function() {};

/**
 * Returns the title string based on attributes and infoTemplate values.
 * @return {string}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.getTitle = function() {};

/**
 * Hides the graphic.
 * @return {void}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.hide = function() {};

/**
 * Defines the attributes of the graphic.
 * @param {?} attributes The name value pairs of fields and field values associated with the graphic.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.setAttributes = function(attributes) {};

/**
 * Defines the geometry of the graphic.
 * @param {!Geometry} geometry The geometry that defines the graphic.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.setGeometry = function(geometry) {};

/**
 * Defines the InfoTemplate for the InfoWindow of the graphic.
 * @param {!InfoTemplate} infoTemplate The content for display in an InfoWindow.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.setInfoTemplate = function(infoTemplate) {};

/**
 * Sets the symbol of the graphic.
 * @param {!Symbol} symbol The symbol for the graphic.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.setSymbol = function(symbol) {};

/**
 * Shows the graphic.
 * @return {void}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.show = function() {};

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_graphic.Graphic.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_graphic */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/graphicsUtils"
/** @const */
tsickle_declare_module.esri_graphicsUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_graphicsUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_graphicsUtils */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_graphicsUtils */
 /** @type {{getGeometries: function(!Array<!Graphic>): !Array<!Geometry>, graphicsExtent: function(!Array<!Graphic>): !Extent}} */
tsickle_declare_module.esri_graphicsUtils.graphicsUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_graphicsUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/kernel"
/** @const */
tsickle_declare_module.esri_kernel = {};
 /** @type {{version: string}} */
tsickle_declare_module.esri_kernel.kernel;

/* TODO: ExportAssignment in tsickle_declare_module.esri_kernel */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/lang"
/** @const */
tsickle_declare_module.esri_lang = {};
 /** @type {{filter: function(?, !Function, ?): ?, isDefined: function(?): boolean, stripTags: function(?): ?, substitute: function(?, string, boolean): string, valueOf: function(!Array<?>, ?): ?}} */
tsickle_declare_module.esri_lang.lang;

/* TODO: ExportAssignment in tsickle_declare_module.esri_lang */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/ArcGISDynamicMapServiceLayer"
/** @const */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */

/**
 * @constructor
 * @struct
 * Creates a new ArcGISDynamicMapServiceLayer object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a map service.
 * @param {!ArcGISDynamicMapServiceLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.attributionDataUrl;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.capabilities;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.copyright;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.description;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.disableClientCaching;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.dpi;
 /** @type {!Array<!DynamicLayerInfo>} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.dynamicLayerInfos;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.gdbVersion;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.hasAttributionData;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.imageFormat;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.imageTransparency;
 /** @type {?} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.infoTemplates;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.layerDefinitions;
 /** @type {!Array<!LayerDrawingOptions>} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.layerDrawingOptions;
 /** @type {!Array<!LayerInfo>} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.layerInfos;
 /** @type {!Array<!LayerTimeOptions>} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.layerTimeOptions;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.maxImageHeight;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.maxImageWidth;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.maxRecordCount;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.minScale;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.supportsDynamicLayers;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.suspended;
 /** @type {!TimeInfo} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.timeInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.units;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.useMapImage;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.version;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.visibleAtMapScale;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.visibleLayers;

/**
 * Create an array of DynamicLayerInfos based on the current set of LayerInfo.
 * @return {!Array<!DynamicLayerInfo>}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.createDynamicLayerInfosFromLayerInfos = function() {};

/**
 * Exports a map using values as specified by ImageParameters.
 * @param {!ImageParameters=} imageParameters Input parameters assigned before exporting the map image.
 * @param {!Function=} callback The function to call when the method has completed.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.exportMapImage = function(imageParameters, callback) {};

/**
 * Asynchronously returns custom data for the layer when available.
 * @return {?}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.getAttributionData = function() {};

/**
 * Returns true if the layer is visible at the given scale.
 * @param {number} scale The scale at which to check if the layer is visible.
 * @return {boolean}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.isVisibleAtScale = function(scale) {};

/**
 * Resumes layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.resume = function() {};

/**
 * Resets all layer definitions to those defined in the service.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setDefaultLayerDefinitions = function(doNotRefresh) {};

/**
 * Clears the visible layers as defined in setVisibleLayers, and resets to the default layers of the map service.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setDefaultVisibleLayers = function(doNotRefresh) {};

/**
 * Sets whether images are always requested from the server and the browser's cache is ignored.
 * @param {boolean} disable When true, client side caching is disabled.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setDisableClientCaching = function(disable) {};

/**
 * Sets the dpi of the exported map.
 * @param {number} dpi DPI value.
 * @param {boolean=} doNotRefresh Added at version 2.2 When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setDPI = function(dpi, doNotRefresh) {};

/**
 * Specify an array of DynamicLayerInfos used to change the layer ordering or to redefine the map.
 * @param {!Array<!DynamicLayerInfo>} dynamicLayerInfos An array of dynamic layer infos.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setDynamicLayerInfos = function(dynamicLayerInfos, doNotRefresh) {};

/**
 * Set the version for the ArcGIS DynamicMapServiceLayer.
 * @param {string} gdbVersion The name of the version to display.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setGDBVersion = function(gdbVersion, doNotRefresh) {};

/**
 * Sets the image format of the exported map.
 * @param {string} imageFormat Valid values are png | png8 | png24 | png32 | jpg | pdf | bmp | gif | svg.
 * @param {boolean=} doNotRefresh Added at version 2.2 When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setImageFormat = function(imageFormat, doNotRefresh) {};

/**
 * Sets the background of a dynamic image to transparent.
 * @param {boolean} transparent Valid values are true | false.
 * @param {boolean=} doNotRefresh Added at version 2.2 When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setImageTransparency = function(transparent, doNotRefresh) {};

/**
 * Set the infoTemplates property.
 * @param {?} infoTemplates infoTemplates object.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setInfoTemplates = function(infoTemplates) {};

/**
 * Sets the layer definitions used to filter the features of individual layers in the map service.
 * @param {!Array<string>} layerDefinitions An array containing each layer's definition.
 * @param {boolean=} doNotRefresh Added at version 2.2 When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setLayerDefinitions = function(layerDefinitions, doNotRefresh) {};

/**
 * Specify an array of LayerDrawingOptions that override the way the layers are drawn.
 * @param {!Array<!LayerDrawingOptions>} layerDrawingOptions An array of layer drawing options.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setLayerDrawingOptions = function(layerDrawingOptions, doNotRefresh) {};

/**
 * Sets the time-related options for the layer.
 * @param {!Array<!LayerTimeOptions>} options Array of LayerTimeOptions objects that allow you to override how a layer is exported in reference to the map's time extent.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setLayerTimeOptions = function(options, doNotRefresh) {};

/**
 * Set the maximum scale for the layer.
 * @param {number} scale The maximum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setMaxScale = function(scale) {};

/**
 * Set the minimum scale for the layer.
 * @param {number} scale The minimum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setMinScale = function(scale) {};

/**
 * Set the scale range for the layer.
 * @param {number} minScale The minimum scale at which the layer is visible.
 * @param {number} maxScale The maximum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setScaleRange = function(minScale, maxScale) {};

/**
 * Determine if the layer will update its content based on the map's current time extent.
 * @param {boolean} update When false the layer will not update its content based on the map's time extent.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setUseMapTime = function(update) {};

/**
 * Sets the visible layers of the exported map.
 * @param {!Array<number>} ids Array of layer IDs.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.setVisibleLayers = function(ids, doNotRefresh) {};

/**
 * Suspends layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.suspend = function() {};

/**
 * Fired when the geodatabase version is switched.
 * Fires when the map export is completed.
 * Fires when a layer resumes drawing.
 * Fires when a layer's minScale and/or maxScale is changed.
 * Fires when a layer's scale visibility changes.
 * Fires when a layer suspends drawing.
 * Fires when the visibleLayers property is changed.
 * @param {string} type
 * @param {function({target: !ArcGISDynamicMapServiceLayer}): void|function({mapImage: !MapImage, target: !ArcGISDynamicMapServiceLayer}): void|function({visibleLayers: !Array<number>, target: !ArcGISDynamicMapServiceLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer.ArcGISDynamicMapServiceLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_ArcGISDynamicMapServiceLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/ArcGISImageServiceLayer"
/** @const */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */

/**
 * @constructor
 * @struct
 * Creates a new ArcGISImageServiceLayer object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a map service.
 * @param {!ArcGISImageServiceLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer = function(url, options) {};
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.bandCount;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.bandIds;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.bands;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.compressionQuality;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.copyrightText;
 /** @type {!MosaicRule} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.defaultMosaicRule;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.description;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.disableClientCaching;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.format;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.infoTemplate;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.interpolation;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.maxImageHeight;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.maxImageWidgth;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.maxRecordCount;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.minScale;
 /** @type {!MosaicRule} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.mosaicRule;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.pixelSizeX;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.pixelSizeY;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.pixelType;
 /** @type {!RasterFunction} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.renderingRule;
 /** @type {!TimeInfo} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.timeInfo;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.useMapImage;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.version;

/**
 * Exports a map using values as specified by ImageServiceParameters.
 * @param {!ImageServiceParameters=} imageServiceParameters Input parameters assigned before exporting the map image.
 * @param {!Function=} callback The function to call when the method has completed.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.exportMapImage = function(imageServiceParameters, callback) {};

/**
 * Returns the current definition expression.
 * @return {string}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.getDefinitionExpression = function() {};

/**
 * Get key properties of an ImageService including information such as the band names associated with the imagery.
 * @return {?}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.getKeyProperties = function() {};

/**
 * Asynchronously returns the raster attribute table of an ImageService which returns categorical mapping of pixel values (e.g.
 * @return {?}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.getRasterAttributeTable = function() {};

/**
 * Gets the currently visible rasters.
 * @return {!Array<!Graphic>}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.getVisibleRasters = function() {};

/**
 * Returns the rasters that are visible in the area defined by the geometry (required to be point or polygon) in the query parameter.
 * @param {!Query} query The esri.tasks.Query to be passed as the input to query visible rasters.
 * @param {?=} options Options for query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {string=} errback The function to call when an error occurs.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.queryVisibleRasters = function(query, options, callback, errback) {};

/**
 * Sets the R,G,B of the exported image to the appropriate ImageService Band ID.
 * @param {!Array<number>} bandIds Array of band IDs to use in the exported image.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setBandIds = function(bandIds, doNotRefresh) {};

/**
 * Sets the compression quality of the exported image.
 * @param {number} quality A value from 0 to 100.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setCompressionQuality = function(quality, doNotRefresh) {};

/**
 * Sets the definition expression for the ImageService Layer.
 * @param {string} expression The definition expression to be set.
 * @param {boolean} doNotRefresh Whether or not the expression definition will be refreshed.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setDefinitionExpression = function(expression, doNotRefresh) {};

/**
 * Sets whether images are always requested from the server and the browser's cache is ignored.
 * @param {boolean} disable When true, browser client side caching is disabled.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setDisableClientCaching = function(disable) {};

/**
 * Set the image format.
 * @param {string} imageFormat Valid values are png | png8 | png24 |   jpg | pdf | bmp | gif | svg.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setImageFormat = function(imageFormat, doNotRefresh) {};

/**
 * Specify or change the info template for a layer.
 * @param {!InfoTemplate} infoTemplate The content for display in an InfoWindow.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setInfoTemplate = function(infoTemplate) {};

/**
 * Sets the interpolation method.
 * @param {string} interpolation Interpolation value defined in ImageServiceParameters Constants Table.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setInterpolation = function(interpolation, doNotRefresh) {};

/**
 * Sets the mosaic rule of the layer to the specified value.
 * @param {!MosaicRule} mosaicRule The mosaic rule.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setMosaicRule = function(mosaicRule, doNotRefresh) {};

/**
 * Sets the rendering rule of the layer to the given value.
 * @param {!RasterFunction} renderingRule The new rendering rule.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setRenderingRule = function(renderingRule, doNotRefresh) {};

/**
 * Determine if the layer will update its content based on the map's current time extent.
 * @param {boolean} update When false the layer will not update its content based on the map's time extent.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.setUseMapTime = function(update) {};

/**
 * Fires when the map export is completed.
 * Fired when the layers mosaic rule is changed.
 * Fired when the layers band ids are changed or if a raster function is applied.
 * @param {string} type
 * @param {function({mapImage: !MapImage, target: !ArcGISImageServiceLayer}): void|function({target: !ArcGISImageServiceLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceLayer.ArcGISImageServiceLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_ArcGISImageServiceLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/ArcGISImageServiceVectorLayer"
/** @const */
tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer */

/**
 * @constructor
 * @struct
 * Creates a new ArcGISImageServiceLayer object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents an image service vector layer service.
 * @param {!ArcGISImageServiceVectorLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer.ArcGISImageServiceVectorLayer = function(url, options) {};

/**
 * Returns the flow direction of the data as determined by the service via key properties.
 * @return {string}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer.ArcGISImageServiceVectorLayer.prototype.getFlowRepresentation = function() {};

/**
 * Sets the renderer for the layer.
 * @param {!Renderer} renderer The renderer object to apply to the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer.ArcGISImageServiceVectorLayer.prototype.setRenderer = function(renderer) {};

/**
 * Enables the layer to update its content based on the map's current time extent.
 * @param {boolean} update A value of true allows the layer to use the map's time extent to update layer content.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer.ArcGISImageServiceVectorLayer.prototype.setUseMapTime = function(update) {};

/**
 * Set the default renderer from a list of predefined options.
 * @param {string} style The default renderer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer.ArcGISImageServiceVectorLayer.prototype.setVectorRendererStyle = function(style) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_ArcGISImageServiceVectorLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/ArcGISTiledMapServiceLayer"
/** @const */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer */

/**
 * @constructor
 * @struct
 * Creates a new ArcGISTiledMapServiceLayer object.
 * @param {string} url URL to the ArcGIS Server REST resource at represents a map service.
 * @param {!ArcGISTiledMapServiceLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.attributionDataUrl;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.capabilities;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.copyright;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.description;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.hasAttributionData;
 /** @type {?} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.infoTemplates;
 /** @type {!Array<!LayerInfo>} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.layerInfos;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.maxImageHeight;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.maxImageWidth;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.maxRecordCount;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.minScale;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.suspended;
 /** @type {!TimeInfo} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.timeInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.units;
 /** @type {number} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.version;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.visibleAtMapScale;

/**
 * Asynchronously returns custom data for the layer when available.
 * @return {?}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.getAttributionData = function() {};

/**
 * Returns true if the layer is visible at the given scale.
 * @param {number} scale The scale at which to check if the layer is visible.
 * @return {boolean}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.isVisibleAtScale = function(scale) {};

/**
 * Resumes layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.resume = function() {};

/**
 * Set the infoTemplates property.
 * @param {?} infoTemplates infoTemplates object.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.setInfoTemplates = function(infoTemplates) {};

/**
 * Set the maximum scale for the layer.
 * @param {number} scale The maximum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.setMaxScale = function(scale) {};

/**
 * Set the minimum scale for the layer.
 * @param {number} scale The minimum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.setMinScale = function(scale) {};

/**
 * Set the scale range for the layer.
 * @param {number} minScale The minimum scale at which the layer is visible.
 * @param {number} maxScale The maximum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.setScaleRange = function(minScale, maxScale) {};

/**
 * Suspends layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.suspend = function() {};

/**
 * Fires when a layer resumes drawing.
 * Fires when a layer's minScale and/or maxScale is changed.
 * Fires when a layer's scale visibility changes.
 * Fires when a layer suspends drawing.
 * @param {string} type
 * @param {function({target: !ArcGISTiledMapServiceLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer.ArcGISTiledMapServiceLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_ArcGISTiledMapServiceLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/CSVLayer"
/** @const */
tsickle_declare_module.esri_layers_CSVLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_CSVLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_CSVLayer */

/**
 * @constructor
 * @struct
 * Creates a CSV layer.
 * @param {string} url URL to a CSV resource.
 * @param {!CSVLayerOptions=} options Optional parameters used to create the layer.
 */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer.prototype.columnDelimiter;
 /** @type {string} */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer.prototype.latitudeFieldName;
 /** @type {string} */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer.prototype.longitudeFieldName;
 /** @type {number} */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer.prototype.opacity;
 /** @type {number} */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer.prototype.refreshInterval;
 /** @type {string} */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer.prototype.url;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_CSVLayer.CSVLayer.prototype.visible;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_CSVLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/CodedValueDomain"
/** @const */
tsickle_declare_module.esri_layers_CodedValueDomain = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_CodedValueDomain */
/**
 * @extends {Domain}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_CodedValueDomain.CodedValueDomain = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_CodedValueDomain.CodedValueDomain.prototype.codedValues;

/**
 * Returns the name of the coded-value associated with the specified code.
 * @param {(string|number)} code The code in which you wish to search for the name.
 * @return {string}
 */
tsickle_declare_module.esri_layers_CodedValueDomain.CodedValueDomain.prototype.getName = function(code) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_CodedValueDomain */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/DataAdapterFeatureLayer"
/** @const */
tsickle_declare_module.esri_layers_DataAdapterFeatureLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DataAdapterFeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DataAdapterFeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DataAdapterFeatureLayer */

/**
 * @constructor
 * @struct
 * Creates a DataAdapterFeatureLayer.
 * @param {?} dataAdapter The DataAdapter object.
 * @param {!DataAdapterFeatureLayerOptions} options Optional parameters used to create the layer.
 */
tsickle_declare_module.esri_layers_DataAdapterFeatureLayer.DataAdapterFeatureLayer = function(dataAdapter, options) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_DataAdapterFeatureLayer.DataAdapterFeatureLayer.prototype.dataAdapter;
 /** @type {?} */
tsickle_declare_module.esri_layers_DataAdapterFeatureLayer.DataAdapterFeatureLayer.prototype.dataAdapterQuery;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_DataAdapterFeatureLayer.DataAdapterFeatureLayer.prototype.dataAttributes;
 /** @type {!LocationProviderBase} */
tsickle_declare_module.esri_layers_DataAdapterFeatureLayer.DataAdapterFeatureLayer.prototype.locationProvider;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_DataAdapterFeatureLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/DataSource"
/** @const */
tsickle_declare_module.esri_layers_DataSource = {};

/**
 * @constructor
 * @struct
 * Creates a new DataSource object.
 * @param {!Object=} json JSON object representing the DataSource.
 */
tsickle_declare_module.esri_layers_DataSource.DataSource = function(json) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_DataSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/DimensionalDefinition"
/** @const */
tsickle_declare_module.esri_layers_DimensionalDefinition = {};

/**
 * @constructor
 * @struct
 * Create a new dimensional definition object from an existing json object.
 * @param {!Object} json The REST JSON representation for Dimensional Definition.
 */
tsickle_declare_module.esri_layers_DimensionalDefinition.DimensionalDefinition = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_DimensionalDefinition.DimensionalDefinition.prototype.dimensionName;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_DimensionalDefinition.DimensionalDefinition.prototype.isSlice;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_DimensionalDefinition.DimensionalDefinition.prototype.values;
 /** @type {string} */
tsickle_declare_module.esri_layers_DimensionalDefinition.DimensionalDefinition.prototype.variableName;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_DimensionalDefinition.DimensionalDefinition.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_DimensionalDefinition */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/Domain"
/** @const */
tsickle_declare_module.esri_layers_Domain = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_Domain.Domain = function() {};
 /** @type {string} */
tsickle_declare_module.esri_layers_Domain.Domain.prototype.name;
 /** @type {string} */
tsickle_declare_module.esri_layers_Domain.Domain.prototype.type;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_Domain.Domain.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_Domain */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/DynamicLayerInfo"
/** @const */
tsickle_declare_module.esri_layers_DynamicLayerInfo = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DynamicLayerInfo */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DynamicLayerInfo */

/**
 * @constructor
 * @struct
 * Creates a new DynamicLayerInfo object.
 * @param {!Object=} json JSON object representing the DynamicLayerInfo.
 */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo = function(json) {};
 /** @type {boolean} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.defaultVisibility;
 /** @type {number} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.id;
 /** @type {number} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.minScale;
 /** @type {string} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.name;
 /** @type {number} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.parentLayerId;
 /** @type {!LayerSource} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.source;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.subLayerIds;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_DynamicLayerInfo.DynamicLayerInfo.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_DynamicLayerInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/DynamicMapServiceLayer"
/** @const */
tsickle_declare_module.esri_layers_DynamicMapServiceLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DynamicMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_DynamicMapServiceLayer */
/**
 * @extends {Layer}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_DynamicMapServiceLayer.DynamicMapServiceLayer = function() {};
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_DynamicMapServiceLayer.DynamicMapServiceLayer.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_DynamicMapServiceLayer.DynamicMapServiceLayer.prototype.initialExtent;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_DynamicMapServiceLayer.DynamicMapServiceLayer.prototype.spatialReference;

/**
 * Method to implement when extending DynamicMapServiceLayer.
 * @param {!Extent} extent Current extent of the map.
 * @param {number} width Current width of the map in pixels.
 * @param {number} height Current height of the map in pixels.
 * @param {!Function} callback The function to call when the method has completed.
 * @return {string}
 */
tsickle_declare_module.esri_layers_DynamicMapServiceLayer.DynamicMapServiceLayer.prototype.getImageUrl = function(extent, width, height, callback) {};

/**
 * Refreshes the map by making a new request to the server.
 * @return {void}
 */
tsickle_declare_module.esri_layers_DynamicMapServiceLayer.DynamicMapServiceLayer.prototype.refresh = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_DynamicMapServiceLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/FeatureEditResult"
/** @const */
tsickle_declare_module.esri_layers_FeatureEditResult = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_FeatureEditResult.FeatureEditResult = function() {};
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureEditResult.FeatureEditResult.prototype.attachmentId;
 /** @type {!Error} */
tsickle_declare_module.esri_layers_FeatureEditResult.FeatureEditResult.prototype.error;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureEditResult.FeatureEditResult.prototype.objectId;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureEditResult.FeatureEditResult.prototype.success;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_FeatureEditResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/FeatureLayer"
/** @const */
tsickle_declare_module.esri_layers_FeatureLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureLayer */

/**
 * @constructor
 * @struct
 * Creates a new instance of a feature layer object from the ArcGIS Server REST resource identified by the input URL.
 * Creates a new instance of a feature layer using a FeatureCollection object.
 * @param {string|?} url_or_featureCollectionObject URL to the ArcGIS Server REST resource that represents a feature service. / A feature collection object.
 * @param {!FeatureLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer = function(url_or_featureCollectionObject, options) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.MODE_AUTO;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.MODE_ONDEMAND;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.MODE_SELECTION;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.MODE_SNAPSHOT;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.POPUP_HTML_TEXT;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.POPUP_NONE;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.POPUP_URL;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.SELECTION_ADD;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.SELECTION_NEW;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.SELECTION_SUBTRACT;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.advancedQueryCapabilities;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.allowGeometryUpdates;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.allowUpdateWithoutMValues;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.attributionDataUrl;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.capabilities;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.copyright;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.defaultDefinitionExpression;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.defaultVisibility;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.displayField;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.editFieldsInfo;
 /** @type {!Array<!Field>} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.fields;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.fullExtent;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.gdbVersion;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.geometryType;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.globalIdField;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.graphics;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.hasAttachments;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.hasAttributionData;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.htmlPopupType;
 /** @type {!Array<!LabelClass>} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.labelingInfo;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.layerId;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.maxAllowableOffset;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.maxRecordCount;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.minScale;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.multipatchOption;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.name;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.objectIdField;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.ownershipBasedAccessControlForFeatures;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.relationships;
 /** @type {!Renderer} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.renderer;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.showLabels;
 /** @type {!LayerSource} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.source;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.supportsAdvancedQueries;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.supportsAttachmentsByUploadId;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.supportsCalculate;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.supportsStatistics;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.suspended;
 /** @type {!Array<!FeatureTemplate>} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.templates;
 /** @type {!TimeInfo} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.timeInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.type;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.typeIdField;
 /** @type {!Array<!FeatureType>} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.types;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.version;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.visibleAtMapScale;

/**
 * Add an attachment to the feature specified by the ObjectId.
 * @param {number} objectId The ObjectId of the feature to which the attachment is added.
 * @param {!HTMLFormElement} formNode HTML form that contains a file upload field pointing to the file to be added as an attachment.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.addAttachment = function(objectId, formNode, callback, errback) {};

/**
 * Apply edits to the feature layer.
 * @param {!Array<!Graphic>=} adds Array of features to add to the layer in the feature service.
 * @param {!Array<!Graphic>=} updates Array of features whose geometry and/or attributes have changed.
 * @param {!Array<!Graphic>=} deletes Array of features to delete.
 * @param {!Function=} callback This function will be called when the operation is complete.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.applyEdits = function(adds, updates, deletes, callback, errback) {};

/**
 * Clears the current selection.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.clearSelection = function() {};

/**
 * Delete one or more attachments for the feature specified by the input ObjectId.
 * @param {number} objectId The ObjectId of the feature from which the attachment is removed.
 * @param {!Array<number>} attachmentIds The array of attachment ids to delete.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.deleteAttachments = function(objectId, attachmentIds, callback, errback) {};

/**
 * Asynchrously returns custom data for the layer when available.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getAttributionData = function() {};

/**
 * Returns the current definition expression.
 * @return {string}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getDefinitionExpression = function() {};

/**
 * Returns the Domain associated with the given field name.
 * @param {string} fieldName Name of the attribute field.
 * @param {?=} options Please see the options object specification table below.
 * @return {!Domain}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getDomain = function(fieldName, options) {};

/**
 * Returns an object that describes the edit capabilities of the layer.
 * @param {?=} options If the layer supports ownership based access control, use the options to determine if the specified user can edit features.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getEditCapabilities = function(options) {};

/**
 * Returns an object describing the most recent edit operation performed on the given feature, if available.
 * @param {!Graphic} feature The feature to get the edit info for.
 * @param {?=} options See the object specifications table below for the structure of the  options  object.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getEditInfo = function(feature, options) {};

/**
 * Returns a localized summary of the last edit operation performed on the given feature, if available.
 * @param {!Graphic} feature The feature to get the edit summary for.
 * @param {?=} options See the object specifications table below for the structure of the  options  object.
 * @return {string}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getEditSummary = function(feature, options) {};

/**
 * Returns the Field given the specified field name.
 * @param {string} fieldName Name of the attribute field.
 * @return {!Field}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getField = function(fieldName) {};

/**
 * Returns the current value of the maxAllowableOffset used by the layer.
 * @return {number}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getMaxAllowableOffset = function() {};

/**
 * Returns the list of fields used to order features by.
 * @return {!Array<string>}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getOrderByFields = function() {};

/**
 * Gets the currently selected features.
 * @return {!Array<!Graphic>}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getSelectedFeatures = function() {};

/**
 * Gets the current selection symbol.
 * @return {!Symbol}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getSelectionSymbol = function() {};

/**
 * Get the current time definition applied to the feature layer.
 * @return {!TimeExtent}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getTimeDefinition = function() {};

/**
 * Returns a FeatureType describing the feature's type.
 * @param {!Graphic} feature A feature from this layer.
 * @return {!FeatureType}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.getType = function(feature) {};

/**
 * Returns true if geometryType is esriGeometryMultipatch and multipatchOption is xyFootprint.
 * @return {boolean}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.hasXYFootprint = function() {};

/**
 * Returns true if the FeatureLayer is editable.
 * @return {boolean}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.isEditable = function() {};

/**
 * Returns true if the layer is visible at the given scale.
 * @param {number} scale The scale at which to check if the layer is visible.
 * @return {boolean}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.isVisibleAtScale = function(scale) {};

/**
 * Query for information about attachments associated with the specified ObjectIds.
 * @param {number} objectId The ObjectId for the feature to query for attachment information.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.queryAttachmentInfos = function(objectId, callback, errback) {};

/**
 * Get a count of the number of features that satisfy the input query.
 * @param {!Query} query The input query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.queryCount = function(query, callback, errback) {};

/**
 * Get the extent of features that satisfy the input query.
 * @param {!Query} query The query definition.
 * @param {!Function=} callback The function called when the method has completed.
 * @param {!Function=} errback The function called when error occurred.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.queryExtent = function(query, callback, errback) {};

/**
 * Query features from the feature layer.
 * @param {!Query} query The input query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.queryFeatures = function(query, callback, errback) {};

/**
 * Query for ObjectIds.
 * @param {!Query} query The input query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.queryIds = function(query, callback, errback) {};

/**
 * Query features or records, from another layer or table, related to features in this layer.
 * @param {!RelationshipQuery} relQuery The input query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.queryRelatedFeatures = function(relQuery, callback, errback) {};

/**
 * Redraws all the graphics in the graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.redraw = function() {};

/**
 * Refreshes the features in the feature layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.refresh = function() {};

/**
 * Resumes layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.resume = function() {};

/**
 * Selects features from the FeatureLayer.
 * @param {!Query} query The input query.
 * @param {number=} selectionMethod The selection method defines how the rest of the selection is combined with the existing selection.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.selectFeatures = function(query, selectionMethod, callback, errback) {};

/**
 * Enable or disable auto generalization for the layer.
 * @param {boolean} enable When true, auto generalize is enabled.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setAutoGeneralize = function(enable) {};

/**
 * Sets the definition expression for the FeatureLayer.
 * @param {string} expression The definition expression to apply.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setDefinitionExpression = function(expression) {};

/**
 * Set the editability of feature layers created from a feature collection.
 * @param {boolean} editable When true, the layer will be set as editable.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setEditable = function(editable) {};

/**
 * Set the layer's data source to the specified geodatabase version.
 * @param {string} versionName The name of the geodatabase version to use as the layer's data source.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setGDBVersion = function(versionName) {};

/**
 * Specify or change the info template for a layer.
 * @param {!InfoTemplate} infoTemplate The new info template.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setInfoTemplate = function(infoTemplate) {};

/**
 * Sets labeling info on the layer.
 * @param {!Array<!LabelClass>} labelingInfo This is the label definition for this layer, specified as an array of label classes.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setLabelingInfo = function(labelingInfo) {};

/**
 * Sets the maximum allowable offset used when generalizing geometries.
 * @param {number} offset The maximum allowable offset.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setMaxAllowableOffset = function(offset) {};

/**
 * Set the maximum scale for the layer.
 * @param {number} scale The maximum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setMaxScale = function(scale) {};

/**
 * Set the minimum scale for the layer.
 * @param {number} scale The minimum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setMinScale = function(scale) {};

/**
 * Initial opacity or transparency of layer.
 * @param {number} opacity Value from 0 to 1, where 0 is 100% transparent and 1 has no transparency.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setOpacity = function(opacity) {};

/**
 * Set the renderer for the feature layer.
 * @param {!Renderer} renderer The renderer to apply to the feature layer
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setRenderer = function(renderer) {};

/**
 * Set the scale range for the layer.
 * @param {number} minScale The minimum scale for the layer.
 * @param {number} maxScale The maximum scale for the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setScaleRange = function(minScale, maxScale) {};

/**
 * Sets the selection symbol for the feature layer.
 * @param {!Symbol} symbol Symbol for the current selection.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setSelectionSymbol = function(symbol) {};

/**
 * Sets whether to display labels or not.
 * @param {boolean} showLabels Set to true to show labels.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setShowLabels = function(showLabels) {};

/**
 * Sets the time definition for the feature layer.
 * @param {!TimeExtent} definition The new time extent used to filter the layer.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setTimeDefinition = function(definition) {};

/**
 * Time offset allows you to display the features at a different time so they can be overlaid on top of previous or future time periods.
 * @param {number} offsetValue The length of time to offset from "this" time.
 * @param {string} offsetUnits Units in which the offset is specified.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setTimeOffset = function(offsetValue, offsetUnits) {};

/**
 * Determine if the layer will update its content based on the map's current time extent.
 * @param {boolean} update When false the layer will not update its content based on the map's time extent.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.setUseMapTime = function(update) {};

/**
 * Suspends layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.suspend = function() {};

/**
 * Returns an easily serializable object representation of the layer.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.toJson = function() {};

/**
 * Fires when addAttachments() is complete.
 * Fired before edits are applied to the feature layer.
 * Fired when the capabilities of the layer are modified using the setEditable method.
 * Fires when a feature has been double clicked.
 * Fires when deleteAttachments is complete.
 * Fires after applyEdits() is complete.
 * Fired when the geodatabase version is switched.
 * Fired when labeling info on the layer changes.
 * Fires when queryAttachmentInfos method is called.
 * Fires when the query for the count is complete.
 * Fires when queryExtent method has completed.
 * Fires when queryFeatures() is complete.
 * Fires when queryIds() is complete.
 * Fired when the feature layer could not draw all the features due to a maxRecordCount limitation on a query operation.
 * Fires when queryRelatedFeatures() is complete.
 * Fires when a layer resumes drawing.
 * Fires when a layer's minScale and/or maxScale is changed.
 * Fires when a layer's scale visibility changes.
 * Fires after clearSelection has been called.
 * Fires when selectFeatures() completes.
 * Fired when the feature layer's labels are changed.
 * Fires when a layer suspends drawing.
 * Fired when the layer has finished updating its content.
 * Fired when the layer begins to update its content.
 * @param {string} type
 * @param {function({result: !FeatureEditResult, target: !FeatureLayer}): void|function({adds: !Array<!Graphic>, deletes: !Array<!Graphic>, updates: !Array<!Graphic>, target: !FeatureLayer}): void|function({target: !FeatureLayer}): void|function({event: ?, target: !FeatureLayer}): void|function({results: !Array<?>, target: !FeatureLayer}): void|function({adds: !Array<!FeatureEditResult>, deletes: !Array<!FeatureEditResult>, updates: !Array<!FeatureEditResult>, target: !FeatureLayer}): void|function({info: !Array<?>, target: !FeatureLayer}): void|function({count: number, target: !FeatureLayer}): void|function({count: number, extent: !Extent, target: !FeatureLayer}): void|function({featureSet: !FeatureSet, target: !FeatureLayer}): void|function({objectIds: !Array<number>, target: !FeatureLayer}): void|function({relatedFeatures: ?, target: !FeatureLayer}): void|function({features: !Array<!Graphic>, method: number, target: !FeatureLayer}): void|function({error: !Error, info: ?, target: !FeatureLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_FeatureLayer.FeatureLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_FeatureLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/FeatureTemplate"
/** @const */
tsickle_declare_module.esri_layers_FeatureTemplate = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureTemplate */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate = function() {};
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_ARROW;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_AUTO_COMPLETE_POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_CIRCLE;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_ELLIPSE;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_FREEHAND;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_LINE;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_NONE;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_POINT;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_RECTANGLE;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.TOOL_TRIANGLE;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.prototype.drawingTool;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.prototype.name;
 /** @type {!Graphic} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.prototype.prototype;
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.prototype.thumbnail;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureTemplate.FeatureTemplate.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_FeatureTemplate */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/FeatureType"
/** @const */
tsickle_declare_module.esri_layers_FeatureType = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_FeatureType */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_FeatureType.FeatureType = function() {};
 /** @type {?} */
tsickle_declare_module.esri_layers_FeatureType.FeatureType.prototype.domains;
 /** @type {number} */
tsickle_declare_module.esri_layers_FeatureType.FeatureType.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_layers_FeatureType.FeatureType.prototype.name;
 /** @type {!Array<!FeatureTemplate>} */
tsickle_declare_module.esri_layers_FeatureType.FeatureType.prototype.templates;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_FeatureType.FeatureType.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_FeatureType */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/Field"
/** @const */
tsickle_declare_module.esri_layers_Field = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_Field */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_Field.Field = function() {};
 /** @type {string} */
tsickle_declare_module.esri_layers_Field.Field.prototype.alias;
 /** @type {!Domain} */
tsickle_declare_module.esri_layers_Field.Field.prototype.domain;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_Field.Field.prototype.editable;
 /** @type {number} */
tsickle_declare_module.esri_layers_Field.Field.prototype.length;
 /** @type {string} */
tsickle_declare_module.esri_layers_Field.Field.prototype.name;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_Field.Field.prototype.nullable;
 /** @type {string} */
tsickle_declare_module.esri_layers_Field.Field.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_Field */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/GeoRSSLayer"
/** @const */
tsickle_declare_module.esri_layers_GeoRSSLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GeoRSSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GeoRSSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GeoRSSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GeoRSSLayer */

/**
 * @constructor
 * @struct
 * Creates a new GeoRSSLayer object.
 * @param {string} url URL to the GeoRSS resource.
 * @param {!GeoRSSLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.copyright;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.defaultVisibility;
 /** @type {string} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.description;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.items;
 /** @type {string} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.name;
 /** @type {number} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.opacity;
 /** @type {number} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.refreshInterval;
 /** @type {string} */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.url;

/**
 * An array of feature layers for the GeoRSSLayer.
 * @return {!Array<!FeatureLayer>}
 */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.getFeatureLayers = function() {};

/**
 * Fires when the layer is refreshed.
 * @param {string} type
 * @param {function({target: !GeoRSSLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_GeoRSSLayer.GeoRSSLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_GeoRSSLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/GraphicsLayer"
/** @const */
tsickle_declare_module.esri_layers_GraphicsLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GraphicsLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GraphicsLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GraphicsLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GraphicsLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_GraphicsLayer */

/**
 * @constructor
 * @struct
 * Creates a new GraphicsLayer object.
 * Creates a new GraphicsLayer object with parameters.
 * @param {!GraphicsLayerOptions=} options See options list for parameters.
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer = function(options) {};
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.dataAttributes;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.graphics;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.infoTemplate;
 /** @type {!Renderer} */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.renderer;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.styling;
 /** @type {string} */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.surfaceType;

/**
 * Adds a graphic.
 * @param {!Graphic} graphic The graphic to add.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.add = function(graphic) {};

/**
 * Clears all graphics.
 * @return {void}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.clear = function() {};

/**
 * Disables all mouse events on the graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.disableMouseEvents = function() {};

/**
 * Enables all mouse events on the graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.enableMouseEvents = function() {};

/**
 * Redraws all the graphics in the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.redraw = function() {};

/**
 * Removes a graphic.
 * @param {!Graphic} graphic The graphic to remove.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.remove = function(graphic) {};

/**
 * Specify or change the info template for a layer.
 * @param {!InfoTemplate} infoTemplate The new info template.
 * @return {void}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.setInfoTemplate = function(infoTemplate) {};

/**
 * Initial opacity or transparency of layer.
 * @param {number} opacity Value from 0 to 1, where 0 is 100% transparent and 1 has no transparency.
 * @return {void}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.setOpacity = function(opacity) {};

/**
 * Sets the renderer for the graphics layer.
 * @param {!Renderer} renderer The renderer used for the graphic.
 * @return {void}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.setRenderer = function(renderer) {};

/**
 * Fires when a graphic has been clicked.
 * Fires when a graphic has been double clicked.
 * Fires when a graphic is added to the GraphicsLayer.
 * Fires when a graphic is drawn.
 * Fires when a graphic's DOM node is created and added to the layer.
 * This event is fired when a graphic's DOM node is removed (consider the node destroyed).
 * Fires when a graphic is removed from the GraphicsLayer.
 * Fires when all graphics in the GraphicsLayer are cleared.
 * Fires when a mouse button is pressed down and the mouse cursor is on a graphic.
 * Fires while the mouse is being dragged until the mouse button is released.
 * Fires as the mouse moves through a graphic on the GraphicsLayer.
 * Fires as the mouse exits a graphic on the GraphicsLayer.
 * Fires when the mouse first enters into a graphic on the GraphicsLayer.
 * Fires when a mouse button is released and the mouse cursor is on a graphic.
 * @param {string} type
 * @param {function({event: ?, target: !GraphicsLayer}): void|function({target: !GraphicsLayer}): void|function({graphic: !Graphic, target: !GraphicsLayer}): void|function({graphic: !Graphic, node: !HTMLElement, target: !GraphicsLayer}): void|function(!AGSMouseEvent): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_GraphicsLayer.GraphicsLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_GraphicsLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/ImageParameters"
/** @const */
tsickle_declare_module.esri_layers_ImageParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageParameters */

/**
 * @constructor
 * @struct
 * Creates a new ImageParameters object.
 */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters = function() {};
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.LAYER_OPTION_EXCLUDE;
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.LAYER_OPTION_HIDE;
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.LAYER_OPTION_INCLUDE;
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.LAYER_OPTION_SHOW;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.bbox;
 /** @type {number} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.dpi;
 /** @type {string} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.format;
 /** @type {number} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.height;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.imageSpatialReference;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.layerDefinitions;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.layerIds;
 /** @type {string} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.layerOption;
 /** @type {!Array<!LayerTimeOptions>} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.layerTimeOptions;
 /** @type {!TimeExtent} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.timeExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.transparent;
 /** @type {number} */
tsickle_declare_module.esri_layers_ImageParameters.ImageParameters.prototype.width;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_ImageParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/ImageServiceParameters"
/** @const */
tsickle_declare_module.esri_layers_ImageServiceParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageServiceParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageServiceParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageServiceParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_ImageServiceParameters */

/**
 * @constructor
 * @struct
 * Creates a new ImageServiceParameters object.
 */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters = function() {};
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.INTERPOLATION_BILINEAR;
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.INTERPOLATION_CUBICCONVOLUTION;
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.INTERPOLATION_MAJORITY;
 /** @type {?} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.INTERPOLATION_NEARESTNEIGHBOR;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.bandIds;
 /** @type {number} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.compressionQuality;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.format;
 /** @type {number} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.height;
 /** @type {string} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.interpolation;
 /** @type {!MosaicRule} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.mosaicRule;
 /** @type {number} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.noData;
 /** @type {!RasterFunction} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.renderingRule;
 /** @type {!TimeExtent} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.timeExtent;
 /** @type {number} */
tsickle_declare_module.esri_layers_ImageServiceParameters.ImageServiceParameters.prototype.width;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_ImageServiceParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/InheritedDomain"
/** @const */
tsickle_declare_module.esri_layers_InheritedDomain = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_InheritedDomain */
/**
 * @extends {Domain}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_InheritedDomain.InheritedDomain = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_InheritedDomain */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/JoinDataSource"
/** @const */
tsickle_declare_module.esri_layers_JoinDataSource = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_JoinDataSource */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_JoinDataSource */

/**
 * @constructor
 * @struct
 * Creates a new JoinDataSource object.
 * @param {!Object=} json JSON object representing the JoinDataSource.
 */
tsickle_declare_module.esri_layers_JoinDataSource.JoinDataSource = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_JoinDataSource.JoinDataSource.prototype.joinType;
 /** @type {string} */
tsickle_declare_module.esri_layers_JoinDataSource.JoinDataSource.prototype.leftTableKey;
 /** @type {!LayerSource} */
tsickle_declare_module.esri_layers_JoinDataSource.JoinDataSource.prototype.leftTableSource;
 /** @type {string} */
tsickle_declare_module.esri_layers_JoinDataSource.JoinDataSource.prototype.rightTableKey;
 /** @type {!LayerSource} */
tsickle_declare_module.esri_layers_JoinDataSource.JoinDataSource.prototype.rightTableSource;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_JoinDataSource.JoinDataSource.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_JoinDataSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/KMLFolder"
/** @const */
tsickle_declare_module.esri_layers_KMLFolder = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder = function() {};
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.description;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.featureInfos;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.name;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.parentFolderId;
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.snippet;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.subFolderIds;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLFolder.KMLFolder.prototype.visibility;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_KMLFolder */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/KMLGroundOverlay"
/** @const */
tsickle_declare_module.esri_layers_KMLGroundOverlay = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_KMLGroundOverlay */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay = function() {};
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.description;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.extent;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.height;
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.href;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.name;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.scale;
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.snippet;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.visibility;
 /** @type {number} */
tsickle_declare_module.esri_layers_KMLGroundOverlay.KMLGroundOverlay.prototype.width;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_KMLGroundOverlay */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/KMLLayer"
/** @const */
tsickle_declare_module.esri_layers_KMLLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_KMLLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_KMLLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_KMLLayer */

/**
 * @constructor
 * @struct
 * Creates a new KMLLayer based upon the given URL.
 * @param {string} id Id to assign to the layer.
 * @param {string} url URL for a .kml or .kmz file.
 * @param {!KMLLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer = function(id, url, options) {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.featureInfos;
 /** @type {!Array<!KMLFolder>} */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.folders;
 /** @type {?} */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.linkInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.url;

/**
 * Get the KML feature identified by the input feature info.
 * @param {?} featureInfo Feature info for the kml feature.
 * @return {?}
 */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.getFeature = function(featureInfo) {};

/**
 * Get an array of map layers that were created to draw placemarks, ground and screen overlays.
 * @return {!Array<!Layer>}
 */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.getLayers = function() {};

/**
 * Refreshes the features in the KML Layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.refresh = function() {};

/**
 * Set the visibility for the specified folder.
 * @param {!KMLFolder} folder A KML folder.
 * @param {boolean} isVisible The visibility of the folder and all kml features within the folder.
 * @return {void}
 */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.setFolderVisibility = function(folder, isVisible) {};

/**
 * Fired after the layer is refreshed.
 * @param {string} type
 * @param {function({target: !KMLLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_KMLLayer.KMLLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_KMLLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LOD"
/** @const */
tsickle_declare_module.esri_layers_LOD = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_LOD.LOD = function() {};
 /** @type {number} */
tsickle_declare_module.esri_layers_LOD.LOD.prototype.level;
 /** @type {string} */
tsickle_declare_module.esri_layers_LOD.LOD.prototype.levelValue;
 /** @type {number} */
tsickle_declare_module.esri_layers_LOD.LOD.prototype.resolution;
 /** @type {number} */
tsickle_declare_module.esri_layers_LOD.LOD.prototype.scale;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LOD */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LabelClass"
/** @const */
tsickle_declare_module.esri_layers_LabelClass = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LabelClass */

/**
 * @constructor
 * @struct
 * Creates a label class, used for formatting parameters, symbols, date, etc.
 * @param {!Object=} json Various options to configure this LabelClass.
 */
tsickle_declare_module.esri_layers_LabelClass.LabelClass = function(json) {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.fieldInfos;
 /** @type {string} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.labelExpression;
 /** @type {?} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.labelExpressionInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.labelPlacement;
 /** @type {number} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.minScale;
 /** @type {?} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.sizeInfo;
 /** @type {!TextSymbol} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.symbol;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.useCodedValues;
 /** @type {string} */
tsickle_declare_module.esri_layers_LabelClass.LabelClass.prototype.where;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LabelClass */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LabelLayer"
/** @const */
tsickle_declare_module.esri_layers_LabelLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LabelLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LabelLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LabelLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LabelLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LabelLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LabelLayer */

/**
 * @constructor
 * @struct
 * Creates a new Label layer.
 * @param {!LabelLayerOptions=} params Constructor parameters.
 */
tsickle_declare_module.esri_layers_LabelLayer.LabelLayer = function(params) {};

/**
 * Adds reference to the feature layer which is labeled.
 * @param {!FeatureLayer} featureLayer The feature layer to be added to the label layer.
 * @param {(!SimpleRenderer|!UniqueValueRenderer|!ClassBreaksRenderer)=} renderer The renderer used to render text labels.
 * @param {?=} textExpression An expression determining what text and field(s) will be displayed as in labels.
 * @return {void}
 */
tsickle_declare_module.esri_layers_LabelLayer.LabelLayer.prototype.addFeatureLayer = function(featureLayer, renderer, textExpression) {};

/**
 * Returns reference to the feature layer which features will be labeled.
 * @param {number} index Index of the referenced feature layer.
 * @return {!FeatureLayer}
 */
tsickle_declare_module.esri_layers_LabelLayer.LabelLayer.prototype.getFeatureLayer = function(index) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LabelLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LayerDataSource"
/** @const */
tsickle_declare_module.esri_layers_LayerDataSource = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LayerDataSource */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LayerDataSource */

/**
 * @constructor
 * @struct
 * Creates a new LayerDataSource object.
 * @param {!Object=} json JSON object representing the LayerDataSource.
 */
tsickle_declare_module.esri_layers_LayerDataSource.LayerDataSource = function(json) {};
 /** @type {!DataSource} */
tsickle_declare_module.esri_layers_LayerDataSource.LayerDataSource.prototype.dataSource;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_LayerDataSource.LayerDataSource.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LayerDataSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LayerDrawingOptions"
/** @const */
tsickle_declare_module.esri_layers_LayerDrawingOptions = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LayerDrawingOptions */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LayerDrawingOptions */

/**
 * @constructor
 * @struct
 * Creates a new LayerDrawingOptions object.
 * @param {!Object=} json JSON object representing the LayerDrawingOptions.
 */
tsickle_declare_module.esri_layers_LayerDrawingOptions.LayerDrawingOptions = function(json) {};
 /** @type {!Array<!LabelClass>} */
tsickle_declare_module.esri_layers_LayerDrawingOptions.LayerDrawingOptions.prototype.labelingInfo;
 /** @type {!Renderer} */
tsickle_declare_module.esri_layers_LayerDrawingOptions.LayerDrawingOptions.prototype.renderer;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_LayerDrawingOptions.LayerDrawingOptions.prototype.scaleSymbols;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_LayerDrawingOptions.LayerDrawingOptions.prototype.showLabels;
 /** @type {number} */
tsickle_declare_module.esri_layers_LayerDrawingOptions.LayerDrawingOptions.prototype.transparency;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_LayerDrawingOptions.LayerDrawingOptions.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LayerDrawingOptions */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LayerInfo"
/** @const */
tsickle_declare_module.esri_layers_LayerInfo = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo.prototype.defaultVisibility;
 /** @type {number} */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo.prototype.id;
 /** @type {number} */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo.prototype.minScale;
 /** @type {string} */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo.prototype.name;
 /** @type {number} */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo.prototype.parentLayerId;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_LayerInfo.LayerInfo.prototype.subLayerIds;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LayerInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LayerMapSource"
/** @const */
tsickle_declare_module.esri_layers_LayerMapSource = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_LayerMapSource */

/**
 * @constructor
 * @struct
 * Creates a new LayerMapSource object.
 * @param {!Object=} json JSON object representing the LayerMapSource.
 */
tsickle_declare_module.esri_layers_LayerMapSource.LayerMapSource = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_LayerMapSource.LayerMapSource.prototype.gdbVersion;
 /** @type {number} */
tsickle_declare_module.esri_layers_LayerMapSource.LayerMapSource.prototype.mapLayerId;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_LayerMapSource.LayerMapSource.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LayerMapSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LayerSource"
/** @const */
tsickle_declare_module.esri_layers_LayerSource = {};

/**
 * @constructor
 * @struct
 * Creates a new LayerSource object.
 * @param {!Object=} json Creates a new LayerSource object.
 */
tsickle_declare_module.esri_layers_LayerSource.LayerSource = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_LayerSource.LayerSource.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LayerSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/LayerTimeOptions"
/** @const */
tsickle_declare_module.esri_layers_LayerTimeOptions = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_LayerTimeOptions.LayerTimeOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri_layers_LayerTimeOptions.LayerTimeOptions.prototype.timeDataCumulative;
 /** @type {number} */
tsickle_declare_module.esri_layers_LayerTimeOptions.LayerTimeOptions.prototype.timeOffset;
 /** @type {string} */
tsickle_declare_module.esri_layers_LayerTimeOptions.LayerTimeOptions.prototype.timeOffsetUnits;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_LayerTimeOptions.LayerTimeOptions.prototype.useTime;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_LayerTimeOptions */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/MapImage"
/** @const */
tsickle_declare_module.esri_layers_MapImage = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_MapImage */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_MapImage */

/**
 * @constructor
 * @struct
 * Creates a new Map Image object.
 * @param {!MapImageOptions} options An object that defines the map image options.
 */
tsickle_declare_module.esri_layers_MapImage.MapImage = function(options) {};
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_MapImage.MapImage.prototype.extent;
 /** @type {number} */
tsickle_declare_module.esri_layers_MapImage.MapImage.prototype.height;
 /** @type {string} */
tsickle_declare_module.esri_layers_MapImage.MapImage.prototype.href;
 /** @type {number} */
tsickle_declare_module.esri_layers_MapImage.MapImage.prototype.scale;
 /** @type {number} */
tsickle_declare_module.esri_layers_MapImage.MapImage.prototype.width;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_MapImage */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/MapImageLayer"
/** @const */
tsickle_declare_module.esri_layers_MapImageLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_MapImageLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_MapImageLayer */

/**
 * @constructor
 * @struct
 * Creates a new MapImageLayer object
 * @param {?=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_MapImageLayer.MapImageLayer = function(options) {};

/**
 * Add an image to the map.
 * @param {!MapImage} mapImage A MapImage object that defines the image to add to the map.
 * @return {void}
 */
tsickle_declare_module.esri_layers_MapImageLayer.MapImageLayer.prototype.addImage = function(mapImage) {};

/**
 * Get an array of MapImage objects that define the images in the MapImageLayer.
 * @return {!Array<!MapImage>}
 */
tsickle_declare_module.esri_layers_MapImageLayer.MapImageLayer.prototype.getImages = function() {};

/**
 * Remove all images from the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_MapImageLayer.MapImageLayer.prototype.removeAllImages = function() {};

/**
 * Remove the specified image from the layer.
 * @param {!MapImage} mapImage The MapImage object that defines the image to remove.
 * @return {void}
 */
tsickle_declare_module.esri_layers_MapImageLayer.MapImageLayer.prototype.removeImage = function(mapImage) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_MapImageLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/MosaicRule"
/** @const */
tsickle_declare_module.esri_layers_MosaicRule = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_MosaicRule */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_MosaicRule */

/**
 * @constructor
 * @struct
 * Creates a new MosaicRule object
 * Create a new mosaic rule object using a json string representing a serialized version of the mosaic rule.
 * @param {!Object=} json A json string representing a serialized version of the mosaic rule.
 */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule = function(json) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_ATTRIBUTE;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_CENTER;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_LOCKRASTER;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_NADIR;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_NONE;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_NORTHWEST;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_SEAMLINE;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.METHOD_VIEWPOINT;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.OPERATION_BLEND;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.OPERATION_FIRST;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.OPERATION_LAST;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.OPERATION_MAX;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.OPERATION_MEAN;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.OPERATION_MIN;
 /** @type {?} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.OPERATION_SUM;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.ascending;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.lockRasterIds;
 /** @type {string} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.method;
 /** @type {!Array<!DimensionalDefinition>} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.multidimensionalDefinition;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.objectIds;
 /** @type {string} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.operation;
 /** @type {string} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.sortField;
 /** @type {string} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.sortValue;
 /** @type {!Point} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.viewpoint;
 /** @type {string} */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.where;

/**
 * Returns an easily serializable object representation of the mosaic rule.
 * @return {?}
 */
tsickle_declare_module.esri_layers_MosaicRule.MosaicRule.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_MosaicRule */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/OpenStreetMapLayer"
/** @const */
tsickle_declare_module.esri_layers_OpenStreetMapLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_OpenStreetMapLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_OpenStreetMapLayer */

/**
 * @constructor
 * @struct
 * Creates a new OpenStreetMapLayer object.
 * @param {!OpenStreetMapLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_OpenStreetMapLayer.OpenStreetMapLayer = function(options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_OpenStreetMapLayer.OpenStreetMapLayer.prototype.copyright;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_OpenStreetMapLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/PixelBlock"
/** @const */
tsickle_declare_module.esri_layers_PixelBlock = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_PixelBlock */

/**
 * @constructor
 * @struct
 * Creates a new PixelBlock object.
 * @param {!PixelBlockOptions} options Constructor parameters.
 */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock = function(options) {};
 /** @type {number} */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.height;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.mask;
 /** @type {!Array<!Array<number>>} */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.pixels;
 /** @type {string} */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.pixelType;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.statistics;
 /** @type {number} */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.width;

/**
 * Adds another plane.
 * @param {?} planeData Must have two properties set: pixels and statistics.
 * @return {void}
 */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.addData = function(planeData) {};

/**
 * Returns pixels and masks using a single array in bip format (e.g.
 * @return {!Array<?>}
 */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.getAsRGBA = function() {};

/**
 * Similar to getAsRGBA, but returns floating point data.
 * @return {!Array<?>}
 */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.getAsRGBAFloat = function() {};

/**
 * Returns the plane band count.
 * @return {number}
 */
tsickle_declare_module.esri_layers_PixelBlock.PixelBlock.prototype.getPlaneCount = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_PixelBlock */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/QueryDataSource"
/** @const */
tsickle_declare_module.esri_layers_QueryDataSource = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_QueryDataSource */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_QueryDataSource */

/**
 * @constructor
 * @struct
 * Creates a new QueryDataSource object.
 * @param {!Object=} json JSON object representing the QueryDataSource.
 */
tsickle_declare_module.esri_layers_QueryDataSource.QueryDataSource = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_QueryDataSource.QueryDataSource.prototype.geometryType;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_QueryDataSource.QueryDataSource.prototype.oidFields;
 /** @type {string} */
tsickle_declare_module.esri_layers_QueryDataSource.QueryDataSource.prototype.query;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_QueryDataSource.QueryDataSource.prototype.spatialReference;
 /** @type {string} */
tsickle_declare_module.esri_layers_QueryDataSource.QueryDataSource.prototype.workspaceId;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_QueryDataSource.QueryDataSource.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_QueryDataSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/RangeDomain"
/** @const */
tsickle_declare_module.esri_layers_RangeDomain = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_RangeDomain */
/**
 * @extends {Domain}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_RangeDomain.RangeDomain = function() {};
 /** @type {number} */
tsickle_declare_module.esri_layers_RangeDomain.RangeDomain.prototype.maxValue;
 /** @type {number} */
tsickle_declare_module.esri_layers_RangeDomain.RangeDomain.prototype.minValue;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_RangeDomain */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/RasterDataSource"
/** @const */
tsickle_declare_module.esri_layers_RasterDataSource = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_RasterDataSource */

/**
 * @constructor
 * @struct
 * Creates a new RasterDataSource object.
 * @param {!Object=} json JSON object representing the RasterDataSource.
 */
tsickle_declare_module.esri_layers_RasterDataSource.RasterDataSource = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_RasterDataSource.RasterDataSource.prototype.dataSourceName;
 /** @type {string} */
tsickle_declare_module.esri_layers_RasterDataSource.RasterDataSource.prototype.workspaceId;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_RasterDataSource.RasterDataSource.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_RasterDataSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/RasterFunction"
/** @const */
tsickle_declare_module.esri_layers_RasterFunction = {};

/**
 * @constructor
 * @struct
 * Creates a new RasterFunction object.
 * Create a new Raster Function object using a json string representing a serialized version of a raster function.
 * @param {!Object=} json A json string representing a serialized version of a raster function.
 */
tsickle_declare_module.esri_layers_RasterFunction.RasterFunction = function(json) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_RasterFunction.RasterFunction.prototype.arguments;
 /** @type {?} */
tsickle_declare_module.esri_layers_RasterFunction.RasterFunction.prototype.functionArguments;
 /** @type {string} */
tsickle_declare_module.esri_layers_RasterFunction.RasterFunction.prototype.functionName;
 /** @type {string} */
tsickle_declare_module.esri_layers_RasterFunction.RasterFunction.prototype.outputPixelType;
 /** @type {string} */
tsickle_declare_module.esri_layers_RasterFunction.RasterFunction.prototype.variableName;

/**
 * Returns an easily serializable object representation of the raster function.
 * @return {?}
 */
tsickle_declare_module.esri_layers_RasterFunction.RasterFunction.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_RasterFunction */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/RasterLayer"
/** @const */
tsickle_declare_module.esri_layers_RasterLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_RasterLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_RasterLayer */

/**
 * @constructor
 * @struct
 * Creates a new RasterLayer object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a raster layer service.
 * @param {!RasterLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_RasterLayer.RasterLayer = function(url, options) {};
 /** @type {!Function} */
tsickle_declare_module.esri_layers_RasterLayer.RasterLayer.prototype.pixelFilter;

/**
 * Returns the context of the Canvas.
 * @return {?}
 */
tsickle_declare_module.esri_layers_RasterLayer.RasterLayer.prototype.getContext = function() {};

/**
 * Sets the image format.
 * @param {string} imageFormat The image format to set.
 * @param {boolean=} doNotRefresh Use true to avoid refreshing the layer; false to refresh it.
 * @return {void}
 */
tsickle_declare_module.esri_layers_RasterLayer.RasterLayer.prototype.setImageFormat = function(imageFormat, doNotRefresh) {};

/**
 * Sets a pixelFilter on the layer.
 * @param {!Function} pixelFilter The function defining the PixelFilter to set on the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_RasterLayer.RasterLayer.prototype.setPixelFilter = function(pixelFilter) {};

/**
 * Determines if the layer will update its content based on the map's current time extent.
 * @param {boolean} use Use true to update the layer's content based on the map's current time extent.
 * @param {boolean=} doNotRefresh Use true to avoid refreshing the layer; false to refresh the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_RasterLayer.RasterLayer.prototype.setUseMapTime = function(use, doNotRefresh) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_RasterLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/StreamLayer"
/** @const */
tsickle_declare_module.esri_layers_StreamLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_StreamLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_StreamLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_StreamLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_StreamLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_StreamLayer */

/**
 * @constructor
 * @struct
 * Creates a new StreamLayer with a service URL.
 * Creates a new StreamLayer with a FeatureCollection object.
 * @param {string|?} url_or_featureCollectionObject URL to an ArcGIS Server Stream Service. / A feature collection object.
 * @param {!StreamLayerOptions1|!StreamLayerOptions2=} options Optional parameters used to create the layer.
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer = function(url_or_featureCollectionObject, options) {};
 /** @type {number} */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.maximumTrackPoints;
 /** @type {number} */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.purgeInterval;
 /** @type {?} */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.socket;
 /** @type {string} */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.socketUrl;

/**
 * Connect to the Stream Server socket.
 * @param {!Function=} callback The function to call when the method has completed.
 * @return {void}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.connect = function(callback) {};

/**
 * Disconnect from the Stream Server socket.
 * @param {!Function=} callback The function to call when the method has completed.
 * @return {void}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.disconnect = function(callback) {};

/**
 * Gets the where property of the layer's filter.
 * @return {string}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.getDefinitionExpression = function() {};

/**
 * Gets the spatial filter set on the layer.
 * @return {!Extent}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.getGeometryDefinition = function() {};

/**
 * Gets the latest observation for each track in the layer.
 * @return {!Graphic}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.getLatestObservations = function() {};

/**
 * Gets the unique values of the graphics (in the StreamLayer) based on the `fieldName` parameter.
 * @param {string} fieldName Field to get the unique values from.
 * @return {!Array<?>}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.getUniqueValues = function(fieldName) {};

/**
 * Sets the spatial filter for the layer.
 * @param {!Extent} extent Limit the features in the StreamLayer by setting a bounding box.
 * @return {void}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.setGeometryDefinition = function(extent) {};

/**
 * Sets the maximumTrackPoints property for the layer.
 * @param {number} value The maximum track points for the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.setMaximumTrackPoints = function(value) {};

/**
 * Changes the layer's purge interval to the given value (in minutes).
 * @param {number} interval The purge interval in minutes.
 * @return {!Layer}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.setPurgeInterval = function(interval) {};

/**
 * Fires when the layer attempts to reconnect to the web socket.
 * Fires when connection is successfully made to socket.
 * Fires when a connection cannot be made with the web socket.
 * Fires when disconnect from socket.
 * Fires when the layer receives a message that the server-side filter has been changed.
 * Fires after a message is pushed to the layer.
 * Fires when the purgeInterval property is changed.
 * Fires when layer is added to map (if stream service is associated with an archive feature service) and when graphics are updated on the map due to new ones being added or removed (for example purged).
 * @param {string} type
 * @param {function({count: number, url: string, target: !StreamLayer}): void|function({target: !StreamLayer}): void|function({error: !Error, target: !StreamLayer}): void|function({error: !Error, filter: ?, target: !StreamLayer}): void|function({message: ?, target: !StreamLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_StreamLayer.StreamLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_StreamLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/TableDataSource"
/** @const */
tsickle_declare_module.esri_layers_TableDataSource = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TableDataSource */

/**
 * @constructor
 * @struct
 * Creates a new TableDataSource object.
 * @param {!Object=} json JSON object representing the TableDataSource.
 */
tsickle_declare_module.esri_layers_TableDataSource.TableDataSource = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_TableDataSource.TableDataSource.prototype.dataSourceName;
 /** @type {string} */
tsickle_declare_module.esri_layers_TableDataSource.TableDataSource.prototype.gdbVersion;
 /** @type {string} */
tsickle_declare_module.esri_layers_TableDataSource.TableDataSource.prototype.workspaceId;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_TableDataSource.TableDataSource.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_TableDataSource */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/TileInfo"
/** @const */
tsickle_declare_module.esri_layers_TileInfo = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TileInfo */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TileInfo */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TileInfo */

/**
 * @constructor
 * @struct
 * Creates a new object describing the given tiling scheme.
 * @param {?} properties Properties describing the tiling scheme.
 */
tsickle_declare_module.esri_layers_TileInfo.TileInfo = function(properties) {};
 /** @type {number} */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.dpi;
 /** @type {string} */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.format;
 /** @type {number} */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.height;
 /** @type {!Array<!LOD>} */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.lods;
 /** @type {!Point} */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.origin;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.spatialReference;
 /** @type {number} */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.width;

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_layers_TileInfo.TileInfo.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_TileInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/TiledMapServiceLayer"
/** @const */
tsickle_declare_module.esri_layers_TiledMapServiceLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TiledMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TiledMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TiledMapServiceLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TiledMapServiceLayer */

/**
 * @constructor
 * @struct
 * Creates a new TiledMapServiceLayer object.
 */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer = function() {};
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer.prototype.initialExtent;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer.prototype.spatialReference;
 /** @type {!TileInfo} */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer.prototype.tileInfo;

/**
 * Method to implement when extending TiledMapServiceLayer.
 * @param {number} level Requested tile's level.
 * @param {number} row Requested tile's row.
 * @param {number} column Requested tile's column.
 * @return {string}
 */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer.prototype.getTileUrl = function(level, row, column) {};

/**
 * Reloads all the tiles in the current view.
 * @return {void}
 */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer.prototype.refresh = function() {};

/**
 * Specify areas to not show tiles.
 * @return {!Array<?>}
 */
tsickle_declare_module.esri_layers_TiledMapServiceLayer.TiledMapServiceLayer.prototype.setExclusionAreas = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_TiledMapServiceLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/TimeInfo"
/** @const */
tsickle_declare_module.esri_layers_TimeInfo = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TimeInfo */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TimeInfo */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_TimeInfo */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo = function() {};
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_CENTURIES;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_DAYS;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_DECADES;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_HOURS;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_MILLISECONDS;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_MINUTES;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_MONTHS;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_SECONDS;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_UNKNOWN;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_WEEKS;
 /** @type {?} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.UNIT_YEARS;
 /** @type {string} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.endTimeField;
 /** @type {!LayerTimeOptions} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.exportOptions;
 /** @type {string} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.startTimeField;
 /** @type {!TimeExtent} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.timeExtent;
 /** @type {number} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.timeInterval;
 /** @type {string} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.timeIntervalUnits;
 /** @type {!TimeReference} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.timeReference;
 /** @type {string} */
tsickle_declare_module.esri_layers_TimeInfo.TimeInfo.prototype.trackIdField;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_TimeInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/TimeReference"
/** @const */
tsickle_declare_module.esri_layers_TimeReference = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_layers_TimeReference.TimeReference = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri_layers_TimeReference.TimeReference.prototype.respectsDaylightSaving;
 /** @type {string} */
tsickle_declare_module.esri_layers_TimeReference.TimeReference.prototype.timeZone;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_TimeReference */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/VectorTileLayer"
/** @const */
tsickle_declare_module.esri_layers_VectorTileLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_VectorTileLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_VectorTileLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_VectorTileLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_VectorTileLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_VectorTileLayer */

/**
 * @constructor
 * @struct
 * Create a new VectorTileLayer object.
 * @param {?} url The URL to the vector tile service or style JSON that will be used to draw the layer.
 * @param {!VectorTileLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer = function(url, options) {};
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.initialExtent;
 /** @type {string} */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.name;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.spatialReference;
 /** @type {!TileInfo} */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.tileInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.url;

/**
 * Returns an object that contains the current style information for the layer.
 * @return {?}
 */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.getStyle = function() {};

/**
 * Changes the style properties used to render the layers.
 * @param {?} styleUrl A url to a JSON file containing the stylesheet information to render the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.setStyle = function(styleUrl) {};

/**
 * Fires when the style is changed on the layer.
 * Fires when the layer has finished updating its content.
 * Fires when the layer begins to update its content.
 * @param {string} type
 * @param {function({style: ?, target: !VectorTileLayer}): void|function({target: !VectorTileLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_VectorTileLayer.VectorTileLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_VectorTileLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WCSConnection"
/** @const */
tsickle_declare_module.esri_layers_WCSConnection = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSConnection */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSConnection */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSConnection */

/**
 * @constructor
 * @struct
 * Creates a new WCSConnection.
 * @param {string} url URL to a WCS Server endpoint.
 * @param {!WCSConnectionOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection = function(url, options) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.INTERPOLATION_BILINEAR;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.INTERPOLATION_CUBICCONVOLUTION;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.INTERPOLATION_NEARESTNEIGHBOR;
 /** @type {!Array<!WCSCoverageDescription>} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.coverages;
 /** @type {!Array<!DimensionalDefinition>} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.multidimensionalDefinition;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.name;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.onlineResources;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.profiles;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.supportedFormats;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.supportedInterpolations;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.supportedVersions;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.url;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.version;

/**
 * Triggered when successfully retrieved list of coverages.
 * Triggered when an error occurred.
 * @param {string} type
 * @param {function({target: !WCSConnection}): void|function({error: !Error, target: !WCSConnection}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_WCSConnection.WCSConnection.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WCSConnection */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WCSCoverageDescription"
/** @const */
tsickle_declare_module.esri_layers_WCSCoverageDescription = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSCoverageDescription */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSCoverageDescription */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSCoverageDescription */

/**
 * @constructor
 * @struct
 * Creates a new WCSCoverageDescription.
 * @param {string} coverageDocument The coverage description XML.
 * @param {string} version The version of the coverage description document.
 */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription = function(coverageDocument, version) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.INTERPOLATION_BILINEAR;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.INTERPOLATION_CUBICCONVOLUTION;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.INTERPOLATION_NEARESTNEIGHBOR;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.bandInfo;
 /** @type {number} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.columns;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.description;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.id;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.lonLatEnvelope;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.multiDimensionalInfo;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.nativeCoverageDescription;
 /** @type {!Point} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.resolution;
 /** @type {number} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.rows;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.supportedFormats;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.supportedInterpolations;
 /** @type {!TimeInfo} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.timeInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSCoverageDescription.WCSCoverageDescription.prototype.version;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WCSCoverageDescription */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WCSLayer"
/** @const */
tsickle_declare_module.esri_layers_WCSLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WCSLayer */

/**
 * @constructor
 * @struct
 * Creates a new WCSLayer.
 * @param {string} url URL to a WCS Server endpoint.
 * @param {!WCSLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer = function(url, options) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.INTERPOLATION_BILINEAR;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.INTERPOLATION_CUBICCONVOLUTION;
 /** @type {?} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.INTERPOLATION_NEARESTNEIGHBOR;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.bandIds;
 /** @type {!WCSCoverageDescription} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.coverageDescription;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.coverageId;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.format;
 /** @type {number} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.interpolation;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.loaded;
 /** @type {!Array<!DimensionalDefinition>} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.multidimensionalDefinition;
 /** @type {number} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.opacity;
 /** @type {!Function} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.pixelFilter;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.pixelType;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.projectedFullExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.suspended;
 /** @type {!TimeInfo} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.timeInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.url;
 /** @type {string} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.version;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.visible;
 /** @type {!WCSConnection} */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.wcsConnection;

/**
 * Returns the context of the Canvas.
 * @return {?}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.getContext = function() {};

/**
 * Returns an array of graphics as a Promise.
 * @param {!Point} mapPoint The map point location in which to identify.
 * @return {?}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.identify = function(mapPoint) {};

/**
 * Resumes layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.resume = function() {};

/**
 * Sets the opacity of the layer.
 * @param {number} opacity Value from 0 to 1, where 0 is 100% transparent and 1 has no transparency.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.setOpacity = function(opacity) {};

/**
 * Sets a pixelFilter on the layer.
 * @param {!Function} pixelFilter The function defining the PixelFilter to set on the layer.
 * @param {boolean=} doNotRefresh When true the layer will not refresh the map image.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.setPixelFilter = function(pixelFilter, doNotRefresh) {};

/**
 * Determines if the layer will update its content based on the map's current time extent.
 * @param {boolean} use Use true to update the layer's content based on the map's current time extent.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.setUseMapTime = function(use) {};

/**
 * Sets the visibility of the layer.
 * @param {boolean} isVisible Indicate whether to set layer visibility.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.setVisibility = function(isVisible) {};

/**
 * Suspends layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.suspend = function() {};

/**
 * Fires when there is a problem retrieving a layer.
 * Fires after layer properties for the layer are successfully populated.
 * Fires when the layer opacity has been changed, and returns an object with the opacity value.
 * This event is fired when the layer's refreshInterval is modified.
 * Fires when a layer resumes drawing.
 * Fires when a layer's minScale and/or maxScale is changed.
 * Fires when a layer's scale visibility changes.
 * Fires when a layer suspends drawing
 * Fires when a layer has finished updating its content.
 * Fires when a layer begins to update its content.
 * Fires when the layer visibility has been changed, and returns an object with a Boolean visible property containing the new visibility value of the layer.
 * @param {string} type
 * @param {function({error: !Error, target: !WCSLayer}): void|function({layer: !Layer, target: !WCSLayer}): void|function({opacity: number, target: !WCSLayer}): void|function({target: !WCSLayer}): void|function({visible: boolean, target: !WCSLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_WCSLayer.WCSLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WCSLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WFSLayer"
/** @const */
tsickle_declare_module.esri_layers_WFSLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WFSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WFSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WFSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WFSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WFSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WFSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WFSLayer */

/**
 * @constructor
 * @struct
 * Creates a new WFSLayer object
 * @param {!WFSLayerOptions} options See options table below for full descriptions of the properties needed for this object.
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer = function(options) {};
 /** @type {?} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.customParameters;
 /** @type {!Array<!Field>} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.fields;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.fullExtent;
 /** @type {string} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.geometryType;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.graphics;
 /** @type {string} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.id;
 /** @type {!InfoTemplate} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.infoTemplate;
 /** @type {!Renderer} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.renderer;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.visible;

/**
 * Creates a WFSLayer using the provided JSON object.
 * @param {!Object} json The input JSON.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.fromJson = function(json) {};

/**
 * Redraws all the graphics in the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.redraw = function() {};

/**
 * Refreshes the features in the WFS layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.refresh = function() {};

/**
 * Sets the custom parameters used on the WFS layer.
 * @param {?} customParameters The customParameters object used append WFS requests.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.setCustomParameters = function(customParameters) {};

/**
 * Sets the default line symbol to be used if no renderer is specified.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.setLineSymbol = function() {};

/**
 * Sets the default point symbol to be used if no renderer is specified.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.setPointSymbol = function() {};

/**
 * Sets the default polygon symbol to be used if no renderer is specified.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.setPolygonSymbol = function() {};

/**
 * Converts the WFSLayer instance to a JSON object.
 * @return {?}
 */
tsickle_declare_module.esri_layers_WFSLayer.WFSLayer.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WFSLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WMSLayer"
/** @const */
tsickle_declare_module.esri_layers_WMSLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMSLayer */

/**
 * @constructor
 * @struct
 * Creates a new WMSLayer object.
 * @param {string} url URL to the OGC Web Map Service.
 * @param {!WMSLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer = function(url, options) {};
 /** @type {!Array<!Extent>} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.allExtents;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.copyright;
 /** @type {?} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.customLayerParameters;
 /** @type {?} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.customParameters;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.description;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.featureInfoFormat;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.getFeatureInfoURL;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.getMapURL;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.imageFormat;
 /** @type {!Array<!WMSLayerInfo>} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.layerInfos;
 /** @type {number} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.maxHeight;
 /** @type {number} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.maxWidth;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.spatialReference;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.spatialReferences;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.version;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.visibleLayers;

/**
 * Returns the current map image format.
 * @return {string}
 */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.getImageFormat = function() {};

/**
 * Sets the custom parameters used on the WMS layer.
 * @param {?} customParameters The customParameters object used append WMS requests.
 * @param {?=} customLayerParameters The customLayerParameters object used append specific WMS layer requests.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.setCustomParameters = function(customParameters, customLayerParameters) {};

/**
 * Set the map image format; valid values are "png", "jpg", "pdf", "bmp", "gif" and "svg".
 * @param {string} format The image format.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.setImageFormat = function(format) {};

/**
 * Specify whether the background image is transparent.
 * @param {boolean} transparency When true the background image is transparent.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.setImageTransparency = function(transparency) {};

/**
 * Specify a list of layer names to updates the visible layers.
 * @param {!Array<string>} layers An array of layer ids.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WMSLayer.WMSLayer.prototype.setVisibleLayers = function(layers) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WMSLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WMSLayerInfo"
/** @const */
tsickle_declare_module.esri_layers_WMSLayerInfo = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMSLayerInfo */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMSLayerInfo */

/**
 * @constructor
 * @struct
 * Creates a new WMSLayerInfo object.
 * @param {!WMSLayerInfoOptions=} options See options list for parameters.
 */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo = function(options) {};
 /** @type {!Array<!Extent>} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.allExtents;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.description;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.extent;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.legendURL;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.name;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.queryable;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.showPopup;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.spatialReferences;
 /** @type {!Array<!WMSLayerInfo>} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.subLayers;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMSLayerInfo.WMSLayerInfo.prototype.title;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WMSLayerInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WMTSLayer"
/** @const */
tsickle_declare_module.esri_layers_WMTSLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMTSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMTSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMTSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMTSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMTSLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMTSLayer */

/**
 * @constructor
 * @struct
 * Creates a new WMTSLayer object.
 * @param {string} url URL for the WMTS endpoint.
 * @param {!WMTSLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.copyright;
 /** @type {?} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.customLayerParameters;
 /** @type {?} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.customParameters;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.format;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.initialExtent;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.layerInfos;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.serviceMode;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.spatialReference;
 /** @type {!TileInfo} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.tileInfo;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.version;

/**
 * Set the active layer for the WMTS service.
 * @param {!WMTSLayerInfo} WMTSLayerInfo The WMTSLayerInfo for the layer to make active.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.setActiveLayer = function(WMTSLayerInfo) {};

/**
 * Sets the custom parameters used on the WMTS layer.
 * @param {?} customParameters The customParameters object used append WMTS requests.
 * @param {?=} customLayerParameters The customLayerParameters object used append specific WMTS layer requests.
 * @return {void}
 */
tsickle_declare_module.esri_layers_WMTSLayer.WMTSLayer.prototype.setCustomParameters = function(customParameters, customLayerParameters) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WMTSLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WMTSLayerInfo"
/** @const */
tsickle_declare_module.esri_layers_WMTSLayerInfo = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WMTSLayerInfo */

/**
 * @constructor
 * @struct
 * Creates a new WMTSLayerInfo object.
 * @param {!WMTSLayerInfoOptions} options An object that defines the layer info options.
 */
tsickle_declare_module.esri_layers_WMTSLayerInfo.WMTSLayerInfo = function(options) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WMTSLayerInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/WebTiledLayer"
/** @const */
tsickle_declare_module.esri_layers_WebTiledLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WebTiledLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WebTiledLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WebTiledLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WebTiledLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_WebTiledLayer */

/**
 * @constructor
 * @struct
 * Creates a new WebTiledLayer.
 * @param {string} urlTemplate The URL template to retrieve the tiles.
 * @param {!WebTiledLayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_WebTiledLayer.WebTiledLayer = function(urlTemplate, options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_WebTiledLayer.WebTiledLayer.prototype.copyright;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WebTiledLayer.WebTiledLayer.prototype.fullExtent;
 /** @type {!Extent} */
tsickle_declare_module.esri_layers_WebTiledLayer.WebTiledLayer.prototype.initialExtent;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_layers_WebTiledLayer.WebTiledLayer.prototype.spatialReference;
 /** @type {!TileInfo} */
tsickle_declare_module.esri_layers_WebTiledLayer.WebTiledLayer.prototype.tileInfo;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_layers_WebTiledLayer.WebTiledLayer.prototype.tileServers;

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_WebTiledLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/layer"
/** @const */
tsickle_declare_module.esri_layers_layer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_layer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_layer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_layer */

/**
 * @constructor
 * @struct
 * Creates a new Layer object.
 * @param {!LayerOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_layer.Layer = function(options) {};
 /** @type {string} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.attributionDataUrl;
 /** @type {string} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.className;
 /** @type {!Credential} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.credential;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.hasAttributionData;
 /** @type {string} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.id;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.loaded;
 /** @type {!Error} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.loadError;
 /** @type {number} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.minScale;
 /** @type {number} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.opacity;
 /** @type {number} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.refreshInterval;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.suspended;
 /** @type {string} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.url;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.visible;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_layer.Layer.prototype.visibleAtMapScale;

/**
 * Adds a new attribute or changes the value of an existing attribute on the layer's node.
 * @param {string} name The name of the attribute.
 * @param {string} value The value of the attribute.
 * @return {!Layer}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.attr = function(name, value) {};

/**
 * Asynchrously returns custom data for the layer when available.
 * @return {?}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.getAttributionData = function() {};

/**
 * Returns reference to the map control the layer is added to.
 * @return {!Map}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.getMap = function() {};

/**
 * Returns the layer's DOM node.
 * @return {!HTMLElement}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.getNode = function() {};

/**
 * Sets the visibility of the layer to "false".
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.hide = function() {};

/**
 * Returns true if the layer is visible at the given scale.
 * @param {number} scale The scale at which to check if the layer is visible.
 * @return {boolean}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.isVisibleAtScale = function(scale) {};

/**
 * Resumes layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.resume = function() {};

/**
 * Set the maximum scale for the layer.
 * @param {number} scale The maximum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.setMaxScale = function(scale) {};

/**
 * Set the minimum scale for the layer.
 * @param {number} scale The minimum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.setMinScale = function(scale) {};

/**
 * Sets the opacity of the layer.
 * @param {number} opacity Value from 0 to 1, where 0 is 100% transparent and 1 has no transparency.
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.setOpacity = function(opacity) {};

/**
 * Changes the layer's refresh interval to the given value (in minutes).
 * @param {number} interval Refresh interval of the layer in minutes.
 * @return {!Layer}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.setRefreshInterval = function(interval) {};

/**
 * Set the scale range for the layer.
 * @param {number} minScale The minimum scale at which the layer is visible.
 * @param {number} maxScale The maximum scale at which the layer is visible.
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.setScaleRange = function(minScale, maxScale) {};

/**
 * Sets the visibility of the layer.
 * @param {boolean} isVisible Set the visibility of the layer.
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.setVisibility = function(isVisible) {};

/**
 * Sets the visibility of the layer to "true".
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.show = function() {};

/**
 * Suspends layer drawing.
 * @return {void}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.suspend = function() {};

/**
 * Fires when there is a problem retrieving a layer.
 * Fires after layer properties for the layer are successfully populated.
 * Fires when the layer opacity has been changed, and returns an object with the opacity value.
 * This event is fired when the layer's refreshInterval is modified.
 * Fires when a layer resumes drawing.
 * Fires when a layer's minScale and/or maxScale is changed.
 * Fires when a layer's scale visibility changes.
 * Fires when a layer suspends drawing.
 * Fires any time a layer has finished loading or updating itself.
 * Fires when a layer has finished updating its content.
 * Fires when a layer begins to update its content.
 * Fires when the layer visibility has been changed, and returns an object with a Boolean visible property containing the new visibility value of the layer.
 * @param {string} type
 * @param {function({error: !Error, target: !Layer}): void|function({layer: !Layer, target: !Layer}): void|function({opacity: number, target: !Layer}): void|function({target: !Layer}): void|function({visible: boolean, target: !Layer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_layers_layer.Layer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_layer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/layers/pixelfilters/StretchFilter"
/** @const */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_layers_pixelfilters_StretchFilter */

/**
 * @constructor
 * @struct
 * Creates an instance of a StretchFilter.
 * @param {!StretchFilterOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter = function(options) {};
 /** @type {boolean} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.dra;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.gamma;
 /** @type {number} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.max;
 /** @type {number} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.maxPercent;
 /** @type {number} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.min;
 /** @type {number} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.minPercent;
 /** @type {number} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.numberOfStandardDeviations;
 /** @type {string} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.outputPixelType;
 /** @type {!Array<!Array<?>>} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.statistics;
 /** @type {number} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.stretchType;
 /** @type {boolean} */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.useGamma;

/**
 * It takes a pixelData object as input and processes it.
 * @param {?} pixelData The pixelData object used as filter input.
 * @return {void}
 */
tsickle_declare_module.esri_layers_pixelfilters_StretchFilter.StretchFilter.prototype.filter = function(pixelData) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_layers_pixelfilters_StretchFilter */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/map"
/** @const */
tsickle_declare_module.esri_map = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_map */

/**
 * @constructor
 * @struct
 * Creates a new map inside of the given HTML container, which is often a DIV element.
 * @param {(string|!Node)} divId Container id for the referencing map.
 * @param {!MapOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_map.Map = function(divId, options) {};
 /** @type {!Attribution} */
tsickle_declare_module.esri_map.Map.prototype.attribution;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.autoResize;
 /** @type {!Color} */
tsickle_declare_module.esri_map.Map.prototype.backgroundColor;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_map.Map.prototype.basemapLayerIds;
 /** @type {!Extent} */
tsickle_declare_module.esri_map.Map.prototype.extent;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.fadeOnZoom;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.force3DTransforms;
 /** @type {!Extent} */
tsickle_declare_module.esri_map.Map.prototype.geographicExtent;
 /** @type {!GraphicsLayer} */
tsickle_declare_module.esri_map.Map.prototype.graphics;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_map.Map.prototype.graphicsLayerIds;
 /** @type {number} */
tsickle_declare_module.esri_map.Map.prototype.height;
 /** @type {string} */
tsickle_declare_module.esri_map.Map.prototype.id;
 /** @type {!InfoWindowBase} */
tsickle_declare_module.esri_map.Map.prototype.infoWindow;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isClickRecenter;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isDoubleClickZoom;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isKeyboardNavigation;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isMapNavigation;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isPan;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isPanArrows;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isPinchZoom;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isRubberBandZoom;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isScrollWheel;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isScrollWheelZoom;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isShiftDoubleClickZoom;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.isZoomSlider;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_map.Map.prototype.layerIds;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.loaded;
 /** @type {string} */
tsickle_declare_module.esri_map.Map.prototype.navigationMode;
 /** @type {!Point} */
tsickle_declare_module.esri_map.Map.prototype.position;
 /** @type {!Node} */
tsickle_declare_module.esri_map.Map.prototype.root;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.showAttribution;
 /** @type {!SnappingManager} */
tsickle_declare_module.esri_map.Map.prototype.snappingManager;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_map.Map.prototype.spatialReference;
 /** @type {!TimeExtent} */
tsickle_declare_module.esri_map.Map.prototype.timeExtent;
 /** @type {boolean} */
tsickle_declare_module.esri_map.Map.prototype.visible;
 /** @type {number} */
tsickle_declare_module.esri_map.Map.prototype.width;

/**
 * Adds an Esri Layer to the map.
 * @param {!Layer} layer Layer to be added to the map.
 * @param {number=} index A layer can be added at a specified index in the map.
 * @return {!Layer}
 */
tsickle_declare_module.esri_map.Map.prototype.addLayer = function(layer, index) {};

/**
 * Adds multiple layers to a map.
 * @param {!Array<!Layer>} layers Layers to be added to the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.addLayers = function(layers) {};

/**
 * Adds a new attribute or changes the value of an existing attribute on the map container.
 * @param {string} name The name of the attribute.
 * @param {string} value The value of the attribute.
 * @return {!Map}
 */
tsickle_declare_module.esri_map.Map.prototype.attr = function(name, value) {};

/**
 * Centers and zooms the map.
 * @param {!Point} mapPoint Centers the map on the specified x,y location.
 * @param {number} levelOrFactor When using an ArcGISTiledMapServiceLayer, the map is zoomed to the level specified.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.centerAndZoom = function(mapPoint, levelOrFactor) {};

/**
 * Centers the map based on map coordinates as the center point.
 * @param {!Point} mapPoint Centers the map on the specified x,y location.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.centerAt = function(mapPoint) {};

/**
 * Destroys the map instance.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.destroy = function() {};

/**
 * Disallows clicking on a map to center it.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableClickRecenter = function() {};

/**
 * Disallows double clicking on a map to zoom in a level and center the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableDoubleClickZoom = function() {};

/**
 * Disallows panning and zooming using the keyboard.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableKeyboardNavigation = function() {};

/**
 * Disallows all map navigation except the slider and pan arrows.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableMapNavigation = function() {};

/**
 * Disallows panning a map using the mouse.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disablePan = function() {};

/**
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disablePinchZoom = function() {};

/**
 * Disallows zooming in or out on a map using a bounding box.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableRubberBandZoom = function() {};

/**
 * Disables navigation of the map based on mouse scroll wheel.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableScrollWheel = function() {};

/**
 * Disallows zooming in or out on a map using the mouse scroll wheel.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableScrollWheelZoom = function() {};

/**
 * Disallows shift double clicking on a map to zoom in a level and center the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableShiftDoubleClickZoom = function() {};

/**
 * Disables snapping on the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.disableSnapping = function() {};

/**
 * Permits users to click on a map to center it.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableClickRecenter = function() {};

/**
 * Permits users to double click on a map to zoom in a level and center the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableDoubleClickZoom = function() {};

/**
 * Permits users to pan and zoom using the keyboard.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableKeyboardNavigation = function() {};

/**
 * Allows all map navigation.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableMapNavigation = function() {};

/**
 * Permits users to pan a map using the mouse.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enablePan = function() {};

/**
 * Enables the user to work with pinch zoom navigation for touch-enabled devices.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enablePinchZoom = function() {};

/**
 * Permits users to zoom in or out on a map using a bounding box.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableRubberBandZoom = function() {};

/**
 * Enables the user to navigate the map based on mouse scroll wheel.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableScrollWheel = function() {};

/**
 * Permits users to zoom in or out on a map using the mouse scroll wheel.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableScrollWheelZoom = function() {};

/**
 * Permits users to shift double click on a map to zoom in a level and center the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.enableShiftDoubleClickZoom = function() {};

/**
 * Enable snapping on the map when working with the Editor, Measurement widget or the Draw and Edit toolbars.
 * @param {?=} snapOptions See the object specifications table below for the structure of the  snapOptions  object.
 * @return {!SnappingManager}
 */
tsickle_declare_module.esri_map.Map.prototype.enableSnapping = function(snapOptions) {};

/**
 * Returns the name of the current basemap.
 * @return {string}
 */
tsickle_declare_module.esri_map.Map.prototype.getBasemap = function() {};

/**
 * Sets an InfoWindow's anchor when calling InfoWindow.show.
 * @param {!ScreenPoint} screenCoords The anchor point in screen units.
 * @return {string}
 */
tsickle_declare_module.esri_map.Map.prototype.getInfoWindowAnchor = function(screenCoords) {};

/**
 * Returns an individual layer of a map.
 * @param {string} id ID assigned to the layer.
 * @return {!Layer}
 */
tsickle_declare_module.esri_map.Map.prototype.getLayer = function(id) {};

/**
 * Return an array of layers visible at the current scale.
 * @return {!Array<!Layer>}
 */
tsickle_declare_module.esri_map.Map.prototype.getLayersVisibleAtScale = function() {};

/**
 * Gets the current level of detail  for the map.
 * @return {number}
 */
tsickle_declare_module.esri_map.Map.prototype.getLevel = function() {};

/**
 * Returns the maximum visible scale of the map.
 * @return {number}
 */
tsickle_declare_module.esri_map.Map.prototype.getMaxScale = function() {};

/**
 * Returns the maximum zoom level of the map.
 * @return {number}
 */
tsickle_declare_module.esri_map.Map.prototype.getMaxZoom = function() {};

/**
 * Returns the minimum visible scale of the map.
 * @return {number}
 */
tsickle_declare_module.esri_map.Map.prototype.getMinScale = function() {};

/**
 * Returns the minimum zoom level of the map.
 * @return {number}
 */
tsickle_declare_module.esri_map.Map.prototype.getMinZoom = function() {};

/**
 * Returns the current map scale.
 * @return {number}
 */
tsickle_declare_module.esri_map.Map.prototype.getScale = function() {};

/**
 * Returns the current zoom level of the map.
 * @return {number}
 */
tsickle_declare_module.esri_map.Map.prototype.getZoom = function() {};

/**
 * Hides the pan arrows from the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.hidePanArrows = function() {};

/**
 * Hides the zoom slider from the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.hideZoomSlider = function() {};

/**
 * Pans the map south.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panDown = function() {};

/**
 * Pans the map west.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panLeft = function() {};

/**
 * Pans the map southwest.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panLowerLeft = function() {};

/**
 * Pans the map southeast.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panLowerRight = function() {};

/**
 * Pans the map east.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panRight = function() {};

/**
 * Pans the map north.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panUp = function() {};

/**
 * Pans the map northwest.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panUpperLeft = function() {};

/**
 * Pans the map northeast.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.panUpperRight = function() {};

/**
 * Removes all layers from the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.removeAllLayers = function() {};

/**
 * Removes the specified layer from the map.
 * @param {!Layer} layer Layer to be removed from the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.removeLayer = function(layer) {};

/**
 * Changes the layer order in the map.
 * @param {!Layer} layer The layer to be moved.
 * @param {number} index Refers to the location for placing the layer.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.reorderLayer = function(layer, index) {};

/**
 * Repositions the map DIV on the page.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.reposition = function() {};

/**
 * Resizes the map DIV.
 * @param {boolean=} immediate By default, the actual resize logic is delayed internally in order to throttle spurious resize events dispatched by some browsers.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.resize = function(immediate) {};

/**
 * Change the background color of the map.
 * @param {(string|!Color)} color Color specified using either a named string (e.g.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.setBackgroundColor = function(color) {};

/**
 * Change the map's current basemap.
 * @param {string} basemap A valid basemap name.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.setBasemap = function(basemap) {};

/**
 * Sets the extent of the map.
 * @param {!Extent} extent Sets the minx, miny, maxx, and maxy for a map.
 * @param {boolean=} fit When true, for maps that contain tiled map service layers, you are guaranteed to have the input extent shown completely on the map.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.setExtent = function(extent, fit) {};

/**
 * If true and a map click event occurs, it may show the map's infoWindow.
 * @param {boolean} enabled Toggles the behavior initially set by the map's showInfoWindowOnClick constructor option.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.setInfoWindowOnClick = function(enabled) {};

/**
 * Sets the map to the specified level.
 * @param {number} level The level ID.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.setLevel = function(level) {};

/**
 * Sets the default cursor for the map.
 * @param {string} cursor A standard CSS cursor value.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.setMapCursor = function(cursor) {};

/**
 * Sets the map scale to the specified value.
 * @param {number} scale A map scale value greater than 0.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.setScale = function(scale) {};

/**
 * Sets the TimeExtent for the map.
 * @param {!TimeExtent} timeExtent Set the time extent for which data is displayed on the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.setTimeExtent = function(timeExtent) {};

/**
 * Set the time slider associated with the map.
 * @param {!TimeSlider} timeSlider The time slider dijit to associate with the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.setTimeSlider = function(timeSlider) {};

/**
 * Show or hide the map.
 * @param {boolean} visible If true, map will be visible.
 * @return {!Map}
 */
tsickle_declare_module.esri_map.Map.prototype.setVisibility = function(visible) {};

/**
 * Set the map zoom level to the given value.
 * @param {number} zoom A valid zoom level value.
 * @return {?}
 */
tsickle_declare_module.esri_map.Map.prototype.setZoom = function(zoom) {};

/**
 * Shows the pan arrows on the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.showPanArrows = function() {};

/**
 * Shows the zoom slider on the map.
 * @return {void}
 */
tsickle_declare_module.esri_map.Map.prototype.showZoomSlider = function() {};

/**
 * Converts a single screen point to map coordinates.
 * @param {!ScreenPoint} screenPoint Converts screen coordinates to map coordinates.
 * @return {!Point}
 */
tsickle_declare_module.esri_map.Map.prototype.toMap = function(screenPoint) {};

/**
 * Converts a single map point to screen coordinate.
 * @param {!Point} mapPoint Converts map coordinates to screen coordinates.
 * @return {!ScreenPoint}
 */
tsickle_declare_module.esri_map.Map.prototype.toScreen = function(mapPoint) {};

/**
 * Fired when the map's basemap is changed.
 * Event is fired before the map gets destroyed.
 * Fires when a user single clicks on the map using the mouse and the mouse pointer is within the map region of the HTML page.
 * Fires when a user double clicks on the map using the mouse and the mouse pointer is within the map region of the HTML page.
 * Fires when the extent of the map has changed.
 * Fires when a keyboard key is pressed.
 * Fires when a keyboard key is released.
 * Fires any time a layer is added to the map.
 * Fires after specified layer has been added to the map.
 * Fires after the layer has been removed.
 * Fires when the map layer order has been changed.
 * Fires when a map layer resumes drawing.
 * Fires after all layers are added to the map using the map.addLayers method.
 * Fires after all the layers have been removed.
 * Fires when all the layers have been reordered.
 * Fires when a map layer suspends drawing.
 * Fires when the first or base layer has been successfully added to the map.
 * Fires when a mouse button is pressed down and the mouse cursor is in the map region of the HTML page.
 * Fires while the mouse is being dragged until the mouse button is released.
 * Fires when a mouse button is released and the user stops dragging the mouse.
 * Fires when a mouse button is pressed down and the user starts to drag the mouse.
 * Fires any time the mouse pointer moves over the map region.
 * Fires when the mouse moves out of the map region of the HTML page.
 * Fires when the mouse moves into the map region of the HTML page.
 * Fires when the mouse button is released and the mouse pointer is within the map region of the HTML page.
 * Fires when the mouse wheel is scrolled.
 * Fires during the pan process.
 * Fires when the pan is complete.
 * Fires when a user commences panning.
 * Fires when the map DIV is repositioned.
 * Fires when the map's container has been resized.
 * Fires when the map's timeExtent property is set.
 * Fires when the page is refreshed.
 * Fires after layers that are updating their content have completed.
 * Fires when one or more layers begins updating their content.
 * Fires during the zoom process.
 * Fires when the zoom is complete.
 * Fires when a user commences zooming.
 * @param {string} type
 * @param {function({current: ?, previous: ?, target: !Map}): void|function({map: !Map, target: !Map}): void|function(!AGSMouseEvent): void|function({delta: !Point, extent: !Extent, levelChange: boolean, lod: !LOD, target: !Map}): void|function(!KeyboardEvent): void|function({layer: !Layer, target: !Map}): void|function({error: !Error, layer: !Layer, target: !Map}): void|function({index: number, layer: !Layer, target: !Map}): void|function({layers: !Array<?>, target: !Map}): void|function({target: !Map}): void|function({layerIds: !Array<string>, target: !Map}): void|function({delta: !Point, extent: !Extent, target: !Map}): void|function({extent: !Extent, target: !Map}): void|function({x: number, y: number, target: !Map}): void|function({extent: !Extent, height: number, width: number, target: !Map}): void|function({timeExtent: !TimeExtent, target: !Map}): void|function({error: !Error, target: !Map}): void|function({anchor: !Point, extent: !Extent, zoomFactor: number, target: !Map}): void|function({anchor: !Point, extent: !Extent, level: number, zoomFactor: number, target: !Map}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_map.Map.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_map */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/DataSourceProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_DataSourceProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_DataSourceProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_DataSourceProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_DataSourceProxy */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy = function() {};
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.displayFieldName;
 /** @type {!Array<!Field>} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.fields;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.geometryType;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.id;
 /** @type {boolean} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.isBroken;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.mapWidgetId;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.name;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.objectIdFieldName;
 /** @type {boolean} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.supportsSelection;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.typeIdFieldName;
 /** @type {!Array<!FeatureType>} */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.types;

/**
 * Clear the selection.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.clearSelection = function() {};

/**
 * Executes a query and get the result.
 * @param {!Query} query The query object to apply.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.executeQuery = function(query) {};

/**
 * An object that contains service level metadata about whether or not the layer supports queries using statistics, order by fields, DISTINCT, pagination, query with distance, and returning queries with extents.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.getAdvancedQueryCapabilities = function() {};

/**
 * Retrieve the associated id of the data source that supports selection.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.getAssociatedSelectionDataSourceId = function() {};

/**
 * Get the associated popupInfo for the data source if any available.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.getPopupInfo = function() {};

/**
 * Get the associated render object for the data source if any available.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.getRenderer = function() {};

/**
 * Get the feature type from a feature coming from the data source.
 * @param {!Graphic} feature A feature coming from the data source
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.getTypeFromFeature = function(feature) {};

/**
 * Returns the value corresponding to a field name from a feature coming from the data source.
 * @param {!Graphic} feature A feature coming from the data source
 * @param {string} fieldName The name of the field for which the value should be returned.
 * @return {(string|number)}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.getValueFromFeature = function(feature, fieldName) {};

/**
 * Select features in the data source using a query.
 * @param {!Query} query The query object to apply
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.selectFeatures = function(query) {};

/**
 * Select features in the data source using a collection of object ids.
 * @param {!Array<number>} objectIds The collection of object ids of the features to select.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_DataSourceProxy.DataSourceProxy.prototype.selectFeaturesByObjectIds = function(objectIds) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_DataSourceProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/ExtensionBase"
/** @const */
tsickle_declare_module.esri_opsdashboard_ExtensionBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_ExtensionBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_ExtensionBase */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase = function() {};
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.CIRCLE;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.EXTENT;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.FREEHAND_POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.FREEHAND_POLYLINE;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.LINE;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.POINT;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.POLYLINE;
 /** @type {boolean} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.isNative;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.portalHelperServices;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.portalUrl;

/**
 * Get the collection of data sources from the host application.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.getDataSourceProxies = function() {};

/**
 * Get the data source corresponding to the data source id from the host application.
 * @param {string} dataSourceId The data source id
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.getDataSourceProxy = function(dataSourceId) {};

/**
 * Get the collection of map widgets from the host application.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.getMapWidgetProxies = function() {};

/**
 * Get the map widget corresponding to the map widget id from the host application.
 * @param {string} mapWidgetId A map widget id
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.getMapWidgetProxy = function(mapWidgetId) {};

/**
 * Called when an error occurred during the initialization process with the host application.
 * @param {!Error} err The error that occurred.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.hostInitializationError = function(err) {};

/**
 * Called by the host application when the relationship has been established with the extension.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.hostReady = function() {};

/**
 * Called by the host application when a map widget has been added to the current view.
 * @param {!MapWidgetProxy} mapWidgetProxy A map widget id.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.mapWidgetAdded = function(mapWidgetProxy) {};

/**
 * Called by the host application when a map widget has been removed from the current view.
 * @param {string} mapWidgetId A map widget id.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.mapWidgetRemoved = function(mapWidgetId) {};

/**
 * Event indicating that a new data source has been added into the host operation view.
 * Event indicating that a data source has been removed from the host operation view.
 * Event indicating that the initialization process was successful.
 * Event indicating that the initialization process encountered an error.
 * Event indicating that a new map widget has been added into the host operation view.
 * Event indicating that a map widget has been removed from the host operation view.
 * @param {string} type
 * @param {function({dataSourceProxy: ?, target: !ExtensionBase}): void|function({dataSourceId: string, target: !ExtensionBase}): void|function({target: !ExtensionBase}): void|function({error: !Error, target: !ExtensionBase}): void|function({mapWidgetProxy: !MapWidgetProxy, target: !ExtensionBase}): void|function({mapWidgetId: string, target: !ExtensionBase}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionBase.ExtensionBase.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_ExtensionBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/ExtensionConfigurationBase"
/** @const */
tsickle_declare_module.esri_opsdashboard_ExtensionConfigurationBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_ExtensionConfigurationBase */
/**
 * @extends {ExtensionBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_ExtensionConfigurationBase.ExtensionConfigurationBase = function() {};
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_ExtensionConfigurationBase.ExtensionConfigurationBase.prototype.config;

/**
 * Indicates if the configuration is ready to be persisted or not.
 * @param {boolean} ready Indicates that the configuration is ready to be persisted or not.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_ExtensionConfigurationBase.ExtensionConfigurationBase.prototype.readyToPersistConfig = function(ready) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_ExtensionConfigurationBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/FeatureActionConfigurationProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_FeatureActionConfigurationProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_FeatureActionConfigurationProxy */
/**
 * @extends {ExtensionConfigurationBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionConfigurationProxy.FeatureActionConfigurationProxy = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_FeatureActionConfigurationProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/FeatureActionFeatures"
/** @const */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures = function() {};
 /** @type {!DataSourceProxy} */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.dataSourceProxy;

/**
 * Add a feature to the host collection.
 * @param {(number|!Graphic)} featureOrObjectId
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.addFeature = function(featureOrObjectId) {};

/**
 * Add a collection of features or collection of object id in the host collection.
 * @param {(!Array<!Graphic>|!Array<number>)} featuresOrObjectIds
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.addFeatures = function(featuresOrObjectIds) {};

/**
 * Remove all the features from the host collection.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.clear = function() {};

/**
 * Test if a feature exists in the host collection.
 * @param {(number|!Graphic)} featureOrObjectId Feature to test existance for.
 * @return {boolean}
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.contains = function(featureOrObjectId) {};

/**
 * Returns the index of a feature in the host collection.
 * @param {(number|!Graphic)} featureOrObjectId Feature to return index from.
 * @return {number}
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.indexOf = function(featureOrObjectId) {};

/**
 * Remove a collection of features from the host collection.
 * @param {(number|!Graphic)} featureOrObjectId Feature to remove.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.removeFeature = function(featureOrObjectId) {};

/**
 * Remove a feature from the host collection.
 * @param {(!Array<!Graphic>|!Array<number>)} featuresOrObjectIds Features to remove.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures.FeatureActionFeatures.prototype.removeFeatures = function(featuresOrObjectIds) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_FeatureActionFeatures */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/GraphicsLayerProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy = function() {};
 /** @type {number} */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.maxScale;
 /** @type {number} */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.minScale;
 /** @type {number} */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.opacity;
 /** @type {!Renderer} */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.renderer;
 /** @type {boolean} */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.visible;

/**
 * Update a graphic in the host graphics layer with a new version.
 * @param {!Graphic} graphic The graphic to update in the host graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.addOrUpdateGraphic = function(graphic) {};

/**
 * Update graphics in the host graphics layer with a new version.
 * @param {!Array<!Graphic>} graphics The graphics to update in the host graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.addOrUpdateGraphics = function(graphics) {};

/**
 * Removes all the graphics from the host graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.clear = function() {};

/**
 * Removes from the host graphics layer a graphic.
 * @param {!Graphic} graphic The graphic to remove from the host graphics layer.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.removeGraphic = function(graphic) {};

/**
 * Sets the host graphics layer maximum scale.
 * @param {number} maxScale
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.setMaxScale = function(maxScale) {};

/**
 * Sets the host graphics layer minimum scale.
 * @param {number} minScale
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.setMinScale = function(minScale) {};

/**
 * Sets the host graphics layer opacity ratio.
 * @param {number} opacity An opacity ratio between 0 and 1.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.setOpacity = function(opacity) {};

/**
 * Sets the host graphics layer renderer.
 * @param {!Renderer} renderer Since the Windows operations dashboard is built using ArcGIS Runtime SDK for WPF, only renderers supported by the WPF should be used, such as SimpleRenderer, UniqueValueRenderer and ClassBreaksRenderer.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.setRenderer = function(renderer) {};

/**
 * Set the visibility of the host graphics layer.
 * @param {boolean} visibility The new visibility value.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy.GraphicsLayerProxy.prototype.setVisibility = function(visibility) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_GraphicsLayerProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/MapToolConfigurationProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_MapToolConfigurationProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapToolConfigurationProxy */
/**
 * @extends {ExtensionConfigurationBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_MapToolConfigurationProxy.MapToolConfigurationProxy = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_MapToolConfigurationProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/MapToolProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_MapToolProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapToolProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapToolProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapToolProxy */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy = function() {};
 /** @type {number} */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.availableDisplaySize;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.displaySize;
 /** @type {!MapWidgetProxy} */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.mapWidgetProxy;
 /** @type {?} */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.previousState;

/**
 * Activates a drawing activity on the host map widget.
 * @param {?} options Drawing options.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.activateMapDrawing = function(options) {};

/**
 * Called by the host application when the available size for the map tool user experience has changed (user resizes the application or the map widget).
 * @param {?} availableSize The size available on the host map widget for the map tool user experience.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.availableDisplaySizeChanged = function(availableSize) {};

/**
 * Deactivates the drawing activity on the host map widget.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.deactivateMapDrawing = function() {};

/**
 * Deactivate the map tool user experience.
 * @param {?} state A JSON object that needs to be persisted in the host until the next activation of the map tool user experience.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.deactivateMapTool = function(state) {};

/**
 * Called by the host application when the user has completed the drawing activity on the map.
 * @param {!Geometry} geometry The geometry captured by the user during the drawing activity.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.mapDrawComplete = function(geometry) {};

/**
 * Change the size of the user experience area in the host application for this map tool user experience.
 * @param {?} size The new size for the user experience.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.setDisplaySize = function(size) {};

/**
 * Event indicating that the available display size for the map tool user experience has changed.
 * Event indicating that a previously activate drawing activity has been completed by the user.
 * @param {string} type
 * @param {function({size: ?, target: !MapToolProxy}): void|function({geometry: !Geometry, target: !MapToolProxy}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_opsdashboard_MapToolProxy.MapToolProxy.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_MapToolProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/MapWidgetProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapWidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapWidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapWidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapWidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_MapWidgetProxy */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy = function() {};
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.id;
 /** @type {string} */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.name;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.spatialReference;

/**
 * Creates a graphics layer in the host map.
 * @param {?=} options The options for the new graphics layer
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.createGraphicsLayerProxy = function(options) {};

/**
 * Destroys in the host map a host graphics layer.
 * @param {!GraphicsLayerProxy} graphicsLayerProxy The host graphics layer to destroy.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.destroyGraphicsLayerProxy = function(graphicsLayerProxy) {};

/**
 * Gets the current host map extent.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.getMapExtent = function() {};

/**
 * Pans the map to a new location.
 * @param {!Point} mapPoint A new location with the same spatial reference as the host map.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.panTo = function(mapPoint) {};

/**
 * Sets an extent on the host map extent.
 * @param {!Extent} extent A new map extent.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.setExtent = function(extent) {};

/**
 * Subscribes to the host map events.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.subscribeToMapEvents = function() {};

/**
 * Unsubscribes from the host map events.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.unsubscribeFromMapEvents = function() {};

/**
 * Event indicating that the host map extent has changed.
 * @param {string} type
 * @param {function({extent: !Extent, target: !MapWidgetProxy}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_opsdashboard_MapWidgetProxy.MapWidgetProxy.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_MapWidgetProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/WidgetConfigurationProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy */
/**
 * @extends {ExtensionConfigurationBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy.WidgetConfigurationProxy = function() {};

/**
 * Called by the host application when the user has changed the selected data source in the data source selector.
 * @param {!DataSourceProxy} dataSourceProxy The selected data source.
 * @param {?} dataSourceConfig The associated data source config.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy.WidgetConfigurationProxy.prototype.dataSourceSelectionChanged = function(dataSourceProxy, dataSourceConfig) {};

/**
 * Get the data source config for a data source.
 * @param {(string|!DataSourceProxy)} dataSourceProxyOrDataSourceId A data source or a data source id.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy.WidgetConfigurationProxy.prototype.getDataSourceConfig = function(dataSourceProxyOrDataSourceId) {};

/**
 * Called by the host application when the user has changed the selected map widget in the map widget selector.
 * @param {!MapWidgetProxy} mapWidgetProxy The selected map widget.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy.WidgetConfigurationProxy.prototype.mapWidgetSelectionChanged = function(mapWidgetProxy) {};

/**
 * Event indicating the user has changed the selected data source for the configuration.
 * Event indicating the user has changed the selected map widget for the configuration.
 * @param {string} type
 * @param {function({dataSourceConfig: ?, dataSourceProxy: !DataSourceProxy, target: !WidgetConfigurationProxy}): void|function({mapWidgetProxy: !MapWidgetProxy, target: !WidgetConfigurationProxy}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy.WidgetConfigurationProxy.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_WidgetConfigurationProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/WidgetProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_WidgetProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_WidgetProxy */
/**
 * @extends {ExtensionBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.dataSourceConfigs;
 /** @type {!FeatureActionFeatures} */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.featureActionFeatures;
 /** @type {boolean} */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.hasDefaultFeatureAction;
 /** @type {boolean} */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.hasFeatureActions;

/**
 * Activate a drawing toolbar on a map widget.
 * @param {?=} options
 * @param {!MapWidgetProxy=} mapWidgetProxy The target map widget.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.activateDrawingToolbar = function(options, mapWidgetProxy) {};

/**
 * Called by the host application when a data source state has expired.
 * @param {!DataSourceProxy} dataSourceProxy
 * @param {?=} associated dataSourceConfig
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.dataSourceExpired = function(dataSourceProxy, associated) {};

/**
 * Deactivate the drawing toolbar on the map widget.
 * @param {!MapWidgetProxy=} mapWidgetProxy The target map widget.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.deactivateDrawingToolbar = function(mapWidgetProxy) {};

/**
 * Called by the host application when the user has canceled the drawing activity.
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.drawingToolbarDeactivated = function() {};

/**
 * Execute the default feature action.
 * @param {(!Array<!Graphic>|!Array<number>)} featuresOrObjectIds
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.executeDefaultFeatureAction = function(featuresOrObjectIds) {};

/**
 * Get the data source config for a data source.
 * @param {(string|!DataSourceProxy)} dataSourceProxyOrDataSourceId A data source or a data source id.
 * @return {?}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.getDataSourceConfig = function(dataSourceProxyOrDataSourceId) {};

/**
 * Called by the host application when the user has finished the drawing activity.
 * @param {!Geometry} geometry
 * @return {void}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.toolbarDrawComplete = function(geometry) {};

/**
 * Event indicating that a data source validity has expired.
 * Event indicating that the user has deactivated the previously activated drawing toolbar on the map widget.
 * Event indicating the user has finished a drawing activity with the previously activated drawing toolbar.
 * @param {string} type
 * @param {function({dataSourceConfig: ?, dataSourceProxy: !DataSourceProxy, target: !WidgetProxy}): void|function({target: !WidgetProxy}): void|function({geometry: !Geometry, target: !WidgetProxy}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_opsdashboard_WidgetProxy.WidgetProxy.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_WidgetProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/opsdashboard/featureActionProxy"
/** @const */
tsickle_declare_module.esri_opsdashboard_featureActionProxy = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_featureActionProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_featureActionProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_featureActionProxy */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_opsdashboard_featureActionProxy */
/**
 * @extends {ExtensionBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_opsdashboard_featureActionProxy.featureActionProxy = function() {};

/**
 * Event raised when the feature action should execute for a set of features.
 * @param {string} type
 * @param {function({config: ?, dataSourceProxy: !DataSourceProxy, featureSet: !FeatureSet, target: !featureActionProxy}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_opsdashboard_featureActionProxy.featureActionProxy.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_opsdashboard_featureActionProxy */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/plugins/FeatureLayerStatistics"
/** @const */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_plugins_FeatureLayerStatistics */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_plugins_FeatureLayerStatistics */

/**
 * @constructor
 * @struct
 * Creates a new object that is used to calculate statistics about features in a feature layer.
 * @param {!FeatureLayerStatisticsOptions} params Parameters that define the FeatureLayerStatistics.
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics = function(params) {};

/**
 * This function is called internally when the plugin is added to a feature layer.
 * @param {!FeatureLayer} layer The target FeatureLayer that have the plugin added.
 * @param {?=} options Additional options that will be passed into the FeatureLayerStatistics constructor when it is added as a plugin to the target FeatureLayer.
 * @return {void}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.add = function(layer, options) {};

/**
 * Calculate class breaks for data stored in the given field.
 * @param {?} params See the Object Specifications table below for the structure of the params object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getClassBreaks = function(params) {};

/**
 * Calculate basic statistics for data stored in the given field.
 * @param {?} params See the Object Specifications table below for the structure of the params object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getFieldStatistics = function(params) {};

/**
 * Calculate heatmap statistics.
 * @param {?=} options See the Object Specifications table below for the structure of the options object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getHeatmapStatistics = function(options) {};

/**
 * Calculate histogram for data stored in the given field.
 * @param {?} params See the Object Specifications table below for the structure of the params object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getHistogram = function(params) {};

/**
 * Get a random sampling of features in this layer.
 * @param {?=} options See the Object Specifications table below for the structure of the options object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getSampleFeatures = function(options) {};

/**
 * Returns a promise that resolves to an object containing spatial statistics for an array of input features.
 * @param {?} params See the Object Specifications table below for the structure of the params object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getSpatialStatistics = function(params) {};

/**
 * Find optimal scale range for viewing this layer.
 * @param {?=} options See the Object Specifications table below for the structure of the options object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getSuggestedScaleRange = function(options) {};

/**
 * Find unique values available for the given field.
 * @param {?} params See the Object Specifications table below for the structure of the params object.
 * @return {?}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.getUniqueValues = function(params) {};

/**
 * This function is called internally when the plugin is removed from a feature layer.
 * @param {!FeatureLayer} layer The target FeatureLayer that will have the plugin removed.
 * @return {void}
 */
tsickle_declare_module.esri_plugins_FeatureLayerStatistics.FeatureLayerStatistics.prototype.remove = function(layer) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_plugins_FeatureLayerStatistics */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/plugins/spatialIndex"
/** @const */
tsickle_declare_module.esri_plugins_spatialIndex = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_plugins_spatialIndex */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_plugins_spatialIndex */
 /** @type {{add: function((!FeatureLayer|!Map), ?): void, remove: function(): void}} */
tsickle_declare_module.esri_plugins_spatialIndex.spatialIndex;

/* TODO: ExportAssignment in tsickle_declare_module.esri_plugins_spatialIndex */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/process/Processor"
/** @const */
tsickle_declare_module.esri_process_Processor = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_Processor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_Processor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_Processor */

/**
 * @constructor
 * @struct
 * Creates a processor.
 * @param {!ProcessorOptions=} options Configuration options for the processor.
 */
tsickle_declare_module.esri_process_Processor.Processor = function(options) {};
 /** @type {boolean} */
tsickle_declare_module.esri_process_Processor.Processor.prototype.drawFeatures;
 /** @type {boolean} */
tsickle_declare_module.esri_process_Processor.Processor.prototype.fetchWithWorker;
 /** @type {!Array<!FeatureLayer>} */
tsickle_declare_module.esri_process_Processor.Processor.prototype.layers;
 /** @type {boolean} */
tsickle_declare_module.esri_process_Processor.Processor.prototype.passFeatures;
 /** @type {boolean} */
tsickle_declare_module.esri_process_Processor.Processor.prototype.requireWorkerSupport;

/**
 * Add layer to processor.
 * @param {!FeatureLayer} layer FeatureLayer to be added.
 * @return {void}
 */
tsickle_declare_module.esri_process_Processor.Processor.prototype.addLayer = function(layer) {};

/**
 * Remove layer from processor.
 * @param {!FeatureLayer} layer FeatureLayer to be removed.
 * @return {void}
 */
tsickle_declare_module.esri_process_Processor.Processor.prototype.removeLayer = function(layer) {};

/**
 * Synchronize the layers the processor handles with the map's GraphicsLayer and GraphicsLayer subclasses (FeatureLayer etc).
 * @param {!Map} map The map instance to synchronize layers with.
 * @return {void}
 */
tsickle_declare_module.esri_process_Processor.Processor.prototype.setMap = function(map) {};

/**
 * Start the processor.
 * @return {void}
 */
tsickle_declare_module.esri_process_Processor.Processor.prototype.start = function() {};

/**
 * Stop the processor.
 * @return {void}
 */
tsickle_declare_module.esri_process_Processor.Processor.prototype.stop = function() {};

/**
 * Unset the map and detach processor from all layers.
 * @return {void}
 */
tsickle_declare_module.esri_process_Processor.Processor.prototype.unsetMap = function() {};

/**
 * Fires when the processor is started.
 * Fires when the processor is stopped.
 * @param {string} type
 * @param {function({target: !Processor}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_process_Processor.Processor.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_process_Processor */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/process/SpatialIndex"
/** @const */
tsickle_declare_module.esri_process_SpatialIndex = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_SpatialIndex */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_SpatialIndex */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_SpatialIndex */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_SpatialIndex */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_process_SpatialIndex */

/**
 * @constructor
 * @struct
 * Creates a SpatialIndex.
 * @param {!SpatialIndexOptions=} options Configuration options for the processor.
 */
tsickle_declare_module.esri_process_SpatialIndex.SpatialIndex = function(options) {};

/**
 * Searches index for items which intersect the test object.
 * @param {(!Graphic|!Point|!Array<number>|!Extent)} test The point or area to intersect.
 * @param {string=} layerId ID assigned to the layer.
 * @param {boolean=} getRects Whether to get the rectangle object with data in leaf, otherwise just get the stored data.
 * @return {?}
 */
tsickle_declare_module.esri_process_SpatialIndex.SpatialIndex.prototype.intersects = function(test, layerId, getRects) {};

/**
 * Searches for the nearest point(s) to the passed point within the specified criteria.
 * @param {?} criteria See the object specifications table below for the structure of the  criteria  object.
 * @param {string=} layerId ID assigned to the layer.
 * @return {?}
 */
tsickle_declare_module.esri_process_SpatialIndex.SpatialIndex.prototype.nearest = function(criteria, layerId) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_process_SpatialIndex */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/BlendRenderer"
/** @const */
tsickle_declare_module.esri_renderers_BlendRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_BlendRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_BlendRenderer */

/**
 * @constructor
 * @struct
 * Creates a new BlendRenderer object.
 * @param {!BlendRendererOptions=} params Required and optional parameters.
 */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer = function(params) {};
 /** @type {string} */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.blendMode;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.fields;
 /** @type {string} */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.normalizationField;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.opacityStops;
 /** @type {!Symbol} */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.symbol;

/**
 * Sets the mode that determines how colors are blended together.
 * @param {string} blendMode The blend mode used to determine how colors are blended together.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.setBlendMode = function(blendMode) {};

/**
 * Sets an array of objects to blend containing the field name and color to use.
 * @param {!Array<?>} fields An array of objects to blend containing the field name and color to use.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.setFields = function(fields) {};

/**
 * Sets the field to normalize
 * @param {string} field The field to normalize.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.setNormalizationField = function(field) {};

/**
 * Sets an array of objects which determines opacity.
 * @param {!Array<?>} opacityStops Sets an array of objects which determines opacity.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.setOpacityStops = function(opacityStops) {};

/**
 * Sets the symbol to blend.
 * @param {!Symbol} symbol The symbol to blend.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_BlendRenderer.BlendRenderer.prototype.setSymbol = function(symbol) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_BlendRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/ClassBreaksRenderer"
/** @const */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_ClassBreaksRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_ClassBreaksRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_ClassBreaksRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_ClassBreaksRenderer */

/**
 * @constructor
 * @struct
 * Creates a new ClassBreaksRenderer object.
 * Creates a new ClassBreaksRenderer.
 * @param {!Symbol|!Object} defaultSymbol_or_json Default symbol for the renderer. / JSON object representing the ClassBreaksRenderer.
 * @param {(string|!Function)=} attributeField Specify either the attribute field the renderer uses to match values or starting at version 3.3, a function that returns a value to be compared against class breaks.
 */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer = function(defaultSymbol_or_json, attributeField) {};
 /** @type {string} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.attributeField;
 /** @type {!FillSymbol} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.backgroundFillSymbol;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.breaks;
 /** @type {string} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.classificationMethod;
 /** @type {!Symbol} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.defaultSymbol;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.infos;
 /** @type {boolean} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.isMaxInclusive;
 /** @type {?} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.legendOptions;
 /** @type {string} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.normalizationField;
 /** @type {number} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.normalizationTotal;
 /** @type {string} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.normalizationType;
 /** @type {string} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.valueExpression;
 /** @type {string} */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.valueExpressionTitle;

/**
 * Adds a class break.
 * @param {?} minValueOrInfo The value can be provided as individual arguments or as an info object.
 * @param {number=} maxValue Maximum value in the break.
 * @param {!Symbol=} symbol Symbol used for the break.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.addBreak = function(minValueOrInfo, maxValue, symbol) {};

/**
 * Remove all existing class breaks for this renderer.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.clearBreaks = function() {};

/**
 * Returns the index at which rendering and legend information can be found in the break infos array for the given graphic.
 * @param {!Graphic} graphic The graphic whose rendering and legend information index in the break infos array will be returned.
 * @return {number}
 */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.getBreakIndex = function(graphic) {};

/**
 * Returns rendering and legend information (as defined by the renderer) associated with the given graphic.
 * @param {!Graphic} graphic The graphic whose rendering and legend information will be returned.
 * @return {?}
 */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.getBreakInfo = function(graphic) {};

/**
 * Removes a break.
 * @param {number} minValue Minimum value in the break to remove.
 * @param {number} maxValue Maximum value in the break to remove.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.removeBreak = function(minValue, maxValue) {};

/**
 * A graphic or feature is considered a match for a class break for the first break where the graphic's attribute value is greater than or equal to the class's min value and less than or equal to the class's max value.
 * @param {boolean} enable Set true to enable the max inclusive behavior.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_ClassBreaksRenderer.ClassBreaksRenderer.prototype.setMaxInclusive = function(enable) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_ClassBreaksRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/DotDensityRenderer"
/** @const */
tsickle_declare_module.esri_renderers_DotDensityRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_DotDensityRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_DotDensityRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_DotDensityRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_DotDensityRenderer */

/**
 * @constructor
 * @struct
 * Creates a new instance of dot density renderer.
 * @param {!DotDensityRendererOptions} params An object with various options.
 */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer = function(params) {};
 /** @type {!Color} */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.backgroundColor;
 /** @type {string} */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.dotShape;
 /** @type {number} */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.dotSize;
 /** @type {number} */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.dotValue;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.fields;
 /** @type {!LineSymbol} */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.outline;

/**
 * Updates the background color of the shape.
 * @param {!Color} color Background color.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.setBackgroundColor = function(color) {};

/**
 * Updates the size of the dot.
 * @param {number} size The size of the dot in pixels.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.setDotSize = function(size) {};

/**
 * Updates the value that a dot represents.
 * @param {number} value The value that a dot represents.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.setDotValue = function(value) {};

/**
 * Updates the outline symbol of the shape.
 * @param {!LineSymbol} outline The line symbol to use on the outline of the feature.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_DotDensityRenderer.DotDensityRenderer.prototype.setOutline = function(outline) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_DotDensityRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/HeatmapRenderer"
/** @const */
tsickle_declare_module.esri_renderers_HeatmapRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_HeatmapRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_HeatmapRenderer */

/**
 * @constructor
 * @struct
 * Creates a new HeatmapRenderer object from json.
 * @param {!HeatmapRendererOptions} options A parameterized list of options for constructing a HeatmapRenderer.
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer = function(options) {};
 /** @type {number} */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.blurRadius;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.colors;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.colorStops;
 /** @type {string} */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.field;
 /** @type {number} */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.maxPixelIntensity;
 /** @type {number} */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.minPixelIntensity;

/**
 * Set the renderer's blur radius.
 * @param {number} blurRadius The radius (in pixels) of the circle over which the majority of each points value is spread out over.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.setBlurRadius = function(blurRadius) {};

/**
 * Set the colors used to interpolate the color ramp of the renderer.
 * @param {!Array<string>} colors An array of CSS color strings (#RGB, #RRGGBB, rgb(r,g,b), rgba(r,g,b,a)).
 * @return {void}
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.setColors = function(colors) {};

/**
 * Sets the colorStops property  and returns the HeatmapRenderer instance to allow method chaining.
 * @param {!Array<?>} stops An array of colorStop objects describing the renderer's color ramp with more specificity than just colors.
 * @return {!HeatmapRenderer}
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.setColorStops = function(stops) {};

/**
 * Set the attribute field that the renderer uses to determine the weight on the heatmap points.
 * @param {string} field The name of the attribute field used to weight the heatmap points.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.setField = function(field) {};

/**
 * Set the renderer's maxPixelIntensity.
 * @param {number} maxPixelIntensity The pixel intensity value which is assigned the final color in the color ramp.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.setMaxPixelIntensity = function(maxPixelIntensity) {};

/**
 * Set the renderer's minPixelIntensity.
 * @param {number} minPixelIntensity The pixel intensity value which is assigned the initial color in the color ramp.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.setMinPixelIntensity = function(minPixelIntensity) {};

/**
 * Returns the JSON string representation of the renderer's options.
 * @return {string}
 */
tsickle_declare_module.esri_renderers_HeatmapRenderer.HeatmapRenderer.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_HeatmapRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/Renderer"
/** @const */
tsickle_declare_module.esri_renderers_Renderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_Renderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_Renderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_Renderer */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer = function() {};
 /** @type {?} */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.colorInfo;
 /** @type {?} */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.opacityInfo;
 /** @type {?} */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.rotationInfo;
 /** @type {?} */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.sizeInfo;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.visualVariables;

/**
 * Gets the color for the Graphic.
 * @param {!Graphic} graphic Graphic to get color from.
 * @param {?=} options This optional parameter supports colorInfo.
 * @return {!Color}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.getColor = function(graphic, options) {};

/**
 * Returns the opacity value for the specified graphic.
 * @param {!Graphic} graphic Returns the opacity value appropriate for the given graphic.
 * @param {?=} options This optional parameter supports opacityInfo.
 * @return {number}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.getOpacity = function(graphic, options) {};

/**
 * Returns the angle of rotation (in degrees) for the graphic calculated using rotationInfo.
 * @param {!Graphic} graphic An input graphic for which you want to get the angle of rotation.
 * @param {?=} options This optional parameter supports rotationInfo.
 * @return {number}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.getRotationAngle = function(graphic, options) {};

/**
 * Return the symbol size (in pixels) for the graphic, calculated using sizeInfo.
 * @param {!Graphic} graphic The graphic for which you want to calculate the symbol size.
 * @param {?=} options This optional parameter supports sizeInfo.
 * @return {number}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.getSize = function(graphic, options) {};

/**
 * Gets the symbol for the Graphic.
 * @param {!Graphic} graphic Graphic to symbolize.
 * @return {!Symbol}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.getSymbol = function(graphic) {};

/**
 * Returns the visual variable of the specified type.
 * @param {string} type The type of visual variable desired.
 * @return {!Array<?>}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.getVisualVariablesForType = function(type) {};

/**
 * Indicates if the renderer has defined visualVariables.
 * @return {boolean}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.hasVisualVariables = function() {};

/**
 * Deprecated.
 * @param {?} info An info object that defines the color.
 * @return {!Renderer}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.setColorInfo = function(info) {};

/**
 * Deprecated.
 * @param {?} info The info parameter is an object with the same properties as opacityInfo.
 * @return {!Renderer}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.setOpacityInfo = function(info) {};

/**
 * Deprecated.
 * @param {?} info An object with the same properties as rotationInfo.
 * @return {!Renderer}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.setRotationInfo = function(info) {};

/**
 * Deprecated.
 * @param {?} info An object with the same properties as sizeInfo.
 * @return {!Renderer}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.setSizeInfo = function(info) {};

/**
 * Sets the renderer with the specified  visualVariables.
 * @param {!Array<?>} visualParams The specified visualVariables.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.setVisualVariables = function(visualParams) {};

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_renderers_Renderer.Renderer.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_Renderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/ScaleDependentRenderer"
/** @const */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_ScaleDependentRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_ScaleDependentRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_ScaleDependentRenderer */

/**
 * @constructor
 * @struct
 * Create a ScaleDependentRenderer.
 * @param {!ScaleDependentRendererOptions=} options Various options to configure this renderer.
 */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer = function(options) {};
 /** @type {string} */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer.prototype.rangeType;
 /** @type {?} */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer.prototype.rendererInfos;

/**
 * Adds the specified renderer info to the array of existing renderers.
 * @param {?} info An object as defined in the rendererInfos property.
 * @return {!ScaleDependentRenderer}
 */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer.prototype.addRendererInfo = function(info) {};

/**
 * Returns the renderer info for the input graphic.
 * @param {!Graphic} graphic The graphic for which you want to get renderer info.
 * @return {?}
 */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer.prototype.getRendererInfo = function(graphic) {};

/**
 * Returns the renderer info for the specified scale.
 * @param {number} scale Returns the renderer info for the specified scale.
 * @return {?}
 */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer.prototype.getRendererInfoByScale = function(scale) {};

/**
 * Returns the rendererInfo for the specified zoom level.
 * @return {?}
 */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer.prototype.getRendererInfoByZoom = function() {};

/**
 * Replaces existing rendererInfos with new ones.
 * @param {?} infos An array of objects as defined in the rendererInfos property.
 * @return {!ScaleDependentRenderer}
 */
tsickle_declare_module.esri_renderers_ScaleDependentRenderer.ScaleDependentRenderer.prototype.setRendererInfos = function(infos) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_ScaleDependentRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/SimpleRenderer"
/** @const */
tsickle_declare_module.esri_renderers_SimpleRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_SimpleRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_SimpleRenderer */

/**
 * @constructor
 * @struct
 * Creates a new SimpleRenderer object with a Symbol parameter.
 * Creates a new Simple Renderer.
 * @param {!Symbol|!Object} symbol_or_json Symbol to use for the renderer. / JSON object representing the SimpleRenderer.
 */
tsickle_declare_module.esri_renderers_SimpleRenderer.SimpleRenderer = function(symbol_or_json) {};
 /** @type {string} */
tsickle_declare_module.esri_renderers_SimpleRenderer.SimpleRenderer.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri_renderers_SimpleRenderer.SimpleRenderer.prototype.label;
 /** @type {!Symbol} */
tsickle_declare_module.esri_renderers_SimpleRenderer.SimpleRenderer.prototype.symbol;

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_SimpleRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/SymbolAger"
/** @const */
tsickle_declare_module.esri_renderers_SymbolAger = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_SymbolAger */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_SymbolAger */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_renderers_SymbolAger.SymbolAger = function() {};

/**
 * All subclasses override this method to provide their own implementation to calculate aging and return the appropriate symbol.
 * @param {!Symbol} symbol The symbol to age.
 * @param {!Graphic} graphic Feature being rendered.
 * @return {!Symbol}
 */
tsickle_declare_module.esri_renderers_SymbolAger.SymbolAger.prototype.getAgedSymbol = function(symbol, graphic) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_SymbolAger */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/TemporalRenderer"
/** @const */
tsickle_declare_module.esri_renderers_TemporalRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TemporalRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TemporalRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TemporalRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TemporalRenderer */

/**
 * @constructor
 * @struct
 * Creates a new TemporalRenderer object that can be used with a time-aware feature layer.
 * @param {!Renderer} observationRenderer Renderer for regular/historic observations.
 * @param {!Renderer=} latestObservationRenderer Renderer for the most current observations.In the snippet below RouteID is the field that contains the trackID for the feature layer this is used to display the  latest observation for the specified tracks.
 * @param {!Renderer=} trackRenderer Renderer for the tracks.
 * @param {!SymbolAger=} observationAger Symbol ager for regular observations.
 */
tsickle_declare_module.esri_renderers_TemporalRenderer.TemporalRenderer = function(observationRenderer, latestObservationRenderer, trackRenderer, observationAger) {};

/**
 * Returns the symbol used to render the graphic.
 * @param {!Graphic} graphic The input graphic.
 * @return {!Symbol}
 */
tsickle_declare_module.esri_renderers_TemporalRenderer.TemporalRenderer.prototype.getSymbol = function(graphic) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_TemporalRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/TimeClassBreaksAger"
/** @const */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeClassBreaksAger */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeClassBreaksAger */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeClassBreaksAger */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeClassBreaksAger */

/**
 * @constructor
 * @struct
 * Creates a new TimeClassBreaksAgerObject with the specified time breaks inforamtion.
 * @param {!Array<!TimeClassBreaksAgerOptions>} params Each element in the array is an object that describes the class breaks information.
 * @param {string=} timeUnits The unit in which the minimum and maximum break values are measured.
 */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger = function(params, timeUnits) {};
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_DAYS;
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_HOURS;
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_MILLISECONDS;
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_MINUTES;
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_MONTHS;
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_SECONDS;
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_WEEKS;
 /** @type {?} */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.UNIT_YEARS;

/**
 * Calculates aging and returns the appropriate symbol.
 * @param {!Symbol} symbol The symbol to age.
 * @param {!Graphic} graphic Feature being rendered.
 * @return {!Symbol}
 */
tsickle_declare_module.esri_renderers_TimeClassBreaksAger.TimeClassBreaksAger.prototype.getAgedSymbol = function(symbol, graphic) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_TimeClassBreaksAger */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/TimeRampAger"
/** @const */
tsickle_declare_module.esri_renderers_TimeRampAger = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeRampAger */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeRampAger */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeRampAger */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_TimeRampAger */

/**
 * @constructor
 * @struct
 * Creates a new TimeRampAger object with the specified color and size ranges.
 * @param {!Array<!Color>=} colorRange An array containing the minimum and maximum color values.
 * @param {!Array<number>=} sizeRange An array containing the minimum and maximum size in  pixels.
 * @param {!Array<number>=} alphaRange An array containing the minimum and maximum alpha opacity values.
 */
tsickle_declare_module.esri_renderers_TimeRampAger.TimeRampAger = function(colorRange, sizeRange, alphaRange) {};

/**
 * Calculates aging and returns the appropriate symbol.
 * @param {!Symbol} symbol The symbol to age.
 * @param {!Graphic} graphic Feature being rendered.
 * @return {!Symbol}
 */
tsickle_declare_module.esri_renderers_TimeRampAger.TimeRampAger.prototype.getAgedSymbol = function(symbol, graphic) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_TimeRampAger */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/UniqueValueRenderer"
/** @const */
tsickle_declare_module.esri_renderers_UniqueValueRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_UniqueValueRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_UniqueValueRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_UniqueValueRenderer */

/**
 * @constructor
 * @struct
 * Creates a new UniqueValueRenderer object.
 * Creates a new Unique Value Renderer.
 * @param {!Symbol|!Object} defaultSymbol_or_json Default symbol for the renderer. / JSON object representing the UniqueValueRenderer.
 * @param {(string|!Function)=} attributeField Specify either the attribute field the renderer uses to match values or starting at version 3.3, a function that returns a value to be compared against unique values.
 * @param {string=} attributeField2 If needed, specify an additional attribute field the renderer uses to match values.
 * @param {string=} attributeField3 If needed, specify an additional attribute field the renderer uses to match values.
 * @param {string=} fieldDelimeter String inserted between the values of different fields.
 */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer = function(defaultSymbol_or_json, attributeField, attributeField2, attributeField3, fieldDelimeter) {};
 /** @type {string} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.attributeField;
 /** @type {string} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.attributeField2;
 /** @type {string} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.attributeField3;
 /** @type {string} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.defaultLabel;
 /** @type {!Symbol} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.defaultSymbol;
 /** @type {string} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.fieldDelimiter;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.infos;
 /** @type {?} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.legendOptions;
 /** @type {string} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.valueExpression;
 /** @type {string} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.valueExpressionTitle;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.values;

/**
 * Adds a unique value and symbol.
 * @param {?} valueOrInfo Value to match with.
 * @param {!Symbol=} symbol Symbol used for the value.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.addValue = function(valueOrInfo, symbol) {};

/**
 * Returns rendering and legend information (as defined by the renderer) associated with the given graphic.
 * @param {!Graphic} graphic The graphic whose rendering and legend information will be returned.
 * @return {?}
 */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.getUniqueValueInfo = function(graphic) {};

/**
 * Removes a unique value.
 * @param {string} value Value to remove.
 * @return {void}
 */
tsickle_declare_module.esri_renderers_UniqueValueRenderer.UniqueValueRenderer.prototype.removeValue = function(value) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_UniqueValueRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/VectorFieldRenderer"
/** @const */
tsickle_declare_module.esri_renderers_VectorFieldRenderer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_VectorFieldRenderer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_VectorFieldRenderer */

/**
 * @constructor
 * @struct
 * Creates a new VectorFieldRenderer object.
 * @param {!VectorFieldRendererOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer = function(options) {};
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.FLOW_FROM;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.FLOW_TO;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_BEAUFORT_FEET;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_BEAUFORT_KM;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_BEAUFORT_KN;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_BEAUFORT_METER;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_BEAUFORT_MILE;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_CLASSIFIED_ARROW;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_OCEAN_CURRENT_KN;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_OCEAN_CURRENT_M;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_SCALAR;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_SINGLE_ARROW;
 /** @type {?} */
tsickle_declare_module.esri_renderers_VectorFieldRenderer.VectorFieldRenderer.STYLE_WIND_BARBS;

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_VectorFieldRenderer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/jsonUtils"
/** @const */
tsickle_declare_module.esri_renderers_jsonUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_renderers_jsonUtils */
 /** @type {{fromJson: function(!Object): !Renderer}} */
tsickle_declare_module.esri_renderers_jsonUtils.jsonUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_jsonUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/renderers/smartMapping"
/** @const */
tsickle_declare_module.esri_renderers_smartMapping = {};
 /** @type {{createClassedColorRenderer: function(?): ?, createClassedSizeRenderer: function(?): ?, createColorInfo: function(?): ?, createColorRenderer: function(?): ?, createHeatmapRenderer: function(?): ?, createOpacityInfo: function(?): ?, createPredominanceRenderer: function(?): ?, createSizeInfo: function(?): ?, createSizeRenderer: function(?): ?, createTypeRenderer: function(?): ?, getSuggestedField: function(?): ?}} */
tsickle_declare_module.esri_renderers_smartMapping.smartMapping;

/* TODO: ExportAssignment in tsickle_declare_module.esri_renderers_smartMapping */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/request"
/** @const */
tsickle_declare_module.esri_request = {};
 /** @type {?} */
tsickle_declare_module.esri_request.request;

/* TODO: ExportAssignment in tsickle_declare_module.esri_request */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/CartographicLineSymbol"
/** @const */
tsickle_declare_module.esri_symbols_CartographicLineSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_CartographicLineSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_CartographicLineSymbol */

/**
 * @constructor
 * @struct
 * Creates a new empty CartographicLineSymbol object.
 * Creates a new CartographicLineSymbol object with parameters.
 * Creates a new CartographicLineSymbol object using a JSON object.
 * @param {string|!Object=} style_or_json See Constants table for values. / JSON object representing the CartographicLineSymbol.
 * @param {!Color=} color Symbol color.
 * @param {number=} width Width of the line in pixels.
 * @param {string=} cap See Constants table for values.
 * @param {string=} join See Constants table for values.
 * @param {string=} miterLimit Size threshold for showing mitered line joins.
 */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol = function(style_or_json, color, width, cap, join, miterLimit) {};
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.CAP_BUTT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.CAP_ROUND;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.CAP_SQUARE;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.JOIN_BEVEL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.JOIN_MITER;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.JOIN_ROUND;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_DASH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_DASHDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_DASHDOTDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_DOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_LONGDASH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_LONGDASHDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_NULL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_SHORTDASH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_SHORTDASHDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_SHORTDASHDOTDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_SHORTDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.STYLE_SOLID;
 /** @type {string} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.prototype.cap;
 /** @type {string} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.prototype.join;
 /** @type {string} */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.prototype.miterLimit;

/**
 * Sets the cap style.
 * @param {string} cap Cap style.
 * @return {!CartographicLineSymbol}
 */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.prototype.setCap = function(cap) {};

/**
 * Sets the join style.
 * @param {string} join Join style.
 * @return {!CartographicLineSymbol}
 */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.prototype.setJoin = function(join) {};

/**
 * Sets the size threshold for showing mitered line joins.
 * @param {string} miterLimit Miter limit.
 * @return {!CartographicLineSymbol}
 */
tsickle_declare_module.esri_symbols_CartographicLineSymbol.CartographicLineSymbol.prototype.setMiterLimit = function(miterLimit) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_CartographicLineSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/FillSymbol"
/** @const */
tsickle_declare_module.esri_symbols_FillSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_FillSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_FillSymbol */
/**
 * @extends {Symbol}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_symbols_FillSymbol.FillSymbol = function() {};
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri_symbols_FillSymbol.FillSymbol.prototype.outline;

/**
 * Sets the outline of the fill symbol.
 * @param {!SimpleLineSymbol} outline Symbol used for outline.
 * @return {!FillSymbol}
 */
tsickle_declare_module.esri_symbols_FillSymbol.FillSymbol.prototype.setOutline = function(outline) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_FillSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/Font"
/** @const */
tsickle_declare_module.esri_symbols_Font = {};

/**
 * @constructor
 * @struct
 * Creates a new Font object.
 * Creates a new Font object.
 * Creates a new Font object using a JSON object.
 * @param {(string|number)|!Object=} size_or_json Font size. / JSON object representing the font.
 * @param {string=} style Font style.
 * @param {string=} variant Font variant.
 * @param {string=} weight Font weight.
 * @param {string=} family Font family.
 */
tsickle_declare_module.esri_symbols_Font.Font = function(size_or_json, style, variant, weight, family) {};
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.STYLE_ITALIC;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.STYLE_NORMAL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.STYLE_OBLIQUE;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.VARIANT_NORMAL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.VARIANT_SMALLCAPS;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.WEIGHT_BOLD;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.WEIGHT_BOLDER;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.WEIGHT_LIGHTER;
 /** @type {?} */
tsickle_declare_module.esri_symbols_Font.Font.WEIGHT_NORMAL;
 /** @type {string} */
tsickle_declare_module.esri_symbols_Font.Font.prototype.decoration;
 /** @type {string} */
tsickle_declare_module.esri_symbols_Font.Font.prototype.family;
 /** @type {number} */
tsickle_declare_module.esri_symbols_Font.Font.prototype.size;
 /** @type {string} */
tsickle_declare_module.esri_symbols_Font.Font.prototype.style;
 /** @type {string} */
tsickle_declare_module.esri_symbols_Font.Font.prototype.variant;
 /** @type {string} */
tsickle_declare_module.esri_symbols_Font.Font.prototype.weight;

/**
 * Updates the font with the given decoration.
 * @param {string} decoration Text decoration.
 * @return {!Font}
 */
tsickle_declare_module.esri_symbols_Font.Font.prototype.setDecoration = function(decoration) {};

/**
 * Sets the font family.
 * @param {string} family Font family.
 * @return {!Font}
 */
tsickle_declare_module.esri_symbols_Font.Font.prototype.setFamily = function(family) {};

/**
 * Sets the font size.
 * @param {(string|number)} size Font size.
 * @return {!Font}
 */
tsickle_declare_module.esri_symbols_Font.Font.prototype.setSize = function(size) {};

/**
 * Sets the font style.
 * @param {string} style Font style.
 * @return {!Font}
 */
tsickle_declare_module.esri_symbols_Font.Font.prototype.setStyle = function(style) {};

/**
 * Sets the font variant.
 * @param {string} variant Font variant.
 * @return {!Font}
 */
tsickle_declare_module.esri_symbols_Font.Font.prototype.setVariant = function(variant) {};

/**
 * Sets the font weight.
 * @param {string} weight Font weight.
 * @return {!Font}
 */
tsickle_declare_module.esri_symbols_Font.Font.prototype.setWeight = function(weight) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_Font */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/LineSymbol"
/** @const */
tsickle_declare_module.esri_symbols_LineSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_LineSymbol */
/**
 * @extends {Symbol}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_symbols_LineSymbol.LineSymbol = function() {};
 /** @type {number} */
tsickle_declare_module.esri_symbols_LineSymbol.LineSymbol.prototype.width;

/**
 * Sets the LineSymbol width.
 * @param {number} width Width of line symbol in pixels.
 * @return {!LineSymbol}
 */
tsickle_declare_module.esri_symbols_LineSymbol.LineSymbol.prototype.setWidth = function(width) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_LineSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/MarkerSymbol"
/** @const */
tsickle_declare_module.esri_symbols_MarkerSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_MarkerSymbol */
/**
 * @extends {Symbol}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol = function() {};
 /** @type {number} */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.angle;
 /** @type {number} */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.size;
 /** @type {number} */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.xoffset;
 /** @type {number} */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.yoffset;

/**
 * Rotates the symbol clockwise around its center by the specified angle.
 * @param {number} angle The angle value.
 * @return {!MarkerSymbol}
 */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.setAngle = function(angle) {};

/**
 * Sets the x and y offset of a marker in screen units.
 * @param {number} x The X offset value in pixels.
 * @param {number} y The Y offset value in pixels.
 * @return {!MarkerSymbol}
 */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.setOffset = function(x, y) {};

/**
 * Sets the size of a marker in pixels.
 * @param {number} size The width of the symbol in pixels.
 * @return {!MarkerSymbol}
 */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.setSize = function(size) {};

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_symbols_MarkerSymbol.MarkerSymbol.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_MarkerSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/PictureFillSymbol"
/** @const */
tsickle_declare_module.esri_symbols_PictureFillSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_PictureFillSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_PictureFillSymbol */

/**
 * @constructor
 * @struct
 * Creates a new PictureFillSymbol object.
 * Creates a new PictureFillSymbol object using a JSON object.
 * @param {string|!Object} url_or_json URL of the image. / JSON object representing the PictureFillSymbol.
 * @param {!SimpleLineSymbol=} outline Outline of the symbol.
 * @param {number=} width Width of the image in pixels.
 * @param {number=} height Height of the image in pixels.
 */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol = function(url_or_json, outline, width, height) {};
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.height;
 /** @type {string} */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.url;
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.width;
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.xoffset;
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.xscale;
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.yoffset;
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.yscale;

/**
 * Sets the height of the symbol.
 * @param {number} height Height in pixels.
 * @return {!PictureFillSymbol}
 */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.setHeight = function(height) {};

/**
 * Sets the symbol offset.
 * @param {number} x Offset in x direction in pixels.
 * @param {number} y Offset in y direction in pixels.
 * @return {!PictureFillSymbol}
 */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.setOffset = function(x, y) {};

/**
 * Sets the URL to the location of the symbol.
 * @param {string} url URL string.
 * @return {!PictureFillSymbol}
 */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.setUrl = function(url) {};

/**
 * Sets the width of the symbol.
 * @param {number} width Width in pixels.
 * @return {!PictureFillSymbol}
 */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.setWidth = function(width) {};

/**
 * Sets the scale factor in x direction.
 * @param {number} scale Scale factor in x direction.
 * @return {!PictureFillSymbol}
 */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.setXScale = function(scale) {};

/**
 * Sets the scale factor in y direction.
 * @param {number} scale Scale factor in y direction.
 * @return {!PictureFillSymbol}
 */
tsickle_declare_module.esri_symbols_PictureFillSymbol.PictureFillSymbol.prototype.setYScale = function(scale) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_PictureFillSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/PictureMarkerSymbol"
/** @const */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_PictureMarkerSymbol */

/**
 * @constructor
 * @struct
 * Creates a new PictureMarkerSymbol object.
 * Creates a new PictureMarkerSymbol object using a JSON object.
 * @param {string|!Object} url_or_json URL of the image. / JSON object representing the PictureMarkerSymbol.
 * @param {number=} width Width of the image in pixels.
 * @param {number=} height Height of the image in pixels.
 */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol.PictureMarkerSymbol = function(url_or_json, width, height) {};
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol.PictureMarkerSymbol.prototype.height;
 /** @type {string} */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol.PictureMarkerSymbol.prototype.url;
 /** @type {number} */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol.PictureMarkerSymbol.prototype.width;

/**
 * Sets the height of the image for display.
 * @param {number} height Height of marker in pixels.
 * @return {!PictureMarkerSymbol}
 */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol.PictureMarkerSymbol.prototype.setHeight = function(height) {};

/**
 * Sets the URL where the image is located.
 * @param {string} url URL location of marker image.
 * @return {!PictureMarkerSymbol}
 */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol.PictureMarkerSymbol.prototype.setUrl = function(url) {};

/**
 * Sets the width of the image for display.
 * @param {number} width Width of marker in pixels.
 * @return {!PictureMarkerSymbol}
 */
tsickle_declare_module.esri_symbols_PictureMarkerSymbol.PictureMarkerSymbol.prototype.setWidth = function(width) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_PictureMarkerSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/SimpleFillSymbol"
/** @const */
tsickle_declare_module.esri_symbols_SimpleFillSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleFillSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleFillSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleFillSymbol */

/**
 * @constructor
 * @struct
 * Creates a new empty SimpleFillSymbol object.
 * Creates a new SimpleFillSymbol object with parameters.
 * Creates a new SimpleFillSymbol object using a JSON object.
 * @param {string|!Object=} style_or_json See Constants table for values. / JSON object representing the SimpleFillSymbol.
 * @param {!SimpleLineSymbol=} outline See SimpleLineSymbol.
 * @param {!Color=} color Symbol color.
 */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol = function(style_or_json, outline, color) {};
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_BACKWARD_DIAGONAL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_CROSS;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_DIAGONAL_CROSS;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_FORWARD_DIAGONAL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_HORIZONTAL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_NULL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_SOLID;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.STYLE_VERTICAL;
 /** @type {!Color} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.prototype.color;
 /** @type {string} */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.prototype.style;

/**
 * Sets the symbol color - only applies when style is STYLE_SOLID.
 * @param {!Color} color Symbol color.
 * @return {!SimpleFillSymbol}
 */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.prototype.setColor = function(color) {};

/**
 * Sets the fill symbol style.
 * @param {string} style Fill style.
 * @return {!SimpleFillSymbol}
 */
tsickle_declare_module.esri_symbols_SimpleFillSymbol.SimpleFillSymbol.prototype.setStyle = function(style) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_SimpleFillSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/SimpleLineSymbol"
/** @const */
tsickle_declare_module.esri_symbols_SimpleLineSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleLineSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleLineSymbol */

/**
 * @constructor
 * @struct
 * Creates a new empty SimpleLineSymbol object.
 * Creates a new SimpleLineSymbol object with parameters.
 * Creates a new SimpleLineSymbol object using a JSON object.
 * @param {string|!Object=} style_or_json See Constants table for values. / JSON object representing the SimpleLineSymbol.
 * @param {!Color=} color Symbol color.
 * @param {number=} width Width of the line in pixels.
 */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol = function(style_or_json, color, width) {};
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_DASH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_DASHDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_DASHDOTDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_DOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_LONGDASH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_LONGDASHDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_NULL;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_SHORTDASH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_SHORTDASHDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_SHORTDASHDOTDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_SHORTDOT;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.STYLE_SOLID;
 /** @type {string} */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.prototype.style;

/**
 * Sets the line symbol style.
 * @param {string} style Line style.
 * @return {!SimpleLineSymbol}
 */
tsickle_declare_module.esri_symbols_SimpleLineSymbol.SimpleLineSymbol.prototype.setStyle = function(style) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_SimpleLineSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/SimpleMarkerSymbol"
/** @const */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleMarkerSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleMarkerSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_SimpleMarkerSymbol */

/**
 * @constructor
 * @struct
 * Creates a new empty SimpleMarkerSymbol object.
 * Creates a new SimpleMarkerSymbol object with parameters.
 * Creates a new SimpleMarkerSymbol object using a JSON object.
 * @param {string|!Object=} style_or_json See Constants table for values. / JSON object representing the SimpleMarkerSymbol.
 * @param {number=} size Size of the marker in pixels.
 * @param {!SimpleLineSymbol=} outline See SimpleLineSymbol.
 * @param {!Color=} color Symbol color.
 */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol = function(style_or_json, size, outline, color) {};
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.STYLE_CIRCLE;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.STYLE_CROSS;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.STYLE_DIAMOND;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.STYLE_PATH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.STYLE_SQUARE;
 /** @type {?} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.STYLE_X;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.prototype.outline;
 /** @type {number} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.prototype.size;
 /** @type {string} */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.prototype.style;

/**
 * Sets the outline of the marker symbol.
 * @param {!SimpleLineSymbol} outline Symbol used for outline.
 * @return {!SimpleMarkerSymbol}
 */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.prototype.setOutline = function(outline) {};

/**
 * Sets the marker shape to the given path string and switches the marker style to STYLE_PATH.
 * @param {string} path SVG path of the icon.
 * @return {!SimpleMarkerSymbol}
 */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.prototype.setPath = function(path) {};

/**
 * Sets the marker symbol style.
 * @param {string} style Marker style.
 * @return {!SimpleMarkerSymbol}
 */
tsickle_declare_module.esri_symbols_SimpleMarkerSymbol.SimpleMarkerSymbol.prototype.setStyle = function(style) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_SimpleMarkerSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/Symbol"
/** @const */
tsickle_declare_module.esri_symbols_Symbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_Symbol */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_symbols_Symbol.Symbol = function() {};
 /** @type {!Color} */
tsickle_declare_module.esri_symbols_Symbol.Symbol.prototype.color;
 /** @type {string} */
tsickle_declare_module.esri_symbols_Symbol.Symbol.prototype.type;

/**
 * Sets the symbol color.
 * @param {!Color} color Symbol color.
 * @return {!Symbol}
 */
tsickle_declare_module.esri_symbols_Symbol.Symbol.prototype.setColor = function(color) {};

/**
 * Converts object to its ArcGIS Server JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_symbols_Symbol.Symbol.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_Symbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/TextSymbol"
/** @const */
tsickle_declare_module.esri_symbols_TextSymbol = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_TextSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_TextSymbol */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_TextSymbol */

/**
 * @constructor
 * @struct
 * Creates a new TextSymbol object that includes only the text.
 * Creates a new TextSymbol object.
 * Creates a new TextSymbol object using a JSON object.
 * @param {string|!Object} text_or_json Text string for display in the graphics layer. / JSON object representing the TextSymbol.
 * @param {!Font=} font Font for displaying text.
 * @param {!Color=} color Symbol color.
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol = function(text_or_json, font, color) {};
 /** @type {?} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.ALIGN_END;
 /** @type {?} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.ALIGN_MIDDLE;
 /** @type {?} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.ALIGN_START;
 /** @type {?} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.DECORATION_LINETHROUGH;
 /** @type {?} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.DECORATION_NONE;
 /** @type {?} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.DECORATION_OVERLINE;
 /** @type {?} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.DECORATION_UNDERLINE;
 /** @type {string} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.align;
 /** @type {number} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.angle;
 /** @type {string} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.decoration;
 /** @type {!Font} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.font;
 /** @type {!Color} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.haloColor;
 /** @type {number} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.haloSize;
 /** @type {string} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.horizontalAlignment;
 /** @type {boolean} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.kerning;
 /** @type {boolean} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.rotated;
 /** @type {string} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.text;
 /** @type {string} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.verticalAlignment;
 /** @type {number} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.xoffset;
 /** @type {number} */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.yoffset;

/**
 * Sets the alignment of the text.
 * @param {string} align The text alignment.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setAlign = function(align) {};

/**
 * Sets the angle of the text.
 * @param {number} angle Angle value between 0 and 359.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setAngle = function(angle) {};

/**
 * Sets the decoration for the text.
 * @param {string} decoration The decoration on the text.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setDecoration = function(decoration) {};

/**
 * Sets the text font.
 * @param {!Font} font Text font.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setFont = function(font) {};

/**
 * Sets a halo color for the text symbol.NOTE: Known limitations when working with the text symbol halo:IE 9 and below not supported.Sub-pixel halo (i.e.
 * @param {!Color} color The color used for the text symbol halo.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setHaloColor = function(color) {};

/**
 * Sets the size of the halo (in pixels) used for the text symbol.NOTE: Known limitations when working with the text symbol halo:IE 9 and below not supported.Sub-pixel halo (i.e.
 * @param {number} size The size (in pixels) of the text symbol halo.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setHaloSize = function(size) {};

/**
 * Updates the horizontal alignment of the text symbol.
 * @param {string} alignment Horizontal alignment of the text with respect to the graphic.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setHorizontalAlignment = function(alignment) {};

/**
 * Sets whether to adjust the spacing between characters in the text string.
 * @param {boolean} kerning Set to true for kerning.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setKerning = function(kerning) {};

/**
 * Sets the x and y offset of the text.
 * @param {number} x X offset value in pixels.
 * @param {number} y Y offset value in pixels.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setOffset = function(x, y) {};

/**
 * Sets whether every character in the text string is rotated.
 * @param {boolean} rotated Set to true to rotate all characters in the string.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setRotated = function(rotated) {};

/**
 * Sets the text string.
 * @param {string} text The text string.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setText = function(text) {};

/**
 * Updates the vertical alignment of the text symbol.
 * @param {string} alignment Vertical alignment of the text with respect to the graphic.
 * @return {!TextSymbol}
 */
tsickle_declare_module.esri_symbols_TextSymbol.TextSymbol.prototype.setVerticalAlignment = function(alignment) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_TextSymbol */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/symbols/jsonUtils"
/** @const */
tsickle_declare_module.esri_symbols_jsonUtils = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_symbols_jsonUtils */
 /** @type {{fromJson: function(!Object): !Symbol, getShapeDescriptors: function(!Symbol): ?}} */
tsickle_declare_module.esri_symbols_jsonUtils.jsonUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_symbols_jsonUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/AddressCandidate"
/** @const */
tsickle_declare_module.esri_tasks_AddressCandidate = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_AddressCandidate */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_AddressCandidate.AddressCandidate = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_AddressCandidate.AddressCandidate.prototype.address;
 /** @type {?} */
tsickle_declare_module.esri_tasks_AddressCandidate.AddressCandidate.prototype.attributes;
 /** @type {!Point} */
tsickle_declare_module.esri_tasks_AddressCandidate.AddressCandidate.prototype.location;
 /** @type {number} */
tsickle_declare_module.esri_tasks_AddressCandidate.AddressCandidate.prototype.score;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_AddressCandidate */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/AlgorithmicColorRamp"
/** @const */
tsickle_declare_module.esri_tasks_AlgorithmicColorRamp = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_AlgorithmicColorRamp */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_AlgorithmicColorRamp */

/**
 * @constructor
 * @struct
 * Creates a new AlgorithmicColorRamp object.
 */
tsickle_declare_module.esri_tasks_AlgorithmicColorRamp.AlgorithmicColorRamp = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_AlgorithmicColorRamp.AlgorithmicColorRamp.prototype.algorithm;
 /** @type {!Color} */
tsickle_declare_module.esri_tasks_AlgorithmicColorRamp.AlgorithmicColorRamp.prototype.fromColor;
 /** @type {!Color} */
tsickle_declare_module.esri_tasks_AlgorithmicColorRamp.AlgorithmicColorRamp.prototype.toColor;

/**
 * Returns an easily serializable object representation of an algorithmic color ramp.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_AlgorithmicColorRamp.AlgorithmicColorRamp.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_AlgorithmicColorRamp */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/AreasAndLengthsParameters"
/** @const */
tsickle_declare_module.esri_tasks_AreasAndLengthsParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_AreasAndLengthsParameters */

/**
 * @constructor
 * @struct
 * Creates a new AreasAndLengthsParameters object.
 */
tsickle_declare_module.esri_tasks_AreasAndLengthsParameters.AreasAndLengthsParameters = function() {};
 /** @type {(string|number)} */
tsickle_declare_module.esri_tasks_AreasAndLengthsParameters.AreasAndLengthsParameters.prototype.areaUnit;
 /** @type {string} */
tsickle_declare_module.esri_tasks_AreasAndLengthsParameters.AreasAndLengthsParameters.prototype.calculationType;
 /** @type {(string|number)} */
tsickle_declare_module.esri_tasks_AreasAndLengthsParameters.AreasAndLengthsParameters.prototype.lengthUnit;
 /** @type {!Array<!Polygon>} */
tsickle_declare_module.esri_tasks_AreasAndLengthsParameters.AreasAndLengthsParameters.prototype.polygons;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_AreasAndLengthsParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/BufferParameters"
/** @const */
tsickle_declare_module.esri_tasks_BufferParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_BufferParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_BufferParameters */

/**
 * @constructor
 * @struct
 * Creates a new BufferParameters object.
 */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters = function() {};
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters.prototype.bufferSpatialReference;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters.prototype.distances;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters.prototype.geodesic;
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters.prototype.geometries;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters.prototype.outSpatialReference;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters.prototype.unionResults;
 /** @type {number} */
tsickle_declare_module.esri_tasks_BufferParameters.BufferParameters.prototype.unit;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_BufferParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ClassBreaksDefinition"
/** @const */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClassBreaksDefinition */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClassBreaksDefinition */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClassBreaksDefinition */

/**
 * @constructor
 * @struct
 * Creates a new ClassBreaksDefinition object
 */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition = function() {};
 /** @type {!Symbol} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.baseSymbol;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.breakCount;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.classificationField;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.classificationMethod;
 /** @type {!ColorRamp} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.colorRamp;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.normalizationField;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.normalizationType;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.standardDeviationInterval;

/**
 * Returns an easily serializable object representation of the class breaks definition.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ClassBreaksDefinition.ClassBreaksDefinition.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ClassBreaksDefinition */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ClassificationDefinition"
/** @const */
tsickle_declare_module.esri_tasks_ClassificationDefinition = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClassificationDefinition */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClassificationDefinition */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_ClassificationDefinition.ClassificationDefinition = function() {};
 /** @type {!Symbol} */
tsickle_declare_module.esri_tasks_ClassificationDefinition.ClassificationDefinition.prototype.baseSymbol;
 /** @type {!ColorRamp} */
tsickle_declare_module.esri_tasks_ClassificationDefinition.ClassificationDefinition.prototype.colorRamp;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClassificationDefinition.ClassificationDefinition.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ClassificationDefinition */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ClosestFacilityParameters"
/** @const */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilityParameters */

/**
 * @constructor
 * @struct
 * Creates a new ClosestFacilityParameters object
 */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters = function() {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.accumulateAttributes;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.attributeParameterValues;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.defaultCutoff;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.defaultTargetFacilityCount;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.directionsLanguage;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.directionsLengthUnits;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.directionsOutputType;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.directionsStyleName;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.directionsTimeAttribute;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.doNotLocateOnRestrictedElements;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.facilities;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.impedanceAttribute;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.incidents;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.outputGeometryPrecision;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.outputGeometryPrecisionUnits;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.outputLines;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.outSpatialReference;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.pointBarriers;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.polygonBarriers;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.polylineBarriers;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.restrictionAttributes;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.restrictUTurns;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.returnDirections;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.returnFacilities;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.returnIncidents;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.returnPointBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.returnPolygonBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.returnPolylineBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.returnRoutes;
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.timeOfDay;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.timeOfDayUsage;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.travelDirection;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.travelMode;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ClosestFacilityParameters.ClosestFacilityParameters.prototype.useHierarchy;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ClosestFacilityParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ClosestFacilitySolveResult"
/** @const */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult = function() {};
 /** @type {!DirectionsFeatureSet} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.directions;
 /** @type {!Array<!Point>} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.facilities;
 /** @type {!Array<!Point>} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.incidents;
 /** @type {!Array<!NAMessage>} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.messages;
 /** @type {!Array<!Point>} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.pointBarriers;
 /** @type {!Array<!Polygon>} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.polygonBarriers;
 /** @type {!Array<!Polyline>} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.polylineBarriers;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult.ClosestFacilitySolveResult.prototype.routes;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ClosestFacilitySolveResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ClosestFacilityTask"
/** @const */
tsickle_declare_module.esri_tasks_ClosestFacilityTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilityTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilityTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ClosestFacilityTask */

/**
 * @constructor
 * @struct
 * Creates a new ClosestFacilityTask object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a network analysis service.
 */
tsickle_declare_module.esri_tasks_ClosestFacilityTask.ClosestFacilityTask = function(url) {};

/**
 * Returns an object describing a Closest Facility service endpoint (URL of the endpoint is specified in the constructor).
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ClosestFacilityTask.ClosestFacilityTask.prototype.getServiceDescription = function() {};

/**
 * Solve the closest facility.
 * @param {!ClosestFacilityParameters} params The ClosestFacilityParameters object.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ClosestFacilityTask.ClosestFacilityTask.prototype.solve = function(params, callback, errback) {};

/**
 * Fires when ClosestFacilityTask has completed.
 * @param {string} type
 * @param {function({result: !ClosestFacilitySolveResult, target: !ClosestFacilityTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_ClosestFacilityTask.ClosestFacilityTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ClosestFacilityTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ColorRamp"
/** @const */
tsickle_declare_module.esri_tasks_ColorRamp = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_ColorRamp.ColorRamp = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_ColorRamp.ColorRamp.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ColorRamp */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/DataFile"
/** @const */
tsickle_declare_module.esri_tasks_DataFile = {};

/**
 * @constructor
 * @struct
 * Creates a new DataFile object.
 */
tsickle_declare_module.esri_tasks_DataFile.DataFile = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_DataFile.DataFile.prototype.itemID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_DataFile.DataFile.prototype.url;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_DataFile */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/DataLayer"
/** @const */
tsickle_declare_module.esri_tasks_DataLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_DataLayer */

/**
 * @constructor
 * @struct
 * Creates a new DataLayer object.
 */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_CONTAINS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_CROSSES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_ENVELOPEINTERSECTS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_INDEXINTERSECTS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_INTERSECTS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_OVERLAPS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_TOUCHES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.SPATIAL_REL_WITHIN;
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.prototype.geometry;
 /** @type {string} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.prototype.name;
 /** @type {string} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.prototype.spatialRelationship;
 /** @type {string} */
tsickle_declare_module.esri_tasks_DataLayer.DataLayer.prototype.where;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_DataLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/Date"
/** @const */
tsickle_declare_module.esri_tasks_Date = {};

/**
 * @constructor
 * @struct
 * Creates a new Date object.
 */
tsickle_declare_module.esri_tasks_Date.AGSDate = function() {};
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_Date.AGSDate.prototype.date;
 /** @type {string} */
tsickle_declare_module.esri_tasks_Date.AGSDate.prototype.format;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_Date */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/DensifyParameters"
/** @const */
tsickle_declare_module.esri_tasks_DensifyParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_DensifyParameters */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_DensifyParameters.DensifyParameters = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_DensifyParameters.DensifyParameters.prototype.geodesic;
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_DensifyParameters.DensifyParameters.prototype.geometries;
 /** @type {(string|number)} */
tsickle_declare_module.esri_tasks_DensifyParameters.DensifyParameters.prototype.lengthUnit;
 /** @type {number} */
tsickle_declare_module.esri_tasks_DensifyParameters.DensifyParameters.prototype.maxSegmentLength;

/**
 * Converts object to its JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_DensifyParameters.DensifyParameters.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_DensifyParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/DirectionsFeatureSet"
/** @const */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_DirectionsFeatureSet */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_DirectionsFeatureSet */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_DirectionsFeatureSet */
/**
 * @extends {FeatureSet}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet = function() {};
 /** @type {!Extent} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.extent;
 /** @type {!Polyline} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.mergedGeometry;
 /** @type {string} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.routeId;
 /** @type {string} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.routeName;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.strings;
 /** @type {number} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.totalDriveTime;
 /** @type {number} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.totalLength;
 /** @type {number} */
tsickle_declare_module.esri_tasks_DirectionsFeatureSet.DirectionsFeatureSet.prototype.totalTime;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_DirectionsFeatureSet */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/DistanceParameters"
/** @const */
tsickle_declare_module.esri_tasks_DistanceParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_DistanceParameters */

/**
 * @constructor
 * @struct
 * Creates a new DistanceParameters object.
 */
tsickle_declare_module.esri_tasks_DistanceParameters.DistanceParameters = function() {};
 /** @type {(string|number)} */
tsickle_declare_module.esri_tasks_DistanceParameters.DistanceParameters.prototype.distanceUnit;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_DistanceParameters.DistanceParameters.prototype.geodesic;
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_DistanceParameters.DistanceParameters.prototype.geometry1;
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_DistanceParameters.DistanceParameters.prototype.geometry2;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_DistanceParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/FeatureSet"
/** @const */
tsickle_declare_module.esri_tasks_FeatureSet = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FeatureSet */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FeatureSet */

/**
 * @constructor
 * @struct
 * Creates a new FeatureSet object.
 * Creates a new FeatureSet object using a JSON object.
 * @param {!Object=} json A JSON object that contains feature set.
 */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet.prototype.displayFieldName;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet.prototype.exceededTransferLimit;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet.prototype.features;
 /** @type {?} */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet.prototype.fieldAliases;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet.prototype.fields;
 /** @type {string} */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet.prototype.geometryType;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_FeatureSet.FeatureSet.prototype.spatialReference;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_FeatureSet */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/FindParameters"
/** @const */
tsickle_declare_module.esri_tasks_FindParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FindParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FindParameters */

/**
 * @constructor
 * @struct
 * Creates a new FindParameters object.
 */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters = function() {};
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.contains;
 /** @type {!Array<!DynamicLayerInfo>} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.dynamicLayerInfos;
 /** @type {number} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.geometryPrecision;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.layerDefinitions;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.layerIds;
 /** @type {number} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.maxAllowableOffset;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.outSpatialReference;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.returnGeometry;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.searchFields;
 /** @type {string} */
tsickle_declare_module.esri_tasks_FindParameters.FindParameters.prototype.searchText;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_FindParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/FindResult"
/** @const */
tsickle_declare_module.esri_tasks_FindResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FindResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_FindResult.FindResult = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_FindResult.FindResult.prototype.displayFieldName;
 /** @type {!Graphic} */
tsickle_declare_module.esri_tasks_FindResult.FindResult.prototype.feature;
 /** @type {string} */
tsickle_declare_module.esri_tasks_FindResult.FindResult.prototype.foundFieldName;
 /** @type {number} */
tsickle_declare_module.esri_tasks_FindResult.FindResult.prototype.layerId;
 /** @type {string} */
tsickle_declare_module.esri_tasks_FindResult.FindResult.prototype.layerName;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_FindResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/FindTask"
/** @const */
tsickle_declare_module.esri_tasks_FindTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FindTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FindTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_FindTask */

/**
 * @constructor
 * @struct
 * Creates a new FindTask object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a map service.
 * @param {!FindTaskOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_tasks_FindTask.FindTask = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_FindTask.FindTask.prototype.url;

/**
 * Sends a request to the ArcGIS REST map service resource to perform a search based on the FindParameters specified in the findParameters argument.
 * @param {!FindParameters} findParameters Specifies the layers and fields that are used to search against.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_FindTask.FindTask.prototype.execute = function(findParameters, callback, errback) {};

/**
 * Fires when the find operation is complete.
 * Fires when an error occurs when executing the task.
 * @param {string} type
 * @param {function({results: !Array<!FindResult>, target: !FindTask}): void|function({error: !Error, target: !FindTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_FindTask.FindTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_FindTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/GPMessage"
/** @const */
tsickle_declare_module.esri_tasks_GPMessage = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_ABORT;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_EMPTY;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_ERROR;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_INFORMATIVE;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_PROCESS_DEFINITION;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_PROCESS_START;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_PROCESS_STOP;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.TYPE_WARNING;
 /** @type {string} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.prototype.description;
 /** @type {string} */
tsickle_declare_module.esri_tasks_GPMessage.GPMessage.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_GPMessage */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/GeneralizeParameters"
/** @const */
tsickle_declare_module.esri_tasks_GeneralizeParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeneralizeParameters */

/**
 * @constructor
 * @struct
 * Creates a new GeneralizeParameters object.
 */
tsickle_declare_module.esri_tasks_GeneralizeParameters.GeneralizeParameters = function() {};
 /** @type {(string|number)} */
tsickle_declare_module.esri_tasks_GeneralizeParameters.GeneralizeParameters.prototype.deviationUnit;
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_GeneralizeParameters.GeneralizeParameters.prototype.geometries;
 /** @type {number} */
tsickle_declare_module.esri_tasks_GeneralizeParameters.GeneralizeParameters.prototype.maxDeviation;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_GeneralizeParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/GenerateRendererParameters"
/** @const */
tsickle_declare_module.esri_tasks_GenerateRendererParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GenerateRendererParameters */

/**
 * @constructor
 * @struct
 * Creates a new GenerateRendererParameters object.
 */
tsickle_declare_module.esri_tasks_GenerateRendererParameters.GenerateRendererParameters = function() {};
 /** @type {!ClassificationDefinition} */
tsickle_declare_module.esri_tasks_GenerateRendererParameters.GenerateRendererParameters.prototype.classificationDefinition;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_GenerateRendererParameters.GenerateRendererParameters.prototype.formatLabel;
 /** @type {number} */
tsickle_declare_module.esri_tasks_GenerateRendererParameters.GenerateRendererParameters.prototype.precision;
 /** @type {string} */
tsickle_declare_module.esri_tasks_GenerateRendererParameters.GenerateRendererParameters.prototype.prefix;
 /** @type {string} */
tsickle_declare_module.esri_tasks_GenerateRendererParameters.GenerateRendererParameters.prototype.unitLabel;
 /** @type {string} */
tsickle_declare_module.esri_tasks_GenerateRendererParameters.GenerateRendererParameters.prototype.where;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_GenerateRendererParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/GenerateRendererTask"
/** @const */
tsickle_declare_module.esri_tasks_GenerateRendererTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GenerateRendererTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GenerateRendererTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GenerateRendererTask */

/**
 * @constructor
 * @struct
 * Creates a new GenerateRendererTask object.
 * @param {string} url URL to a layer in a map service or table.
 * @param {!GenerateRendererTaskOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_tasks_GenerateRendererTask.GenerateRendererTask = function(url, options) {};

/**
 * Perform a classification on the layer or table resource.
 * @param {!GenerateRendererParameters} generateRendererParameters A GenerateRendererParameters object that defines the classification definition and an optional where clause.
 * @param {!Function=} callback This function will be called when the operation is complete.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GenerateRendererTask.GenerateRendererTask.prototype.execute = function(generateRendererParameters, callback, errback) {};

/**
 * Fired when the classification operation is complete.
 * Fired when an error occurs during task execution.
 * @param {string} type
 * @param {function({renderer: !Renderer, target: !GenerateRendererTask}): void|function({error: !Error, target: !GenerateRendererTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_GenerateRendererTask.GenerateRendererTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_GenerateRendererTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/GeometryService"
/** @const */
tsickle_declare_module.esri_tasks_GeometryService = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_GeometryService */

/**
 * @constructor
 * @struct
 * Creates a new GeometryService object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a GeometryService, https://utility.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer.
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService = function(url) {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_ACRES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_ARES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_FOOT;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_HECTARES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_KILOMETER;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_METER;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_NAUTICAL_MILE;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_CENTIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_DECIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_FEET;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_INCHES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_KILOMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_METERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_MILES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_MILLIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_SQUARE_YARDS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_STATUTE_MILE;
 /** @type {?} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.UNIT_US_NAUTICAL_MILE;
 /** @type {string} */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.url;

/**
 * Computes the area and length for the input polygons.
 * @param {!AreasAndLengthsParameters} areasAndLengthsParameters Specify the input polygons and optionally the linear and areal units.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.areasAndLengths = function(areasAndLengthsParameters, callback, errback) {};

/**
 * The Auto Complete operation is performed on a geometry service resource.
 * @param {!Array<!Polygon>} polygons The array of polygons that will provide some boundaries for new polygons.
 * @param {!Array<!Polyline>} polylines An array of polylines that will provide the remaining boundaries for new polygons.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.autoComplete = function(polygons, polylines, callback, errback) {};

/**
 * Creates buffer polygons at a specified distance around the given geometries.
 * @param {!BufferParameters} bufferParameters Specifies the input geometries, buffer distances, and other options.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.buffer = function(bufferParameters, callback, errback) {};

/**
 * The convexHull operation is performed on a geometry service resource.
 * @param {!Array<!Geometry>} geometries The geometries whose convex hull is to be created.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.convexHull = function(geometries, callback, errback) {};

/**
 * The cut operation is performed on a geometry service resource.
 * @param {!Array<!Geometry>} geometries The polyline or polygon to be cut.
 * @param {!Geometry} cutterGeometry The polyline that will be used to divide the target into pieces where it crosses the target.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.cut = function(geometries, cutterGeometry, callback, errback) {};

/**
 * The densify operation is performed on a geometry service resource.
 * @param {!DensifyParameters} densifyParameters The DensifyParameters objects contains geometries, geodesic, lengthUnit, and maxSegmentLength parameters.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.densify = function(densifyParameters, callback, errback) {};

/**
 * The difference operation is performed on a geometry service resource.
 * @param {!Array<!Geometry>} geometries An array of points, multipoints, polylines or polygons.
 * @param {!Geometry} geometry A single geometry of any type, of dimension equal to or greater than the elements of geometries.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.difference = function(geometries, geometry, callback, errback) {};

/**
 * Measures the planar or geodesic distance between geometries.
 * @param {!DistanceParameters} params Sets the input geometries to measure, distance units and other parameters.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.distance = function(params, callback, errback) {};

/**
 * Converts an array of well-known strings into xy-coordinates based on the conversion type and spatial reference supplied by the user.
 * @param {?} params See the object specifications table below for the structure of the params object.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.fromGeoCoordinateString = function(params, callback, errback) {};

/**
 * Generalizes the input geometries using the Douglas-Peucker algorithm.
 * @param {!GeneralizeParameters} params An array of geometries to generalize and a maximum deviation.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.generalize = function(params, callback, errback) {};

/**
 * The intersect operation is performed on a geometry service resource.
 * @param {!Array<!Geometry>} geometries An array of points, multipoints, polylines or polygons.
 * @param {!Geometry} geometry A single geometry of any type, of dimension equal to or greater than the elements of geometries.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.intersect = function(geometries, geometry, callback, errback) {};

/**
 * Calculates an interior point for each polygon specified.
 * @param {!Array<!Polygon>} polygons The graphics to process.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.labelPoints = function(polygons, callback, errback) {};

/**
 * Gets the lengths for a Geometry[] when the geometry type is Polyline.
 * @param {!LengthsParameters} lengthsParameter Specify the polylines and optionally the length unit and the geodesic length option.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.lengths = function(lengthsParameter, callback, errback) {};

/**
 * Constructs the offset of the input geometries.
 * @param {!OffsetParameters} params Set the geometries to offset, distance and units.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.offset = function(params, callback, errback) {};

/**
 * Projects a set of geometries into a new spatial reference.
 * @param {!ProjectParameters} params The input projection parameters.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.project = function(params, callback, errback) {};

/**
 * Computes the set of pairs of geometries from the input geometry arrays that belong to the specified relation.
 * @param {!RelationParameters} relationParameters The set of parameters required to perform the comparison.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.relation = function(relationParameters, callback, errback) {};

/**
 * The reshape operation is performed on a geometry service resource.
 * @param {!Geometry} targetGeometry The polyline or polygon to be reshaped.
 * @param {!Geometry} reshaperGeometry The single-part polyline that does the reshaping.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.reshape = function(targetGeometry, reshaperGeometry, callback, errback) {};

/**
 * Alters the given geometries to make their definitions topologically legal with respect to their geometry type.
 * @param {!Array<!Geometry>} geometries The geometries to simplify
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.simplify = function(geometries, callback, errback) {};

/**
 * Converts an array of xy-coordinates into well-known strings based on the conversion type and spatial reference supplied by the user.
 * @param {?} params See the object specifications table below for the structure of the params object.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.toGeoCoordinateString = function(params, callback, errback) {};

/**
 * Trims or extends the input polylines using the user specified guide polyline.
 * @param {!TrimExtendParameters} params Input parameters for the trimExtend operation.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.trimExtend = function(params, callback, errback) {};

/**
 * The union operation is performed on a geometry service resource.
 * @param {!Array<!Geometry>} geometries The array of geometries to be unioned.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.union = function(geometries, callback, errback) {};

/**
 * Fires when the areasAndLengths operation is complete.
 * Fires when the autoComplete operation is complete.
 * Fires when the buffer operation is complete.
 * Fires when the convexHull operation is complete.
 * Fires when the cut operation is complete.
 * Fires when the densify operation is complete.
 * Fires when the difference operation is complete.
 * Fires when the distance operation is complete.
 * Fires when an error occurs when executing the task.
 * Fires when the generalize operation is complete.
 * Fires when the intersect operation is complete.
 * Fires when the labelPoints operation is complete.
 * Fires when the lengths operation is complete.
 * Fires when the offset operation is complete.
 * Fires when the project operation is complete.
 * Fires when the relation operation is complete.
 * Fires when the reshape operation is complete.
 * Fires when the simplify operation is complete.
 * Fires when the trimExtend operation is complete.
 * Fires when the union operation is complete.
 * @param {string} type
 * @param {function({result: ?, target: !GeometryService}): void|function({geometries: !Array<!Polygon>, target: !GeometryService}): void|function({geometry: !Geometry, target: !GeometryService}): void|function({geometries: !Array<!Geometry>, target: !GeometryService}): void|function({distance: number, target: !GeometryService}): void|function({target: !GeometryService}): void|function({geometries: !Array<!Point>, target: !GeometryService}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_GeometryService.GeometryService.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_GeometryService */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/Geoprocessor"
/** @const */
tsickle_declare_module.esri_tasks_Geoprocessor = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_Geoprocessor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_Geoprocessor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_Geoprocessor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_Geoprocessor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_Geoprocessor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_Geoprocessor */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_Geoprocessor */

/**
 * @constructor
 * @struct
 * Creates a new Geoprocessor object that represents the GP Task identifed by a URL.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a geoprocessing service.
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor = function(url) {};
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.outputSpatialReference;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.outSpatialReference;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.processSpatialReference;
 /** @type {number} */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.updateDelay;
 /** @type {string} */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.url;

/**
 * Cancel an asynchronous geoprocessing job.
 * @param {string} jobId A string that uniquely identifies a job on the server.
 * @param {!Function} callback The function to call when the method has completed.
 * @param {!Function} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.cancelJob = function(jobId, callback, errback) {};

/**
 * Cancels the periodic job status updates initiated automatically when submitJob() is invoked for the job identified by jobId.
 * @param {string} jobId A string that uniquely identifies the job for which the job updates are cancelled.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.cancelJobStatusUpdates = function(jobId) {};

/**
 * Sends a request to the GP Task for the current state of the job identified by jobId.
 * @param {string} jobId A string that uniquely identifies a job on the server.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.checkJobStatus = function(jobId, callback, errback) {};

/**
 * Sends a request to the server to execute a synchronous GP task.
 * @param {?} inputParameters The inputParameters argument specifies the input parameters accepted by the task and their corresponding values.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.execute = function(inputParameters, callback, errback) {};

/**
 * Sends a request to the GP Task to get the task result identified by jobId and resultParameterName.
 * @param {string} jobId The jobId returned from JobInfo.
 * @param {string} parameterName The name of the result parameter as defined in Services Directory.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.getResultData = function(jobId, parameterName, callback, errback) {};

/**
 * Sends a request to the GP Task to get the task result identified by jobId and resultParameterName as an image.
 * @param {string} jobId The jobId returned from JobInfo.
 * @param {string} parameterName The name of the result parameter as defined in Services Directory.
 * @param {!ImageParameters} imageParameters Specifies the properties of the result image.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.getResultImage = function(jobId, parameterName, imageParameters, callback, errback) {};

/**
 * Get the task result identified by jobId and resultParameterName as an ArcGISDynamicMapServiceLayer.
 * @param {string} jobId The jobId returned from JobInfo.
 * @param {string=} parameterName The name of the result parameter as defined in Services Directory.
 * @param {!ImageParameters=} imageParameters Contains various options that can be specified when generating a dynamic map image.
 * @param {!Function=} callback The function to call when the method has completed.
 * @return {!ArcGISDynamicMapServiceLayer}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.getResultImageLayer = function(jobId, parameterName, imageParameters, callback) {};

/**
 * Deprecated at v2.0, use setOutSpatialReference instead.
 * @param {!SpatialReference} spatialReference The well-known ID of a spatial reference.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.setOutputSpatialReference = function(spatialReference) {};

/**
 * Sets the well-known ID of the spatial reference of the output geometries.
 * @param {!SpatialReference} spatialReference The well-known ID of a spatial reference.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.setOutSpatialReference = function(spatialReference) {};

/**
 * Sets the well-known ID of the spatial reference that the model uses to perform geometry operations.
 * @param {!SpatialReference} spatialReference The well-known ID of a spatial reference.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.setProcessSpatialReference = function(spatialReference) {};

/**
 * Sets the time interval in milliseconds between each job status request sent to an asynchronous GP task.
 * @param {number} delay The value in milliseconds.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.setUpdateDelay = function(delay) {};

/**
 * Submits a job to the server for asynchronous processing by the GP task.
 * @param {?} inputParameters The inputParameters argument specifies the input parameters accepted by the task and their corresponding values.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} statusCallback Checks the current status of the job.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.submitJob = function(inputParameters, callback, statusCallback, errback) {};

/**
 * Fires when an error occurs when executing the task.
 * Fires when a synchronous GP task is completed.
 * Fires when the result of an asynchronous GP task execution is available.
 * Fires when a map image is generated by invoking the getResultImage method.
 * Fires when getResultImageLayer method has completed.
 * Fires when the geoprocessing job is cancelled using the cancelJob method.
 * Fires when an asynchronous GP task using submitJob is complete.
 * Fires when a job status update is available.
 * @param {string} type
 * @param {function({error: !Error, target: !Geoprocessor}): void|function({messages: !Array<!GPMessage>, results: !Array<!ParameterValue>, target: !Geoprocessor}): void|function({result: !ParameterValue, target: !Geoprocessor}): void|function({mapImage: !MapImage, target: !Geoprocessor}): void|function({target: !Geoprocessor}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_Geoprocessor.Geoprocessor.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_Geoprocessor */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/IdentifyParameters"
/** @const */
tsickle_declare_module.esri_tasks_IdentifyParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyParameters */

/**
 * @constructor
 * @struct
 * Creates a new IdentifyParameters object.
 */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.LAYER_OPTION_ALL;
 /** @type {?} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.LAYER_OPTION_TOP;
 /** @type {?} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.LAYER_OPTION_VISIBLE;
 /** @type {number} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.dpi;
 /** @type {!Array<!DynamicLayerInfo>} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.dynamicLayerInfos;
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.geometry;
 /** @type {number} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.geometryPrecision;
 /** @type {number} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.height;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.layerDefinitions;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.layerIds;
 /** @type {string} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.layerOption;
 /** @type {!Array<!LayerTimeOptions>} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.layerTimeOptions;
 /** @type {!Extent} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.mapExtent;
 /** @type {number} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.maxAllowableOffset;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.returnGeometry;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.spatialReference;
 /** @type {!TimeExtent} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.timeExtent;
 /** @type {number} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.tolerance;
 /** @type {number} */
tsickle_declare_module.esri_tasks_IdentifyParameters.IdentifyParameters.prototype.width;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_IdentifyParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/IdentifyResult"
/** @const */
tsickle_declare_module.esri_tasks_IdentifyResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_IdentifyResult.IdentifyResult = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_IdentifyResult.IdentifyResult.prototype.displayFieldName;
 /** @type {!Graphic} */
tsickle_declare_module.esri_tasks_IdentifyResult.IdentifyResult.prototype.feature;
 /** @type {number} */
tsickle_declare_module.esri_tasks_IdentifyResult.IdentifyResult.prototype.layerId;
 /** @type {string} */
tsickle_declare_module.esri_tasks_IdentifyResult.IdentifyResult.prototype.layerName;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_IdentifyResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/IdentifyTask"
/** @const */
tsickle_declare_module.esri_tasks_IdentifyTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_IdentifyTask */

/**
 * @constructor
 * @struct
 * Creates a new IdentifyTask object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a map service.
 * @param {!IdentifyTaskOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_tasks_IdentifyTask.IdentifyTask = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_IdentifyTask.IdentifyTask.prototype.url;

/**
 * Sends a request to the ArcGIS REST map service resource to identify features based on the IdentifyParameters specified in the identifyParameters argument.
 * @param {!IdentifyParameters} identifyParameters Specifies the criteria used to identify the features.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_IdentifyTask.IdentifyTask.prototype.execute = function(identifyParameters, callback, errback) {};

/**
 * Fires when the identify operation is complete.
 * Fires when an error occurs when executing the task.
 * @param {string} type
 * @param {function({results: !Array<!IdentifyResult>, target: !IdentifyTask}): void|function({error: !Error, target: !IdentifyTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_IdentifyTask.IdentifyTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_IdentifyTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ImageServiceIdentifyParameters"
/** @const */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters */

/**
 * @constructor
 * @struct
 * Creates a new ImageServiceIdentifyParameters object.
 */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters = function() {};
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.geometry;
 /** @type {!MosaicRule} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.mosaicRule;
 /** @type {(string|number)} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.noData;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.noDataInterpretation;
 /** @type {!Symbol} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.pixelSize;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.pixelSizeX;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.pixelSizeY;
 /** @type {!RasterFunction} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.renderingRule;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.returnCatalogItems;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.returnGeometry;
 /** @type {!TimeExtent} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters.ImageServiceIdentifyParameters.prototype.timeExtent;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ImageServiceIdentifyParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ImageServiceIdentifyResult"
/** @const */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult = function() {};
 /** @type {!FeatureSet} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult.prototype.catalogItems;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult.prototype.catalogItemVisibilities;
 /** @type {!Point} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult.prototype.location;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult.prototype.name;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult.prototype.objectId;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult.prototype.properties;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult.ImageServiceIdentifyResult.prototype.value;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ImageServiceIdentifyResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ImageServiceIdentifyTask"
/** @const */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask */

/**
 * @constructor
 * @struct
 * Creates a new ImageServiceIdentifyTask object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents an image service.
 */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask.ImageServiceIdentifyTask = function(url) {};

/**
 * Sends a request to the ArcGIS REST image service resource to identify content based on the ImageServiceIdentifyParameters specified in the imageServiceIdentifyParameters argument.
 * @param {!ImageServiceIdentifyParameters} params Specifies the criteria used to identify the features.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask.ImageServiceIdentifyTask.prototype.execute = function(params, callback, errback) {};

/**
 * Fires when the identify operation is complete.
 * @param {string} type
 * @param {function({result: !ImageServiceIdentifyResult, target: !ImageServiceIdentifyTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask.ImageServiceIdentifyTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ImageServiceIdentifyTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ImageServiceMeasureParameters"
/** @const */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_AREA_PERIMETER;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_AREA_PERIMETER_3D;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_BASE_TOP;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_BASE_TOP_SHADOW;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_CENTROID;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_CENTROID_3D;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_DISTANCE_ANGLE;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_DISTANCE_ANGLE_3D;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_POINT;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_POINT_3D;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.OPERATION_TOP_TOP_SHADOW;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.angularUnit;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.areaUnit;
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.fromGeometry;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.linearUnit;
 /** @type {!MosaicRule} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.mosaicRule;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.operation;
 /** @type {!Point} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.pixelSize;
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.toGeometry;

/**
 * Converts the ImageServiceMeasureParameters instance to a JSON object.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters.ImageServiceMeasureParameters.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ImageServiceMeasureParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ImageServiceMeasureTask"
/** @const */
tsickle_declare_module.esri_tasks_ImageServiceMeasureTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceMeasureTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ImageServiceMeasureTask */

/**
 * @constructor
 * @struct
 * Creates a new instance of ImageServiceMeasureTask
 * @param {string} url URL to the ArcGIS Server REST resource that represents an image service.
 */
tsickle_declare_module.esri_tasks_ImageServiceMeasureTask.ImageServiceMeasureTask = function(url) {};

/**
 * Sends a request to an image service to perform the designated measure operation.
 * @param {!ImageServiceMeasureParameters} params Parameters to pass to the server to execute the task.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ImageServiceMeasureTask.ImageServiceMeasureTask.prototype.execute = function(params, callback, errback) {};

/**
 * Fires when measure completes.
 * @param {string} type
 * @param {function({target: !ImageServiceMeasureTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_ImageServiceMeasureTask.ImageServiceMeasureTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ImageServiceMeasureTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/JobInfo"
/** @const */
tsickle_declare_module.esri_tasks_JobInfo = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_JobInfo */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_CANCELLED;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_CANCELLING;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_DELETED;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_DELETING;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_EXECUTING;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_FAILED;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_NEW;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_SUBMITTED;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_SUCCEEDED;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_TIMED_OUT;
 /** @type {?} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.STATUS_WAITING;
 /** @type {string} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.prototype.jobId;
 /** @type {string} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.prototype.jobStatus;
 /** @type {!Array<!GPMessage>} */
tsickle_declare_module.esri_tasks_JobInfo.JobInfo.prototype.messages;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_JobInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/LegendLayer"
/** @const */
tsickle_declare_module.esri_tasks_LegendLayer = {};

/**
 * @constructor
 * @struct
 * Creates a new LegendLayer object.
 */
tsickle_declare_module.esri_tasks_LegendLayer.LegendLayer = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_LegendLayer.LegendLayer.prototype.layerId;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_LegendLayer.LegendLayer.prototype.subLayerIds;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_LegendLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/LengthsParameters"
/** @const */
tsickle_declare_module.esri_tasks_LengthsParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_LengthsParameters */

/**
 * @constructor
 * @struct
 * Creates a new LengthsParameter object.
 */
tsickle_declare_module.esri_tasks_LengthsParameters.LengthsParameters = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_LengthsParameters.LengthsParameters.prototype.calculationType;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_LengthsParameters.LengthsParameters.prototype.geodesic;
 /** @type {(string|number)} */
tsickle_declare_module.esri_tasks_LengthsParameters.LengthsParameters.prototype.lengthUnit;
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_LengthsParameters.LengthsParameters.prototype.polylines;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_LengthsParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/LinearUnit"
/** @const */
tsickle_declare_module.esri_tasks_LinearUnit = {};

/**
 * @constructor
 * @struct
 * Creates a new LinearUnit object.
 */
tsickle_declare_module.esri_tasks_LinearUnit.LinearUnit = function() {};
 /** @type {number} */
tsickle_declare_module.esri_tasks_LinearUnit.LinearUnit.prototype.distance;
 /** @type {string} */
tsickle_declare_module.esri_tasks_LinearUnit.LinearUnit.prototype.units;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_LinearUnit */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/MultipartColorRamp"
/** @const */
tsickle_declare_module.esri_tasks_MultipartColorRamp = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_MultipartColorRamp */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_MultipartColorRamp */

/**
 * @constructor
 * @struct
 * Creates a new MultipartColorRamp object.
 */
tsickle_declare_module.esri_tasks_MultipartColorRamp.MultipartColorRamp = function() {};
 /** @type {!Array<!AlgorithmicColorRamp>} */
tsickle_declare_module.esri_tasks_MultipartColorRamp.MultipartColorRamp.prototype.colorRamps;

/**
 * Returns an easily serializable object representation of a multipart color ramp.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_MultipartColorRamp.MultipartColorRamp.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_MultipartColorRamp */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/NAMessage"
/** @const */
tsickle_declare_module.esri_tasks_NAMessage = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_ABORT;
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_EMPTY;
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_ERROR;
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_INFORMATIVE;
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_PROCESS_DEFINITION;
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_PROCESS_START;
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_PROCESS_STOP;
 /** @type {?} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.TYPE_WARNING;
 /** @type {string} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.prototype.description;
 /** @type {number} */
tsickle_declare_module.esri_tasks_NAMessage.NAMessage.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_NAMessage */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/NATypes"
/** @const */
tsickle_declare_module.esri_tasks_NATypes = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_NATypes */
 /** @type {{OutputLine: !NAOutputLine, OutputPolygon: !NAOutputPolygon, TravelDirection: !NATravelDirection, UTurn: !NAUTurn}} */
tsickle_declare_module.esri_tasks_NATypes.NATypes;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_NATypes */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/OffsetParameters"
/** @const */
tsickle_declare_module.esri_tasks_OffsetParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_OffsetParameters */

/**
 * @constructor
 * @struct
 * Creates a new OffsetParameters object.
 */
tsickle_declare_module.esri_tasks_OffsetParameters.OffsetParameters = function() {};
 /** @type {number} */
tsickle_declare_module.esri_tasks_OffsetParameters.OffsetParameters.prototype.bevelRatio;
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_OffsetParameters.OffsetParameters.prototype.geometries;
 /** @type {number} */
tsickle_declare_module.esri_tasks_OffsetParameters.OffsetParameters.prototype.offsetDistance;
 /** @type {string} */
tsickle_declare_module.esri_tasks_OffsetParameters.OffsetParameters.prototype.offsetHow;
 /** @type {string} */
tsickle_declare_module.esri_tasks_OffsetParameters.OffsetParameters.prototype.offsetUnit;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_OffsetParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ParameterValue"
/** @const */
tsickle_declare_module.esri_tasks_ParameterValue = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_ParameterValue.ParameterValue = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_ParameterValue.ParameterValue.prototype.dataType;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ParameterValue.ParameterValue.prototype.paramName;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ParameterValue.ParameterValue.prototype.value;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ParameterValue */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/PrintParameters"
/** @const */
tsickle_declare_module.esri_tasks_PrintParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_PrintParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_PrintParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_PrintParameters */

/**
 * @constructor
 * @struct
 * Creates a new PrintParameters object.
 */
tsickle_declare_module.esri_tasks_PrintParameters.PrintParameters = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_PrintParameters.PrintParameters.prototype.extraParameters;
 /** @type {!Map} */
tsickle_declare_module.esri_tasks_PrintParameters.PrintParameters.prototype.map;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_PrintParameters.PrintParameters.prototype.outSpatialReference;
 /** @type {!PrintTemplate} */
tsickle_declare_module.esri_tasks_PrintParameters.PrintParameters.prototype.template;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_PrintParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/PrintTask"
/** @const */
tsickle_declare_module.esri_tasks_PrintTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_PrintTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_PrintTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_PrintTask */

/**
 * @constructor
 * @struct
 * Creates a new PrintTask object.
 * @param {string} url URL to the Export Web Map Task.
 * @param {!PrintTaskOptions=} params Parameters for the print task.
 */
tsickle_declare_module.esri_tasks_PrintTask.PrintTask = function(url, params) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_PrintTask.PrintTask.prototype.url;

/**
 * Sends a request to the print service resource to create a print page using the information specified in the printParameters argument.
 * @param {!PrintParameters} printParameters A PrintParameters object that defines the printing options.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_PrintTask.PrintTask.prototype.execute = function(printParameters, callback, errback) {};

/**
 * Fired when the print operation is complete.
 * Fired when an error occurs while executing the print task.
 * @param {string} type
 * @param {function({result: !DataFile, target: !PrintTask}): void|function({error: !Error, target: !PrintTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_PrintTask.PrintTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_PrintTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/PrintTemplate"
/** @const */
tsickle_declare_module.esri_tasks_PrintTemplate = {};

/**
 * @constructor
 * @struct
 * Creates a new PrintTemplate object.
 */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.exportOptions;
 /** @type {string} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.format;
 /** @type {string} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.label;
 /** @type {string} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.layout;
 /** @type {?} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.layoutOptions;
 /** @type {number} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.outScale;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.preserveScale;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.showAttribution;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_PrintTemplate.PrintTemplate.prototype.showLabels;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_PrintTemplate */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ProjectParameters"
/** @const */
tsickle_declare_module.esri_tasks_ProjectParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ProjectParameters */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ProjectParameters */

/**
 * @constructor
 * @struct
 * Creates a new ProjectParameters object.
 */
tsickle_declare_module.esri_tasks_ProjectParameters.ProjectParameters = function() {};
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_ProjectParameters.ProjectParameters.prototype.geometries;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_ProjectParameters.ProjectParameters.prototype.outSR;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ProjectParameters.ProjectParameters.prototype.transformation;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ProjectParameters.ProjectParameters.prototype.transformForward;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ProjectParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/QueryTask"
/** @const */
tsickle_declare_module.esri_tasks_QueryTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_QueryTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_QueryTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_QueryTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_QueryTask */

/**
 * @constructor
 * @struct
 * Creates a new QueryTask object used to execute a query on the layer resource identified by the url.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a layer in a service.
 * @param {!QueryTaskOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask = function(url, options) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask.prototype.url;

/**
 * Executes a Query against an ArcGIS Server map layer.
 * @param {!Query} parameters Specifies the attributes and spatial filter of the query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask.prototype.execute = function(parameters, callback, errback) {};

/**
 * Get a count of the number of features that satisfy the input query.
 * @param {!Query} query Specify the input query object.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask.prototype.executeForCount = function(query, callback, errback) {};

/**
 * Get the extent of the features that satisfy the input query.
 * @param {!Query} query Specify the input query object.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask.prototype.executeForExtent = function(query, callback, errback) {};

/**
 * Executes a Query against an ArcGIS Server map layer.
 * @param {!Query} parameters Specifies the attributes and spatial filter of the query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask.prototype.executeForIds = function(parameters, callback, errback) {};

/**
 * Executes a RelationshipQuery against an ArcGIS Server map layer (or table).
 * @param {!RelationshipQuery} parameters Specifies the attributes and spatial filter of the query.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask.prototype.executeRelationshipQuery = function(parameters, callback, errback) {};

/**
 * Fires when the query operation is complete.
 * Fires when an error occurs when executing the task.
 * Fires when the query for the count is complete.
 * Fires when the query for the extent is complete.
 * Fires when the query on IDs is complete.
 * Fires when the executeRelationshipQuery is complete.
 * @param {string} type
 * @param {function({featureSet: !FeatureSet, target: !QueryTask}): void|function({error: !Error, target: !QueryTask}): void|function({count: number, target: !QueryTask}): void|function({count: number, extent: ?, target: !QueryTask}): void|function({objectIds: !Array<number>, target: !QueryTask}): void|function({featureSets: !Array<!FeatureSet>, target: !QueryTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_QueryTask.QueryTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_QueryTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/RasterData"
/** @const */
tsickle_declare_module.esri_tasks_RasterData = {};

/**
 * @constructor
 * @struct
 * Creates a new RasterData object.
 */
tsickle_declare_module.esri_tasks_RasterData.RasterData = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_RasterData.RasterData.prototype.format;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RasterData.RasterData.prototype.itemID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RasterData.RasterData.prototype.url;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_RasterData */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/RelationParameters"
/** @const */
tsickle_declare_module.esri_tasks_RelationParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_RelationParameters */

/**
 * @constructor
 * @struct
 * Creates a new RelationParameter object.
 */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_COINCIDENCE;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_CROSS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_DISJOINT;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_IN;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_INTERIORINTERSECTION;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_INTERSECTION;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_LINETOUCH;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_OVERLAP;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_POINTTOUCH;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_RELATION;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_TOUCH;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.SPATIAL_REL_WITHIN;
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.prototype.geometries1;
 /** @type {!Array<!Geometry>} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.prototype.geometries2;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.prototype.relation;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RelationParameters.RelationParameters.prototype.relationParam;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_RelationParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/RelationshipQuery"
/** @const */
tsickle_declare_module.esri_tasks_RelationshipQuery = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_RelationshipQuery */

/**
 * @constructor
 * @struct
 * Creates a new RelationshipQuery object.
 */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.definitionExpression;
 /** @type {number} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.geometryPrecision;
 /** @type {number} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.maxAllowableOffset;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.objectIds;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.outFields;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.outSpatialReference;
 /** @type {number} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.relationshipId;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RelationshipQuery.RelationshipQuery.prototype.returnGeometry;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_RelationshipQuery */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/RouteParameters"
/** @const */
tsickle_declare_module.esri_tasks_RouteParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_RouteParameters */

/**
 * @constructor
 * @struct
 * Creates a new RouteParameters object.
 */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters = function() {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.accumulateAttributes;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.attributeParameterValues;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.barriers;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.directionsLanguage;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.directionsLengthUnits;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.directionsOutputType;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.directionsStyleName;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.directionsTimeAttribute;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.doNotLocateOnRestrictedElements;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.findBestSequence;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.ignoreInvalidLocations;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.impedanceAttribute;
 /** @type {number} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.outputGeometryPrecision;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.outputGeometryPrecisionUnits;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.outputLines;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.outSpatialReference;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.polygonBarriers;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.polylineBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.preserveFirstStop;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.preserveLastStop;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.restrictionAttributes;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.restrictUTurns;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.returnBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.returnDirections;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.returnPolygonBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.returnPolylineBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.returnRoutes;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.returnStops;
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.startTime;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.startTimeIsUTC;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.stops;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.timeWindowsAreUTC;
 /** @type {?} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.travelMode;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.useHierarchy;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_RouteParameters.RouteParameters.prototype.useTimeWindows;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_RouteParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/RouteResult"
/** @const */
tsickle_declare_module.esri_tasks_RouteResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_RouteResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_RouteResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_RouteResult.RouteResult = function() {};
 /** @type {!DirectionsFeatureSet} */
tsickle_declare_module.esri_tasks_RouteResult.RouteResult.prototype.directions;
 /** @type {!Graphic} */
tsickle_declare_module.esri_tasks_RouteResult.RouteResult.prototype.route;
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteResult.RouteResult.prototype.routeName;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_tasks_RouteResult.RouteResult.prototype.stops;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_RouteResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/RouteTask"
/** @const */
tsickle_declare_module.esri_tasks_RouteTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_RouteTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_RouteTask */

/**
 * @constructor
 * @struct
 * Creates a new RouteTask object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a network analysis service.
 */
tsickle_declare_module.esri_tasks_RouteTask.RouteTask = function(url) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_RouteTask.RouteTask.prototype.url;

/**
 * Returns an object describing a Route service endpoint (URL of the endpoint is specified in the constructor).
 * @return {?}
 */
tsickle_declare_module.esri_tasks_RouteTask.RouteTask.prototype.getServiceDescription = function() {};

/**
 * Solves the route against the route layer with the route parameters.
 * @param {!RouteParameters} params Route parameters used as input to generate the route.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_RouteTask.RouteTask.prototype.solve = function(params, callback, errback) {};

/**
 * Fires when an error occurs when executing the task.
 * Fires when RouteTask.solve() has completed.
 * @param {string} type
 * @param {function({error: !Error, target: !RouteTask}): void|function({result: ?, target: !RouteTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_RouteTask.RouteTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_RouteTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ServiceAreaParameters"
/** @const */
tsickle_declare_module.esri_tasks_ServiceAreaParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaParameters */

/**
 * @constructor
 * @struct
 * Creates a new ServiceAreaParameters object.
 */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters = function() {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.accumulateAttributes;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.attributeParameterValues;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.defaultBreaks;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.doNotLocateOnRestrictedElements;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.excludeSourcesFromPolygons;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.facilities;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.impedanceAttribute;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.mergeSimilarPolygonRanges;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.outputGeometryPrecision;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.outputGeometryPrecisionUnits;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.outputLines;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.outputPolygons;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.outSpatialReference;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.overlapLines;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.overlapPolygons;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.pointBarriers;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.polygonBarriers;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.polylineBarriers;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.restrictionAttributes;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.restrictUTurns;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.returnFacilities;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.returnPointBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.returnPolygonBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.returnPolylineBarriers;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.splitLinesAtBreaks;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.splitPolygonsAtBreaks;
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.timeOfDay;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.travelDirection;
 /** @type {?} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.travelMode;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.trimOuterPolygon;
 /** @type {number} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.trimPolygonDistance;
 /** @type {string} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.trimPolygonDistanceUnits;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_ServiceAreaParameters.ServiceAreaParameters.prototype.useHierarchy;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ServiceAreaParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ServiceAreaSolveResult"
/** @const */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaSolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaSolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaSolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaSolveResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaSolveResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult = function() {};
 /** @type {!Array<!Point>} */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult.prototype.facilities;
 /** @type {!Array<!NAMessage>} */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult.prototype.messages;
 /** @type {!Array<!Point>} */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult.prototype.pointBarriers;
 /** @type {!Array<!Polygon>} */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult.prototype.polygonBarriers;
 /** @type {!Array<!Polyline>} */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult.prototype.polylineBarriers;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult.prototype.serviceAreaPolygons;
 /** @type {!Array<!Graphic>} */
tsickle_declare_module.esri_tasks_ServiceAreaSolveResult.ServiceAreaSolveResult.prototype.serviceAreaPolylines;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ServiceAreaSolveResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/ServiceAreaTask"
/** @const */
tsickle_declare_module.esri_tasks_ServiceAreaTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_ServiceAreaTask */

/**
 * @constructor
 * @struct
 * Creates a new ServiceAreaTask object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a network analysis service.
 */
tsickle_declare_module.esri_tasks_ServiceAreaTask.ServiceAreaTask = function(url) {};

/**
 * Returns an object describing a Service Area service endpoint (URL of the endpoint is specified in the constructor).
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ServiceAreaTask.ServiceAreaTask.prototype.getServiceDescription = function() {};

/**
 * Solve the service area.
 * @param {!ServiceAreaParameters} params The ServiceAreaParameters object.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_ServiceAreaTask.ServiceAreaTask.prototype.solve = function(params, callback, errback) {};

/**
 * Fires when ServiceAreaTask has completed.
 * @param {string} type
 * @param {function({result: !ServiceAreaSolveResult, target: !ServiceAreaTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_ServiceAreaTask.ServiceAreaTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_ServiceAreaTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/StatisticDefinition"
/** @const */
tsickle_declare_module.esri_tasks_StatisticDefinition = {};

/**
 * @constructor
 * @struct
 * Creates a new StatisticDefinition object.
 */
tsickle_declare_module.esri_tasks_StatisticDefinition.StatisticDefinition = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_StatisticDefinition.StatisticDefinition.prototype.onStatisticField;
 /** @type {string} */
tsickle_declare_module.esri_tasks_StatisticDefinition.StatisticDefinition.prototype.outStatisticFieldName;
 /** @type {string} */
tsickle_declare_module.esri_tasks_StatisticDefinition.StatisticDefinition.prototype.statisticType;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_StatisticDefinition */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/TrimExtendParameters"
/** @const */
tsickle_declare_module.esri_tasks_TrimExtendParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_TrimExtendParameters */

/**
 * @constructor
 * @struct
 * Creates a new TrimExtendParameters object.
 */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.DEFAULT_CURVE_EXTENSION;
 /** @type {?} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.KEEP_END_ATTRIBUTES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.NO_END_ATTRIBUTES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.NO_EXTEND_AT_FROM;
 /** @type {?} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.NO_EXTEND_AT_TO;
 /** @type {?} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.RELOCATE_ENDS;
 /** @type {number} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.prototype.extendHow;
 /** @type {!Array<!Polyline>} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.prototype.polylines;
 /** @type {!Polyline} */
tsickle_declare_module.esri_tasks_TrimExtendParameters.TrimExtendParameters.prototype.trimExtendTo;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_TrimExtendParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/UniqueValueDefinition"
/** @const */
tsickle_declare_module.esri_tasks_UniqueValueDefinition = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_UniqueValueDefinition */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_UniqueValueDefinition */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_UniqueValueDefinition */

/**
 * @constructor
 * @struct
 * Creates a new UniqueValueDefinition object.
 */
tsickle_declare_module.esri_tasks_UniqueValueDefinition.UniqueValueDefinition = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_UniqueValueDefinition.UniqueValueDefinition.prototype.attributeField;
 /** @type {string} */
tsickle_declare_module.esri_tasks_UniqueValueDefinition.UniqueValueDefinition.prototype.attributeField2;
 /** @type {string} */
tsickle_declare_module.esri_tasks_UniqueValueDefinition.UniqueValueDefinition.prototype.attributeField3;
 /** @type {!Symbol} */
tsickle_declare_module.esri_tasks_UniqueValueDefinition.UniqueValueDefinition.prototype.baseSymbol;
 /** @type {!ColorRamp} */
tsickle_declare_module.esri_tasks_UniqueValueDefinition.UniqueValueDefinition.prototype.colorRamp;

/**
 * Returns an easily serializable object representation of the unique value definition.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_UniqueValueDefinition.UniqueValueDefinition.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_UniqueValueDefinition */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/BatchValidationJob"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob = function() {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob.prototype.batchRunIds;
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob.prototype.creationDate;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob.prototype.jobId;
 /** @type {!BatchValidationJobInfo} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob.prototype.jobInfo;
 /** @type {!BatchValidationParameters} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob.prototype.parameters;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob.prototype.status;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob.BatchValidationJob.prototype.type;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJob */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/BatchValidationJobInfo"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo.prototype.batchRunId;
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo.prototype.finishTimeUTC;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo.prototype.gpJobId;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo.prototype.gpUrl;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo.prototype.messages;
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo.prototype.startTimeUTC;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo.BatchValidationJobInfo.prototype.status;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationJobInfo */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/BatchValidationParameters"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters = function() {};
 /** @type {!Polygon} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.analysisArea;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.batchJobFileName;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.changedFeaturesOnly;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.createdBy;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.cronExpression;
 /** @type {!Date} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.executionsEndDate;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.fileItemId;
 /** @type {number} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.maxNumberOfExecutions;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.productionWorkspace;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.sessionString;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.title;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters.BatchValidationParameters.prototype.userName;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/BatchValidationTask"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask */

/**
 * @constructor
 * @struct
 * Creates a new BatchValidationTask object.
 * @param {string} url The DataReviewerServer Server Object Extension (SOE) URL.
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask = function(url) {};

/**
 * Cancels an executing job.
 * @param {string} jobId Job Id of the batch validation job to cancel.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.cancelJobExecution = function(jobId) {};

/**
 * Creates a new Reviewer session.
 * @param {string} sessionName Name of the session to be created.
 * @param {!SessionOptions} sessionOptions Session properties to be used to create the session.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.createReviewerSession = function(sessionName, sessionOptions) {};

/**
 * Deletes an existing scheduled Batch Validation Job.
 * @param {string} jobId Job Id of the batch validation job to delete.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.deleteJob = function(jobId) {};

/**
 * Pauses an existing Batch Validation Job's schedule.
 * @param {string} jobId Job Id of the batch validation job to be disabled.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.disableJob = function(jobId) {};

/**
 * Edits the schedule, settings and title of an existing Batch Validation Job.
 * @param {string} jobId Job Id of the batch validation job to edit.
 * @param {!BatchValidationParameters} parameters Parameters to change in an existing batch job.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.editJob = function(jobId, parameters) {};

/**
 * Restarts an existing Batch Validation Job's schedule.
 * @param {string} jobId Job Id of the batch validation job to enable.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.enableJob = function(jobId) {};

/**
 * Executes an adhoc job.
 * @param {!BatchValidationParameters} parameters Parameters specifying the details of a job to execute.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.executeJob = function(parameters) {};

/**
 * Retrieves all adhoc jobs from the server and returns an array of BatchValidationJob with the information.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getAdhocJobsList = function() {};

/**
 * Returns an array of custom field names defined in a Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getCustomFieldNames = function() {};

/**
 * Fetches Batch Validation Job details.
 * @param {string} jobId Job Id of the batch validation job.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getJobDetails = function(jobId) {};

/**
 * Fetches the Job Execution details of a Batch Validation Job.
 * @param {string} jobId Job Id of the batch validation job.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getJobExecutionDetails = function(jobId) {};

/**
 * Returns an object that contains Scheduled and AdhocJob IDs in two separate arrays.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getJobIds = function() {};

/**
 * Retrieves a list of localized life cycle status strings from the Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getLifecycleStatusStrings = function() {};

/**
 * Extracts the MapServer url from the full ArcGIS Data Reviewer for Server SOE url.
 * @return {string}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getReviewerMapServerUrl = function() {};

/**
 * Returns an array of sessions in a Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getReviewerSessions = function() {};

/**
 * Retrieves all scheduled jobs from the server and returns an array of BatchValidationJob with the information.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.getScheduledJobsList = function() {};

/**
 * Schedules a new Batch Validation.
 * @param {!BatchValidationParameters} parameters Parameters for scheduling a batch job.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.scheduleJob = function(parameters) {};

/**
 * Fires when the cancelJobExecution method is complete.
 * Fires when the createReviewerSessions method is complete.
 * Fires when the deleteJob method is complete.
 * Fires when the disableJob method is complete.
 * Fires when the editJob method is complete.
 * Fires when the enableJob method is complete.
 * Fires when an error occurs during a BatchValidationTask method execution.
 * Fires when the executeJob method is complete.
 * Fires when the getAdhocJobsList method is complete.
 * Fires when the getCustomFieldNames method is complete.
 * Fires when the getJobDetails method is complete.
 * Fires when the getJobExecutionDetails method is complete.
 * Fires when the getJobIds method is complete.
 * Fires when the getLifecycleStatusStrings method is complete.
 * Fires when the getReviewerSessions method is complete.
 * Fires when the getScheduledJobsList method is complete.
 * Fires when the scheduleJob method is complete.
 * @param {string} type
 * @param {function({canceled: boolean, target: !BatchValidationTask}): void|function({reviewerSession: !ReviewerSession, target: !BatchValidationTask}): void|function({deleted: boolean, target: !BatchValidationTask}): void|function({disabled: boolean, target: !BatchValidationTask}): void|function({edited: boolean, target: !BatchValidationTask}): void|function({enabled: boolean, target: !BatchValidationTask}): void|function({error: !Error, target: !BatchValidationTask}): void|function({jobId: string, target: !BatchValidationTask}): void|function({adhocJobs: !Array<!BatchValidationJob>, target: !BatchValidationTask}): void|function({customFieldNames: !Array<string>, target: !BatchValidationTask}): void|function({jobDetails: !BatchValidationJob, target: !BatchValidationTask}): void|function({jobInfo: !BatchValidationJobInfo, target: !BatchValidationTask}): void|function({adhocJobs: !Array<string>, scheduledJobs: !Array<string>, target: !BatchValidationTask}): void|function({lifecycleStatusStrings: !Array<string>, target: !BatchValidationTask}): void|function({reviewerSessions: !Array<!ReviewerSession>, target: !BatchValidationTask}): void|function({scheduledJobs: !Array<!BatchValidationJob>, target: !BatchValidationTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask.BatchValidationTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_BatchValidationTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/DashboardResult"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_DashboardResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_DashboardResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardResult.DashboardResult = function() {};
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_datareviewer_DashboardResult.DashboardResult.prototype.counts;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_DashboardResult.DashboardResult.prototype.fieldName;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_datareviewer_DashboardResult.DashboardResult.prototype.fieldValues;
 /** @type {!ReviewerFilters} */
tsickle_declare_module.esri_tasks_datareviewer_DashboardResult.DashboardResult.prototype.filters;

/**
 * Gets the result count for a field value.
 * @param {(string|number)} fieldValue Unique field value from the fieldValues array.
 * @return {number}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardResult.DashboardResult.prototype.getCount = function(fieldValue) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_DashboardResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/DashboardTask"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_DashboardTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_DashboardTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_DashboardTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_DashboardTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_DashboardTask */

/**
 * @constructor
 * @struct
 * Creates a new DashboardTask object.
 * @param {string} url The DataReviewerServer Server Object Extension (SOE) URL.
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask = function(url) {};

/**
 * Creates a new Reviewer session.
 * @param {string} sessionName Name of the session to be created.
 * @param {!SessionOptions} sessionOptions Session properties to be used to create the session.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.createReviewerSession = function(sessionName, sessionOptions) {};

/**
 * Returns an array of custom field names defined in a Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.getCustomFieldNames = function() {};

/**
 * Requests Dashboard results field names.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.getDashboardFieldNames = function() {};

/**
 * Requests dashboard results by fieldName.
 * @param {string} fieldName Field name for dashboard results.
 * @param {!ReviewerFilters=} filters Instance of ReviewerFilters containing one or more filters used to narrow down dashboard results.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.getDashboardResults = function(fieldName, filters) {};

/**
 * Retrieves a list of localized life cycle status strings from the Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.getLifecycleStatusStrings = function() {};

/**
 * Extracts the MapServer url from the full ArcGIS Data Reviewer for Server SOE url.
 * @return {string}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.getReviewerMapServerUrl = function() {};

/**
 * Returns an array of sessions in a Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.getReviewerSessions = function() {};

/**
 * Fires when the createReviewerSessions method is complete.
 * Fires when an error occurs during a DashboardTask method execution.
 * Fires when the getCustomFieldNames method is complete.
 * Fires when the getDashboardFieldNames method is complete.
 * Fires when the getDashboardResults method is complete.
 * Fires when the getLifecycleStatusStrings method is complete.
 * Fires when the getReviewerSessions method is complete.
 * @param {string} type
 * @param {function({reviewerSession: !ReviewerSession, target: !DashboardTask}): void|function({error: !Error, target: !DashboardTask}): void|function({customFieldNames: !Array<string>, target: !DashboardTask}): void|function({fieldNames: !Array<string>, target: !DashboardTask}): void|function({dashboardResult: !DashboardResult, target: !DashboardTask}): void|function({lifecycleStatusStrings: !Array<string>, target: !DashboardTask}): void|function({reviewerSessions: !Array<!ReviewerSession>, target: !DashboardTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_datareviewer_DashboardTask.DashboardTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_DashboardTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/GetResultsQueryParameters"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters.GetResultsQueryParameters = function() {};
 /** @type {number} */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters.GetResultsQueryParameters.prototype.pageNumber;
 /** @type {number} */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters.GetResultsQueryParameters.prototype.pageSize;
 /** @type {!Array<?>} */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters.GetResultsQueryParameters.prototype.returnFields;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters.GetResultsQueryParameters.prototype.sortBy;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters.GetResultsQueryParameters.prototype.sortDescending;

/**
 * Returns a JSON representation of an instance of GetResultsQueryParameters.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters.GetResultsQueryParameters.prototype.toJSON = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_GetResultsQueryParameters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/ReviewerAttributes"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes = function() {};
 /** @type {number} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.lifecycleStatus;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.notes;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.resourceName;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.reviewStatus;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.reviewTechnician;
 /** @type {number} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.sessionId;
 /** @type {number} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.severity;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.subtype;

/**
 * Returns a JSON representation of an instance of ReviewerAttributes.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes.ReviewerAttributes.prototype.toJSON = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_ReviewerAttributes */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/ReviewerFilters"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters.ReviewerFilters = function() {};

/**
 * Queries an attribute by a value.
 * @param {string} fieldName The field used to perform the filter.
 * @param {(string|number|!Array<?>)} fieldValues A value or an Array of values in fieldName to filter.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters.ReviewerFilters.prototype.addAttributeFilter = function(fieldName, fieldValues) {};

/**
 * Queries an attribute by a range of values.
 * @param {string} fieldName The field used to perform the filter.
 * @param {(string|number)} min Minimum value range.
 * @param {(string|number)} max Maximum value range.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters.ReviewerFilters.prototype.addRangeFilter = function(fieldName, min, max) {};

/**
 * Queries by a polygon.
 * @param {!Polygon} geometry The geometry used to perform the filter.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters.ReviewerFilters.prototype.addSpatialFilter = function(geometry) {};

/**
 * Returns the count of ReviewerFilters added.
 * @return {number}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters.ReviewerFilters.prototype.getCount = function() {};

/**
 * Returns a JSON representation of a filter object.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters.ReviewerFilters.prototype.toJSON = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_ReviewerFilters */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/ReviewerLifecycle"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerLifecycle = {};
 /** @type {{ACCEPTABLE: number, CORRECTION: number, EXCEPTION: number, FAILED: number, LIFECYCLEPHASE_DESCRIPTIONS: ?, LIFECYCLESTATUS_DESCRIPTIONS: ?, MARK_AS_EXCEPTION: number, NEW: number, PASSED: number, RESOLVED: number, REVIEW: number, REVIEWED: number, UNACCEPTABLE: number, UNKNOWN: number, UNRESOLVED_ACCEPTABLE: number, UNRESOLVED_EXCEPTION: number, UNRESOLVED_UNACCEPTABLE: number, VERIFICATION: number, getCurrentLifecyclePhase: function(number): string, getLifecycleInfo: function(!Array<?>): ?, toLifecyclePhaseString: function(number): string, toLifecycleStatusString: function(number): string}} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerLifecycle.ReviewerLifecycle;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_ReviewerLifecycle */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/ReviewerResultsTask"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */

/**
 * @constructor
 * @struct
 * Creates a new ReviewerResultsTask object.
 * @param {string} url The DataReviewerServer Server Object Extension (SOE) URL.
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask = function(url) {};

/**
 * Creates a new Reviewer session.
 * @param {string} sessionName Name of the session to be created.
 * @param {!SessionOptions} sessionOptions Session properties to be used to create the session.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.createReviewerSession = function(sessionName, sessionOptions) {};

/**
 * Fetches batch run information from REVBATCHRUNTABLE and REVCHECKRUNTABLE.
 * @param {!Array<?>} batchRunIds Array of batchRunIds used to get batch run details.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getBatchRunDetails = function(batchRunIds) {};

/**
 * Returns an array of custom field names defined in a Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getCustomFieldNames = function() {};

/**
 * Utility operation that returns a where clause given a set of input filters.
 * @param {!ReviewerFilters} filters An instance of ReviewerFilters used to create a layer definition.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getLayerDefinition = function(filters) {};

/**
 * Retrieves a list of localized life cycle status strings from the Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getLifecycleStatusStrings = function() {};

/**
 * Queries records from REVTABLEMAIN, REVBATCHRUNTABLE and REVCHECKRUNTABLE.
 * @param {!GetResultsQueryParameters} getResultsQueryParameters Defines the size and scope of the FeatureSet returned to the callback function.
 * @param {!ReviewerFilters=} filters Instance of ReviewerFilters used to query reviewer results.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getResults = function(getResultsQueryParameters, filters) {};

/**
 * Retrieves a list of field names that can be used to fetch or query results from reviewer workspace.
 * @return {!Array<string>}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getResultsFieldNames = function() {};

/**
 * Extracts the MapServer url from the full ArcGIS Data Reviewer for Server SOE url.
 * @return {string}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getReviewerMapServerUrl = function() {};

/**
 * Returns an array of sessions in a Reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.getReviewerSessions = function() {};

/**
 * Updates lifecycle status of the Reviewer results.
 * @param {number} sessionId Session that contains results to update.
 * @param {number} lifecycleStatus Lifecycle status to which the Reviewer results will get updated.
 * @param {string} technicianName Name of the technician performing the update.
 * @param {!ReviewerFilters} filters Instance of ReviewerFilters used to query Reviewer results.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.updateLifecycleStatus = function(sessionId, lifecycleStatus, technicianName, filters) {};

/**
 * Writes a feature to the reviewer workspace.
 * @param {!ReviewerAttributes} reviewerAttributes Class used to encapsulate all fields to be written to the reviewer workspace.
 * @param {!Graphic} feature Graphic to write to the reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.writeFeatureAsResult = function(reviewerAttributes, feature) {};

/**
 * Writes a geometry and associated reviewer attributes to the reviewer workspace.
 * @param {!ReviewerAttributes} reviewerAttributes Class used to encapsulate all fields to be written to the reviewer workspace.
 * @param {!Geometry} geometry A Geometry (point, polyline or polygon) to write to the reviewer workspace.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.writeResult = function(reviewerAttributes, geometry) {};

/**
 * Fires when the createReviewerSession method is complete.
 * Fires when an error occurs during a ReviewerResultsTask method execution.
 * Fires when the getBatchRunDetails method is complete.
 * Fires when the getCustomFieldNames method is complete.
 * Fires when the getLayerDefinition method is complete.
 * Fires when the getLifecycleStatusStrings method is complete.
 * Fires when the getResults method is complete.
 * Fires when the getReviewerSessions method is complete.
 * Fires when the updateLifecycleStatus method is complete.
 * Fires when the writeFeatureAsResult method is complete.
 * Fires when the writeResult method is complete.
 * @param {string} type
 * @param {function({reviewerSession: !ReviewerSession, target: !ReviewerResultsTask}): void|function({error: !Error, target: !ReviewerResultsTask}): void|function({featureSet: !FeatureSet, target: !ReviewerResultsTask}): void|function({customFieldNames: !Array<string>, target: !ReviewerResultsTask}): void|function({whereClause: string, target: !ReviewerResultsTask}): void|function({lifecycleStatusStrings: !Array<string>, target: !ReviewerResultsTask}): void|function({reviewerSessions: !Array<!ReviewerSession>, target: !ReviewerResultsTask}): void|function({featureEditResults: !Array<!FeatureEditResult>, target: !ReviewerResultsTask}): void|function({success: boolean, target: !ReviewerResultsTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask.ReviewerResultsTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_ReviewerResultsTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/ReviewerSession"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession = {};

/**
 * @constructor
 * @struct
 * Creates a new ReviewerSession object.
 * @param {string} sessionId Numeric identifier of the session.
 * @param {string} sessionName Name of the session.
 * @param {string} userName User name under which records are written to the reviewer workspace.
 * @param {string} versionName The enterprise geodatabase version in which records are validated.
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession.ReviewerSession = function(sessionId, sessionName, userName, versionName) {};
 /** @type {number} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession.ReviewerSession.prototype.sessionId;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession.ReviewerSession.prototype.sessionName;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession.ReviewerSession.prototype.userName;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession.ReviewerSession.prototype.versionName;

/**
 * The Session ID and name in format Session 10 : Parcels.
 * @return {string}
 */
tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession.ReviewerSession.prototype.toString = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_ReviewerSession */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/datareviewer/SessionOptions"
/** @const */
tsickle_declare_module.esri_tasks_datareviewer_SessionOptions = {};

/**
 * @constructor
 * @struct
 * Creates a new SessionOptions object.
 * @param {string} userName The username under which records are written to the reviewer workspace.
 * @param {string} versionName The enterprise geodatabase version under which records are written to the reviewer workspace.
 * @param {string} duplicateFilter Handle duplicate results when writing the results to the Reviewer workspace.
 * @param {boolean} storeGeometry Controls if validation result geometries are stored in the Reviewer workspace.
 */
tsickle_declare_module.esri_tasks_datareviewer_SessionOptions.SessionOptions = function(userName, versionName, duplicateFilter, storeGeometry) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_SessionOptions.SessionOptions.prototype.duplicateFilter;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_datareviewer_SessionOptions.SessionOptions.prototype.storeGeometry;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_SessionOptions.SessionOptions.prototype.userName;
 /** @type {string} */
tsickle_declare_module.esri_tasks_datareviewer_SessionOptions.SessionOptions.prototype.versionName;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_datareviewer_SessionOptions */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/AddressStudyArea"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_AddressStudyArea = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_AddressStudyArea */
/**
 * @extends {StudyArea}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_geoenrichment_AddressStudyArea.AddressStudyArea = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_AddressStudyArea.AddressStudyArea.prototype.attributes;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_AddressStudyArea */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/DriveBuffer"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_DriveBuffer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_DriveBuffer */

/**
 * @constructor
 * @struct
 * Constructs a DriveBuffer.
 * @param {!DriveBufferOptions} params Various optional parameters that can be used to configure this class.
 */
tsickle_declare_module.esri_tasks_geoenrichment_DriveBuffer.DriveBuffer = function(params) {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveBuffer.DriveBuffer.prototype.radius;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveBuffer.DriveBuffer.prototype.units;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_DriveBuffer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/DriveUnits"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.ACRES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.ARES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.CENTIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.DECIMAL_DEGREES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.DECIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.DEGREE_MINUTE_SECONDS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.FEET;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.HECTARES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.INCHES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.KILOMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.METERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.MILES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.MILLIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.MINUTES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.NAUTICAL_MILES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.POINTS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_CENTIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_DECIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_FEET;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_INCHES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_KILOMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_METERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_MILES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_MILLIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.SQUARE_YARDS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.UNKNOWN;
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits.DriveUnits.YARDS;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_DriveUnits */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/GeographyLevel"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyLevel = {};

/**
 * @constructor
 * @struct
 * Create a GeographyLevel object.
 * @param {!Object=} json Various options to configure this GeographyLevel.
 */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyLevel.GeographyLevel = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyLevel.GeographyLevel.prototype.countryID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyLevel.GeographyLevel.prototype.datasetID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyLevel.GeographyLevel.prototype.layerID;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_GeographyLevel */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/GeographyQuery"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQuery = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_GeographyQuery */

/**
 * @constructor
 * @struct
 * Creates a new instance of the GeographyQuery object.
 */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQuery.GeographyQuery = function() {};
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQuery.GeographyQuery.prototype.geographyIDs;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQuery.GeographyQuery.prototype.geographyLayerIDs;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQuery.GeographyQuery.prototype.where;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_GeographyQuery */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/GeographyQueryBase"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase */

/**
 * @constructor
 * @struct
 * Creates a new instance of the GeographyQueryBase object.
 * @param {!Object=} json JSON object used to set the properties of the object.
 */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.countryID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.datasetID;
 /** @type {number} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.featureLimit;
 /** @type {number} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.generalizationLevel;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.outSR;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.returnCentroids;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.returnGeometry;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.useFuzzySearch;

/**
 * Converts object to its JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase.GeographyQueryBase.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_GeographyQueryBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/GeometryStudyArea"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_GeometryStudyArea = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_GeometryStudyArea */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_GeometryStudyArea */

/**
 * @constructor
 * @struct
 * Constructs a GeometryStudyArea.
 */
tsickle_declare_module.esri_tasks_geoenrichment_GeometryStudyArea.GeometryStudyArea = function() {};
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_geoenrichment_GeometryStudyArea.GeometryStudyArea.prototype.geometry;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_GeometryStudyArea */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/IntersectingGeographies"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_IntersectingGeographies = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_IntersectingGeographies */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_geoenrichment_IntersectingGeographies.IntersectingGeographies = function() {};
 /** @type {!Array<!GeographyLevel>} */
tsickle_declare_module.esri_tasks_geoenrichment_IntersectingGeographies.IntersectingGeographies.prototype.levels;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_IntersectingGeographies */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/RingBuffer"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_RingBuffer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_RingBuffer */

/**
 * @constructor
 * @struct
 * Constructs a RingBuffer.
 * @param {!RingBufferOptions} params Various optional parameters that can be used to configure this class.
 */
tsickle_declare_module.esri_tasks_geoenrichment_RingBuffer.RingBuffer = function(params) {};
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_geoenrichment_RingBuffer.RingBuffer.prototype.radii;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_RingBuffer.RingBuffer.prototype.units;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_RingBuffer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/StandardGeographyQueryTask"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask */

/**
 * @constructor
 * @struct
 * Creates a new instance of the StandardGeographyQueryTask class.
 * @param {string=} url URL to the Geoenrichment server.
 */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask.StandardGeographyQueryTask = function(url) {};

/**
 * Executes the StandardGeographyQueryTask.
 * @param {!GeographyQueryBase} GeographyQuery See GeographyQuery or SubGeographyQuery classes for more details about available properties.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask.StandardGeographyQueryTask.prototype.execute = function(GeographyQuery) {};

/**
 * Fires when an error occurs during the query.
 * Fires when the query successfully executes.
 * @param {string} type
 * @param {function({error: !Error, target: !StandardGeographyQueryTask}): void|function({features: !FeatureSet, target: !StandardGeographyQueryTask}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask.StandardGeographyQueryTask.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyQueryTask */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/StandardGeographyStudyArea"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyStudyArea = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyStudyArea */
/**
 * @extends {StudyArea}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyStudyArea.StandardGeographyStudyArea = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyStudyArea.StandardGeographyStudyArea.prototype.countryID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyStudyArea.StandardGeographyStudyArea.prototype.geographyLayerID;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyStudyArea.StandardGeographyStudyArea.prototype.ids;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_StandardGeographyStudyArea */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/StudyArea"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_StudyArea = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StudyArea */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StudyArea */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StudyArea */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_StudyArea */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_geoenrichment_StudyArea.StudyArea = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_geoenrichment_StudyArea.StudyArea.prototype.attributes;
 /** @type {!Array<!GeographyLevel>} */
tsickle_declare_module.esri_tasks_geoenrichment_StudyArea.StudyArea.prototype.comparisonGeographyLevels;
 /** @type {(!RingBuffer|!DriveBuffer|!IntersectingGeographies)} */
tsickle_declare_module.esri_tasks_geoenrichment_StudyArea.StudyArea.prototype.options;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_geoenrichment_StudyArea.StudyArea.prototype.returnGeometry;

/**
 * Converts object to its JSON representation.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_geoenrichment_StudyArea.StudyArea.prototype.toJson = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_StudyArea */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/geoenrichment/SubGeographyQuery"
/** @const */
tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery */

/**
 * @constructor
 * @struct
 * Creates a new instance of the SubGeographyQuery object.
 * @param {!Object=} json JSON object used to set the properties of the object.
 */
tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery.SubGeographyQuery = function(json) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery.SubGeographyQuery.prototype.filterGeographyIDs;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery.SubGeographyQuery.prototype.filterGeographyLayerID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery.SubGeographyQuery.prototype.filterGeographyWhere;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery.SubGeographyQuery.prototype.subGeographyLayerID;
 /** @type {string} */
tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery.SubGeographyQuery.prototype.subGeographyWhere;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_geoenrichment_SubGeographyQuery */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/CoordinatesLocationProvider"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_CoordinatesLocationProvider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_CoordinatesLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_CoordinatesLocationProvider */

/**
 * @constructor
 * @struct
 * Creates a new instance of the CoordinatesLocationProvider object.
 * @param {!CoordinatesLocationProviderOptions} options Define the properties to use when creating the class.
 */
tsickle_declare_module.esri_tasks_locationproviders_CoordinatesLocationProvider.CoordinatesLocationProvider = function(options) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_locationproviders_CoordinatesLocationProvider.CoordinatesLocationProvider.prototype.xField;
 /** @type {string} */
tsickle_declare_module.esri_tasks_locationproviders_CoordinatesLocationProvider.CoordinatesLocationProvider.prototype.yField;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_CoordinatesLocationProvider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/GeometryLocationProvider"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_GeometryLocationProvider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_GeometryLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_GeometryLocationProvider */

/**
 * @constructor
 * @struct
 * Creates a new instance of the GeometryLocationProvider object.
 * @param {!GeometryLocationProviderOptions} options Define the properties to use when creating the class.
 */
tsickle_declare_module.esri_tasks_locationproviders_GeometryLocationProvider.GeometryLocationProvider = function(options) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_locationproviders_GeometryLocationProvider.GeometryLocationProvider.prototype.geometryField;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_GeometryLocationProvider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/LocationProviderBase"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase.LocationProviderBase = function() {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase.LocationProviderBase.prototype.geometryType;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase.LocationProviderBase.prototype.loaded;

/**
 * Assigns geometries to the array of Graphic objects.
 * @param {!Array<!Graphic>} features An array of Graphic objects.
 * @param {?=} options Optional parameters.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase.LocationProviderBase.prototype.locate = function(features, options) {};

/**
 * Fires when an error occurs during locate.
 * Fires after the provider has loaded.
 * Fires when the locate has completed.
 * Fires when the locate() method is in progress.
 * @param {string} type
 * @param {function({error: !Error, target: !LocationProviderBase}): void|function({target: !LocationProviderBase}): void|function({failed: !Array<!Graphic>, features: !Array<!Graphic>, target: !LocationProviderBase}): void|function({features: !Array<!Graphic>, target: !LocationProviderBase}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase.LocationProviderBase.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/LocationProviderClientBase"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderClientBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderClientBase */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderClientBase */
/**
 * @extends {LocationProviderBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderClientBase.LocationProviderClientBase = function() {};
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderClientBase.LocationProviderClientBase.prototype.inSpatialReference;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderClientBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/LocationProviderRemoteBase"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderRemoteBase = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderRemoteBase */
/**
 * @extends {LocationProviderBase}
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_tasks_locationproviders_LocationProviderRemoteBase.LocationProviderRemoteBase = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_LocationProviderRemoteBase */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/LocatorLocationProvider"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider */

/**
 * @constructor
 * @struct
 * Creates a new instance of the LocatorLocationProvider object.
 * @param {!LocatorLocationProviderOptions} options Define the properties to use when creating the class.
 */
tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider.LocatorLocationProvider = function(options) {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider.LocatorLocationProvider.prototype.addressFields;
 /** @type {!Locator} */
tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider.LocatorLocationProvider.prototype.locator;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_LocatorLocationProvider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/QueryTaskLocationProvider"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider */

/**
 * @constructor
 * @struct
 * Creates a new instance of the QueryTaskLocationProvider object.
 * @param {!QueryTaskLocationProviderOptions=} options Define the properties to use when creating the class.
 */
tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider.QueryTaskLocationProvider = function(options) {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider.QueryTaskLocationProvider.prototype.queryParameters;
 /** @type {!QueryTask} */
tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider.QueryTaskLocationProvider.prototype.queryTask;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider.QueryTaskLocationProvider.prototype.unicode;
 /** @type {?} */
tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider.QueryTaskLocationProvider.prototype.whereFields;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_QueryTaskLocationProvider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locationproviders/StandardGeographyQueryLocationProvider"
/** @const */
tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider */

/**
 * @constructor
 * @struct
 * Creates a new instance of the StandardGeographyQueryLocationProvider object.
 * @param {!StandardGeographyQueryLocationProviderOptions} options Define the properties to use when creating the class.
 */
tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider.StandardGeographyQueryLocationProvider = function(options) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider.StandardGeographyQueryLocationProvider.prototype.geographyQueryTemplate;
 /** @type {?} */
tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider.StandardGeographyQueryLocationProvider.prototype.queryParameters;
 /** @type {!StandardGeographyQueryTask} */
tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider.StandardGeographyQueryLocationProvider.prototype.standardGeographyQueryTask;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locationproviders_StandardGeographyQueryLocationProvider */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/locator"
/** @const */
tsickle_declare_module.esri_tasks_locator = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locator */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locator */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locator */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_locator */

/**
 * @constructor
 * @struct
 * Creates a new Locator object.
 * @param {string} url URL to the ArcGIS Server REST resource that represents a locator service.
 */
tsickle_declare_module.esri_tasks_locator.Locator = function(url) {};
 /** @type {string} */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.countryCode;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.outSpatialReference;
 /** @type {string} */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.url;

/**
 * Find address candidates for multiple input addresses.
 * @param {?} params The input addresses in the format supported by the geocoding service.
 * @param {!Function} callback The function to call when the method has completed.
 * @param {!Function} errback The function to call if an error occurs on the server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.addressesToLocations = function(params, callback, errback) {};

/**
 * Sends a request to the ArcGIS REST geocode resource to find candidates for a single address specified in the address parameter.
 * @param {?} params Specify at least the address and optionally other properties.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.addressToLocations = function(params, callback, errback) {};

/**
 * Locates an address based on a given point.
 * @param {!Point} location The point at which to search for the closest address.
 * @param {number} distance The distance in meters from the given location within which a matching address should be searched.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs on the Server during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.locationToAddress = function(location, distance, callback, errback) {};

/**
 * Sets the well-known ID of the spatial reference of the output geometries.
 * @param {!SpatialReference} spatialReference The well-known ID of a spatial reference.
 * @return {void}
 */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.setOutSpatialReference = function(spatialReference) {};

/**
 * Get character by character auto complete suggestions.
 * @param {?} params An object that defines suggest parameters.
 * @return {?}
 */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.suggestLocations = function(params) {};

/**
 * Fires when Locator.addressesToLocations method has completed.
 * Fires when Locator.addressToLocation method has completed.
 * Fires when an error occurs when executing the task.
 * Fires when Locator.locationToAddress method has completed.
 * Fires when the suggestLocations method has completed.
 * @param {string} type
 * @param {function({addresses: !Array<!AddressCandidate>, target: !Locator}): void|function({error: !Error, target: !Locator}): void|function({address: !AddressCandidate, target: !Locator}): void|function({suggestions: !Array<?>, target: !Locator}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_tasks_locator.Locator.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_locator */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/tasks/query"
/** @const */
tsickle_declare_module.esri_tasks_query = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_query */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_query */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_query */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_query */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_tasks_query */

/**
 * @constructor
 * @struct
 * Creates a new Query object used to execute a query on the layer resource identified by the URL.
 */
tsickle_declare_module.esri_tasks_query.Query = function() {};
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_CONTAINS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_CROSSES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_ENVELOPEINTERSECTS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_INDEXINTERSECTS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_INTERSECTS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_OVERLAPS;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_RELATION;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_TOUCHES;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.SPATIAL_REL_WITHIN;
 /** @type {number} */
tsickle_declare_module.esri_tasks_query.Query.prototype.distance;
 /** @type {!Geometry} */
tsickle_declare_module.esri_tasks_query.Query.prototype.geometry;
 /** @type {number} */
tsickle_declare_module.esri_tasks_query.Query.prototype.geometryPrecision;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_query.Query.prototype.groupByFieldsForStatistics;
 /** @type {number} */
tsickle_declare_module.esri_tasks_query.Query.prototype.maxAllowableOffset;
 /** @type {string} */
tsickle_declare_module.esri_tasks_query.Query.prototype.multipatchOption;
 /** @type {number} */
tsickle_declare_module.esri_tasks_query.Query.prototype.num;
 /** @type {!Array<number>} */
tsickle_declare_module.esri_tasks_query.Query.prototype.objectIds;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_query.Query.prototype.orderByFields;
 /** @type {!Array<string>} */
tsickle_declare_module.esri_tasks_query.Query.prototype.outFields;
 /** @type {!SpatialReference} */
tsickle_declare_module.esri_tasks_query.Query.prototype.outSpatialReference;
 /** @type {!Array<!StatisticDefinition>} */
tsickle_declare_module.esri_tasks_query.Query.prototype.outStatistics;
 /** @type {!Symbol} */
tsickle_declare_module.esri_tasks_query.Query.prototype.pixelSize;
 /** @type {?} */
tsickle_declare_module.esri_tasks_query.Query.prototype.quantizationParameters;
 /** @type {string} */
tsickle_declare_module.esri_tasks_query.Query.prototype.relationParam;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_query.Query.prototype.returnDistinctValues;
 /** @type {boolean} */
tsickle_declare_module.esri_tasks_query.Query.prototype.returnGeometry;
 /** @type {string} */
tsickle_declare_module.esri_tasks_query.Query.prototype.spatialRelationship;
 /** @type {number} */
tsickle_declare_module.esri_tasks_query.Query.prototype.start;
 /** @type {string} */
tsickle_declare_module.esri_tasks_query.Query.prototype.text;
 /** @type {!TimeExtent} */
tsickle_declare_module.esri_tasks_query.Query.prototype.timeExtent;
 /** @type {string} */
tsickle_declare_module.esri_tasks_query.Query.prototype.units;
 /** @type {string} */
tsickle_declare_module.esri_tasks_query.Query.prototype.where;

/* TODO: ExportAssignment in tsickle_declare_module.esri_tasks_query */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/toolbars/ImageServiceMeasureTool"
/** @const */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool */

/**
 * @constructor
 * @struct
 * Creates a new instance of ImageServiceMeasureTool.
 * @param {!ImageServiceMeasureToolOptions} params Constructor options.
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool = function(params) {};
 /** @type {string} */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.angularUnit;
 /** @type {string} */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.areaUnit;
 /** @type {!SimpleFillSymbol} */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.fillSymbol;
 /** @type {string} */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.linearUnit;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.lineSymbol;
 /** @type {!SimpleMarkerSymbol} */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.markerSymbol;

/**
 * Activates the toolbar for performing the measure operation.
 * @param {string} operation The mensuration rule to apply to the measure operation.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.activate = function(operation) {};

/**
 * Deactivates the toolbar.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.deactivate = function() {};

/**
 * Returns a list of measure operations supported by the image service.
 * @return {!Array<string>}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.getSupportedMeasureOperations = function() {};

/**
 * Returns a list of supported linear, angular and area units.
 * @return {!Array<string>}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.getSupportedUnits = function() {};

/**
 * Disables the tooltip message for performing a draw.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.hideDrawTooltip = function() {};

/**
 * Sets the angularUnit.
 * @param {string} unit The angular unit to set.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.setAngularUnit = function(unit) {};

/**
 * Sets the areaUnit.
 * @param {string} unit  Possible Values: esriSquareInches | esriSqudareFeet | esriSquareYards | esriAcres | esriSquareMiles | esriSquareMillimeters | esriSquareCentimeters | esriSquareDecimeters | esriSquareMeters | esriAres | esriHectares | esriSquareKilometers
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.setAreaUnit = function(unit) {};

/**
 * Sets the fillSymbol.
 * @param {!SimpleFillSymbol} fillSymbol The fill symbol to set.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.setFillSymbol = function(fillSymbol) {};

/**
 * Sets the linearUnit.
 * @param {string} unit The linear unit to set.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.setLinearUnit = function(unit) {};

/**
 * Sets the lineSymbol.
 * @param {!SimpleLineSymbol} lineSymbol The line symbol to set.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.setLineSymbol = function(lineSymbol) {};

/**
 * Sets the markerSymbol.
 * @param {!SimpleMarkerSymbol} markerSymbol The marker symbol to set.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.setMarkerSymbol = function(markerSymbol) {};

/**
 * Enables the tooltip message for performing a draw.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.showDrawTooltip = function() {};

/**
 * Fires when the drawing is complete.
 * Fires when the user starts drawing.
 * Fires when the measure operation has been performed.
 * Fires when the unit has been changed.
 * @param {string} type
 * @param {function({geometry: !Geometry, target: !ImageServiceMeasureTool}): void|function({target: !ImageServiceMeasureTool}): void|function({measureResult: ?, target: !ImageServiceMeasureTool}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool.ImageServiceMeasureTool.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_toolbars_ImageServiceMeasureTool */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/toolbars/draw"
/** @const */
tsickle_declare_module.esri_toolbars_draw = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_draw */

/**
 * @constructor
 * @struct
 * Creates a new Draw object.
 * @param {!Map} map Map the toolbar is associated with.
 * @param {!DrawOptions=} options Parameters that define the functionality of the draw toolbar.
 */
tsickle_declare_module.esri_toolbars_draw.Draw = function(map, options) {};
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.ARROW;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.CIRCLE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.DOWN_ARROW;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.ELLIPSE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.EXTENT;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.FREEHAND_POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.FREEHAND_POLYLINE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.LEFT_ARROW;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.LINE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.MULTI_POINT;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.POINT;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.POLYGON;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.POLYLINE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.RECTANGLE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.RIGHT_ARROW;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.TRIANGLE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_draw.Draw.UP_ARROW;
 /** @type {!SimpleFillSymbol} */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.fillSymbol;
 /** @type {!SimpleLineSymbol} */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.lineSymbol;
 /** @type {!SimpleMarkerSymbol} */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.markerSymbol;
 /** @type {boolean} */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.respectDrawingVertexOrder;

/**
 * Activates the toolbar for drawing geometries.
 * @param {string} geometryType The type of geometry drawn.
 * @param {?=} options Options that define the functionality of the draw toolbar.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.activate = function(geometryType, options) {};

/**
 * Deactivates the toolbar and reactivates map navigation.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.deactivate = function() {};

/**
 * Finishes drawing the geometry and fires the onDrawEnd event.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.finishDrawing = function() {};

/**
 * Sets the fill symbol.
 * @param {!FillSymbol} fillSymbol The fill symbol.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.setFillSymbol = function(fillSymbol) {};

/**
 * Sets the line symbol.
 * @param {!LineSymbol} lineSymbol The line symbol.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.setLineSymbol = function(lineSymbol) {};

/**
 * Sets the marker symbol.
 * @param {!MarkerSymbol} markerSymbol The marker symbol.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.setMarkerSymbol = function(markerSymbol) {};

/**
 * Sets whether the polygon geometry should be modified to be topologically correct.
 * @param {boolean} set When set to false, the geometry is modified to be topologically correct.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.setRespectDrawingVertexOrder = function(set) {};

/**
 * Fired when the user has completed drawing.
 * This event is deprecated.
 * @param {string} type
 * @param {function({geographicGeometry: !Geometry, geometry: !Geometry, target: !Draw}): void|function({geometry: !Geometry, target: !Draw}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_toolbars_draw.Draw.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_toolbars_draw */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/toolbars/edit"
/** @const */
tsickle_declare_module.esri_toolbars_edit = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_edit */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_edit */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_edit */

/**
 * @constructor
 * @struct
 * Creates a new Edit object.
 * @param {!Map} map Map the toolbar is associated with.
 * @param {!EditOptions=} options Optional parameters.
 */
tsickle_declare_module.esri_toolbars_edit.Edit = function(map, options) {};
 /** @type {?} */
tsickle_declare_module.esri_toolbars_edit.Edit.EDIT_TEXT;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_edit.Edit.EDIT_VERTICES;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_edit.Edit.MOVE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_edit.Edit.ROTATE;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_edit.Edit.SCALE;

/**
 * Activates the toolbar to edit the supplied graphic.
 * @param {string} tool Specify the active tool(s).
 * @param {!Graphic} graphic The graphic to edit.
 * @param {?=} options See the object specifications table below for the structure of the  options  object.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_edit.Edit.prototype.activate = function(tool, graphic, options) {};

/**
 * Deactivates the toolbar.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_edit.Edit.prototype.deactivate = function() {};

/**
 * An object with the following properties that describe the current state.
 * @return {?}
 */
tsickle_declare_module.esri_toolbars_edit.Edit.prototype.getCurrentState = function() {};

/**
 * Refreshes the internal state of the toolbar.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_edit.Edit.prototype.refresh = function() {};

/**
 * Activates the toolbar for editing geometries.
 * Deactivates the toolbar and reactivates map navigation.
 * Fires when a graphic is clicked.
 * Fires when the user begins to move a graphic.
 * Fired continuously as the graphic moves.
 * Fired when the mouse button is pressed down on the graphic, usually while moving a graphic.
 * Fired when the mouse button is released, usually after moving the graphic.
 * Fires continuously as a graphic is rotated.
 * Fires when the user begins to drag a handle to rotate the graphic.
 * Fires when a user clicks on the handle to begin rotating a graphic.
 * Fires when the mouse button is released from the rotate handle to finish rotating the graphic.
 * Fires continuously as the graphic is being scaled.
 * Fires when the user begins to drag a handle to scale the graphic.
 * Fires when a user clicks on the handle to scale or resize a graphic.
 * Fires when the mouse button is released from the scale handle to finish scaling the graphic.
 * Fired after a new vertex is added to a polyline or polygon or a new point is added to a multipoint.
 * Fired when the mouse button is clicked on the vertex of a polyline or polygon or a point in a multipoint.
 * Fired after a vertex(polyline, polygon) or point(multipoint) is deleted.
 * Fired when the user begins to move the vertex of a polyline or polygon or a point of a multipoint.
 * Fires as the mouse exits a vertex(polyline, polygon) or a point(multipoint).
 * Fired when the mouse moves over a vertex (polyline, polygon) or point (multipoint).
 * Fired continuously as the user is moving a vertex (polyline, polygon) or point (multipoint).
 * Fired when the mouse button is pressed down on a vertex (polyline, polygon) or point (multipoint).
 * Fired when the mouse button is released from a vertex (polyline, polygon) or point(multipoint).
 * @param {string} type
 * @param {function({graphic: !Graphic, tool: string, target: !Edit}): void|function({graphic: !Graphic, info: ?, tool: string, target: !Edit}): void|function({graphic: !Graphic, info: ?, target: !Edit}): void|function({graphic: !Graphic, target: !Edit}): void|function({graphic: !Graphic, transform: ?, target: !Edit}): void|function({graphic: !Graphic, vertexinfo: ?, target: !Edit}): void|function({graphic: !Graphic, transform: ?, vertexinfo: ?, target: !Edit}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_toolbars_edit.Edit.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_toolbars_edit */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/toolbars/navigation"
/** @const */
tsickle_declare_module.esri_toolbars_navigation = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_navigation */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_navigation */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_toolbars_navigation */

/**
 * @constructor
 * @struct
 * Creates a new Navigation object.
 * @param {!Map} map Map the toolbar is associated with.
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation = function(map) {};
 /** @type {?} */
tsickle_declare_module.esri_toolbars_navigation.Navigation.PAN;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_navigation.Navigation.ZOOM_IN;
 /** @type {?} */
tsickle_declare_module.esri_toolbars_navigation.Navigation.ZOOM_OUT;

/**
 * Activates the toolbar for map navigation.
 * @param {string} navType The navigation type.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.activate = function(navType) {};

/**
 * Deactivates the toolbar and reactivates map navigation.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.deactivate = function() {};

/**
 * When "true", map is at the first extent.
 * @return {boolean}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.isFirstExtent = function() {};

/**
 * When "true", map is at the last extent.
 * @return {boolean}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.isLastExtent = function() {};

/**
 * Set the SimpleFillSymbol used for the rubber band zoom.
 * @param {!Symbol} symbol The SimpleFillSymbol used for the rubber band zoom.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.setZoomSymbol = function(symbol) {};

/**
 * Zoom to initial extent of base layer.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.zoomToFullExtent = function() {};

/**
 * Zoom to next extent in extent history.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.zoomToNextExtent = function() {};

/**
 * Zoom to previous extent in extent history.
 * @return {void}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.zoomToPrevExtent = function() {};

/**
 * Fires when the extent history changes.
 * @param {string} type
 * @param {function({target: !Navigation}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_toolbars_navigation.Navigation.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_toolbars_navigation */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/undoManager"
/** @const */
tsickle_declare_module.esri_undoManager = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_undoManager */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_undoManager */

/**
 * @constructor
 * @struct
 * Creates a new UndoManager object.
 * @param {!UndoManagerOptions=} options See options list for parameters.
 */
tsickle_declare_module.esri_undoManager.UndoManager = function(options) {};
 /** @type {boolean} */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.canRedo;
 /** @type {boolean} */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.canUndo;
 /** @type {number} */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.length;
 /** @type {number} */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.position;

/**
 * Adds an undo operation to the stack and clears the redo stack.
 * @param {!OperationBase} operation An operation to add to the stack.
 * @return {void}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.add = function(operation) {};

/**
 * Clear the redo stack
 * @return {void}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.clearRedo = function() {};

/**
 * Clear the undo stack.
 * @return {void}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.clearUndo = function() {};

/**
 * Destroy the operation manager.
 * @return {void}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.destroy = function() {};

/**
 * Get the specified operation from the stack.
 * @param {number} operationId The operation id.
 * @return {!OperationBase}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.get = function(operationId) {};

/**
 * Get the next redo operation from the stack
 * @return {!OperationBase}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.peekRedo = function() {};

/**
 * Get the next undo operation from the stack.
 * @return {!OperationBase}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.peekUndo = function() {};

/**
 * Moves the current position to the next redo operation and calls the operation's performRedo() method.
 * @return {void}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.redo = function() {};

/**
 * Remove the specified operation from the stack.
 * @param {number} operationId The operation id.
 * @return {!OperationBase}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.remove = function(operationId) {};

/**
 * Moves the current position to the next undo operation and calls the operation's performUndo method.
 * @return {void}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.undo = function() {};

/**
 * Fires when the add method is called to add an operation is added to the stack.
 * Fires when the undo/redo stack changes.
 * Fires when the redo method is called.
 * Fires when the undo method is called.
 * @param {string} type
 * @param {function({target: !UndoManager}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_undoManager.UndoManager.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_undoManager */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/units"
/** @const */
tsickle_declare_module.esri_units = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_units.Units = function() {};
 /** @type {?} */
tsickle_declare_module.esri_units.Units.ACRES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.ARES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.CENTIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.DECIMAL_DEGREES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.DECIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.DEGREE_MINUTE_SECONDS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.FEET;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.HECTARES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.INCHES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.KILOMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.METERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.MILES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.MILLIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.NAUTICAL_MILES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.POINTS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_CENTIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_DECIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_FEET;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_INCHES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_KILOMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_METERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_MILES;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_MILLIMETERS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.SQUARE_YARDS;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.UNKNOWN;
 /** @type {?} */
tsickle_declare_module.esri_units.Units.YARDS;

/* TODO: ExportAssignment in tsickle_declare_module.esri_units */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/urlUtils"
/** @const */
tsickle_declare_module.esri_urlUtils = {};
 /** @type {{addProxyRule: function(?): number, getProxyRule: function(): ?, urlToObject: function(string): ?}} */
tsickle_declare_module.esri_urlUtils.urlUtils;

/* TODO: ExportAssignment in tsickle_declare_module.esri_urlUtils */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/virtualearth/VEAddress"
/** @const */
tsickle_declare_module.esri_virtualearth_VEAddress = {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress = function() {};
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.addressLine;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.adminDistrict;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.countryRegion;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.district;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.formattedAddress;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.locality;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.postalCode;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEAddress.VEAddress.prototype.postalTown;

/* TODO: ExportAssignment in tsickle_declare_module.esri_virtualearth_VEAddress */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/virtualearth/VEGeocodeResult"
/** @const */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_virtualearth_VEGeocodeResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_virtualearth_VEGeocodeResult */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_virtualearth_VEGeocodeResult */
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult = function() {};
 /** @type {!VEAddress} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.address;
 /** @type {!Extent} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.bestView;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.calculationMethod;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.confidence;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.displayName;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.entityType;
 /** @type {!Point} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.location;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEGeocodeResult.VEGeocodeResult.prototype.matchCodes;

/* TODO: ExportAssignment in tsickle_declare_module.esri_virtualearth_VEGeocodeResult */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/virtualearth/VEGeocoder"
/** @const */
tsickle_declare_module.esri_virtualearth_VEGeocoder = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_virtualearth_VEGeocoder */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_virtualearth_VEGeocoder */

/**
 * @constructor
 * @struct
 * Creates a new VEGeocoder object.
 * @param {!VEGeocoderOptions} options See options list for parameters.
 */
tsickle_declare_module.esri_virtualearth_VEGeocoder.VEGeocoder = function(options) {};
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VEGeocoder.VEGeocoder.prototype.culture;

/**
 * Sends a geocode request to Bing Maps to find candidates for a single address specified in the query argument.
 * @param {string} query The address to locate.
 * @param {!Function=} callback The function to call when the method has completed.
 * @param {!Function=} errback An error object is returned if an error occurs during task execution.
 * @return {?}
 */
tsickle_declare_module.esri_virtualearth_VEGeocoder.VEGeocoder.prototype.addressToLocations = function(query, callback, errback) {};

/**
 * Sets the culture in which to return results.
 * @param {string} culture The culture value.
 * @return {void}
 */
tsickle_declare_module.esri_virtualearth_VEGeocoder.VEGeocoder.prototype.setCulture = function(culture) {};

/**
 * Fires when VEGeocode.addressToLocation() has completed.
 * Fires when an error occurs when executing the task.
 * @param {string} type
 * @param {function({geocodeResults: !Array<!VEGeocodeResult>, target: !VEGeocoder}): void|function({error: !Error, target: !VEGeocoder}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_virtualearth_VEGeocoder.VEGeocoder.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_virtualearth_VEGeocoder */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/virtualearth/VETiledLayer"
/** @const */
tsickle_declare_module.esri_virtualearth_VETiledLayer = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_virtualearth_VETiledLayer */

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.esri_virtualearth_VETiledLayer */

/**
 * @constructor
 * @struct
 * Creates a new VETiledLayer object.
 * @param {!VETiledLayerOptions} options See options list for parameters.
 */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer = function(options) {};
 /** @type {?} */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.MAP_STYLE_AERIAL;
 /** @type {?} */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.MAP_STYLE_AERIAL_WITH_LABELS;
 /** @type {?} */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.MAP_STYLE_ROAD;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.prototype.copyright;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.prototype.culture;
 /** @type {string} */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.prototype.mapStyle;

/**
 * Sets the culture in which to return results.
 * @param {string} culture The culture value.
 * @return {void}
 */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.prototype.setCulture = function(culture) {};

/**
 * Sets the Bing Maps style.
 * @param {string} style Bing Maps style.
 * @return {void}
 */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.prototype.setMapStyle = function(style) {};

/**
 * Fires when the map style is changed.
 * @param {string} type
 * @param {function({target: !VETiledLayer}): void|function(?): void} listener
 * @return {!Handle}
 */
tsickle_declare_module.esri_virtualearth_VETiledLayer.VETiledLayer.prototype.on = function(type, listener) {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_virtualearth_VETiledLayer */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "esri/workers/WorkerClient"
/** @const */
tsickle_declare_module.esri_workers_WorkerClient = {};

/**
 * @constructor
 * @struct
 * Creates a WorkerClient.
 * @param {string} path A require style string path to the worker script.
 * @param {boolean=} deferreds Whether to return Deferreds rather than Promises from methods.
 */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient = function(path, deferreds) {};
 /** @type {boolean} */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient.prototype.returnDeferreds;
 /** @type {!Worker} */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient.prototype.worker;

/**
 * Adds a function to the worker that takes the worker's internal calls to postMessage and calls this function before sending the original message back to the main thread.
 * @param {string} module A require path to a worker-compatible script containing the callback function.
 * @param {string=} name The name of the callback function.
 * @return {?}
 */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient.prototype.addWorkerCallback = function(module, name) {};

/**
 * Import any script or function into the worker.
 * @param {(string|!Array<string>)} paths An AMD require path to a script file to import.
 * @return {?}
 */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient.prototype.importScripts = function(paths) {};

/**
 * Posts a message to the worker.
 * @param {?} msg The data to post to the worker.
 * @param {!Array<?>=} transfers An optional array of transferable objects.
 * @return {?}
 */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient.prototype.postMessage = function(msg, transfers) {};

/**
 * Sets the worker that is used in the Worker Client.
 * @param {(string|!Array<string>)} paths An AMD require path to a script file to import.
 * @return {void}
 */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient.prototype.setWorker = function(paths) {};

/**
 * Terminates the worker and cancels all unresolved messages.
 * @return {void}
 */
tsickle_declare_module.esri_workers_WorkerClient.WorkerClient.prototype.terminate = function() {};

/* TODO: ExportAssignment in tsickle_declare_module.esri_workers_WorkerClient */
