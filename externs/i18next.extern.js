/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/i18next/index.d.ts:
/** @const */
var i18next = {};
/**
 * @record
 * @struct
 */
i18next.FallbackLngObjList = function() {};

/* TODO: IndexSignature: i18next */

/** @typedef {(string|!Array<string>|!i18next.FallbackLngObjList)} */
i18next.FallbackLng;

/** @typedef {function(string, string, string): string} */
i18next.FormatFunction;
/**
 * @record
 * @struct
 */
i18next.InterpolationOptions = function() {};
 /** @type {function(string, string, string): string} */
i18next.InterpolationOptions.prototype.format;
 /** @type {string} */
i18next.InterpolationOptions.prototype.formatSeparator;
 /** @type {boolean} */
i18next.InterpolationOptions.prototype.escapeValue;
 /** @type {string} */
i18next.InterpolationOptions.prototype.prefix;
 /** @type {string} */
i18next.InterpolationOptions.prototype.suffix;
 /** @type {string} */
i18next.InterpolationOptions.prototype.prefixEscaped;
 /** @type {string} */
i18next.InterpolationOptions.prototype.suffixEscaped;
 /** @type {string} */
i18next.InterpolationOptions.prototype.unescapeSuffix;
 /** @type {string} */
i18next.InterpolationOptions.prototype.unescapePrefix;
 /** @type {string} */
i18next.InterpolationOptions.prototype.nestingPrefix;
 /** @type {string} */
i18next.InterpolationOptions.prototype.nestingSuffix;
 /** @type {string} */
i18next.InterpolationOptions.prototype.nestingPrefixEscaped;
 /** @type {string} */
i18next.InterpolationOptions.prototype.nestingSuffixEscaped;
 /** @type {?} */
i18next.InterpolationOptions.prototype.defaultVariables;

/**
 * 	escape function
 * \@default str => str
 * @param {string} str
 * @return {string}
 */
i18next.InterpolationOptions.prototype.escape = function(str) {};
/**
 * @record
 * @struct
 */
i18next.ReactOptions = function() {};
 /** @type {boolean} */
i18next.ReactOptions.prototype.wait;
 /** @type {string} */
i18next.ReactOptions.prototype.nsMode;
/**
 * @record
 * @struct
 */
i18next.InitOptions = function() {};
 /** @type {boolean} */
i18next.InitOptions.prototype.debug;
 /** @type {!i18next.Resource} */
i18next.InitOptions.prototype.resources;
 /** @type {string} */
i18next.InitOptions.prototype.lng;
 /** @type {(string|boolean|!Array<string>|!i18next.FallbackLngObjList)} */
i18next.InitOptions.prototype.fallbackLng;
 /** @type {(boolean|!Array<string>)} */
i18next.InitOptions.prototype.whitelist;
 /** @type {boolean} */
i18next.InitOptions.prototype.nonExplicitWhitelist;
 /** @type {string} */
i18next.InitOptions.prototype.load;
 /** @type {(boolean|!Array<string>)} */
i18next.InitOptions.prototype.preload;
 /** @type {boolean} */
i18next.InitOptions.prototype.lowerCaseLng;
 /** @type {(string|!Array<string>)} */
i18next.InitOptions.prototype.ns;
 /** @type {string} */
i18next.InitOptions.prototype.defaultNS;
 /** @type {(string|boolean|!Array<string>)} */
i18next.InitOptions.prototype.fallbackNS;
 /** @type {boolean} */
i18next.InitOptions.prototype.saveMissing;
 /** @type {string} */
i18next.InitOptions.prototype.saveMissingTo;
 /** @type {(boolean|function(string, string, string, string): void)} */
i18next.InitOptions.prototype.missingKeyHandler;
 /** @type {boolean} */
i18next.InitOptions.prototype.appendNamespaceToMissingKey;
 /** @type {boolean} */
i18next.InitOptions.prototype.simplifyPluralSuffix;
 /** @type {(string|boolean|!Array<string>)} */
i18next.InitOptions.prototype.postProcess;
 /** @type {boolean} */
i18next.InitOptions.prototype.returnNull;
 /** @type {boolean} */
i18next.InitOptions.prototype.returnEmptyString;
 /** @type {boolean} */
i18next.InitOptions.prototype.returnObjects;
 /** @type {(string|boolean)} */
i18next.InitOptions.prototype.joinArrays;
 /** @type {!i18next.InterpolationOptions} */
i18next.InitOptions.prototype.interpolation;
 /** @type {!Object} */
i18next.InitOptions.prototype.detection;
 /** @type {!Object} */
i18next.InitOptions.prototype.backend;
 /** @type {!Object} */
i18next.InitOptions.prototype.cache;
 /** @type {!i18next.ReactOptions} */
i18next.InitOptions.prototype.react;
 /** @type {boolean} */
i18next.InitOptions.prototype.initImmediate;
 /** @type {(string|boolean)} */
i18next.InitOptions.prototype.keySeparator;
 /** @type {(string|boolean)} */
i18next.InitOptions.prototype.nsSeparator;
 /** @type {string} */
i18next.InitOptions.prototype.pluralSeparator;
 /** @type {string} */
i18next.InitOptions.prototype.contextSeparator;
 /** @type {boolean} */
i18next.InitOptions.prototype.appendNamespaceToCIMode;
 /** @type {string} */
i18next.InitOptions.prototype.compatibilityJSON;

/**
 * receives a key that was not found in `t()` and returns a value, that will be returned by `t()`
 * \@default noop
 * @param {string} key
 * @return {?}
 */
i18next.InitOptions.prototype.parseMissingKeyHandler = function(key) {};

/**
 * Gets called if object was passed in as key but returnObjects was set to false
 * \@default noop
 * @param {string} key
 * @param {string} value
 * @param {?} options
 * @return {void}
 */
i18next.InitOptions.prototype.returnedObjectHandler = function(key, value, options) {};

/**
 * default: sets defaultValue
 * \@default args => ({ defaultValue: args[1] })
 * @param {!Array<string>} args
 * @return {?}
 */
i18next.InitOptions.prototype.overloadTranslationOptionHandler = function(args) {};

/** @typedef {?} */
i18next.TranslationOptions;
/**
 * @record
 * @struct
 */
i18next.TranslationOptionsBase = function() {};
 /** @type {?} */
i18next.TranslationOptionsBase.prototype.defaultValue;
 /** @type {number} */
i18next.TranslationOptionsBase.prototype.count;
 /** @type {?} */
i18next.TranslationOptionsBase.prototype.context;
 /** @type {?} */
i18next.TranslationOptionsBase.prototype.replace;
 /** @type {string} */
i18next.TranslationOptionsBase.prototype.lng;
 /** @type {!Array<string>} */
i18next.TranslationOptionsBase.prototype.lngs;
 /** @type {(string|!Array<string>|!i18next.FallbackLngObjList)} */
i18next.TranslationOptionsBase.prototype.fallbackLng;
 /** @type {(string|!Array<string>)} */
i18next.TranslationOptionsBase.prototype.ns;
 /** @type {string} */
i18next.TranslationOptionsBase.prototype.keySeparator;
 /** @type {string} */
i18next.TranslationOptionsBase.prototype.nsSeparator;
 /** @type {boolean} */
i18next.TranslationOptionsBase.prototype.returnObjects;
 /** @type {string} */
i18next.TranslationOptionsBase.prototype.joinArrays;
 /** @type {(string|!Array<string>)} */
i18next.TranslationOptionsBase.prototype.postProcess;
 /** @type {!i18next.InterpolationOptions} */
i18next.TranslationOptionsBase.prototype.interpolation;

/** @typedef {function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void} */
i18next.Callback;

/** @typedef {function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult} */
i18next.TranslationFunction;
/**
 * @record
 * @struct
 */
i18next.Resource = function() {};

/* TODO: IndexSignature: i18next */
/**
 * @record
 * @struct
 */
i18next.ResourceLanguage = function() {};

/* TODO: IndexSignature: i18next */
/**
 * @record
 * @struct
 */
i18next.ResourceKey = function() {};

/* TODO: IndexSignature: i18next */
/**
 * @record
 * @struct
 */
i18next.i18n = function() {};
 /** @type {function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult} */
i18next.i18n.prototype.t;
 /** @type {function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult} */
i18next.i18n.prototype.exists;
 /** @type {string} */
i18next.i18n.prototype.language;
 /** @type {!Array<string>} */
i18next.i18n.prototype.languages;
 /** @type {function(string, string, string): string} */
i18next.i18n.prototype.format;
 /** @type {!i18next.InitOptions} */
i18next.i18n.prototype.options;
 /** @type {boolean} */
i18next.i18n.prototype.isInitialized;

/**
 * The default export of the i18next module is an i18next instance ready to be initialized by calling init.
 * You can create additional instances using the createInstance function.
 * 
 * @param {!i18next.InitOptions|function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void=} options_or_callback - Initial options.
 * @param {function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void=} callback - will be called after all translations were loaded or with an error when failed (in case of using a backend).
 * @return {!i18next.i18n}
 */
i18next.i18n.prototype.init = function(options_or_callback, callback) {};

/**
 * @param {function(?): void=} callback
 * @return {void}
 */
i18next.i18n.prototype.loadResources = function(callback) {};

/**
 * The use function is there to load additional plugins to i18next.
 * For available module see the plugins page and don't forget to read the documentation of the plugin.
 * @param {?} module
 * @return {!i18next.i18n}
 */
i18next.i18n.prototype.use = function(module) {};

/**
 * Returns a t function that defaults to given language or namespace.
 * Both params could be arrays of languages or namespaces and will be treated as fallbacks in that case.
 * On the returned function you can like in the t function override the languages or namespaces by passing them in options or by prepending namespace.
 * @param {(string|!Array<string>)|null} lng
 * @param {(string|!Array<string>)=} ns
 * @return {function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult}
 */
i18next.i18n.prototype.getFixedT = function(lng, ns) {};

/**
 * Changes the language. The callback will be called as soon translations were loaded or an error occurs while loading.
 * HINT: For easy testing - setting lng to 'cimode' will set t function to always return the key.
 * @param {string} lng
 * @param {function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void=} callback
 * @return {void}
 */
i18next.i18n.prototype.changeLanguage = function(lng, callback) {};

/**
 * Loads additional namespaces not defined in init options.
 * @param {(string|!Array<string>)} ns
 * @param {function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void} callback
 * @return {void}
 */
i18next.i18n.prototype.loadNamespaces = function(ns, callback) {};

/**
 * Loads additional languages not defined in init options (preload).
 * @param {(string|!Array<string>)} lngs
 * @param {function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void} callback
 * @return {void}
 */
i18next.i18n.prototype.loadLanguages = function(lngs, callback) {};

/**
 * Reloads resources on given state. Optionally you can pass an array of languages and namespaces as params if you don't want to reload all.
 * @param {!Array<string>|null=} lngs
 * @param {!Array<string>=} ns
 * @return {void}
 */
i18next.i18n.prototype.reloadResources = function(lngs, ns) {};

/**
 * Changes the default namespace.
 * @param {string} ns
 * @return {void}
 */
i18next.i18n.prototype.setDefaultNamespace = function(ns) {};

/**
 * Returns rtl or ltr depending on languages read direction.
 * @param {string=} lng
 * @return {void}
 */
i18next.i18n.prototype.dir = function(lng) {};

/**
 * Will return a new i18next instance.
 * Please read the options page for details on configuration options.
 * Providing a callback will automatically call init.
 * The callback will be called after all translations were loaded or with an error when failed (in case of using a backend).
 * @param {!i18next.InitOptions=} options
 * @param {function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void=} callback
 * @return {!i18next.i18n}
 */
i18next.i18n.prototype.createInstance = function(options, callback) {};

/**
 * Creates a clone of the current instance. Shares store, plugins and initial configuration.
 * Can be used to create an instance sharing storage but being independent on set language or namespaces.
 * @param {!i18next.InitOptions=} options
 * @param {function(?, function((TMethodKeys|!Array<TMethodKeys>), ?): TMethodResult): void=} callback
 * @return {!i18next.i18n}
 */
i18next.i18n.prototype.cloneInstance = function(options, callback) {};

/**
 * Gets fired after initialization.
 * Gets fired on loaded resources.
 * Gets fired if loading resources failed.
 * Gets fired on accessing a key not existing.
 * Gets fired when resources got added or removed.
 * Gets fired when changeLanguage got called.
 * Event listener
 * @param {string} event
 * @param {function(!i18next.InitOptions): void|function(boolean): void|function(string, string, string): void|function(!Array<string>, string, string, string): void|function(string, string): void|function(string): void|function(!Array<?>): void} callback_or_listener
 * @return {void}
 */
i18next.i18n.prototype.on = function(event, callback_or_listener) {};

/**
 * Remove event listener
 * @param {string} event
 * @param {function(!Array<?>): void} listener
 * @return {void}
 */
i18next.i18n.prototype.off = function(event, listener) {};

/**
 * Gets one value by given key.
 * @param {string} lng
 * @param {string} ns
 * @param {string} key
 * @param {{keySeparator: string}=} options
 * @return {?}
 */
i18next.i18n.prototype.getResource = function(lng, ns, key, options) {};

/**
 * Adds one key/value.
 * @param {string} lng
 * @param {string} ns
 * @param {string} key
 * @param {string} value
 * @param {{keySeparator: string, silent: boolean}=} options
 * @return {void}
 */
i18next.i18n.prototype.addResource = function(lng, ns, key, value, options) {};

/**
 * Adds multiple key/values.
 * @param {string} lng
 * @param {string} ns
 * @param {?} resources
 * @return {void}
 */
i18next.i18n.prototype.addResources = function(lng, ns, resources) {};

/**
 * Adds a complete bundle.
 * Setting deep param to true will extend existing translations in that file.
 * Setting overwrite to true it will overwrite existing translations in that file.
 * @param {string} lng
 * @param {string} ns
 * @param {?} resources
 * @param {boolean=} deep
 * @param {boolean=} overwrite
 * @return {void}
 */
i18next.i18n.prototype.addResourceBundle = function(lng, ns, resources, deep, overwrite) {};

/**
 * Checks if a resource bundle exists.
 * @param {string} lng
 * @param {string} ns
 * @return {boolean}
 */
i18next.i18n.prototype.hasResourceBundle = function(lng, ns) {};

/**
 * Returns a resource bundle.
 * @param {string} lng
 * @param {string} ns
 * @return {?}
 */
i18next.i18n.prototype.getResourceBundle = function(lng, ns) {};

/**
 * Removes an existing bundle.
 * @param {string} lng
 * @param {string} ns
 * @return {void}
 */
i18next.i18n.prototype.removeResourceBundle = function(lng, ns) {};
 /** @type {!i18next.i18n} */
var i18next;

/* TODO: ExportAssignment in  */
