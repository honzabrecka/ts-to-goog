/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jsonwebtoken/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {!Error=} error
 */
function JsonWebTokenError(message, error) {}
 /** @type {!Error} */
JsonWebTokenError.prototype.inner;

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {number} expiredAt
 */
function TokenExpiredError(message, expiredAt) {}
 /** @type {number} */
TokenExpiredError.prototype.expiredAt;

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {!Date} date
 */
function NotBeforeError(message, date) {}
 /** @type {!Date} */
NotBeforeError.prototype.date;
/**
 * @record
 * @struct
 */
function SignOptions() {}
 /** @type {string} */
SignOptions.prototype.algorithm;
 /** @type {string} */
SignOptions.prototype.keyid;
 /** @type {(string|number)} */
SignOptions.prototype.expiresIn;
 /** @type {(string|number)} */
SignOptions.prototype.notBefore;
 /** @type {(string|!Array<string>)} */
SignOptions.prototype.audience;
 /** @type {string} */
SignOptions.prototype.subject;
 /** @type {string} */
SignOptions.prototype.issuer;
 /** @type {string} */
SignOptions.prototype.jwtid;
 /** @type {boolean} */
SignOptions.prototype.noTimestamp;
 /** @type {!Object} */
SignOptions.prototype.header;
 /** @type {string} */
SignOptions.prototype.encoding;
/**
 * @record
 * @struct
 */
function VerifyOptions() {}
 /** @type {!Array<string>} */
VerifyOptions.prototype.algorithms;
 /** @type {(string|!Array<string>)} */
VerifyOptions.prototype.audience;
 /** @type {number} */
VerifyOptions.prototype.clockTolerance;
 /** @type {(string|!Array<string>)} */
VerifyOptions.prototype.issuer;
 /** @type {boolean} */
VerifyOptions.prototype.ignoreExpiration;
 /** @type {boolean} */
VerifyOptions.prototype.ignoreNotBefore;
 /** @type {string} */
VerifyOptions.prototype.jwtId;
 /** @type {string} */
VerifyOptions.prototype.subject;
 /** @type {string} */
VerifyOptions.prototype.maxAge;
/**
 * @record
 * @struct
 */
function DecodeOptions() {}
 /** @type {boolean} */
DecodeOptions.prototype.complete;
 /** @type {boolean} */
DecodeOptions.prototype.json;
/**
 * @record
 * @struct
 */
function VerifyCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function SignCallback() {}

/* TODO: CallSignature:  */

/** @typedef {(string|?)} */
var Secret;

/**
 * Synchronously sign the given payload into a JSON Web Token string
 * Sign the given payload into a JSON Web Token string
 * @param {(string|!Object|?)} payload
 * @param {(string|?)} secretOrPrivateKey
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {string|void}
 */
function sign(payload, secretOrPrivateKey, options_or_callback, callback) {}

/**
 * Synchronously verify given token using a secret or a public key to get a decoded token
 * Asynchronously verify given token using a secret or a public key to get a decoded token
 * @param {string} token
 * @param {(string|?)} secretOrPublicKey
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {(string|!Object)|void} The decoded token.
 */
function verify(token, secretOrPublicKey, options_or_callback, callback) {}

/**
 * Returns the decoded payload without verifying if the signature is valid.
 * @param {string} token
 * @param {?=} options
 * @return {(string|!Object)}
 */
function decode(token, options) {}
