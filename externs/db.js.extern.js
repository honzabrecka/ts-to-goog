/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/db.js/index.d.ts:
/** @const */
var DbJs = {};
/**
 * @record
 * @struct
 */
DbJs.ErrorListener = function() {};

/* TODO: CallSignature: DbJs */
/**
 * @record
 * @struct
 */
DbJs.OpenOptions = function() {};
 /** @type {string} */
DbJs.OpenOptions.prototype.server;
 /** @type {number} */
DbJs.OpenOptions.prototype.version;
 /** @type {?} */
DbJs.OpenOptions.prototype.schema;
/**
 * @record
 * @struct
 */
DbJs.DbJsStatic = function() {};

/**
 * @param {!DbJs.OpenOptions} options
 * @return {!Promise<?>}
 */
DbJs.DbJsStatic.prototype.open = function(options) {};

/**
 * @param {string} dbName
 * @return {!Promise<void>}
 */
DbJs.DbJsStatic.prototype.delete = function(dbName) {};

/**
 * @param {?} key1
 * @param {?} key2
 * @return {number}
 */
DbJs.DbJsStatic.prototype.cmp = function(key1, key2) {};
/**
 * @record
 * @struct
 */
DbJs.ExecutableQuery = function() {};

/**
 * @return {!Promise<!Array<T>>}
 */
DbJs.ExecutableQuery.prototype.execute = function() {};
/**
 * @record
 * @struct
 */
DbJs.CountableQuery = function() {};

/**
 * @return {!DbJs.ExecutableQuery<T>}
 */
DbJs.CountableQuery.prototype.count = function() {};
/**
 * @extends {DbJs.DescableQuery}
 * @extends {DbJs.ExecutableQuery}
 * @extends {DbJs.FilterableQuery}
 * @extends {DbJs.DistinctableQuery}
 * @extends {DbJs.MappableQuery}
 * @record
 * @struct
 */
DbJs.KeysQuery = function() {};
/**
 * @record
 * @struct
 */
DbJs.KeyableQuery = function() {};

/**
 * @return {!DbJs.KeysQuery<T>}
 */
DbJs.KeyableQuery.prototype.keys = function() {};
/**
 * @extends {DbJs.KeyableQuery}
 * @extends {DbJs.ExecutableQuery}
 * @extends {DbJs.FilterableQuery}
 * @extends {DbJs.DescableQuery}
 * @extends {DbJs.DistinctableQuery}
 * @extends {DbJs.ModifiableQuery}
 * @extends {DbJs.LimitableQuery}
 * @extends {DbJs.MappableQuery}
 * @record
 * @struct
 */
DbJs.FilterQuery = function() {};
/**
 * @record
 * @struct
 */
DbJs.FilterableQuery = function() {};

/**
 * @template TValue
 * @param {string|function(T): boolean} index_or_filter
 * @param {TValue=} value
 * @return {!DbJs.FilterQuery<T>}
 */
DbJs.FilterableQuery.prototype.filter = function(index_or_filter, value) {};
/**
 * @extends {DbJs.KeyableQuery}
 * @extends {DbJs.CountableQuery}
 * @extends {DbJs.ExecutableQuery}
 * @extends {DbJs.FilterableQuery}
 * @extends {DbJs.DescableQuery}
 * @extends {DbJs.ModifiableQuery}
 * @extends {DbJs.MappableQuery}
 * @record
 * @struct
 */
DbJs.DescQuery = function() {};
/**
 * @record
 * @struct
 */
DbJs.DescableQuery = function() {};

/**
 * @return {!DbJs.DescQuery<T>}
 */
DbJs.DescableQuery.prototype.desc = function() {};
/**
 * @extends {DbJs.KeyableQuery}
 * @extends {DbJs.ExecutableQuery}
 * @extends {DbJs.FilterableQuery}
 * @extends {DbJs.DescableQuery}
 * @extends {DbJs.ModifiableQuery}
 * @extends {DbJs.MappableQuery}
 * @extends {DbJs.CountableQuery}
 * @record
 * @struct
 */
DbJs.DistinctQuery = function() {};
/**
 * @record
 * @struct
 */
DbJs.DistinctableQuery = function() {};

/**
 * @param {function(T): boolean=} filter
 * @return {!DbJs.DistinctQuery<T>}
 */
DbJs.DistinctableQuery.prototype.distinct = function(filter) {};
/**
 * @record
 * @struct
 */
DbJs.ModifiableQuery = function() {};

/**
 * @param {function(T): boolean|?} filter_or_modifyObj
 * @return {!DbJs.ExecutableQuery<T>}
 */
DbJs.ModifiableQuery.prototype.modify = function(filter_or_modifyObj) {};
/**
 * @record
 * @struct
 */
DbJs.LimitableQuery = function() {};

/**
 * @param {?} n
 * @param {?} m
 * @return {!DbJs.ExecutableQuery<T>}
 */
DbJs.LimitableQuery.prototype.limit = function(n, m) {};
/**
 * @record
 * @struct
 */
DbJs.MappableQuery = function() {};

/**
 * @template TMap
 * @param {function(T): TMap} fn
 * @return {!DbJs.Query<TMap>}
 */
DbJs.MappableQuery.prototype.map = function(fn) {};
/**
 * @extends {DbJs.KeyableQuery}
 * @extends {DbJs.ExecutableQuery}
 * @extends {DbJs.FilterableQuery}
 * @extends {DbJs.DescableQuery}
 * @extends {DbJs.DistinctableQuery}
 * @extends {DbJs.ModifiableQuery}
 * @extends {DbJs.LimitableQuery}
 * @extends {DbJs.MappableQuery}
 * @extends {DbJs.CountableQuery}
 * @record
 * @struct
 */
DbJs.Query = function() {};
/**
 * @extends {DbJs.Query}
 * @record
 * @struct
 */
DbJs.IndexQuery = function() {};

/**
 * @param {...?} args
 * @return {!DbJs.Query<T>}
 */
DbJs.IndexQuery.prototype.only = function(args) {};

/**
 * @param {?} lowerBound
 * @param {?} upperBound
 * @return {!DbJs.Query<T>}
 */
DbJs.IndexQuery.prototype.bound = function(lowerBound, upperBound) {};

/**
 * @param {?} upperBound
 * @return {!DbJs.Query<T>}
 */
DbJs.IndexQuery.prototype.upperBound = function(upperBound) {};

/**
 * @param {?} lowerBound
 * @return {!DbJs.Query<T>}
 */
DbJs.IndexQuery.prototype.lowerBound = function(lowerBound) {};

/**
 * @param {?} opts
 * @return {!DbJs.Query<T>}
 */
DbJs.IndexQuery.prototype.range = function(opts) {};

/**
 * @return {!DbJs.Query<T>}
 */
DbJs.IndexQuery.prototype.all = function() {};
/**
 * @record
 * @struct
 */
DbJs.KeyValuePair = function() {};
 /** @type {TKey} */
DbJs.KeyValuePair.prototype.key;
 /** @type {TValue} */
DbJs.KeyValuePair.prototype.item;
/**
 * @record
 * @struct
 */
DbJs.BaseServer = function() {};

/**
 * @return {!IDBDatabase}
 */
DbJs.BaseServer.prototype.getIndexedDB = function() {};

/**
 * @return {void}
 */
DbJs.BaseServer.prototype.close = function() {};
/**
 * @record
 * @struct
 */
DbJs.IndexAccessibleServer = function() {};

/* TODO: IndexSignature: DbJs */
/**
 * @record
 * @struct
 */
DbJs.ObjectStoreServer = function() {};

/**
 * @template T, TKey, TValue
 * @param {string} table
 * @param {...T|!DbJs.KeyValuePair<TKey, TValue>} entity_or_entities
 * @return {!Promise<T>|!Promise<!Array<T>>|!Promise<!DbJs.KeyValuePair<TKey, TValue>>|!Promise<!Array<!DbJs.KeyValuePair<TKey, TValue>>>}
 */
DbJs.ObjectStoreServer.prototype.add = function(table, entity_or_entities) {};

/**
 * @template T, TKey, TValue
 * @param {string} table
 * @param {...T|!DbJs.KeyValuePair<TKey, TValue>} entity_or_entities
 * @return {!Promise<T>|!Promise<!Array<T>>|!Promise<!DbJs.KeyValuePair<TKey, TValue>>|!Promise<!Array<!DbJs.KeyValuePair<TKey, TValue>>>}
 */
DbJs.ObjectStoreServer.prototype.update = function(table, entity_or_entities) {};

/**
 * @template TKey
 * @param {string} table
 * @param {...TKey} key_or_keys
 * @return {!Promise<TKey>|!Promise<!Array<TKey>>}
 */
DbJs.ObjectStoreServer.prototype.remove = function(table, key_or_keys) {};

/**
 * @param {string} table
 * @return {!Promise<void>}
 */
DbJs.ObjectStoreServer.prototype.clear = function(table) {};

/**
 * @template T
 * @param {string} table
 * @param {?} key
 * @return {!Promise<T>}
 */
DbJs.ObjectStoreServer.prototype.get = function(table, key) {};

/**
 * @template T
 * @param {string} table
 * @param {string=} index
 * @return {!DbJs.IndexQuery<T>}
 */
DbJs.ObjectStoreServer.prototype.query = function(table, index) {};

/**
 * @param {?|string=} keyOrRange_or_table
 * @param {?=} key
 * @return {!Promise<number>}
 */
DbJs.ObjectStoreServer.prototype.count = function(keyOrRange_or_table, key) {};

/**
 * @param {string} type
 * @param {function(!Event): ?|function(!Error): ?|(!EventListener|!DbJs.ErrorListener)} listener
 * @return {void}
 */
DbJs.ObjectStoreServer.prototype.addEventListener = function(type, listener) {};

/**
 * @param {function(!Event): ?} listener
 * @return {!DbJs.ObjectStoreServer}
 */
DbJs.ObjectStoreServer.prototype.abort = function(listener) {};

/**
 * @param {function(!Event): ?} listener
 * @return {!DbJs.ObjectStoreServer}
 */
DbJs.ObjectStoreServer.prototype.versionchange = function(listener) {};

/**
 * @param {function(!Error): ?} listener
 * @return {!DbJs.ObjectStoreServer}
 */
DbJs.ObjectStoreServer.prototype.error = function(listener) {};
/**
 * @record
 * @struct
 */
DbJs.TypedObjectStoreServer = function() {};

/**
 * @template TKey, TValue
 * @param {...T|!DbJs.KeyValuePair<TKey, TValue>} entity_or_entities
 * @return {!Promise<T>|!Promise<!Array<T>>|!Promise<!DbJs.KeyValuePair<TKey, TValue>>|!Promise<!Array<!DbJs.KeyValuePair<TKey, TValue>>>}
 */
DbJs.TypedObjectStoreServer.prototype.add = function(entity_or_entities) {};

/**
 * @template TKey, TValue
 * @param {...T|!DbJs.KeyValuePair<TKey, TValue>} entity_or_entities
 * @return {!Promise<T>|!Promise<!Array<T>>|!Promise<!DbJs.KeyValuePair<TKey, TValue>>|!Promise<!Array<!DbJs.KeyValuePair<TKey, TValue>>>}
 */
DbJs.TypedObjectStoreServer.prototype.update = function(entity_or_entities) {};

/**
 * @template TKey
 * @param {...TKey} key_or_keys
 * @return {!Promise<TKey>|!Promise<!Array<TKey>>}
 */
DbJs.TypedObjectStoreServer.prototype.remove = function(key_or_keys) {};

/**
 * @return {!Promise<void>}
 */
DbJs.TypedObjectStoreServer.prototype.clear = function() {};

/**
 * @param {?} key
 * @return {!Promise<T>}
 */
DbJs.TypedObjectStoreServer.prototype.get = function(key) {};

/**
 * @param {string=} index
 * @return {!DbJs.IndexQuery<T>}
 */
DbJs.TypedObjectStoreServer.prototype.query = function(index) {};

/**
 * @param {?} key
 * @return {!Promise<number>}
 */
DbJs.TypedObjectStoreServer.prototype.count = function(key) {};

/** @typedef {?} */
DbJs.Server;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "db.js"
/** @const */
tsickle_declare_module.db_js = {};
 /** @type {!DbJs.DbJsStatic} */
tsickle_declare_module.db_js.db;

/* TODO: ExportAssignment in tsickle_declare_module.db_js */
 /** @type {!DbJs.DbJsStatic} */
var db;
