/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bytes/index.d.ts:
/**
 * @record
 * @struct
 */
function BytesOptions() {}
 /** @type {number} */
BytesOptions.prototype.decimalPlaces;
 /** @type {string} */
BytesOptions.prototype.thousandsSeparator;
 /** @type {string} */
BytesOptions.prototype.unitSeparator;
 /** @type {boolean} */
BytesOptions.prototype.fixedDecimals;
 /** @type {string} */
BytesOptions.prototype.unit;

/**
 * Convert the given value in bytes into a string.
 * 
 *  thousandsSeparator: [string]
 *  }} [options] bytes options.
 * 
 * Parse string to an integer in bytes.
 * 
 * @param {number|string} value
 * @param {{thousandsSeparator: string}=} options
 * @return {string|number}
 */
function bytes(value, options) {}

/**
 * Format the given value in bytes into a string.
 * 
 * If the value is negative, take Math.abs(). If it is a float,
 * it is rounded.
 * 
 * @param {number} value
 * @param {?=} options
 * @return {string}
 */
bytes.format = function(value, options) {};

/**
 * Just return the input number value.
 * 
 * Parse the string value into an integer in bytes.
 * 
 * If no unit is given, it is assumed the value is in bytes.
 * 
 * @param {number|string} value
 * @return {number}
 */
bytes.parse = function(value) {};

/* TODO: ExportAssignment in  */
