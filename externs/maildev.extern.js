/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/maildev/index.d.ts:
/**
 * @record
 * @struct
 */
function MailDevOptions() {}
 /** @type {string} */
MailDevOptions.prototype.ip;
 /** @type {string} */
MailDevOptions.prototype.outgoingHost;
 /** @type {string} */
MailDevOptions.prototype.outgoingPass;
 /** @type {number} */
MailDevOptions.prototype.outgoingPort;
 /** @type {string} */
MailDevOptions.prototype.outgoingUser;
 /** @type {boolean} */
MailDevOptions.prototype.outgoingSecure;
 /** @type {number} */
MailDevOptions.prototype.smtp;
 /** @type {number} */
MailDevOptions.prototype.web;
 /** @type {string} */
MailDevOptions.prototype.webIp;
 /** @type {boolean} */
MailDevOptions.prototype.disableWeb;
 /** @type {boolean} */
MailDevOptions.prototype.silent;
 /** @type {string} */
MailDevOptions.prototype.webUser;
 /** @type {string} */
MailDevOptions.prototype.webPass;
 /** @type {boolean} */
MailDevOptions.prototype.open;
/**
 * @record
 * @struct
 */
function Mail() {}
 /** @type {string} */
Mail.prototype.id;
 /** @type {!Object} */
Mail.prototype.envelope;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "maildev"
/** @const */
tsickle_declare_module.maildev = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.maildev */

/**
 * @constructor
 * @struct
 * Constructor.
 * 
 * @param {!MailDevOptions} options
 */
tsickle_declare_module.maildev.MailDev = function(options) {};

/**
 * Deletes a given email by identifier.
 * 
 * @param {string} id
 * @param {function(!Error): void=} callback
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.deleteEmail = function(id, callback) {};

/**
 * Deletes all email and their attachments.
 * 
 * @param {function(!Error): void=} callback
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.deleteAllEmail = function(callback) {};

/**
 * Stops the SMTP server.
 * 
 * @param {function(!Error): void=} callback
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.end = function(callback) {};

/**
 * Accepts e-mail identifier, returns email object.
 * 
 * @param {string} id
 * @param {function(!Error): void=} callback
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.getEmail = function(id, callback) {};

/**
 * Returns a readable stream of the raw e-mail.
 * 
 * @param {string} id
 * @param {function(!Error, !ReadStream): void=} callback
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.getRawEmail = function(id, callback) {};

/**
 * Returns array of all e-mail.
 * @param {function(!Error, !Array<!Object>): void} done
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.getAllEmail = function(done) {};

/**
 * Starts the SMTP server.
 * 
 * @param {function(!Error): void=} callback
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.listen = function(callback) {};

/**
 * Event called when a new e-mail is received. Callback receives single mail object.
 * 
 * @param {string} eventName
 * @param {function(!Object): void} callback
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.on = function(eventName, callback) {};

/**
 * Relay the e-mail.
 * 
 * @param {string} idOrMailObject
 * @param {function(!Error): void} done
 * @return {void}
 */
tsickle_declare_module.maildev.MailDev.prototype.relayMail = function(idOrMailObject, done) {};
 /** @type {?} */
tsickle_declare_module.maildev.out;

/* TODO: ExportAssignment in tsickle_declare_module.maildev */
