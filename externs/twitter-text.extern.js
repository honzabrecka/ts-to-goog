/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/twitter-text/index.d.ts:
/**
 * @record
 * @struct
 */
function HashtagWithIndices() {}
 /** @type {string} */
HashtagWithIndices.prototype.hashtag;
 /** @type {!Array<?>} */
HashtagWithIndices.prototype.indices;
/**
 * @record
 * @struct
 */
function UrlWithIndices() {}
 /** @type {string} */
UrlWithIndices.prototype.url;
 /** @type {!Array<?>} */
UrlWithIndices.prototype.indices;
/**
 * @record
 * @struct
 */
function MentionWithIndices() {}
 /** @type {string} */
MentionWithIndices.prototype.screenName;
 /** @type {!Array<?>} */
MentionWithIndices.prototype.indices;
/**
 * @record
 * @struct
 */
function MentionOrListWithIndices() {}
 /** @type {string} */
MentionOrListWithIndices.prototype.screenName;
 /** @type {string} */
MentionOrListWithIndices.prototype.listSlug;
 /** @type {!Array<?>} */
MentionOrListWithIndices.prototype.indices;
/**
 * @record
 * @struct
 */
function CashtagWithIndices() {}
 /** @type {string} */
CashtagWithIndices.prototype.cashtag;
 /** @type {!Array<?>} */
CashtagWithIndices.prototype.indices;

/** @typedef {?} */
var EntityWithIndices;
/**
 * @record
 * @struct
 */
function Indices() {}
 /** @type {!Array<?>} */
Indices.prototype.indices;

/**
 * @param {string} text
 * @return {string}
 */
function htmlEscape(text) {}

/**
 * @param {string} text
 * @return {!Array<string>}
 */
function splitTags(text) {}

/**
 * @param {string} text
 * @return {!Array<string>}
 */
function extractHashtags(text) {}

/**
 * @param {string} text
 * @return {!Array<?>}
 */
function extractHashtagsWithIndices(text) {}

/**
 * @param {string} text
 * @return {!Array<string>}
 */
function extractUrls(text) {}

/**
 * @param {string} text
 * @return {!Array<?>}
 */
function extractUrlsWithIndices(text) {}

/**
 * @param {string} text
 * @return {!Array<string>}
 */
function extractMentions(text) {}

/**
 * @param {string} text
 * @return {!Array<?>}
 */
function extractMentionsWithIndices(text) {}

/**
 * @param {string} text
 * @return {!Array<?>}
 */
function extractMentionsOrListsWithIndices(text) {}

/**
 * @param {string} text
 * @return {!Array<string>}
 */
function extractReplies(text) {}

/**
 * @param {string} text
 * @return {!Array<string>}
 */
function extractCashtags(text) {}

/**
 * @param {string} text
 * @return {!Array<?>}
 */
function extractCashtagsWithIndices(text) {}

/**
 * @param {string} text
 * @return {!Array<?>}
 */
function extractEntitiesWithIndices(text) {}

/**
 * @template I
 * @param {I} i
 * @return {I}
 */
function modifyIndicesFromUnicodeToUTF16(i) {}

/**
 * @template I
 * @param {I} i
 * @return {I}
 */
function modifyIndicesFromUTF16ToUnicode(i) {}
/**
 * @record
 * @struct
 */
function UrlEntity() {}
 /** @type {string} */
UrlEntity.prototype.url;
 /** @type {string} */
UrlEntity.prototype.display_url;
 /** @type {string} */
UrlEntity.prototype.expanded_url;
 /** @type {!Array<?>} */
UrlEntity.prototype.indices;
/**
 * @record
 * @struct
 */
function AutoLinkOptions() {}
 /** @type {string} */
AutoLinkOptions.prototype.hashtagClass;
 /** @type {string} */
AutoLinkOptions.prototype.hashtagUrlBase;
 /** @type {string} */
AutoLinkOptions.prototype.cashtagClass;
 /** @type {string} */
AutoLinkOptions.prototype.cashtagUrlBase;
 /** @type {string} */
AutoLinkOptions.prototype.listClass;
 /** @type {string} */
AutoLinkOptions.prototype.usernameClass;
 /** @type {string} */
AutoLinkOptions.prototype.usernameUrlBase;
 /** @type {string} */
AutoLinkOptions.prototype.listUrlBase;
 /** @type {string} */
AutoLinkOptions.prototype.htmlAttrs;
 /** @type {string} */
AutoLinkOptions.prototype.invisibleTagAttrs;
 /** @type {boolean} */
AutoLinkOptions.prototype.htmlEscapeNonEntities;
 /** @type {boolean} */
AutoLinkOptions.prototype.targetBlank;
 /** @type {boolean} */
AutoLinkOptions.prototype.suppressNoFollow;
 /** @type {!Array<?>} */
AutoLinkOptions.prototype.urlEntities;

/**
 * @param {string} text
 * @param {?=} options
 * @return {string}
 */
function autoLink(text, options) {}

/**
 * @param {string} text
 * @param {?=} options
 * @return {string}
 */
function autoLinkUsernamesOrLists(text, options) {}

/**
 * @param {string} text
 * @param {?=} options
 * @return {string}
 */
function autoLinkHashtags(text, options) {}

/**
 * @param {string} text
 * @param {?=} options
 * @return {string}
 */
function autoLinkCashtags(text, options) {}

/**
 * @param {string} text
 * @param {?=} options
 * @return {string}
 */
function autoLinkUrlsCustom(text, options) {}

/**
 * @param {string} text
 * @param {!Array<?>} entities
 * @param {?=} options
 * @return {string}
 */
function autoLinkEntities(text, entities, options) {}
/**
 * @record
 * @struct
 */
function TweetLengthOptions() {}
 /** @type {number} */
TweetLengthOptions.prototype.short_url_length;
 /** @type {number} */
TweetLengthOptions.prototype.short_url_length_https;

/**
 * @param {string} text
 * @param {?=} options
 * @return {number}
 */
function getTweetLength(text, options) {}

/**
 * @param {string} username
 * @return {boolean}
 */
function isValidUsername(username) {}

/**
 * @param {string} usernameList
 * @return {boolean}
 */
function isValidList(usernameList) {}

/**
 * @param {string} hashtag
 * @return {boolean}
 */
function isValidHashtag(hashtag) {}

/**
 * @param {string} url
 * @param {boolean} unicodeDomains
 * @param {boolean} requireProtocol
 * @return {boolean}
 */
function isValidUrl(url, unicodeDomains, requireProtocol) {}

/**
 * @param {string} text
 * @return {boolean}
 */
function hasInvalidCharacters(text) {}

/**
 * @param {string} text
 * @return {string}
 */
function isInvalidTweet(text) {}

/**
 * @param {string} text
 * @return {number}
 */
function getUnicodeTextLength(text) {}

/**
 * @param {string} text
 * @param {!Array<?>} entities
 * @param {boolean=} indicesInUTF16
 * @return {void}
 */
function convertUnicodeIndices(text, entities, indicesInUTF16) {}

/**
 * @param {string} text
 * @param {!Array<!Array<number>>=} hits
 * @param {{tag: string}=} options
 * @return {string}
 */
function hitHighlight(text, hits, options) {}
