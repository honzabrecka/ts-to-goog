/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/irc/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var NodeIRC = {};

/**
 * @constructor
 * @struct
 * Connect to an IRC server
 * @param {string} server - server hostname
 * @param {string} nick - nickname
 * @param {!NodeIRC.IClientOpts=} opts
 */
NodeIRC.Client = function(server, nick, opts) {};
 /** @type {?} */
NodeIRC.Client.prototype.conn;
 /** @type {!Object<string,{key: string, serverName: string, users: !Object<string,string>, mode: string, created: string}>} */
NodeIRC.Client.prototype.chans;
 /** @type {{channel: {idlength: !Array<string>, length: number, limit: !Array<string>, modes: !Object<string,string>, types: string}, kicklength: number, maxlist: !Array<number>, maxtargets: !Array<string>, modes: number, nicklength: number, topiclength: number, usermodes: string}} */
NodeIRC.Client.prototype.supported;
 /** @type {string} */
NodeIRC.Client.prototype.nick;
 /** @type {!Array<!NodeIRC.IChannel>} */
NodeIRC.Client.prototype.channellist;
 /** @type {string} */
NodeIRC.Client.prototype.motd;
 /** @type {number} */
NodeIRC.Client.prototype.maxLineLength;
 /** @type {!NodeIRC.IClientOpts} */
NodeIRC.Client.prototype.opt;
 /** @type {string} */
NodeIRC.Client.prototype.hostMask;

/**
 * Send a raw message to the server; generally speaking, it’s best
 * not to use this method unless you know what you’re doing.
 * @param {string} command - irc command
 * @param {...string} args - command arguments (splat)
 * @return {void}
 */
NodeIRC.Client.prototype.send = function(command, args) {};

/**
 * Join the specified channel
 * @param {string} channel - channel to join
 * @param {!NodeIRC.handlers.IJoinChannel=} callback
 * @return {void}
 */
NodeIRC.Client.prototype.join = function(channel, callback) {};

/**
 * Part the specified channel
 * @param {string} channel - channel to part
 * @param {string} message - optional message to send
 * @param {!NodeIRC.handlers.IPartChannel} callback
 * @return {void}
 */
NodeIRC.Client.prototype.part = function(channel, message, callback) {};

/**
 * Send a message to the specified target
 * @param {string} target - nick or channel
 * @param {string} message - message to send
 * @return {void}
 */
NodeIRC.Client.prototype.say = function(target, message) {};

/**
 * Send a CTCP message to the specified target
 * @param {string} target - nick or channel
 * @param {string} type - "privmsg" for PRIVMSG, anything else for NOTICE
 * @param {string} text - CTCP message
 * @return {void}
 */
NodeIRC.Client.prototype.ctcp = function(target, type, text) {};

/**
 * Send an action to the specified target
 * @param {string} target - target
 * @param {string} message - message
 * @return {void}
 */
NodeIRC.Client.prototype.action = function(target, message) {};

/**
 * Send a notice to the specified target.
 * @param {string} target - nick or channel
 * @param {string} message - message to send
 * @return {void}
 */
NodeIRC.Client.prototype.notice = function(target, message) {};

/**
 * Request a whois for the specified nick
 * @param {string} nick - nickname
 * @param {!NodeIRC.handlers.IWhois} callback
 * @return {void}
 */
NodeIRC.Client.prototype.whois = function(nick, callback) {};

/**
 * Request a channel listing from the server. The arguments for this
 * are farily server specific, this method passes them as specified.
 * 
 * Responses from the server are available via `channellist_start`,
 * `channellist_item`, and `channellist` events.
 * 
 * @param {...string} args - arguments
 * @return {void}
 */
NodeIRC.Client.prototype.list = function(args) {};

/**
 * Connect to the server. Use when `autoConnect` is false.
 * @param {(number|!NodeIRC.handlers.IRaw)=} retryCount - times to retry
 * @param {!NodeIRC.handlers.IRaw=} callback
 * @return {void}
 */
NodeIRC.Client.prototype.connect = function(retryCount, callback) {};

/**
 * Disconnect from the IRC server
 * @param {string} message - message to send
 * @param {function(): void} callback
 * @return {void}
 */
NodeIRC.Client.prototype.disconnect = function(message, callback) {};

/**
 * Activate flood protection “after the fact”. You can also use
 * floodProtection while instantiating the Client to enable flood
 * protection, and floodProtectionDelay to set the default message
 * interval.
 * @param {number} interval - ms to wait between messages
 * @return {void}
 */
NodeIRC.Client.prototype.activateFloodProtection = function(interval) {};
/**
 * @record
 * @struct
 */
NodeIRC.IClientOpts = function() {};
 /** @type {string} */
NodeIRC.IClientOpts.prototype.userName;
 /** @type {string} */
NodeIRC.IClientOpts.prototype.password;
 /** @type {string} */
NodeIRC.IClientOpts.prototype.realName;
 /** @type {number} */
NodeIRC.IClientOpts.prototype.port;
 /** @type {string} */
NodeIRC.IClientOpts.prototype.localAddress;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.debug;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.showErrors;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.autoRejoin;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.autoConnect;
 /** @type {!Array<string>} */
NodeIRC.IClientOpts.prototype.channels;
 /** @type {(boolean|!Credentials)} */
NodeIRC.IClientOpts.prototype.secure;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.selfSigned;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.certExpired;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.floodProtection;
 /** @type {number} */
NodeIRC.IClientOpts.prototype.floodProtectionDelay;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.sasl;
 /** @type {boolean} */
NodeIRC.IClientOpts.prototype.stripColors;
 /** @type {string} */
NodeIRC.IClientOpts.prototype.channelPrefixes;
 /** @type {number} */
NodeIRC.IClientOpts.prototype.messageSplit;
 /** @type {string} */
NodeIRC.IClientOpts.prototype.encoding;

/** @const */
NodeIRC.CommandType = {};
/** @const {number} */
NodeIRC.CommandType.normal;
/** @const {number} */
NodeIRC.CommandType.reply;
/** @const {number} */
NodeIRC.CommandType.error;
/**
 * @record
 * @struct
 */
NodeIRC.IMessage = function() {};
 /** @type {string} */
NodeIRC.IMessage.prototype.prefix;
 /** @type {string} */
NodeIRC.IMessage.prototype.command;
 /** @type {string} */
NodeIRC.IMessage.prototype.rawCommand;
 /** @type {NodeIRC.CommandType} */
NodeIRC.IMessage.prototype.commandType;
 /** @type {!Array<string>} */
NodeIRC.IMessage.prototype.args;
/**
 * @record
 * @struct
 */
NodeIRC.IWhoisData = function() {};
 /** @type {string} */
NodeIRC.IWhoisData.prototype.nick;
 /** @type {string} */
NodeIRC.IWhoisData.prototype.user;
 /** @type {string} */
NodeIRC.IWhoisData.prototype.host;
 /** @type {string} */
NodeIRC.IWhoisData.prototype.realname;
 /** @type {!Array<string>} */
NodeIRC.IWhoisData.prototype.channels;
 /** @type {string} */
NodeIRC.IWhoisData.prototype.server;
 /** @type {string} */
NodeIRC.IWhoisData.prototype.serverinfo;
 /** @type {string} */
NodeIRC.IWhoisData.prototype.operator;
/**
 * @record
 * @struct
 */
NodeIRC.IChannel = function() {};
 /** @type {string} */
NodeIRC.IChannel.prototype.name;
 /** @type {string} */
NodeIRC.IChannel.prototype.users;
 /** @type {string} */
NodeIRC.IChannel.prototype.topic;
/** @const */
NodeIRC.handlers = {};
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IRegistered = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IMotd = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.INames = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.INamesChannel = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.ITopic = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IJoin = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IJoinChannel = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IPart = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IPartChannel = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IKick = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IKickChannel = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IRecievedMessage = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IMessageAllChannels = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IMessageChannel = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.ISelfMessage = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.INotice = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IPing = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IPm = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.ICtcp = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.ICtcpSpecific = function() {};

/* TODO: CallSignature: NodeIRC.handlers */

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.INick = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IInvite = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IModeChange = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IWhois = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IChannelList = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IRaw = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IError = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/**
 * @record
 * @struct
 */
NodeIRC.handlers.IAction = function() {};

/* TODO: CallSignature: NodeIRC.handlers */
/** @const */
NodeIRC.colors = {};

/**
 * Takes a color by name, text, and optionally what color to return.
 * @param {string} color - name of color
 * @param {string} text - text to color
 * @param {string=} reset_color - color to set after text
 * @return {string}
 */
NodeIRC.colors.wrap = function(color, text, reset_color) {};
 /** @type {!Object<string,string>} */
NodeIRC.colors.codes;

/* TODO: ExportAssignment in  */
