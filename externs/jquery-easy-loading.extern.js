/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery-easy-loading/index.d.ts:
/** @const */
var JQueryEasyLoading = {};
/**
 * @record
 * @struct
 */
JQueryEasyLoading.Static = function() {};

/**
 * Extend the Loading plugin default settings with the user options
 * Use it as `$.Loading.setDefaults({ ... })`
 * 
 * @param {!JQueryEasyLoading.Options} options
 * @return {void}
 */
JQueryEasyLoading.Static.prototype.setDefaults = function(options) {};
/**
 * @record
 * @struct
 */
JQueryEasyLoading.LoadingObject = function() {};

/**
 * Initializes the overlay and attach handlers to the appropriate events
 * @return {void}
 */
JQueryEasyLoading.LoadingObject.prototype.init = function() {};

/**
 * Return a new default overlay
 * 
 * @return {?<!HTMLElement>}
 */
JQueryEasyLoading.LoadingObject.prototype.createOerlay = function() {};

/**
 * Attach some internal methods to external events
 * e.g. overlay click, window resize etc
 * @return {void}
 */
JQueryEasyLoading.LoadingObject.prototype.attachMethodsToExternalEvents = function() {};

/**
 * Attach the handlers defined on `options` for the respective events
 * @return {void}
 */
JQueryEasyLoading.LoadingObject.prototype.attachOptionsHandlers = function() {};

/**
 * Calculate the z-index for the default overlay element
 * Return the z-index passed as setting to the plugin or calculate it
 * based on the target's z-index
 * @return {number}
 */
JQueryEasyLoading.LoadingObject.prototype.calcZIndex = function() {};

/**
 * Reposition the overlay on the top of the target element
 * This method needs to be called if the target element changes position
 *  or dimension
 * @return {void}
 */
JQueryEasyLoading.LoadingObject.prototype.resize = function() {};

/**
 * Trigger the `loading.start` event and turn on the loading state
 * @return {void}
 */
JQueryEasyLoading.LoadingObject.prototype.start = function() {};

/**
 * Trigger the `loading.stop` event and turn off the loading state
 * @return {void}
 */
JQueryEasyLoading.LoadingObject.prototype.stop = function() {};

/**
 * Check whether the loading state is active or not
 * 
 * @return {boolean}
 */
JQueryEasyLoading.LoadingObject.prototype.active = function() {};

/**
 * Toggle the state of the loading overlay
 * @return {void}
 */
JQueryEasyLoading.LoadingObject.prototype.toggle = function() {};
/**
 * @record
 * @struct
 */
JQueryEasyLoading.Options = function() {};
 /** @type {?<!HTMLElement>} */
JQueryEasyLoading.Options.prototype.overlay;
 /** @type {number} */
JQueryEasyLoading.Options.prototype.zIndex;
 /** @type {string} */
JQueryEasyLoading.Options.prototype.message;
 /** @type {string} */
JQueryEasyLoading.Options.prototype.theme;
 /** @type {string} */
JQueryEasyLoading.Options.prototype.shownClass;
 /** @type {string} */
JQueryEasyLoading.Options.prototype.hiddenClass;
 /** @type {boolean} */
JQueryEasyLoading.Options.prototype.stoppable;
 /** @type {boolean} */
JQueryEasyLoading.Options.prototype.start;
 /** @type {function(!JQueryEasyLoading.LoadingObject): void} */
JQueryEasyLoading.Options.prototype.onStart;
 /** @type {function(!JQueryEasyLoading.LoadingObject): void} */
JQueryEasyLoading.Options.prototype.onStop;
 /** @type {!Function} */
JQueryEasyLoading.Options.prototype.onClick;

/** @typedef {string} */
JQueryEasyLoading.Command;
 /** @type {!JQueryEasyLoading.Static} */
JQueryStatic.prototype.Loading;

/**
 * Initializes the plugin and return a chainable jQuery object
 * 
 * @param {(!JQueryEasyLoading.Options|string)=} options
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.loading = function(options) {};

/**
 * Return the loading object associated to the element or initialize it
 * This method is interesting if you need the plugin object to access the
 * internal API
 * Example: `$('#some-element').Loading().toggle()`
 * 
 * to a previously initialized object, the old ones are overriden and the
 * plugin restarted
 * @param {!JQueryEasyLoading.Options=} options
 * @return {!JQueryEasyLoading.LoadingObject}
 */
JQuery.prototype.Loading = function(options) {};
 /** @type {function(?, !JQueryStatic<!HTMLElement>): !JQueryStatic<!HTMLElement>} */
var factory;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "jquery-easy-loading"
/** @const */
tsickle_declare_module.jquery_easy_loading = {};

/* TODO: ExportAssignment in tsickle_declare_module.jquery_easy_loading */
