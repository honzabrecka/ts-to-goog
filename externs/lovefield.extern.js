/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lovefield/index.d.ts:
/** @const */
var lf = {};

/** @const */
lf.Order = {};
/** @const {number} */
lf.Order.ASC;
/** @const {number} */
lf.Order.DESC;

/** @const */
lf.Type = {};
/** @const {number} */
lf.Type.ARRAY_BUFFER;
/** @const {number} */
lf.Type.BOOLEAN;
/** @const {number} */
lf.Type.DATE_TIME;
/** @const {number} */
lf.Type.INTEGER;
/** @const {number} */
lf.Type.NUMBER;
/** @const {number} */
lf.Type.OBJECT;
/** @const {number} */
lf.Type.STRING;

/** @const */
lf.ConstraintAction = {};
/** @const {number} */
lf.ConstraintAction.RESTRICT;
/** @const {number} */
lf.ConstraintAction.CASCADE;

/** @const */
lf.ConstraintTiming = {};
/** @const {number} */
lf.ConstraintTiming.IMMEDIATE;
/** @const {number} */
lf.ConstraintTiming.DEFERRABLE;
/**
 * @record
 * @struct
 */
lf.Binder = function() {};

/**
 * @return {number}
 */
lf.Binder.prototype.getIndex = function() {};
/**
 * @record
 * @struct
 */
lf.Predicate = function() {};
/**
 * @record
 * @struct
 */
lf.Row = function() {};

/** @typedef {(string|number|boolean|!Date)} */
lf.ValueLiteral;
/**
 * @record
 * @struct
 */
lf.PredicateProvider = function() {};

/**
 * @param {(string|number|boolean|!Date|!lf.schema.Column|!lf.Binder)} operand
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.eq = function(operand) {};

/**
 * @param {(string|number|boolean|!Date|!lf.schema.Column|!lf.Binder)} operand
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.neq = function(operand) {};

/**
 * @param {(string|number|boolean|!Date|!lf.schema.Column|!lf.Binder)} operand
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.lt = function(operand) {};

/**
 * @param {(string|number|boolean|!Date|!lf.schema.Column|!lf.Binder)} operand
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.lte = function(operand) {};

/**
 * @param {(string|number|boolean|!Date|!lf.schema.Column|!lf.Binder)} operand
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.gt = function(operand) {};

/**
 * @param {(string|number|boolean|!Date|!lf.schema.Column|!lf.Binder)} operand
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.gte = function(operand) {};

/**
 * @param {(!RegExp|!lf.Binder)} operand
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.match = function(operand) {};

/**
 * @param {(string|number|boolean|!Date|!lf.Binder)} from
 * @param {(string|number|boolean|!Date|!lf.Binder)} to
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.between = function(from, to) {};

/**
 * @param {(!lf.Binder|!Array<(string|number|boolean|!Date)>)} values
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.in = function(values) {};

/**
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.isNull = function() {};

/**
 * @return {!lf.Predicate}
 */
lf.PredicateProvider.prototype.isNotNull = function() {};

/**
 * @param {number} index
 * @return {!lf.Binder}
 */
lf.bind = function(index) {};
/**
 * @record
 * @struct
 */
lf.TransactionStats = function() {};

/**
 * @return {boolean}
 */
lf.TransactionStats.prototype.success = function() {};

/**
 * @return {number}
 */
lf.TransactionStats.prototype.insertedRowCount = function() {};

/**
 * @return {number}
 */
lf.TransactionStats.prototype.updatedRowCount = function() {};

/**
 * @return {number}
 */
lf.TransactionStats.prototype.deletedRowCount = function() {};

/**
 * @return {number}
 */
lf.TransactionStats.prototype.changedTableCount = function() {};
/**
 * @record
 * @struct
 */
lf.Transaction = function() {};

/**
 * @param {!lf.query.Builder} query
 * @return {!Promise<!Array<!Object>>}
 */
lf.Transaction.prototype.attach = function(query) {};

/**
 * @param {!Array<?>} scope
 * @return {!Promise<void>}
 */
lf.Transaction.prototype.begin = function(scope) {};

/**
 * @return {!Promise<void>}
 */
lf.Transaction.prototype.commit = function() {};

/**
 * @param {!Array<!lf.query.Builder>} queries
 * @return {!Promise<!Array<!Array<!Object>>>}
 */
lf.Transaction.prototype.exec = function(queries) {};

/**
 * @return {!Promise<void>}
 */
lf.Transaction.prototype.rollback = function() {};

/**
 * @return {!lf.TransactionStats}
 */
lf.Transaction.prototype.stats = function() {};

/** @const */
lf.TransactionType = {};
/** @const {number} */
lf.TransactionType.READ_ONLY;
/** @const {number} */
lf.TransactionType.READ_WRITE;
/**
 * @record
 * @struct
 */
lf.Database = function() {};

/**
 * @return {void}
 */
lf.Database.prototype.close = function() {};

/**
 * @param {lf.TransactionType=} type
 * @return {!lf.Transaction}
 */
lf.Database.prototype.createTransaction = function(type) {};

/**
 * @return {!lf.query.Delete}
 */
lf.Database.prototype.delete = function() {};

/**
 * @return {!Promise<!Object>}
 */
lf.Database.prototype.export = function() {};

/**
 * @return {!lf.schema.Database}
 */
lf.Database.prototype.getSchema = function() {};

/**
 * @param {!Object} data
 * @return {!Promise<void>}
 */
lf.Database.prototype.import = function(data) {};

/**
 * @return {!lf.query.Insert}
 */
lf.Database.prototype.insertOrReplace = function() {};

/**
 * @return {!lf.query.Insert}
 */
lf.Database.prototype.insert = function() {};

/**
 * @param {!lf.query.Select} query
 * @param {!Function} callback
 * @return {void}
 */
lf.Database.prototype.observe = function(query, callback) {};

/**
 * @param {...!lf.schema.Column} columns
 * @return {!lf.query.Select}
 */
lf.Database.prototype.select = function(columns) {};

/**
 * @param {!lf.query.Select} query
 * @param {!Function} callback
 * @return {void}
 */
lf.Database.prototype.unobserve = function(query, callback) {};

/**
 * @param {?} table
 * @return {!lf.query.Update}
 */
lf.Database.prototype.update = function(table) {};
/** @const */
lf.query = {};
/**
 * @record
 * @struct
 */
lf.query.Builder = function() {};

/**
 * @param {...?} values
 * @return {!lf.query.Builder}
 */
lf.query.Builder.prototype.bind = function(values) {};

/**
 * @return {!Promise<!Array<!Object>>}
 */
lf.query.Builder.prototype.exec = function() {};

/**
 * @return {string}
 */
lf.query.Builder.prototype.explain = function() {};

/**
 * @return {string}
 */
lf.query.Builder.prototype.toSql = function() {};
/**
 * @extends {lf.query.Builder}
 * @record
 * @struct
 */
lf.query.Delete = function() {};

/**
 * @param {?} table
 * @return {!lf.query.Delete}
 */
lf.query.Delete.prototype.from = function(table) {};

/**
 * @param {!lf.Predicate} predicate
 * @return {!lf.query.Delete}
 */
lf.query.Delete.prototype.where = function(predicate) {};
/**
 * @extends {lf.query.Builder}
 * @record
 * @struct
 */
lf.query.Insert = function() {};

/**
 * @param {?} table
 * @return {!lf.query.Insert}
 */
lf.query.Insert.prototype.into = function(table) {};

/**
 * @param {(!lf.Binder|!Array<!lf.Row>|!Array<!lf.Binder>)} rows
 * @return {!lf.query.Insert}
 */
lf.query.Insert.prototype.values = function(rows) {};
/**
 * @extends {lf.query.Builder}
 * @record
 * @struct
 */
lf.query.Select = function() {};

/**
 * @param {...?} tables
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.from = function(tables) {};

/**
 * @param {...!lf.schema.Column} columns
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.groupBy = function(columns) {};

/**
 * @param {?} table
 * @param {!lf.Predicate} predicate
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.innerJoin = function(table, predicate) {};

/**
 * @param {?} table
 * @param {!lf.Predicate} predicate
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.leftOuterJoin = function(table, predicate) {};

/**
 * @param {(number|!lf.Binder)} numberOfRows
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.limit = function(numberOfRows) {};

/**
 * @param {!lf.schema.Column} column
 * @param {lf.Order=} order
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.orderBy = function(column, order) {};

/**
 * @param {(number|!lf.Binder)} numberOfRows
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.skip = function(numberOfRows) {};

/**
 * @param {!lf.Predicate} predicate
 * @return {!lf.query.Select}
 */
lf.query.Select.prototype.where = function(predicate) {};
/**
 * @extends {lf.query.Builder}
 * @record
 * @struct
 */
lf.query.Update = function() {};

/**
 * @param {!lf.schema.Column} column
 * @param {?} value
 * @return {!lf.query.Update}
 */
lf.query.Update.prototype.set = function(column, value) {};

/**
 * @param {!lf.Predicate} predicate
 * @return {!lf.query.Update}
 */
lf.query.Update.prototype.where = function(predicate) {};
/** @const */
lf.raw = {};
/**
 * @record
 * @struct
 */
lf.raw.BackStore = function() {};

/**
 * @return {?}
 */
lf.raw.BackStore.prototype.getRawDBInstance = function() {};

/**
 * @return {?}
 */
lf.raw.BackStore.prototype.getRawTransaction = function() {};

/**
 * @param {string} tableName
 * @return {!Promise<void>}
 */
lf.raw.BackStore.prototype.dropTable = function(tableName) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @param {(string|number|boolean|!Date|!ArrayBuffer)} defaultValue
 * @return {!Promise<void>}
 */
lf.raw.BackStore.prototype.addTableColumn = function(tableName, columnName, defaultValue) {};

/**
 * @param {string} tableName
 * @param {string} columnName
 * @return {!Promise<void>}
 */
lf.raw.BackStore.prototype.dropTableColumn = function(tableName, columnName) {};

/**
 * @param {string} tableName
 * @param {string} oldColumnName
 * @param {string} newColumnName
 * @return {!Promise<void>}
 */
lf.raw.BackStore.prototype.renameTableColumn = function(tableName, oldColumnName, newColumnName) {};

/**
 * @param {!Object} payload
 * @return {!lf.Row}
 */
lf.raw.BackStore.prototype.createRow = function(payload) {};

/**
 * @return {number}
 */
lf.raw.BackStore.prototype.getVersion = function() {};

/**
 * @return {!Array<!Object>}
 */
lf.raw.BackStore.prototype.dump = function() {};
/** @const */
lf.schema = {};

/** @const */
lf.schema.DataStoreType = {};
/** @const {number} */
lf.schema.DataStoreType.INDEXED_DB;
/** @const {number} */
lf.schema.DataStoreType.MEMORY;
/** @const {number} */
lf.schema.DataStoreType.LOCAL_STORAGE;
/** @const {number} */
lf.schema.DataStoreType.FIREBASE;
/** @const {number} */
lf.schema.DataStoreType.WEB_SQL;
/**
 * @record
 * @struct
 */
lf.schema.DatabasePragma = function() {};
 /** @type {boolean} */
lf.schema.DatabasePragma.prototype.enableBundledMode;
/**
 * @record
 * @struct
 */
lf.schema.Database = function() {};

/**
 * @return {string}
 */
lf.schema.Database.prototype.name = function() {};

/**
 * @return {!lf.schema.DatabasePragma}
 */
lf.schema.Database.prototype.pragma = function() {};

/**
 * @return {!Array<?>}
 */
lf.schema.Database.prototype.tables = function() {};

/**
 * @param {string} tableName
 * @return {?}
 */
lf.schema.Database.prototype.table = function(tableName) {};

/**
 * @return {number}
 */
lf.schema.Database.prototype.version = function() {};
/**
 * @extends {lf.PredicateProvider}
 * @record
 * @struct
 */
lf.schema.Column = function() {};

/**
 * @param {string} name
 * @return {!lf.schema.Column}
 */
lf.schema.Column.prototype.as = function(name) {};

/**
 * @return {string}
 */
lf.schema.Column.prototype.getName = function() {};

/**
 * @return {string}
 */
lf.schema.Column.prototype.getNormalizedName = function() {};
/**
 * @record
 * @struct
 */
lf.schema.ITable = function() {};

/**
 * @param {string} name
 * @return {?}
 */
lf.schema.ITable.prototype.as = function(name) {};

/**
 * @param {!Object} value
 * @return {!lf.Row}
 */
lf.schema.ITable.prototype.createRow = function(value) {};

/**
 * @return {string}
 */
lf.schema.ITable.prototype.getName = function() {};

/** @typedef {?} */
lf.schema.Table;
/**
 * @record
 * @struct
 */
lf.schema.ConnectOptions = function() {};
 /** @type {function(!lf.raw.BackStore): !Promise<void>} */
lf.schema.ConnectOptions.prototype.onUpgrade;
 /** @type {lf.schema.DataStoreType} */
lf.schema.ConnectOptions.prototype.storeType;
 /** @type {number} */
lf.schema.ConnectOptions.prototype.webSqlDbSize;
/**
 * @record
 * @struct
 */
lf.schema.Builder = function() {};

/**
 * @param {!lf.schema.ConnectOptions=} options
 * @return {!Promise<!lf.Database>}
 */
lf.schema.Builder.prototype.connect = function(options) {};

/**
 * @param {string} tableName
 * @return {!lf.schema.TableBuilder}
 */
lf.schema.Builder.prototype.createTable = function(tableName) {};

/**
 * @return {!lf.schema.Database}
 */
lf.schema.Builder.prototype.getSchema = function() {};

/**
 * @param {!lf.schema.DatabasePragma} pragma
 * @return {void}
 */
lf.schema.Builder.prototype.setPragma = function(pragma) {};
/**
 * @record
 * @struct
 */
lf.schema.IndexedColumn = function() {};
 /** @type {boolean} */
lf.schema.IndexedColumn.prototype.autoIncrement;
 /** @type {string} */
lf.schema.IndexedColumn.prototype.name;
 /** @type {lf.Order} */
lf.schema.IndexedColumn.prototype.order;

/** @typedef {{local: string, ref: string, action: lf.ConstraintAction, timing: lf.ConstraintTiming}} */
lf.schema.RawForeignKeySpec;
/**
 * @record
 * @struct
 */
lf.schema.TableBuilder = function() {};

/**
 * @param {string} name
 * @param {lf.Type} type
 * @return {!lf.schema.TableBuilder}
 */
lf.schema.TableBuilder.prototype.addColumn = function(name, type) {};

/**
 * @param {string} name
 * @param {{local: string, ref: string, action: lf.ConstraintAction, timing: lf.ConstraintTiming}} spec
 * @return {!lf.schema.TableBuilder}
 */
lf.schema.TableBuilder.prototype.addForeignKey = function(name, spec) {};

/**
 * @param {string} name
 * @param {(!Array<string>|!Array<!lf.schema.IndexedColumn>)} columns
 * @param {boolean=} unique
 * @param {lf.Order=} order
 * @return {!lf.schema.TableBuilder}
 */
lf.schema.TableBuilder.prototype.addIndex = function(name, columns, unique, order) {};

/**
 * @param {!Array<string>} columns
 * @return {!lf.schema.TableBuilder}
 */
lf.schema.TableBuilder.prototype.addNullable = function(columns) {};

/**
 * @param {(!Array<string>|!Array<!lf.schema.IndexedColumn>)} columns
 * @param {boolean=} autoInc
 * @return {!lf.schema.TableBuilder}
 */
lf.schema.TableBuilder.prototype.addPrimaryKey = function(columns, autoInc) {};

/**
 * @param {string} name
 * @param {!Array<string>} columns
 * @return {!lf.schema.TableBuilder}
 */
lf.schema.TableBuilder.prototype.addUnique = function(name, columns) {};

/**
 * @param {string} dbName
 * @param {number} dbVersion
 * @return {!lf.schema.Builder}
 */
lf.schema.create = function(dbName, dbVersion) {};
/** @const */
lf.op = {};

/**
 * @param {...!lf.Predicate} args
 * @return {!lf.Predicate}
 */
lf.op.and = function(args) {};

/**
 * @param {!lf.Predicate} operand
 * @return {!lf.Predicate}
 */
lf.op.not = function(operand) {};

/**
 * @param {...!lf.Predicate} args
 * @return {!lf.Predicate}
 */
lf.op.or = function(args) {};
/** @const */
lf.fn = {};

/**
 * @param {!lf.schema.Column} column
 * @return {!lf.schema.Column}
 */
lf.fn.avg = function(column) {};

/**
 * @param {!lf.schema.Column=} column
 * @return {!lf.schema.Column}
 */
lf.fn.count = function(column) {};

/**
 * @param {!lf.schema.Column} column
 * @return {!lf.schema.Column}
 */
lf.fn.distinct = function(column) {};

/**
 * @param {!lf.schema.Column} column
 * @return {!lf.schema.Column}
 */
lf.fn.geomean = function(column) {};

/**
 * @param {!lf.schema.Column} column
 * @return {!lf.schema.Column}
 */
lf.fn.max = function(column) {};

/**
 * @param {!lf.schema.Column} column
 * @return {!lf.schema.Column}
 */
lf.fn.min = function(column) {};

/**
 * @param {!lf.schema.Column} column
 * @return {!lf.schema.Column}
 */
lf.fn.stddev = function(column) {};

/**
 * @param {!lf.schema.Column} column
 * @return {!lf.schema.Column}
 */
lf.fn.sum = function(column) {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
