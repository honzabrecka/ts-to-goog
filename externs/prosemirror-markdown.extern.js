/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/prosemirror-markdown/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {?} schema
 * @param {!MarkdownIt.MarkdownIt} tokenizer
 * @param {?} tokens
 */
function MarkdownParser(schema, tokenizer, tokens) {}

/** @typedef {?} */
var NodeSerializer;
/**
 * @record
 * @struct
 */
function MarkSerializer() {}
 /** @type {(string|?)} */
MarkSerializer.prototype.open;
 /** @type {(string|?)} */
MarkSerializer.prototype.close;
 /** @type {boolean} */
MarkSerializer.prototype.mixable;
/**
 * @record
 * @struct
 */
function NodeSerializerSpec() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function MarkSerializerSpec() {}

/* TODO: IndexSignature:  */

/**
 * @constructor
 * @struct
 * @param {?} nodes
 * @param {?} marks
 */
function MarkdownSerializer(nodes, marks) {}
 /** @type {?} */
MarkdownSerializer.prototype.nodes;
 /** @type {?} */
MarkdownSerializer.prototype.marks;

/**
 * @param {?} content
 * @param {?=} options
 * @return {string}
 */
MarkdownSerializer.prototype.serialize = function(content, options) {};
 /** @type {?} */
var defaultMarkdownSerializer;

/**
 * @constructor
 * @struct
 * @param {?} nodes
 * @param {?} marks
 * @param {!Object=} options
 */
function MarkdownSerializerState(nodes, marks, options) {}
 /** @type {?} */
MarkdownSerializerState.prototype.out;
 /** @type {?} */
MarkdownSerializerState.prototype.closed;
 /** @type {?} */
MarkdownSerializerState.prototype.nodes;
 /** @type {?} */
MarkdownSerializerState.prototype.marks;

/**
 * @param {number} size
 * @return {void}
 */
MarkdownSerializerState.prototype.flushClose = function(size) {};

/**
 * @param {string} delim
 * @param {string} firstDelim
 * @param {?} node
 * @param {?} f
 * @return {void}
 */
MarkdownSerializerState.prototype.wrapBlock = function(delim, firstDelim, node, f) {};

/**
 * @return {boolean}
 */
MarkdownSerializerState.prototype.atBlank = function() {};

/**
 * @return {void}
 */
MarkdownSerializerState.prototype.ensureNewLine = function() {};

/**
 * @param {string=} content
 * @return {void}
 */
MarkdownSerializerState.prototype.write = function(content) {};

/**
 * @param {?} node
 * @return {void}
 */
MarkdownSerializerState.prototype.closeBlock = function(node) {};

/**
 * @param {string} text
 * @param {boolean=} escape
 * @return {void}
 */
MarkdownSerializerState.prototype.text = function(text, escape) {};

/**
 * @param {?} node
 * @param {?} parent
 * @param {number} index
 * @return {void}
 */
MarkdownSerializerState.prototype.render = function(node, parent, index) {};

/**
 * @param {?} parent
 * @return {void}
 */
MarkdownSerializerState.prototype.renderContent = function(parent) {};

/**
 * @param {?} parent
 * @return {void}
 */
MarkdownSerializerState.prototype.renderInline = function(parent) {};

/**
 * @param {?} node
 * @param {string} delim
 * @param {?} firstDelim
 * @return {void}
 */
MarkdownSerializerState.prototype.renderList = function(node, delim, firstDelim) {};

/**
 * @param {string} str
 * @param {boolean=} startOfLine
 * @return {string}
 */
MarkdownSerializerState.prototype.esc = function(str, startOfLine) {};

/**
 * @param {string} str
 * @return {string}
 */
MarkdownSerializerState.prototype.quote = function(str) {};

/**
 * @param {string} str
 * @param {number} n
 * @return {string}
 */
MarkdownSerializerState.prototype.repeat = function(str, n) {};

/**
 * @param {?} mark
 * @param {boolean} open
 * @return {string}
 */
MarkdownSerializerState.prototype.markString = function(mark, open) {};
