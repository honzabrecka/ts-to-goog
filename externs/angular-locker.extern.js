/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-locker/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.locker = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.locker.ILockerServicePutFunction = function() {};

/* TODO: CallSignature: tsickle_declare_module.angular.locker */
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.locker.ILockerService = function() {};

/**
 * Add an item to storage if it doesn't already exist
 * 
 * @param {string} key
 * @param {?} value
 * @return {boolean}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.add = function(key, value) {};

/**
 * Return all items in storage within the current namespace/driver
 * 
 * @return {?}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.all = function() {};

/**
 * Remove all items set within the current namespace/driver
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.clean = function() {};

/**
 * Get the total number of items within the current namespace
 * @return {number}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.count = function() {};

/**
 * Retrieve the specified item from storage
 * 
 * @param {(string|!Array<string>)} key
 * @param {?=} defaultValue
 * @return {?}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.get = function(key, defaultValue) {};

/**
 * Determine whether the item exists in storage
 * 
 * @param {string} key
 * @return {boolean}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.has = function(key) {};

/**
 * Get the storage keys as an array
 * @return {!Array<string>}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.keys = function() {};

/**
 * Add a new item to storage (even if it already exists)
 * 
 * Add a new item to storage (even if it already exists)
 * 
 * Add a new item to storage (even if it already exists)
 * 
 * Add a new item to storage (even if it already exists)
 * 
 * @param {!Object|!Function|string} keyValuePairs_or_putFunction_or_key
 * @param {?|!locker.ILockerServicePutFunction=} value_or_putFunction
 * @param {?=} value
 * @return {(boolean|!locker.ILockerService)}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.put = function(keyValuePairs_or_putFunction_or_key, value_or_putFunction, value) {};

/**
 * Remove specified item(s) from storage
 * 
 * Remove specified item(s) from storage
 * 
 * 
 * @param {string|!Array<string>} key_or_keys
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.forget = function(key_or_keys) {};

/**
 * Retrieve the specified item from storage and then remove it
 * 
 * @param {(string|!Array<string>)} key
 * @param {?=} defaultValue
 * @return {?}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.pull = function(key, defaultValue) {};

/**
 * Bind a storage key to a $scope property
 * 
 * @param {!angular.IScope} scope
 * @param {string} property
 * @param {?=} defaultPropertyValue
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.bind = function(scope, property, defaultPropertyValue) {};

/**
 * Set the storage driver on a new instance to enable overriding defaults
 * 
 * @param {string} localStorageType
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.driver = function(localStorageType) {};

/**
 * Empty the current storage driver completely. careful now.
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.empty = function() {};

/**
 * Get the currently set namespace
 * @return {string}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.getNamespace = function() {};

/**
 * Get a new instance of Locker
 * 
 * @param {!locker.ILockerSettings} lockerSettings
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.instance = function(lockerSettings) {};

/**
 * Set the namespace on a new instance to enable overriding defaults
 * 
 * @param {string} name
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype'namespace' = function(name) {};

/**
 * Check browser support
 * 
 * @see github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47
 * 
 * @return {boolean}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.supported = function() {};

/**
 * Unbind a storage key from a $scope property
 * 
 * @param {!angular.IScope} scope
 * @param {string} property
 * @return {!locker.ILockerService}
 */
tsickle_declare_module.angular.locker.ILockerService.prototype.unbind = function(scope, property) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.locker.ILockerSettings = function() {};
 /** @type {string} */
tsickle_declare_module.angular.locker.ILockerSettings.prototype.driver;

/* TODO: PropertySignature: tsickle_declare_module.angular.locker.'namespace' */
 /** @type {string} */
tsickle_declare_module.angular.locker.ILockerSettings.prototype.separator;
 /** @type {boolean} */
tsickle_declare_module.angular.locker.ILockerSettings.prototype.eventsEnabled;
 /** @type {!Object} */
tsickle_declare_module.angular.locker.ILockerSettings.prototype.extend;
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.locker.ILockerProvider = function() {};

/**
 * Allow the defaults to be specified via the `lockerProvider`
 * 
 * @param {!locker.ILockerSettings} lockerSettings
 * @return {void}
 */
tsickle_declare_module.angular.locker.ILockerProvider.prototype.defaults = function(lockerSettings) {};
