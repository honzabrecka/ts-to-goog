/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hoek/index.d.ts:
/**
 * @record
 * @struct
 */
function ContainOptions() {}
 /** @type {boolean} */
ContainOptions.prototype.deep;
 /** @type {boolean} */
ContainOptions.prototype.once;
 /** @type {boolean} */
ContainOptions.prototype.only;
 /** @type {boolean} */
ContainOptions.prototype.part;
/**
 * @record
 * @struct
 */
function ReachOptions() {}
 /** @type {string} */
ReachOptions.prototype.separator;
 /** @type {?} */
ReachOptions.prototype.default;
 /** @type {boolean} */
ReachOptions.prototype.strict;
 /** @type {boolean} */
ReachOptions.prototype.functions;

/**
 * Clone an object or an array.
 * @template T
 * @param {?} obj
 * @return {?}
 */
function clone(obj) {}

/**
 * Clone an object or array.
 * @param {?} obj
 * @param {!Array<string>} keys
 * @return {?}
 */
function cloneWithShallow(obj, keys) {}

/**
 * Merge all the properties of source into target.
 * @template T1, T2
 * @param {?} target
 * @param {?} source
 * @param {boolean=} isNullOverride
 * @param {boolean=} isMergeArrays
 * @return {?}
 */
function merge(target, source, isNullOverride, isMergeArrays) {}

/**
 * Apply options to a copy of the defaults.
 * @template T1, T2
 * @param {?} defaults
 * @param {?} options
 * @param {boolean=} isNullOverride
 * @return {?}
 */
function applyToDefaults(defaults, options, isNullOverride) {}

/**
 * Apply options to a copy of the defaults.
 * @template T1, T2
 * @param {?} defaults
 * @param {?} options
 * @param {!Array<string>=} keys
 * @return {?}
 */
function applyToDefaultsWithShallow(defaults, options, keys) {}

/**
 * Perform a deep comparison of the two values.
 * @template T
 * @param {?} b
 * @param {?} a
 * @param {?=} options
 * @return {?}
 */
function deepEqual(b, a, options) {}

/**
 * Remove duplicate items from Array.
 * @template T
 * @param {!Array<?>} array
 * @param {string=} key
 * @return {!Array<?>}
 */
function unique(array, key) {}

/**
 * Convert an Array into an Object.
 * @param {!Array<?>} array
 * @param {string=} key
 * @return {?}
 */
function mapToObject(array, key) {}

/**
 * Find the common unique items in two arrays.
 * @param {!Array<?>} array1
 * @param {!Array<?>} array2
 * @return {?}
 */
function intersect(array1, array2) {}

/**
 * Test if the reference value contains the provided values.
 * @param {?} ref
 * @param {?} values
 * @param {?=} options
 * @return {boolean}
 */
function contain(ref, values, options) {}

/**
 * Flatten an array.
 * @param {!Array<?>} array
 * @param {!Array<?>=} target
 * @return {!Array<?>}
 */
function flatten(array, target) {}

/**
 * Convert an object key chain string to reference.
 * @param {?} obj
 * @param {?} chain
 * @param {?=} options
 * @return {?}
 */
function reach(obj, chain, options) {}

/**
 * Replace string parameters ({name}) with their corresponding object key values.
 * @param {?} obj
 * @param {string} template
 * @param {?=} options
 * @return {?}
 */
function reachTemplate(obj, template, options) {}

/**
 * Transform an existing object into a new one based on the supplied obj and transform map.
 * @param {?} obj
 * @param {?} transform
 * @param {?=} options
 * @return {?}
 */
function transform(obj, transform, options) {}

/**
 * Perform a shallow copy by copying the references of all the top level children.
 * @param {?} obj
 * @return {?}
 */
function shallow(obj) {}

/**
 * Convert an object to string. Any errors are caught and reported back in the form of the returned string.
 * @param {?} obj
 * @return {string}
 */
function stringify(obj) {}
/**
 * @constructor
 * @struct
 */
function Timer() {}
 /** @type {number} */
Timer.prototype.ts;

/**
 * The time (ms) elapsed since the timer was created.
 * @return {number}
 */
Timer.prototype.elapsed = function() {};
/**
 * @constructor
 * @struct
 */
function Bench() {}
 /** @type {number} */
Bench.prototype.ts;

/**
 * The time (ms) elapsed since the timer was created.
 * @return {number}
 */
Bench.prototype.elapsed = function() {};

/**
 * Encode value of string or buffer type in Base64 or URL encoding.
 * @param {string} value
 * @return {string}
 */
function base64urlEncode(value) {}

/**
 * Decode string into Base64 or URL encoding.
 * @param {string} value
 * @return {string}
 */
function base64urlDecode(value) {}

/**
 * Escape html characters.
 * @param {string} htmlString
 * @return {string}
 */
function escapeHtml(htmlString) {}

/**
 * Escape attribute value for use in HTTP header.
 * @param {string} attribute
 * @return {string}
 */
function escapeHeaderAttribute(attribute) {}

/**
 * Escape string for Regex construction.
 * @param {string} regexString
 * @return {string}
 */
function escapeRegex(regexString) {}

/**
 * Print message or throw error if condition fails.
 * @param {boolean} condition
 * @param {(string|!Error)} message
 * @return {(void|!Error)}
 */
function assert(condition, message) {}

/**
 * Throw if process.env.NODE_ENV === 'test'. Else display most recent stack and exit process.
 * @param {(string|!Error)} message
 * @return {void}
 */
function abort(message) {}

/**
 * Display the trace stack.
 * @param {?=} slice
 * @return {!Array<string>}
 */
function displayStack(slice) {}

/**
 * Return a trace stack array.
 * @param {?=} slice
 * @return {!Array<?>}
 */
function callStack(slice) {}

/**
 * Wrap fn in process.nextTick.
 * @param {?} fn
 * @return {?}
 */
function nextTick(fn) {}

/**
 * Make sure fn is only run once.
 * @param {?} fn
 * @return {?}
 */
function once(fn) {}

/**
 * A simple no-op function.
 * @return {void}
 */
function ignore() {}

/**
 * path to prepend to a randomly generated file name.
 * @param {string} path
 * @param {string=} extension
 * @return {string}
 */
function uniqueFilename(path, extension) {}

/**
 * Check value to see if it is an integer.
 * @param {?} value
 * @return {boolean}
 */
function isInteger(value) {}
