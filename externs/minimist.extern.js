/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/minimist/index.d.ts:

/**
 * Return an argument object populated with the array arguments from args
 * 
 * Return an argument object populated with the array arguments from args. Strongly-typed
 * to be the intersect of type T with minimist.ParsedArgs.
 * 
 * Return an argument object populated with the array arguments from args. Strongly-typed
 * to be the the type T which should extend minimist.ParsedArgs
 * 
 * @template T
 * @param {!Array<string>=} args An optional argument array (typically `process.argv.slice(2)`)
 * @param {!minimist.Opts=} opts An optional options object to customize the parsing
 * @return {!minimist.ParsedArgs|?|T}
 */
function minimist(args, opts) {}
/**
 * @record
 * @struct
 */
minimist.Opts = function() {};
 /** @type {(string|!Array<string>)} */
minimist.Opts.prototype.string;
 /** @type {(string|boolean|!Array<string>)} */
minimist.Opts.prototype.boolean;
 /** @type {!Object<string,(string|!Array<string>)>} */
minimist.Opts.prototype.alias;
 /** @type {!Object<string,?>} */
minimist.Opts.prototype.default;
 /** @type {boolean} */
minimist.Opts.prototype.stopEarly;
 /** @type {function(string): boolean} */
minimist.Opts.prototype.unknown;

/* TODO: PropertySignature: minimist.'--' */
/**
 * @record
 * @struct
 */
minimist.ParsedArgs = function() {};

/* TODO: IndexSignature: minimist */

/* TODO: PropertySignature: minimist.'--' */
 /** @type {!Array<string>} */
minimist.ParsedArgs.prototype._;

/* TODO: ExportAssignment in  */
