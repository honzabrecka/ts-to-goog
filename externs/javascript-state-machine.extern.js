/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/javascript-state-machine/index.d.ts:

/** @typedef {?} */
var StateMachineErrorCallback;
/**
 * @record
 * @struct
 */
function StateMachineEventDef() {}
 /** @type {string} */
StateMachineEventDef.prototype.name;
 /** @type {?} */
StateMachineEventDef.prototype.from;
 /** @type {string} */
StateMachineEventDef.prototype.to;

/** @typedef {?} */
var StateMachineEvent;
/**
 * @record
 * @struct
 */
function StateMachineConfig() {}
 /** @type {?} */
StateMachineConfig.prototype.initial;
 /** @type {!Array<?>} */
StateMachineConfig.prototype.events;
 /** @type {?} */
StateMachineConfig.prototype.callbacks;
 /** @type {?} */
StateMachineConfig.prototype.target;
 /** @type {?} */
StateMachineConfig.prototype.error;

/** @typedef {?} */
var StateMachineIsFinished;
 /** @type {string} */
var VERSION;
 /** @type {string} */
var WILDCARD;
 /** @type {string} */
var ASYNC;
 /** @type {?} */
var Result;
 /** @type {?} */
var Error;

/**
 * @param {?} config
 * @param {?=} target
 * @return {?}
 */
function create(config, target) {}
/**
 * @record
 * @struct
 */
function StateMachineTransition() {}

/* TODO: CallSignature:  */

/**
 * @return {void}
 */
StateMachineTransition.prototype.cancel = function() {};

/** @typedef {?} */
var StateMachineIs;

/** @typedef {?} */
var StateMachineCan;

/** @typedef {?} */
var StateMachineTransitions;
/**
 * @record
 * @struct
 */
function StateMachine() {}
 /** @type {string} */
StateMachine.prototype.current;
 /** @type {?} */
StateMachine.prototype.is;
 /** @type {?} */
StateMachine.prototype.can;
 /** @type {?} */
StateMachine.prototype.cannot;
 /** @type {?} */
StateMachine.prototype.error;
 /** @type {?} */
StateMachine.prototype.isFinished;
 /** @type {?} */
StateMachine.prototype.transition;
 /** @type {?} */
StateMachine.prototype.transitions;
 /** @type {string} */
StateMachine.VERSION;
 /** @type {string} */
StateMachine.WILDCARD;
 /** @type {string} */
StateMachine.ASYNC;
 /** @type {?} */
StateMachine.Result;
 /** @type {?} */
StateMachine.Error;

/**
 * @param {?} config
 * @param {?=} target
 * @return {?}
 */
StateMachine.create = function(config, target) {};

/* TODO: NamespaceExportDeclaration in  */
