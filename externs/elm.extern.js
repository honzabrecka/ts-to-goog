/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/elm/index.d.ts:
 /** @type {?} */
var Elm;

/**
 * @template P
 * @param {!ElmModule<P>} elmModule
 * @param {!Node} element
 * @param {!Object=} initialValues
 * @return {!ElmComponent<P>}
 */
Elm.prototype.embed = function(elmModule, element, initialValues) {};

/**
 * @template P
 * @param {!ElmModule<P>} elmModule
 * @param {!Object=} initialValues
 * @return {!ElmComponent<P>}
 */
Elm.prototype.fullscreen = function(elmModule, initialValues) {};

/**
 * @template P
 * @param {!ElmModule<P>} elmModule
 * @param {!Object=} initialValues
 * @return {!ElmComponent<P>}
 */
Elm.prototype.worker = function(elmModule, initialValues) {};
/**
 * @record
 * @struct
 */
function ElmModule() {}
/**
 * @record
 * @struct
 */
function ElmComponent() {}
 /** @type {P} */
ElmComponent.prototype.ports;
/**
 * @record
 * @struct
 */
function PortToElm() {}

/**
 * @param {V} value
 * @return {void}
 */
PortToElm.prototype.send = function(value) {};
/**
 * @record
 * @struct
 */
function PortFromElm() {}

/**
 * @param {function(V): void} handler
 * @return {void}
 */
PortFromElm.prototype.subscribe = function(handler) {};

/**
 * @param {function(V): void} handler
 * @return {void}
 */
PortFromElm.prototype.unsubscribe = function(handler) {};
