/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/siesta/index.d.ts:
/** @const */
var Siesta = {};
/**
 * @record
 * @struct
 */
Siesta.IHarness = function() {};
 /** @type {!Array<?>} */
Siesta.IHarness.prototype.alsoPreload;
 /** @type {boolean} */
Siesta.IHarness.prototype.autoCheckGlobals;
 /** @type {boolean} */
Siesta.IHarness.prototype.cachePreload;
 /** @type {boolean} */
Siesta.IHarness.prototype.defaultTimeout;
 /** @type {boolean} */
Siesta.IHarness.prototype.disableColoring;
 /** @type {!Array<string>} */
Siesta.IHarness.prototype.expectedGlobals;
 /** @type {number} */
Siesta.IHarness.prototype.isReadyTimeout;
 /** @type {number} */
Siesta.IHarness.prototype.keepNLastResults;
 /** @type {boolean} */
Siesta.IHarness.prototype.keepResults;
 /** @type {!Object<string,function(!Event, !Array<?>): void>} */
Siesta.IHarness.prototype.listenters;
 /** @type {number} */
Siesta.IHarness.prototype.maxThreads;
 /** @type {boolean} */
Siesta.IHarness.prototype.needDone;
 /** @type {boolean} */
Siesta.IHarness.prototype.overrideSetTimeout;
 /** @type {number} */
Siesta.IHarness.prototype.pauseBetweenTests;
 /** @type {!Array<?>} */
Siesta.IHarness.prototype.preload;
 /** @type {string} */
Siesta.IHarness.prototype.runCore;
 /** @type {number} */
Siesta.IHarness.prototype.subTestTimeout;
 /** @type {!Siesta.ITest} */
Siesta.IHarness.prototype.testClass;
 /** @type {string} */
Siesta.IHarness.prototype.title;
 /** @type {boolean} */
Siesta.IHarness.prototype.transparentEx;
 /** @type {number} */
Siesta.IHarness.prototype.waitForTimeout;

/**
 * @param {?} config
 * @return {void}
 */
Siesta.IHarness.prototype.configure = function(config) {};

/**
 * @param {...?} descriptors
 * @return {void}
 */
Siesta.IHarness.prototype.start = function(descriptors) {};
/** @const */
Siesta.Harness = {};
/**
 * @record
 * @struct
 */
Siesta.Harness.ITestGroupDescriptor = function() {};
 /** @type {string} */
Siesta.Harness.ITestGroupDescriptor.prototype.group;
 /** @type {!Array<?>} */
Siesta.Harness.ITestGroupDescriptor.prototype.items;
/**
 * @record
 * @struct
 */
Siesta.Harness.ITestUrlDescriptor = function() {};
 /** @type {string} */
Siesta.Harness.ITestUrlDescriptor.prototype.url;
/**
 * @record
 * @struct
 */
Siesta.Harness.IPreloadUrlDescriptor = function() {};
 /** @type {string} */
Siesta.Harness.IPreloadUrlDescriptor.prototype.type;
 /** @type {string} */
Siesta.Harness.IPreloadUrlDescriptor.prototype.url;
/**
 * @record
 * @struct
 */
Siesta.Harness.IPreloadContentDescriptor = function() {};
 /** @type {string} */
Siesta.Harness.IPreloadContentDescriptor.prototype.type;
 /** @type {string} */
Siesta.Harness.IPreloadContentDescriptor.prototype.content;
/**
 * @record
 * @struct
 */
Siesta.Harness.IPreloadTextDescriptor = function() {};
 /** @type {string} */
Siesta.Harness.IPreloadTextDescriptor.prototype.text;
/**
 * @extends {Siesta.IHarness}
 * @record
 * @struct
 */
Siesta.Harness.IBrowser = function() {};
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.autoRun;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.autoScrollElementsIntoView;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.breakOnFail;
 /** @type {string} */
Siesta.Harness.IBrowser.prototype.coverageUnit;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.disableCaching;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.enableCodeCoverage;
 /** @type {!RegExp} */
Siesta.Harness.IBrowser.prototype.excludeCoverageUnits;
 /** @type {string} */
Siesta.Harness.IBrowser.prototype.hostPageUrl;
 /** @type {!RegExp} */
Siesta.Harness.IBrowser.prototype.includeCoverageUnits;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.maintainViewportSize;
 /** @type {string} */
Siesta.Harness.IBrowser.prototype.runCore;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.separateContext;
 /** @type {string} */
Siesta.Harness.IBrowser.prototype.simulateEventsWith;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.speedRun;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.useStrictMode;
 /** @type {boolean} */
Siesta.Harness.IBrowser.prototype.viewDOM;
 /** @type {number} */
Siesta.Harness.IBrowser.prototype.viewportHeight;
 /** @type {number} */
Siesta.Harness.IBrowser.prototype.viewportWidth;
/**
 * @record
 * @struct
 */
Siesta.Harness.IBrowserExtJSCore = function() {};
 /** @type {string} */
Siesta.Harness.IBrowserExtJSCore.prototype.coverageUnit;
 /** @type {!RegExp} */
Siesta.Harness.IBrowserExtJSCore.prototype.excludeCoverageUnits;
 /** @type {boolean} */
Siesta.Harness.IBrowserExtJSCore.prototype.installLoaderInstrumentationHook;
/**
 * @extends {Siesta.Harness.IBrowser}
 * @extends {Siesta.Harness.IBrowserExtJSCore}
 * @record
 * @struct
 */
Siesta.Harness.IBrowserExtJS = function() {};
 /** @type {boolean} */
Siesta.Harness.IBrowserExtJS.prototype.allowExtVersionChange;
 /** @type {?} */
Siesta.Harness.IBrowserExtJS.prototype.loaderPath;
 /** @type {?} */
Siesta.Harness.IBrowserExtJS.prototype.waitForAppReady;
 /** @type {?} */
Siesta.Harness.IBrowserExtJS.prototype.waitForExtReady;
/**
 * @extends {Siesta.Harness.IBrowser}
 * @extends {Siesta.Harness.IBrowserExtJSCore}
 * @record
 * @struct
 */
Siesta.Harness.IBrowserSenchaTouch = function() {};
 /** @type {?} */
Siesta.Harness.IBrowserSenchaTouch.prototype.loaderPath;
 /** @type {boolean} */
Siesta.Harness.IBrowserSenchaTouch.prototype.performSetup;
 /** @type {string} */
Siesta.Harness.IBrowserSenchaTouch.prototype.runCore;
 /** @type {boolean} */
Siesta.Harness.IBrowserSenchaTouch.prototype.transparentEx;
/**
 * @extends {Siesta.Harness.IBrowser}
 * @record
 * @struct
 */
Siesta.Harness.IBrowserSingleton = function() {};
 /** @type {!Siesta.Harness.IBrowserExtJS} */
Siesta.Harness.IBrowserSingleton.prototype.ExtJS;
 /** @type {!Siesta.Harness.IBrowserSenchaTouch} */
Siesta.Harness.IBrowserSingleton.prototype.SenchaTouch;
/**
 * @extends {Siesta.IHarness}
 * @record
 * @struct
 */
Siesta.Harness.IHarnessNodeJS = function() {};
 /** @type {!Siesta.Harness.IBrowserSingleton} */
Siesta.Harness.Browser;
 /** @type {!Siesta.Harness.IHarnessNodeJS} */
Siesta.Harness.NodeJS;
/**
 * @extends {Siesta.Test.IBDD}
 * @extends {Siesta.Test.IDate}
 * @extends {Siesta.Test.IFunction}
 * @extends {Siesta.Test.IMore}
 * @record
 * @struct
 */
Siesta.ITest = function() {};
 /** @type {number} */
Siesta.ITest.prototype.isReadyTimeout;

/**
 * @param {number} time
 * @param {!Function} errback
 * @return {?}
 */
Siesta.ITest.prototype.beginAsync = function(time, errback) {};

/**
 * @param {?} obj1
 * @param {?} obj2
 * @param {boolean=} strict
 * @param {boolean=} onlyPrimitives
 * @param {boolean=} asObjects
 * @return {boolean}
 */
Siesta.ITest.prototype.compareObjects = function(obj1, obj2, strict, onlyPrimitives, asObjects) {};

/**
 * @param {string} desc
 * @return {void}
 */
Siesta.ITest.prototype.diag = function(desc) {};

/**
 * @param {number} delay
 * @return {void}
 */
Siesta.ITest.prototype.done = function(delay) {};

/**
 * @param {?} frame
 * @return {void}
 */
Siesta.ITest.prototype.endAsync = function(frame) {};

/**
 * @param {string} title
 * @return {void}
 */
Siesta.ITest.prototype.endWait = function(title) {};

/**
 * @param {string} desc
 * @param {?} annotation
 * @return {void}
 */
Siesta.ITest.prototype.fail = function(desc, annotation) {};

/**
 * @param {string} name
 * @param {function(!Siesta.ITest): void} code
 * @param {number=} timeout
 * @return {!Siesta.ITest}
 */
Siesta.ITest.prototype.getSubTest = function(name, code, timeout) {};

/**
 * @param {?} got
 * @param {?} expected
 * @param {string} desc
 * @return {void}
 */
Siesta.ITest.prototype.is = function(got, expected, desc) {};

/**
 * @param {?} got
 * @param {?} expected
 * @param {string} desc
 * @return {void}
 */
Siesta.ITest.prototype.isNot = function(got, expected, desc) {};

/**
 * @param {?} got
 * @param {?} expected
 * @param {string} desc
 * @return {void}
 */
Siesta.ITest.prototype.isNotStrict = function(got, expected, desc) {};

/**
 * @return {?}
 */
Siesta.ITest.prototype.isReady = function() {};

/**
 * @param {?} got
 * @param {?} expected
 * @param {string} desc
 * @return {void}
 */
Siesta.ITest.prototype.isStrict = function(got, expected, desc) {};

/**
 * @param {!Siesta.ITest} subTest
 * @param {!Function} callback
 * @return {void}
 */
Siesta.ITest.prototype.launchSubTest = function(subTest, callback) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.ITest.prototype.notOk = function(value, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.ITest.prototype.ok = function(value, desc) {};

/**
 * @param {string} desc
 * @param {?} annotation
 * @return {void}
 */
Siesta.ITest.prototype.pass = function(desc, annotation) {};

/**
 * @param {string} desc
 * @param {function(!Siesta.ITest): void} code
 * @param {!Function} callback
 * @param {number=} timeout
 * @return {void}
 */
Siesta.ITest.prototype.subTest = function(desc, code, callback, timeout) {};

/**
 * @param {string} why
 * @param {!Function} code
 * @return {void}
 */
Siesta.ITest.prototype.todo = function(why, code) {};

/**
 * @param {?} object
 * @return {string}
 */
Siesta.ITest.prototype.typeOf = function(object) {};

/**
 * @param {string} title
 * @param {number} howLong
 * @return {void}
 */
Siesta.ITest.prototype.wait = function(title, howLong) {};
/** @const */
Siesta.Test = {};
/**
 * @record
 * @struct
 */
Siesta.Test.IActionCall = function() {};

/* TODO: CallSignature: Siesta.Test */
/**
 * @extends {Siesta.Test.IActionCall}
 * @extends {Siesta.Test.IAction}
 * @record
 * @struct
 */
Siesta.Test.IActionConfig = function() {};
 /** @type {!Siesta.Test.IActionCall} */
Siesta.Test.IActionConfig.prototype.action;
 /** @type {number} */
Siesta.Test.IActionConfig.prototype.timeout;
/**
 * @record
 * @struct
 */
Siesta.Test.IAction = function() {};
 /** @type {string} */
Siesta.Test.IAction.prototype.desc;
/** @const */
Siesta.Test.Action = {};
/** @const */
Siesta.Test.Action.Role = {};
/**
 * @record
 * @struct
 */
Siesta.Test.Action.Role.IHasTarget = function() {};
 /** @type {boolean} */
Siesta.Test.Action.Role.IHasTarget.prototype.passTargetToNext;
 /** @type {?} */
Siesta.Test.Action.Role.IHasTarget.prototype.target;
 /** @type {?} */
Siesta.Test.Action.Role.IHasTarget.prototype.el;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.Click = function() {};
 /** @type {?} */
Siesta.Test.Action.Click.prototype.options;
/**
 * @extends {Siesta.Test.IAction}
 * @record
 * @struct
 */
Siesta.Test.Action.Done = function() {};
 /** @type {number} */
Siesta.Test.Action.Done.prototype.delay;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.DoubleClick = function() {};
 /** @type {?} */
Siesta.Test.Action.DoubleClick.prototype.options;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.DoubleTap = function() {};
/**
 * @extends {Siesta.Test.IAction}
 * @record
 * @struct
 */
Siesta.Test.Action.Drag = function() {};
 /** @type {?} */
Siesta.Test.Action.Drag.prototype.by;
 /** @type {boolean} */
Siesta.Test.Action.Drag.prototype.dragOnly;
 /** @type {?} */
Siesta.Test.Action.Drag.prototype.source;
 /** @type {?} */
Siesta.Test.Action.Drag.prototype.target;
 /** @type {?} */
Siesta.Test.Action.Drag.prototype.to;
/**
 * @extends {Siesta.Test.IAction}
 * @record
 * @struct
 */
Siesta.Test.Action.Eval = function() {};
 /** @type {?} */
Siesta.Test.Action.Eval.prototype.options;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.LongPress = function() {};
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.MouseDown = function() {};
 /** @type {?} */
Siesta.Test.Action.MouseDown.prototype.options;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.MouseUp = function() {};
 /** @type {?} */
Siesta.Test.Action.MouseUp.prototype.options;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.MoveCursor = function() {};
 /** @type {?} */
Siesta.Test.Action.MoveCursor.prototype.by;
 /** @type {?} */
Siesta.Test.Action.MoveCursor.prototype.to;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.MoveCursorTo = function() {};
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.RightClick = function() {};
 /** @type {?} */
Siesta.Test.Action.RightClick.prototype.options;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.Swipe = function() {};
 /** @type {string} */
Siesta.Test.Action.Swipe.prototype.direction;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.Tap = function() {};
 /** @type {?} */
Siesta.Test.Action.Tap.prototype.options;
 /** @type {string} */
Siesta.Test.Action.Tap.prototype.text;
/**
 * @extends {Siesta.Test.IAction}
 * @extends {Siesta.Test.Action.Role.IHasTarget}
 * @record
 * @struct
 */
Siesta.Test.Action.Type = function() {};
/**
 * @extends {Siesta.Test.IAction}
 * @record
 * @struct
 */
Siesta.Test.Action.Wait = function() {};
 /** @type {!Array<?>} */
Siesta.Test.Action.Wait.prototype.args;
 /** @type {number} */
Siesta.Test.Action.Wait.prototype.delay;
 /** @type {number} */
Siesta.Test.Action.Wait.prototype.timeout;
 /** @type {string} */
Siesta.Test.Action.Wait.prototype.waitFor;
/**
 * @record
 * @struct
 */
Siesta.Test.IBDD = function() {};

/**
 * @param {!Function} clsConstructor
 * @return {?}
 */
Siesta.Test.IBDD.prototype.any = function(clsConstructor) {};

/**
 * @param {string} name
 * @param {!Function} code
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IBDD.prototype.ddescribe = function(name, code, timeout) {};

/**
 * @param {string} name
 * @param {!Function} code
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IBDD.prototype.describe = function(name, code, timeout) {};

/**
 * @param {?} value
 * @return {!Siesta.Test.BDD.Expectation}
 */
Siesta.Test.IBDD.prototype.expect = function(value) {};

/**
 * @param {string} name
 * @param {!Function} code
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IBDD.prototype.iit = function(name, code, timeout) {};

/**
 * @param {string} name
 * @param {!Function} code
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IBDD.prototype.it = function(name, code, timeout) {};

/**
 * @param {string} name
 * @param {!Function} code
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IBDD.prototype.xdescribe = function(name, code, timeout) {};

/**
 * @param {string} name
 * @param {!Function} code
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IBDD.prototype.xit = function(name, code, timeout) {};
/** @const */
Siesta.Test.BDD = {};
/**
 * @record
 * @struct
 */
Siesta.Test.BDD.Expectation = function() {};
 /** @type {!Siesta.Test.BDD.Expectation} */
Siesta.Test.BDD.Expectation.prototype.not;

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBe = function(expectedValue) {};

/**
 * @param {number} expectedValue
 * @param {number=} precision
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeCloseTo = function(expectedValue, precision) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeDefined = function(expectedValue) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeFalsy = function(expectedValue) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeGreaterThan = function(expectedValue) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeLessThan = function(expectedValue) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeNaN = function(expectedValue) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeNull = function(expectedValue) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeTruthy = function(expectedValue) {};

/**
 * @param {?} value
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toBeUndefined = function(value) {};

/**
 * @param {?} element
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toContain = function(element) {};

/**
 * @param {?} expectedValue
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toEqual = function(expectedValue) {};

/**
 * @param {!RegExp} regexp
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toMatch = function(regexp) {};

/**
 * @return {void}
 */
Siesta.Test.BDD.Expectation.prototype.toThrow = function() {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSAjax = function() {};

/**
 * @param {string} url
 * @param {!Function} callback
 * @param {?} scope
 * @return {void}
 */
Siesta.Test.IExtJSAjax.prototype.ajaxRequestAndThen = function(url, callback, scope) {};

/**
 * @param {?=} object
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSAjax.prototype.isAjaxLoading = function(object, description) {};

/**
 * @param {!Function|?} callback_or_object
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSAjax.prototype.waitForAjaxRequest = function(callback_or_object, scope_or_callback, timeout_or_scope, timeout) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSComponent = function() {};

/**
 * @param {?} components
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.destroysOk = function(components, description) {};

/**
 * @param {?} component
 * @param {number} x
 * @param {number} y
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.hasPosition = function(component, x, y, description) {};

/**
 * @param {?} component
 * @param {number} width
 * @param {number} height
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.hasSize = function(component, width, height, description) {};

/**
 * @param {string} query
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForCQ = function(query, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForCQNotFound = function(query, callback, scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForCQNotVisible = function(query, callback, scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForCQVisible = function(query, callback, scope, timeout) {};

/**
 * @param {string} component
 * @param {boolean} rendered
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForComponent = function(component, rendered, callback, scope, timeout) {};

/**
 * @param {?} component
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForComponentNotVisible = function(component, callback, scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForComponentQuery = function(query, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForComponentQueryNotFound = function(query, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForComponentQueryNotVisible = function(query, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForComponentQueryVisible = function(query, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {?} component
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForComponentVisible = function(component, callback, scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForCompositeQuery = function(query, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {string} query
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForCompositeQueryNotFound = function(query, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {string} xtype
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSComponent.prototype.waitForXType = function(xtype, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSDataView = function() {};

/**
 * @param {?} view
 * @return {?}
 */
Siesta.Test.IExtJSDataView.prototype.getFirstItem = function(view) {};

/**
 * @param {?} view
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSDataView.prototype.waitForViewRendered = function(view, callback, scope, timeout) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSElement = function() {};

/**
 * @param {?} el
 * @param {?} region
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSElement.prototype.hasRegion = function(el, region, description) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSFormField = function() {};

/**
 * @param {?} field
 * @param {?} value
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSFormField.prototype.fieldHasValue = function(field, value, description) {};

/**
 * @param {?} field
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSFormField.prototype.isFieldEmpty = function(field, description) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSGrid = function() {};

/**
 * @param {?} panel
 * @param {number} row
 * @param {number} column
 * @return {!HTMLElement}
 */
Siesta.Test.IExtJSGrid.prototype.getCell = function(panel, row, column) {};

/**
 * @param {?} panel
 * @return {!HTMLElement}
 */
Siesta.Test.IExtJSGrid.prototype.getFirstCell = function(panel) {};

/**
 * @param {?} panel
 * @return {?}
 */
Siesta.Test.IExtJSGrid.prototype.getFirstRow = function(panel) {};

/**
 * @param {?} panel
 * @param {number} row
 * @return {!HTMLElement}
 */
Siesta.Test.IExtJSGrid.prototype.getLastCellInRow = function(panel, row) {};

/**
 * @param {?} panel
 * @param {number} index
 * @return {?}
 */
Siesta.Test.IExtJSGrid.prototype.getRow = function(panel, index) {};

/**
 * @param {?} panel
 * @param {number} row
 * @param {number} column
 * @param {!RegExp|string} string
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSGrid.prototype.matchGridCellContent = function(panel, row, column, string, description) {};

/**
 * @param {?} panel
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSGrid.prototype.waitForRowsVisible = function(panel, callback, scope, timeout) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSObservable = function() {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {number} n
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IExtJSObservable.prototype.firesAtLeastNTimes = function(observable, event, n, desc) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IExtJSObservable.prototype.firesOnce = function(observable, event, desc) {};

/**
 * @param {?} observable
 * @param {string} eventName
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSObservable.prototype.hasListener = function(observable, eventName, description) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {!Function} checkerFn
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IExtJSObservable.prototype.isFiredWithSignature = function(observable, event, checkerFn, desc) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IExtJSObservable.prototype.waitForEvent = function(observable, event, callback, scope, timeout) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IExtJSObservable.prototype.wontFire = function(observable, event, desc) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSStore = function() {};

/**
 * @param {?} store
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IExtJSStore.prototype.isStoreEmpty = function(store, description) {};

/**
 * @param {...?} args
 * @return {void}
 */
Siesta.Test.IExtJSStore.prototype.loadStoresAndThen = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
Siesta.Test.IExtJSStore.prototype.waitForStoresToLoad = function(args) {};
/**
 * @extends {Siesta.Test.Browser}
 * @extends {Siesta.Test.IExtJSAjax}
 * @extends {Siesta.Test.IExtJSComponent}
 * @extends {Siesta.Test.IExtJSDataView}
 * @extends {Siesta.Test.IExtJSElement}
 * @extends {Siesta.Test.IExtJSFormField}
 * @extends {Siesta.Test.IExtJSGrid}
 * @extends {Siesta.Test.IExtJSObservable}
 * @extends {Siesta.Test.IExtJSStore}
 * @extends {Siesta.Test.IExtJSCore}
 * @record
 * @struct
 */
Siesta.Test.ExtJS = function() {};

/**
 * @param {number} maxNumber
 * @param {?=} description
 * @return {void}
 */
Siesta.Test.ExtJS.prototype.assertMaxNumberOfGlobalExtOverrides = function(maxNumber, description) {};

/**
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.ExtJS.prototype.assertNoGlobalExtOverrides = function(description) {};

/**
 * @param {!Function} fn
 * @param {?} scope
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.ExtJS.prototype.assertNoLayoutTriggered = function(fn, scope, description) {};

/**
 * @return {number}
 */
Siesta.Test.ExtJS.prototype.getTotalLayoutCounter = function() {};

/**
 * @param {!Function} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.ExtJS.prototype.waitForPageLoad = function(callback, scope) {};
/** @const */
Siesta.Test.Simulate = {};
/**
 * @record
 * @struct
 */
Siesta.Test.Simulate.IEvent = function() {};
 /** @type {string} */
Siesta.Test.Simulate.IEvent.prototype.simulateEventsWith;

/**
 * @param {?} el
 * @param {string} type
 * @param {?=} the
 * @param {boolean=} suppressLog
 * @return {void}
 */
Siesta.Test.Simulate.IEvent.prototype.simulateEvent = function(el, type, the, suppressLog) {};
/**
 * @record
 * @struct
 */
Siesta.Test.Simulate.IKeyboard = function() {};

/**
 * @param {?} el
 * @param {string} key
 * @param {?} options
 * @return {void}
 */
Siesta.Test.Simulate.IKeyboard.prototype.keyPress = function(el, key, options) {};

/**
 * @param {?} el
 * @param {string} text
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {?=} options
 * @return {void}
 */
Siesta.Test.Simulate.IKeyboard.prototype.type = function(el, text, callback, scope, options) {};
 /** @type {{: number, BACKSPACE: number, 	: number, TAB: number, : number, RETURN: number, ENTER: number, SHIFT: number, CTRL: number, ALT: number, PAUSE-BREAK: number, CAPS: number, ESCAPE: number, NUM-LOCK: number, SCROLL-LOCK: number, PRINT: number, PAGE-UP: number, PAGE-DOWN: number, END: number, HOME: number, LEFT: number, UP: number, RIGHT: number, DOWN: number, INSERT: number, DELETE: number,  : number, 0: number, 1: number, 2: number, 3: number, 4: number, 5: number, 6: number, 7: number, 8: number, 9: number, A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number, I: number, J: number, K: number, L: number, M: number, N: number, O: number, P: number, Q: number, R: number, S: number, T: number, U: number, V: number, W: number, X: number, Y: number, Z: number, NUM0: number, NUM1: number, NUM2: number, NUM3: number, NUM4: number, NUM5: number, NUM6: number, NUM7: number, NUM8: number, NUM9: number, NUM*: number, NUM+: number, ;: number, =: number, ,: number, -: number, .: number, /: number, `: number, [: number, \: number, ]: number, ': number, F1: number, F2: number, F3: number, F4: number, F5: number, F6: number, F7: number, F8: number, F9: number, F10: number, F11: number, F12: number}} */
Siesta.Test.Simulate.KeyCodes;
/**
 * @record
 * @struct
 */
Siesta.Test.Simulate.IMouse = function() {};
 /** @type {number} */
Siesta.Test.Simulate.IMouse.prototype.dragDelay;
 /** @type {number} */
Siesta.Test.Simulate.IMouse.prototype.dragPrecision;
 /** @type {boolean} */
Siesta.Test.Simulate.IMouse.prototype.moveCursorBetweenPoints;

/**
 * @param {?|!Function=} el_or_callback
 * @param {!Function|?=} callback_or_scope
 * @param {?=} scope_or_options
 * @param {?=} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.click = function(el_or_callback, callback_or_scope, scope_or_options, options) {};

/**
 * @param {?|!Function=} el_or_callback
 * @param {!Function|?=} callback_or_scope
 * @param {?=} scope_or_options
 * @param {?=} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.doubleClick = function(el_or_callback, callback_or_scope, scope_or_options, options) {};

/**
 * @param {?} source
 * @param {?=} target
 * @param {!Array<number>=} delta
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {?=} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.drag = function(source, target, delta, callback, scope, options) {};

/**
 * @param {?} source
 * @param {!Array<number>} delta
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {?=} options
 * @param {boolean=} dragOnly
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.dragBy = function(source, delta, callback, scope, options, dragOnly) {};

/**
 * @param {?} source
 * @param {?} target
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {?=} options
 * @param {boolean=} dragOnly
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.dragTo = function(source, target, callback, scope, options, dragOnly) {};

/**
 * @param {?} el
 * @param {?} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.mouseDown = function(el, options) {};

/**
 * @param {?} el
 * @param {?} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.mouseOut = function(el, options) {};

/**
 * @param {?} el
 * @param {?} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.mouseOver = function(el, options) {};

/**
 * @param {?} el
 * @param {?} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.mouseUp = function(el, options) {};

/**
 * @param {!Array<number>} delta
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.moveCursorBy = function(delta, callback, scope) {};

/**
 * @param {?=} target
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.moveCursorTo = function(target, callback, scope) {};

/**
 * @param {!Array<number>} delta
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.moveMouseBy = function(delta, callback, scope) {};

/**
 * @param {?=} target
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.moveMouseTo = function(target, callback, scope) {};

/**
 * @param {?|!Function=} el_or_callback
 * @param {!Function|?=} callback_or_scope
 * @param {?=} scope_or_options
 * @param {?=} options
 * @return {void}
 */
Siesta.Test.Simulate.IMouse.prototype.rightClick = function(el_or_callback, callback_or_scope, scope_or_options, options) {};
/**
 * @extends {Siesta.ITest}
 * @extends {Siesta.Test.Simulate.IEvent}
 * @extends {Siesta.Test.Simulate.IKeyboard}
 * @extends {Siesta.Test.Simulate.IMouse}
 * @extends {Siesta.Test.IElement}
 * @extends {Siesta.Test.ITextSelection}
 * @record
 * @struct
 */
Siesta.Test.Browser = function() {};

/**
 * @param {number} timeoutId
 * @return {void}
 */
Siesta.Test.Browser.prototype.clearTimeout = function(timeoutId) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {boolean=} shallow
 * @return {!HTMLElement}
 */
Siesta.Test.Browser.prototype.elementFromPoint = function(x, y, shallow) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {number} n
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.Browser.prototype.firesAtLeastNTimes = function(observable, event, n, desc) {};

/**
 * @param {?} options
 * @return {void}
 */
Siesta.Test.Browser.prototype.firesOk = function(options) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.Browser.prototype.firesOnce = function(observable, event, desc) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.Browser.prototype.isntFired = function(observable, event, desc) {};

/**
 * @param {!Function} func
 * @param {number} delay
 * @return {number}
 */
Siesta.Test.Browser.prototype.setTimeout = function(func, delay) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.Browser.prototype.waitForEvent = function(observable, event, callback, scope, timeout) {};

/**
 * @param {!Function} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.Browser.prototype.waitForPageLoad = function(callback, scope) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {number} n
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.Browser.prototype.willFireNTimes = function(observable, event, n, desc) {};

/**
 * @param {?} observable
 * @param {string} event
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.Browser.prototype.wontFire = function(observable, event, desc) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IDate = function() {};

/**
 * @param {!Date} got
 * @param {!Date} expectedDate
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IDate.prototype.isDateEqual = function(got, expectedDate, description) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IElement = function() {};

/**
 * @param {!Array<?>} elements
 * @param {!Function} callback
 * @return {void}
 */
Siesta.Test.IElement.prototype.chainClick = function(elements, callback) {};

/**
 * @param {string} selector
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.IElement.prototype.clickSelector = function(selector, callback_or_root, scope_or_callback, scope) {};

/**
 * @param {?} el
 * @param {string} text
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.contentLike = function(el, text, description) {};

/**
 * @param {?} el
 * @param {string} text
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.contentNotLike = function(el, text, description) {};

/**
 * @param {?} el
 * @param {!Array<number>} xy
 * @param {boolean} allowChildren
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.elementIsAt = function(el, xy, allowChildren, description) {};

/**
 * @param {?} el
 * @return {void}
 */
Siesta.Test.IElement.prototype.elementIsInView = function(el) {};

/**
 * @param {?} el
 * @param {boolean} allowChildren
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.elementIsNotTopElement = function(el, allowChildren, description) {};

/**
 * @param {?} el
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.elementIsNotVisible = function(el, description) {};

/**
 * @param {?} el
 * @param {boolean} allowChildren
 * @return {boolean}
 */
Siesta.Test.IElement.prototype.elementIsTop = function(el, allowChildren) {};

/**
 * @param {?} el
 * @param {boolean} allowChildren
 * @param {string=} description
 * @param {?=} strict
 * @return {void}
 */
Siesta.Test.IElement.prototype.elementIsTopElement = function(el, allowChildren, description, strict) {};

/**
 * @param {?} el
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.elementIsVisible = function(el, description) {};

/**
 * @param {?} el
 * @param {boolean=} local
 * @return {!Array<number>}
 */
Siesta.Test.IElement.prototype.findCenter = function(el, local) {};

/**
 * @param {?} el
 * @param {string} cls
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.hasCls = function(el, cls, description) {};

/**
 * @param {?} el
 * @param {string} cls
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.hasNotCls = function(el, cls, description) {};

/**
 * @param {?} el
 * @param {string} property
 * @param {string} value
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.hasNotStyle = function(el, property, value, description) {};

/**
 * @param {?} el
 * @param {string} property
 * @param {string} value
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.hasStyle = function(el, property, value, description) {};

/**
 * @param {?} el
 * @return {boolean}
 */
Siesta.Test.IElement.prototype.isElementVisible = function(el) {};

/**
 * @param {?} el
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.isInView = function(el, description) {};

/**
 * @param {?} el
 * @param {number} nbrInteractions
 * @param {string=} description
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.IElement.prototype.monkeyTest = function(el, nbrInteractions, description, callback, scope) {};

/**
 * @param {?} el
 * @param {number} newLeft
 * @param {number=} delay
 * @param {!Function=} callback
 * @return {number}
 */
Siesta.Test.IElement.prototype.scrollHorizontallyTo = function(el, newLeft, delay, callback) {};

/**
 * @param {?} el
 * @param {number} newTop
 * @param {number=} delay
 * @param {!Function=} callback
 * @return {number}
 */
Siesta.Test.IElement.prototype.scrollVerticallyTo = function(el, newTop, delay, callback) {};

/**
 * @param {string} selector
 * @param {number|?} count_or_root
 * @param {string|number} description_or_count
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.selectorCountIs = function(selector, count_or_root, description_or_count, description) {};

/**
 * @param {string} selector
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.selectorExists = function(selector, description) {};

/**
 * @param {string} selector
 * @param {!Array<number>} xy
 * @param {boolean} allowChildren
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.selectorIsAt = function(selector, xy, allowChildren, description) {};

/**
 * @param {string} selector
 * @param {string=} description
 * @return {void}
 */
Siesta.Test.IElement.prototype.selectorNotExists = function(selector, description) {};

/**
 * @param {?} el
 * @param {string} text
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForContentLike = function(el, text, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {string} text
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForContentNotLike = function(el, text, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForElementNotTop = function(el, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForElementNotVisible = function(el, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForElementTop = function(el, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForElementVisible = function(el, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {string} side
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForScrollChange = function(el, side, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForScrollLeftChange = function(el, callback, scope, timeout) {};

/**
 * @param {?} el
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForScrollTopChange = function(el, callback, scope, timeout) {};

/**
 * @param {string} selector
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForSelector = function(selector, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {!Array<number>} xy
 * @param {string} selector
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForSelectorAt = function(xy, selector, callback, scope, timeout) {};

/**
 * @param {!Array<number>} xy
 * @param {string} selector
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForSelectorAtCursor = function(xy, selector, callback, scope, timeout) {};

/**
 * @param {string} selector
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForSelectorNotFound = function(selector, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {!Array<string>} selectors
 * @param {!Function|?} callback_or_root
 * @param {?|!Function=} scope_or_callback
 * @param {number|?=} timeout_or_scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitForSelectors = function(selectors, callback_or_root, scope_or_callback, timeout_or_scope, timeout) {};

/**
 * @param {?} el
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.IElement.prototype.waitUntilInView = function(el, callback, scope, timeout) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IExtJSCore = function() {};

/**
 * @return {?}
 */
Siesta.Test.IExtJSCore.prototype.Ext = function() {};

/**
 * @param {string} selector
 * @param {?} root
 * @param {!Function} callback
 * @return {?}
 */
Siesta.Test.IExtJSCore.prototype.clickCQ = function(selector, root, callback) {};

/**
 * @param {string} selector
 * @param {?} root
 * @param {!Function} callback
 * @return {?}
 */
Siesta.Test.IExtJSCore.prototype.clickComponentQuery = function(selector, root, callback) {};

/**
 * @param {string} selector
 * @param {?} root
 * @param {boolean} allowEmpty
 * @return {!Array<!HTMLElement>}
 */
Siesta.Test.IExtJSCore.prototype.compositeQuery = function(selector, root, allowEmpty) {};

/**
 * @param {string} selector
 * @return {?}
 */
Siesta.Test.IExtJSCore.prototype.cq = function(selector) {};

/**
 * @param {string} selector
 * @return {?}
 */
Siesta.Test.IExtJSCore.prototype.cq1 = function(selector) {};

/**
 * @return {?}
 */
Siesta.Test.IExtJSCore.prototype.getExt = function() {};

/**
 * @param {string} frameworkVersion
 * @param {!Function} fn
 * @param {string} reason
 * @return {?}
 */
Siesta.Test.IExtJSCore.prototype.knownBugIn = function(frameworkVersion, fn, reason) {};

/**
 * @param {...?} args
 * @return {void}
 */
Siesta.Test.IExtJSCore.prototype.requireOk = function(args) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IFunction = function() {};

/**
 * @param {string|!Function} fn
 * @param {?} host
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IFunction.prototype.isCalled = function(fn, host, desc) {};

/**
 * @param {string|!Function} fn
 * @param {?} host
 * @param {number} n
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IFunction.prototype.isCalledNTimes = function(fn, host, n, desc) {};

/**
 * @param {string|!Function} fn
 * @param {?} host
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IFunction.prototype.isCalledOnce = function(fn, host, desc) {};

/**
 * @param {string|!Function} fn
 * @param {?} host
 * @param {number} n
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IFunction.prototype.isntCalled = function(fn, host, n, desc) {};

/**
 * @param {string|!Function} fn
 * @param {string|!Function} className
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IFunction.prototype.methodIsCalled = function(fn, className, desc) {};

/**
 * @param {string|!Function} fn
 * @param {string|!Function} className
 * @param {number} n
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IFunction.prototype.methodIsCalledNTimes = function(fn, className, n, desc) {};

/**
 * @param {string|!Function} fn
 * @param {string|!Function} className
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IFunction.prototype.methodIsntCalled = function(fn, className, desc) {};
/**
 * @extends {Siesta.Test.Browser}
 * @record
 * @struct
 */
Siesta.Test.jQuery = function() {};

/**
 * @return {?}
 */
Siesta.Test.jQuery.prototype.get$ = function() {};
/**
 * @record
 * @struct
 */
Siesta.Test.IWaitForConfig = function() {};
 /** @type {!Function} */
Siesta.Test.IWaitForConfig.prototype.method;
 /** @type {!Function} */
Siesta.Test.IWaitForConfig.prototype.callback;
 /** @type {?} */
Siesta.Test.IWaitForConfig.prototype.scope;
 /** @type {number} */
Siesta.Test.IWaitForConfig.prototype.timeout;
 /** @type {number} */
Siesta.Test.IWaitForConfig.prototype.interval;
/**
 * @record
 * @struct
 */
Siesta.Test.IWaitForReturn = function() {};
 /** @type {!Function} */
Siesta.Test.IWaitForReturn.prototype.force;
/**
 * @record
 * @struct
 */
Siesta.Test.IMore = function() {};
 /** @type {number} */
Siesta.Test.IMore.prototype.waitForTimeout;

/**
 * @param {...!Array<!Siesta.Test.IAction>|!Siesta.Test.IAction} steps_or_step
 * @return {void}
 */
Siesta.Test.IMore.prototype.chain = function(steps_or_step) {};

/**
 * @param {...?} names
 * @return {void}
 */
Siesta.Test.IMore.prototype.expectGlobals = function(names) {};

/**
 * @param {number} value1
 * @param {number} value2
 * @param {number} threshHold
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isApprox = function(value1, value2, threshHold, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isArray = function(value, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isBoolean = function(value, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isDate = function(value, desc) {};

/**
 * @param {?} obj1
 * @param {?} obj2
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isDeeply = function(obj1, obj2, desc) {};

/**
 * @param {?} obj1
 * @param {?} obj2
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isDeeplyStrict = function(obj1, obj2, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isFunction = function(value, desc) {};

/**
 * @param {?} value1
 * @param {?} value2
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isGreater = function(value1, value2, desc) {};

/**
 * @param {?} value1
 * @param {?} value2
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isGreaterOrEqual = function(value1, value2, desc) {};

/**
 * @param {?} value1
 * @param {?} value2
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isLess = function(value1, value2, desc) {};

/**
 * @param {?} value1
 * @param {?} value2
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isLessOrEqual = function(value1, value2, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isNumber = function(value, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isObject = function(value, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isRegExp = function(value, desc) {};

/**
 * @param {?} value
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isString = function(value, desc) {};

/**
 * @param {?} value
 * @param {string|!Function} className
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.isaOk = function(value, className, desc) {};

/**
 * @param {string} string
 * @param {string|!RegExp} regex
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.like = function(string, regex, desc) {};

/**
 * @param {!Function} func
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.livesOk = function(func, desc) {};

/**
 * @param {!Function} func
 * @param {string|!RegExp} expected
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.throwsOk = function(func, expected, desc) {};

/**
 * @param {string} string
 * @param {string|!RegExp} regex
 * @param {string} desc
 * @return {void}
 */
Siesta.Test.IMore.prototype.unlike = function(string, regex, desc) {};

/**
 * @param {...string} names
 * @return {void}
 */
Siesta.Test.IMore.prototype.verifyGlobals = function(names) {};

/**
 * @param {number|!Function|!Siesta.Test.IWaitForConfig} wait_or_method_or_config
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @param {number=} interval
 * @return {!Siesta.Test.IWaitForReturn}
 */
Siesta.Test.IMore.prototype.waitFor = function(wait_or_method_or_config, callback, scope, timeout, interval) {};
/**
 * @record
 * @struct
 */
Siesta.Test.IPositionConfig = function() {};
 /** @type {number} */
Siesta.Test.IPositionConfig.prototype.x;
 /** @type {number} */
Siesta.Test.IPositionConfig.prototype.y;
/**
 * @extends {Siesta.Test.Browser}
 * @extends {Siesta.Test.IExtJSComponent}
 * @extends {Siesta.Test.IExtJSElement}
 * @extends {Siesta.Test.IExtJSFormField}
 * @extends {Siesta.Test.IExtJSObservable}
 * @extends {Siesta.Test.IExtJSStore}
 * @extends {Siesta.Test.IExtJSCore}
 * @record
 * @struct
 */
Siesta.Test.SenchaTouch = function() {};

/**
 * @param {?} target
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {!Array<number>=} offset
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.doubleTap = function(target, callback, scope, offset) {};

/**
 * @param {?} target
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {!Array<number>=} offset
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.longpress = function(target, callback, scope, offset) {};

/**
 * @param {!Array<number>} delta
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.moveFingerBy = function(delta, callback, scope) {};

/**
 * @param {?} target
 * @param {!Function=} callback
 * @param {?=} scope
 * @param {!Array<number>=} offset
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.moveFingerTo = function(target, callback, scope, offset) {};

/**
 * @param {?} scrollable
 * @param {string} direction
 * @param {?} actionTarget
 * @param {!Function} callback
 * @param {?} scope
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.scrollUntilElementVisible = function(scrollable, direction, actionTarget, callback, scope) {};

/**
 * @param {?} target
 * @param {string} direction
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.swipe = function(target, direction, callback, scope) {};

/**
 * @param {?} target
 * @param {!Function=} callback
 * @param {?=} scope
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.tap = function(target, callback, scope) {};

/**
 * @param {?} scroller
 * @param {!Siesta.Test.IPositionConfig} position
 * @param {!Function} callback
 * @param {?=} scope
 * @param {number=} timeout
 * @return {void}
 */
Siesta.Test.SenchaTouch.prototype.waitForScrollerPosition = function(scroller, position, callback, scope, timeout) {};
/**
 * @record
 * @struct
 */
Siesta.Test.ITextSelection = function() {};

/**
 * @param {?} el
 * @return {string}
 */
Siesta.Test.ITextSelection.prototype.getSelectedText = function(el) {};

/**
 * @param {?} el
 * @param {number=} start
 * @param {number=} end
 * @return {void}
 */
Siesta.Test.ITextSelection.prototype.selectText = function(el, start, end) {};

/**
 * @param {function(!Siesta.ITest): void} testScript
 * @return {void}
 */
function StartTest(testScript) {}
 /** @type {function(function(!Siesta.ITest): void): void} */
var startTest;
 /** @type {function(function(!Siesta.ITest): void): void} */
var describe;
