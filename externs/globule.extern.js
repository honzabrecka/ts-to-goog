/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/globule/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/**
 * @extends {G.IOptions}
 * @record
 * @struct
 */
function FindOptions() {}
 /** @type {string} */
FindOptions.prototype.src;
 /** @type {(string|?)} */
FindOptions.prototype.filter;
 /** @type {boolean} */
FindOptions.prototype.nonull;
 /** @type {boolean} */
FindOptions.prototype.matchBase;
 /** @type {string} */
FindOptions.prototype.srcBase;
 /** @type {boolean} */
FindOptions.prototype.prefixBase;
/**
 * @extends {FindOptions}
 * @record
 * @struct
 */
function MappingOptions() {}
 /** @type {string} */
MappingOptions.prototype.srcBase;
 /** @type {string} */
MappingOptions.prototype.destBase;
 /** @type {string} */
MappingOptions.prototype.ext;
 /** @type {string} */
MappingOptions.prototype.extDot;
 /** @type {boolean} */
MappingOptions.prototype.flatten;

/**
 * @param {string} p
 * @return {string}
 */
MappingOptions.prototype.rename = function(p) {};
/**
 * @record
 * @struct
 */
function OneMapping() {}
 /** @type {!Array<string>} */
OneMapping.prototype.src;
 /** @type {string} */
OneMapping.prototype.dest;
/**
 * @record
 * @struct
 */
function GlobuleStatic() {}

/**
 * Match one or more globbing patterns against one or more file paths.
 * Returns a uniqued array of all file paths that match any of the specified globbing patterns.
 * @param {(string|!Array<string>)} patterns
 * @param {(string|!Array<string>)} filepaths
 * @param {!M.IOptions=} options
 * @return {!Array<string>}
 */
GlobuleStatic.prototype.match = function(patterns, filepaths, options) {};

/**
 * Tests pattern(s) against against one or more file paths and returns true if any files were matched, otherwise false.
 * @param {(string|!Array<string>)} patterns
 * @param {(string|!Array<string>)} filepaths
 * @param {!M.IOptions=} options
 * @return {boolean}
 */
GlobuleStatic.prototype.isMatch = function(patterns, filepaths, options) {};

/**
 * Returns a unique array of all file or directory paths that match the given globbing pattern(s)
 * Returns a unique array of all file or directory paths that match the given globbing pattern(s)
 * Returns a unique array of all file or directory paths that match the given globbing pattern(s)
 * Returns a unique array of all file or directory paths that match the given globbing pattern(s)
 * @param {(string|!Array<string>)|?|string} pattern_or_options
 * @param {?|(string|!Array<string>)|string=} options_or_pattern2
 * @param {?|(string|!Array<string>)=} options_or_pattern3
 * @param {?=} options
 * @return {!Array<string>}
 */
GlobuleStatic.prototype.find = function(pattern_or_options, options_or_pattern2, options_or_pattern3, options) {};

/**
 * Given a set of source file paths, returns an array of src-dest file mapping objects
 * Given a set of source file paths, returns an array of src-dest file mapping objects
 * Given a set of source file paths, returns an array of src-dest file mapping objects
 * Given a set of source file paths, returns an array of src-dest file mapping objects
 * @param {!Array<string>|?} filepaths_or_options
 * @param {?|!Array<string>=} options_or_filepaths2
 * @param {?|!Array<string>=} options_or_filepaths3
 * @param {?=} options
 * @return {!Array<?>}
 */
GlobuleStatic.prototype.mapping = function(filepaths_or_options, options_or_filepaths2, options_or_filepaths3, options) {};
 /** @type {?} */
var globule;

/* TODO: ExportAssignment in  */
