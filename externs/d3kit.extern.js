/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3kit/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {(string|!Element)} selector
 * @param {?=} options
 */
function AbstractChart(selector, options) {}
 /** @type {!Element} */
AbstractChart.prototype.container;

/**
 * @return {?}
 */
AbstractChart.getDefaultOptions = function() {};

/**
 * @return {!Array<string>}
 */
AbstractChart.getCustomEventNames = function() {};

/**
 * @param {!Array<string>=} customEventNames
 * @return {void}
 */
AbstractChart.prototype.setupDispatcher = function(customEventNames) {};

/**
 * @return {!Array<string>}
 */
AbstractChart.prototype.getCustomEventNames = function() {};

/**
 * @return {number}
 */
AbstractChart.prototype.getInnerWidth = function() {};

/**
 * @return {number}
 */
AbstractChart.prototype.getInnerHeight = function() {};

/**
 * @param {number=} value
 * @return {?|number}
 */
AbstractChart.prototype.width = function(value) {};

/**
 * @param {number=} value
 * @return {?|number}
 */
AbstractChart.prototype.height = function(value) {};

/**
 * @param {!Array<?>=} dimensions
 * @return {?|!Array<?>}
 */
AbstractChart.prototype.dimension = function(dimensions) {};

/**
 * @param {?=} data
 * @return {?}
 */
AbstractChart.prototype.data = function(data) {};

/**
 * @param {?=} margins
 * @return {?}
 */
AbstractChart.prototype.margin = function(margins) {};

/**
 * @param {!Array<?>=} offset
 * @return {?|!Array<?>}
 */
AbstractChart.prototype.offset = function(offset) {};

/**
 * @param {?=} options
 * @return {?}
 */
AbstractChart.prototype.options = function(options) {};

/**
 * @return {?}
 */
AbstractChart.prototype.updateDimensionNow = function() {};

/**
 * @return {boolean}
 */
AbstractChart.prototype.hasData = function() {};

/**
 * @return {boolean}
 */
AbstractChart.prototype.hasNonZeroArea = function() {};

/**
 * @param {?} fitOptions
 * @param {?=} watchOptions
 * @return {?}
 */
AbstractChart.prototype.fit = function(fitOptions, watchOptions) {};

/**
 * @return {?}
 */
AbstractChart.prototype.stopFitWatcher = function() {};

/**
 * @param {string} name
 * @param {?} listener
 * @return {?}
 */
AbstractChart.prototype.on = function(name, listener) {};

/**
 * @param {string} name
 * @return {?}
 */
AbstractChart.prototype.off = function(name) {};

/**
 * @return {void}
 */
AbstractChart.prototype.destroy = function() {};
/**
 * @record
 * @struct
 */
function ChartMargin() {}
 /** @type {number} */
ChartMargin.prototype.top;
 /** @type {number} */
ChartMargin.prototype.right;
 /** @type {number} */
ChartMargin.prototype.bottom;
 /** @type {number} */
ChartMargin.prototype.left;
/**
 * @record
 * @struct
 */
function ChartOptions() {}
 /** @type {number} */
ChartOptions.prototype.initialWidth;
 /** @type {number} */
ChartOptions.prototype.initialHeight;
 /** @type {?} */
ChartOptions.prototype.margin;
 /** @type {!Array<?>} */
ChartOptions.prototype.offset;
 /** @type {number} */
ChartOptions.prototype.pixelRatio;
/**
 * @record
 * @struct
 */
function FitOptions() {}
 /** @type {string} */
FitOptions.prototype.mode;
 /** @type {(string|number)} */
FitOptions.prototype.width;
 /** @type {(string|number)} */
FitOptions.prototype.height;
 /** @type {number} */
FitOptions.prototype.ratio;
 /** @type {(string|number)} */
FitOptions.prototype.maxWidth;
 /** @type {(string|number)} */
FitOptions.prototype.maxHeight;
/**
 * @record
 * @struct
 */
function WatchOptions() {}
 /** @type {string} */
WatchOptions.prototype.mode;
 /** @type {?} */
WatchOptions.prototype.target;
 /** @type {number} */
WatchOptions.prototype.interval;

/**
 * @constructor
 * @struct
 * @param {(string|!Element)} selector
 * @param {?=} options
 */
function SvgChart(selector, options) {}
 /** @type {!Selection<(!Element|?|!Document|!Window), ?, (!Element|?|!Document|!Window), ?>} */
SvgChart.prototype.svg;
 /** @type {!Selection<(!Element|?|!Document|!Window), ?, (!Element|?|!Document|!Window), ?>} */
SvgChart.prototype.rootG;
 /** @type {?} */
SvgChart.prototype.layers;

/**
 * @constructor
 * @struct
 * @param {(string|!Element)} selector
 * @param {?=} options
 */
function CanvasChart(selector, options) {}

/**
 * @return {?}
 */
CanvasChart.getDefaultOptions = function() {};

/**
 * @return {!CanvasRenderingContext2D}
 */
CanvasChart.prototype.getContext2d = function() {};

/**
 * @return {?}
 */
CanvasChart.prototype.clear = function() {};

/**
 * @constructor
 * @struct
 * @param {!Selection<(!Element|?|!Document|!Window), ?, (!Element|?|!Document|!Window), ?>} container
 * @param {string=} defaultTag
 */
function LayerOrganizer(container, defaultTag) {}

/**
 * @param {(string|!Array<string>|?|!Array<?>)} layerNames
 * @return {(!Selection<(!Element|?|!Document|!Window), ?, (!Element|?|!Document|!Window), ?>|!Array<!Selection<(!Element|?|!Document|!Window), ?, (!Element|?|!Document|!Window), ?>>)}
 */
LayerOrganizer.prototype.create = function(layerNames) {};

/**
 * @param {string} name
 * @return {!Selection<(!Element|?|!Document|!Window), ?, (!Element|?|!Document|!Window), ?>}
 */
LayerOrganizer.prototype.get = function(name) {};

/**
 * @param {string} name
 * @return {boolean}
 */
LayerOrganizer.prototype.has = function(name) {};
/**
 * @record
 * @struct
 */
function LayerConfig() {}

/* TODO: IndexSignature:  */
/** @const */
var helper = {};

/**
 * @param {?} fn
 * @param {number} delay
 * @return {?}
 */
helper.debounce = function(fn, delay) {};

/**
 * @param {?} dest
 * @param {...?} args
 * @return {?}
 */
helper.deepExtend = function(dest, args) {};

/**
 * @param {?} dest
 * @param {...?} args
 * @return {?}
 */
helper.extend = function(dest, args) {};

/**
 * @param {?} value
 * @return {?}
 */
helper.functor = function(value) {};

/**
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
helper.rebind = function(target, source) {};

/**
 * @param {?} value
 * @return {boolean}
 */
helper.isFunction = function(value) {};

/**
 * @param {?} value
 * @return {boolean}
 */
helper.isObject = function(value) {};

/**
 * @param {string} str
 * @return {string}
 */
helper.kebabCase = function(str) {};

/**
 * @param {?} fn
 * @param {number} delay
 * @return {?}
 */
helper.throttle = function(fn, delay) {};
