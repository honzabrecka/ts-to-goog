/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/voca/index.d.ts:
 /** @type {!v.VocaStatic} */
var v;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */

/** @typedef {function(string, number, string): boolean} */
v.CountPredicate;

/** @typedef {function(string, !Array<string>): string} */
v.ReplacementFunction;
/**
 * @record
 * @struct
 */
v.WordWrapOptions = function() {};
 /** @type {number} */
v.WordWrapOptions.prototype.width;
 /** @type {string} */
v.WordWrapOptions.prototype.newLine;
 /** @type {string} */
v.WordWrapOptions.prototype.indent;
 /** @type {boolean} */
v.WordWrapOptions.prototype.cut;
/**
 * @record
 * @struct
 */
v.VocaStatic = function() {};

/* TODO: CallSignature: v */
 /** @type {string} */
v.VocaStatic.prototype.version;

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.camelCase = function(subject) {};

/**
 * @param {string=} subject
 * @param {boolean=} restToLower
 * @return {string}
 */
v.VocaStatic.prototype.capitalize = function(subject, restToLower) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.decapitalize = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.kebabCase = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.lowerCase = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.snakeCase = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.swapCase = function(subject) {};

/**
 * @param {string=} subject
 * @param {!Array<string>=} ignoreWords
 * @return {string}
 */
v.VocaStatic.prototype.titleCase = function(subject, ignoreWords) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.upperCase = function(subject) {};

/**
 * @template T
 * @param {T} subject
 * @return {!v.ExplicitChain<T>}
 */
v.VocaStatic.prototype.chain = function(subject) {};

/**
 * @param {string=} subject
 * @param {number=} position
 * @return {string}
 */
v.VocaStatic.prototype.charAt = function(subject, position) {};

/**
 * @param {string=} subject
 * @param {number=} position
 * @return {string}
 */
v.VocaStatic.prototype.codePointAt = function(subject, position) {};

/**
 * @param {string=} subject
 * @param {number=} length
 * @return {string}
 */
v.VocaStatic.prototype.first = function(subject, length) {};

/**
 * @param {string=} subject
 * @param {number=} position
 * @return {string}
 */
v.VocaStatic.prototype.graphemeAt = function(subject, position) {};

/**
 * @param {string=} subject
 * @param {number=} length
 * @return {string}
 */
v.VocaStatic.prototype.last = function(subject, length) {};

/**
 * @param {string=} subject
 * @param {number=} length
 * @param {string=} end
 * @return {string}
 */
v.VocaStatic.prototype.prune = function(subject, length, end) {};

/**
 * @param {string=} subject
 * @param {number=} start
 * @param {number=} end
 * @return {string}
 */
v.VocaStatic.prototype.slice = function(subject, start, end) {};

/**
 * @param {string=} subject
 * @param {number=} start
 * @param {number=} length
 * @return {string}
 */
v.VocaStatic.prototype.substr = function(subject, start, length) {};

/**
 * @param {string=} subject
 * @param {number=} start
 * @param {number=} end
 * @return {string}
 */
v.VocaStatic.prototype.substring = function(subject, start, end) {};

/**
 * @param {string=} subject
 * @param {number=} length
 * @param {string=} end
 * @return {string}
 */
v.VocaStatic.prototype.truncate = function(subject, length, end) {};

/**
 * @param {string=} subject
 * @return {number}
 */
v.VocaStatic.prototype.count = function(subject) {};

/**
 * @param {string=} subject
 * @return {number}
 */
v.VocaStatic.prototype.countGraphemes = function(subject) {};

/**
 * @param {string=} subject
 * @param {string=} substring
 * @return {number}
 */
v.VocaStatic.prototype.countSubstrings = function(subject, substring) {};

/**
 * @param {string=} subject
 * @param {function(string, number, string): boolean=} predicate
 * @param {?=} context
 * @return {number}
 */
v.VocaStatic.prototype.countWhere = function(subject, predicate, context) {};

/**
 * @param {string=} subject
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flags
 * @return {number}
 */
v.VocaStatic.prototype.countWords = function(subject, pattern, flags) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.escapeHtml = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.escapeRegExp = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.unescapeHtml = function(subject) {};

/**
 * @param {string=} format
 * @param {...?} replacements
 * @return {string}
 */
v.VocaStatic.prototype.sprintf = function(format, replacements) {};

/**
 * @param {string=} format
 * @param {...?} replacements
 * @return {string}
 */
v.VocaStatic.prototype.vprintf = function(format, replacements) {};

/**
 * @param {string=} subject
 * @param {string=} search
 * @param {number=} fromIndex
 * @return {number}
 */
v.VocaStatic.prototype.indexOf = function(subject, search, fromIndex) {};

/**
 * @param {string=} subject
 * @param {string=} search
 * @param {number=} fromIndex
 * @return {number}
 */
v.VocaStatic.prototype.lastIndexOf = function(subject, search, fromIndex) {};

/**
 * @param {string=} subject
 * @param {(string|!RegExp)=} pattern
 * @param {number=} fromIndex
 * @return {number}
 */
v.VocaStatic.prototype.search = function(subject, pattern, fromIndex) {};

/**
 * @param {string=} subject
 * @param {string=} toInsert
 * @param {number=} position
 * @return {string}
 */
v.VocaStatic.prototype.insert = function(subject, toInsert, position) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.latinise = function(subject) {};

/**
 * @param {string=} subject
 * @param {number=} length
 * @param {string=} pad
 * @return {string}
 */
v.VocaStatic.prototype.pad = function(subject, length, pad) {};

/**
 * @param {string=} subject
 * @param {number=} length
 * @param {string=} pad
 * @return {string}
 */
v.VocaStatic.prototype.padLeft = function(subject, length, pad) {};

/**
 * @param {string=} subject
 * @param {number=} length
 * @param {string=} pad
 * @return {string}
 */
v.VocaStatic.prototype.padRight = function(subject, length, pad) {};

/**
 * @param {string=} subject
 * @param {number=} times
 * @return {string}
 */
v.VocaStatic.prototype.repeat = function(subject, times) {};

/**
 * @param {string=} subject
 * @param {(string|!RegExp)=} pattern
 * @param {(string|function(string, !Array<string>): string)=} replacement
 * @return {string}
 */
v.VocaStatic.prototype.replace = function(subject, pattern, replacement) {};

/**
 * @param {string=} subject
 * @param {(string|!RegExp)=} pattern
 * @param {(string|function(string, !Array<string>): string)=} replacement
 * @return {string}
 */
v.VocaStatic.prototype.replaceAll = function(subject, pattern, replacement) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.reverse = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.reverseGrapheme = function(subject) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.slugify = function(subject) {};

/**
 * @param {string=} subject
 * @param {number=} start
 * @param {number=} deleteCount
 * @param {string=} toAdd
 * @return {string}
 */
v.VocaStatic.prototype.splice = function(subject, start, deleteCount, toAdd) {};

/**
 * @param {string=} subject
 * @param {string|!Object<string,string>=} from
 * @param {string=} to
 * @return {string}
 */
v.VocaStatic.prototype.tr = function(subject, from, to) {};

/**
 * @param {string=} subject
 * @param {string=} whitespace
 * @return {string}
 */
v.VocaStatic.prototype.trim = function(subject, whitespace) {};

/**
 * @param {string=} subject
 * @param {string=} whitespace
 * @return {string}
 */
v.VocaStatic.prototype.trimLeft = function(subject, whitespace) {};

/**
 * @param {string=} subject
 * @param {string=} whitespace
 * @return {string}
 */
v.VocaStatic.prototype.trimRight = function(subject, whitespace) {};

/**
 * @param {string=} subject
 * @param {!v.WordWrapOptions=} options
 * @return {string}
 */
v.VocaStatic.prototype.wordWrap = function(subject, options) {};

/**
 * @param {string=} subject
 * @param {string=} end
 * @param {number=} position
 * @return {boolean}
 */
v.VocaStatic.prototype.endsWith = function(subject, end, position) {};

/**
 * @param {string=} subject
 * @param {string=} search
 * @param {number=} position
 * @return {boolean}
 */
v.VocaStatic.prototype.includes = function(subject, search, position) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isAlpha = function(subject) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isAlphaDigit = function(subject) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isBlank = function(subject) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isDigit = function(subject) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isEmpty = function(subject) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isLowerCase = function(subject) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isNumeric = function(subject) {};

/**
 * @param {?=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isString = function(subject) {};

/**
 * @param {string=} subject
 * @return {boolean}
 */
v.VocaStatic.prototype.isUpperCase = function(subject) {};

/**
 * @param {string=} subject
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flags
 * @return {boolean}
 */
v.VocaStatic.prototype.matches = function(subject, pattern, flags) {};

/**
 * @param {string=} subject
 * @param {string=} start
 * @param {number=} position
 * @return {boolean}
 */
v.VocaStatic.prototype.startsWith = function(subject, start, position) {};

/**
 * @param {string=} subject
 * @return {!Array<string>}
 */
v.VocaStatic.prototype.chars = function(subject) {};

/**
 * @param {string=} subject
 * @return {!Array<number>}
 */
v.VocaStatic.prototype.codePoints = function(subject) {};

/**
 * @param {string=} subject
 * @return {!Array<string>}
 */
v.VocaStatic.prototype.graphemes = function(subject) {};

/**
 * @param {string=} subject
 * @param {(string|!RegExp)=} separator
 * @param {number=} limit
 * @return {!Array<string>}
 */
v.VocaStatic.prototype.split = function(subject, separator, limit) {};

/**
 * @param {string=} subject
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flag
 * @return {!Array<string>}
 */
v.VocaStatic.prototype.words = function(subject, pattern, flag) {};

/**
 * @param {string=} subject
 * @return {string}
 */
v.VocaStatic.prototype.stripBom = function(subject) {};

/**
 * @param {string=} subject
 * @param {(string|!Array<string>)=} allowbleTags
 * @param {string=} replacement
 * @return {string}
 */
v.VocaStatic.prototype.stripTags = function(subject, allowbleTags, replacement) {};

/**
 * @return {!v.VocaStatic}
 */
v.VocaStatic.prototype.noConflict = function() {};
/**
 * @record
 * @struct
 */
v.Chain = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.camelCase = function() {};

/**
 * @param {boolean=} restToLoweropt
 * @return {!v.Chain}
 */
v.Chain.prototype.capitalize = function(restToLoweropt) {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.decapitalize = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.kebabCase = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.lowerCase = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.snakeCase = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.swapCase = function() {};

/**
 * @param {!Array<string>=} ignoreWordsopt
 * @return {!v.Chain}
 */
v.Chain.prototype.titleCase = function(ignoreWordsopt) {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.upperCase = function() {};

/**
 * @return {string}
 */
v.Chain.prototype.value = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.Chain.prototype.chain = function() {};

/**
 * @param {number=} position
 * @return {!v.Chain}
 */
v.Chain.prototype.charAt = function(position) {};

/**
 * @param {number=} position
 * @return {!v.Chain}
 */
v.Chain.prototype.codePointAt = function(position) {};

/**
 * @param {number=} length
 * @return {!v.Chain}
 */
v.Chain.prototype.first = function(length) {};

/**
 * @param {number=} position
 * @return {!v.Chain}
 */
v.Chain.prototype.graphemeAt = function(position) {};

/**
 * @param {number=} length
 * @return {!v.Chain}
 */
v.Chain.prototype.last = function(length) {};

/**
 * @param {number=} length
 * @param {string=} end
 * @return {!v.Chain}
 */
v.Chain.prototype.prune = function(length, end) {};

/**
 * @param {number=} start
 * @param {number=} end
 * @return {!v.Chain}
 */
v.Chain.prototype.slice = function(start, end) {};

/**
 * @param {number=} start
 * @param {number=} length
 * @return {!v.Chain}
 */
v.Chain.prototype.substr = function(start, length) {};

/**
 * @param {number=} start
 * @param {number=} end
 * @return {!v.Chain}
 */
v.Chain.prototype.substring = function(start, end) {};

/**
 * @param {number=} length
 * @param {string=} end
 * @return {!v.Chain}
 */
v.Chain.prototype.truncate = function(length, end) {};

/**
 * @return {number}
 */
v.Chain.prototype.count = function() {};

/**
 * @return {number}
 */
v.Chain.prototype.countGraphemes = function() {};

/**
 * @param {string=} substring
 * @return {number}
 */
v.Chain.prototype.countSubstrings = function(substring) {};

/**
 * @param {function(string, number, string): boolean=} predicate
 * @param {?=} context
 * @return {number}
 */
v.Chain.prototype.countWhere = function(predicate, context) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flags
 * @return {number}
 */
v.Chain.prototype.countWords = function(pattern, flags) {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.escapeHtml = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.escapeRegExp = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.unescapeHtml = function() {};

/**
 * @param {...?} replacements
 * @return {!v.Chain}
 */
v.Chain.prototype.sprintf = function(replacements) {};

/**
 * @param {...?} replacements
 * @return {!v.Chain}
 */
v.Chain.prototype.vprintf = function(replacements) {};

/**
 * @param {string=} search
 * @param {number=} fromIndex
 * @return {number}
 */
v.Chain.prototype.indexOf = function(search, fromIndex) {};

/**
 * @param {string=} search
 * @param {number=} fromIndex
 * @return {number}
 */
v.Chain.prototype.lastIndexOf = function(search, fromIndex) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {number=} fromIndex
 * @return {number}
 */
v.Chain.prototype.search = function(pattern, fromIndex) {};

/**
 * @param {string=} toInsert
 * @param {number=} position
 * @return {!v.Chain}
 */
v.Chain.prototype.insert = function(toInsert, position) {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.latinise = function() {};

/**
 * @param {number=} length
 * @param {string=} pad
 * @return {!v.Chain}
 */
v.Chain.prototype.pad = function(length, pad) {};

/**
 * @param {number=} length
 * @param {string=} pad
 * @return {!v.Chain}
 */
v.Chain.prototype.padLeft = function(length, pad) {};

/**
 * @param {number=} length
 * @param {string=} pad
 * @return {!v.Chain}
 */
v.Chain.prototype.padRight = function(length, pad) {};

/**
 * @param {number=} times
 * @return {!v.Chain}
 */
v.Chain.prototype.repeat = function(times) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {(string|function(string, !Array<string>): string)=} replacement
 * @return {!v.Chain}
 */
v.Chain.prototype.replace = function(pattern, replacement) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {(string|function(string, !Array<string>): string)=} replacement
 * @return {!v.Chain}
 */
v.Chain.prototype.replaceAll = function(pattern, replacement) {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.reverse = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.reverseGrapheme = function() {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.slugify = function() {};

/**
 * @param {number=} start
 * @param {number=} deleteCount
 * @param {string=} toAdd
 * @return {!v.Chain}
 */
v.Chain.prototype.splice = function(start, deleteCount, toAdd) {};

/**
 * @param {string|!Object<string,string>=} from
 * @param {string=} to
 * @return {!v.Chain}
 */
v.Chain.prototype.tr = function(from, to) {};

/**
 * @param {string=} whitespace
 * @return {!v.Chain}
 */
v.Chain.prototype.trim = function(whitespace) {};

/**
 * @param {string=} whitespace
 * @return {!v.Chain}
 */
v.Chain.prototype.trimLeft = function(whitespace) {};

/**
 * @param {string=} whitespace
 * @return {!v.Chain}
 */
v.Chain.prototype.trimRight = function(whitespace) {};

/**
 * @param {!v.WordWrapOptions=} options
 * @return {!v.Chain}
 */
v.Chain.prototype.wordWrap = function(options) {};

/**
 * @param {string=} end
 * @param {number=} position
 * @return {boolean}
 */
v.Chain.prototype.endsWith = function(end, position) {};

/**
 * @param {string=} search
 * @param {number=} position
 * @return {boolean}
 */
v.Chain.prototype.includes = function(search, position) {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isAlpha = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isAlphaDigit = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isBlank = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isDigit = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isEmpty = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isLowerCase = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isNumeric = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isString = function() {};

/**
 * @return {boolean}
 */
v.Chain.prototype.isUpperCase = function() {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flags
 * @return {boolean}
 */
v.Chain.prototype.matches = function(pattern, flags) {};

/**
 * @param {string=} start
 * @param {number=} position
 * @return {boolean}
 */
v.Chain.prototype.startsWith = function(start, position) {};

/**
 * @return {!Array<string>}
 */
v.Chain.prototype.chars = function() {};

/**
 * @return {!Array<number>}
 */
v.Chain.prototype.codePoints = function() {};

/**
 * @return {!Array<string>}
 */
v.Chain.prototype.graphemes = function() {};

/**
 * @param {(string|!RegExp)=} separator
 * @param {number=} limit
 * @return {!Array<string>}
 */
v.Chain.prototype.split = function(separator, limit) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flag
 * @return {!Array<string>}
 */
v.Chain.prototype.words = function(pattern, flag) {};

/**
 * @return {!v.Chain}
 */
v.Chain.prototype.stripBom = function() {};

/**
 * @param {(string|!Array<string>)=} allowbleTags
 * @param {string=} replacement
 * @return {!v.Chain}
 */
v.Chain.prototype.stripTags = function(allowbleTags, replacement) {};
/**
 * @record
 * @struct
 */
v.ExplicitChain = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.camelCase = function() {};

/**
 * @param {boolean=} restToLoweropt
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.capitalize = function(restToLoweropt) {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.decapitalize = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.kebabCase = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.lowerCase = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.snakeCase = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.swapCase = function() {};

/**
 * @param {!Array<string>=} ignoreWordsopt
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.titleCase = function(ignoreWordsopt) {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.upperCase = function() {};

/**
 * @return {T}
 */
v.ExplicitChain.prototype.value = function() {};

/**
 * @template U
 * @param {function(T): U} changer
 * @return {!v.ExplicitChain<U>}
 */
v.ExplicitChain.prototype.thru = function(changer) {};

/**
 * @param {number=} position
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.charAt = function(position) {};

/**
 * @param {number=} position
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.codePointAt = function(position) {};

/**
 * @param {number=} length
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.first = function(length) {};

/**
 * @param {number=} position
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.graphemeAt = function(position) {};

/**
 * @param {number=} length
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.last = function(length) {};

/**
 * @param {number=} length
 * @param {string=} end
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.prune = function(length, end) {};

/**
 * @param {number=} start
 * @param {number=} end
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.slice = function(start, end) {};

/**
 * @param {number=} start
 * @param {number=} length
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.substr = function(start, length) {};

/**
 * @param {number=} start
 * @param {number=} end
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.substring = function(start, end) {};

/**
 * @param {number=} length
 * @param {string=} end
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.truncate = function(length, end) {};

/**
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.count = function() {};

/**
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.countGraphemes = function() {};

/**
 * @param {string=} substring
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.countSubstrings = function(substring) {};

/**
 * @param {function(string, number, string): boolean=} predicate
 * @param {?=} context
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.countWhere = function(predicate, context) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flags
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.countWords = function(pattern, flags) {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.escapeHtml = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.escapeRegExp = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.unescapeHtml = function() {};

/**
 * @param {...?} replacements
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.sprintf = function(replacements) {};

/**
 * @param {...?} replacements
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.vprintf = function(replacements) {};

/**
 * @param {string=} search
 * @param {number=} fromIndex
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.indexOf = function(search, fromIndex) {};

/**
 * @param {string=} search
 * @param {number=} fromIndex
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.lastIndexOf = function(search, fromIndex) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {number=} fromIndex
 * @return {!v.ExplicitChain<number>}
 */
v.ExplicitChain.prototype.search = function(pattern, fromIndex) {};

/**
 * @param {string=} toInsert
 * @param {number=} position
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.insert = function(toInsert, position) {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.latinise = function() {};

/**
 * @param {number=} length
 * @param {string=} pad
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.pad = function(length, pad) {};

/**
 * @param {number=} length
 * @param {string=} pad
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.padLeft = function(length, pad) {};

/**
 * @param {number=} length
 * @param {string=} pad
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.padRight = function(length, pad) {};

/**
 * @param {number=} times
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.repeat = function(times) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {(string|function(string, !Array<string>): string)=} replacement
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.replace = function(pattern, replacement) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {(string|function(string, !Array<string>): string)=} replacement
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.replaceAll = function(pattern, replacement) {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.reverse = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.reverseGrapheme = function() {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.slugify = function() {};

/**
 * @param {number=} start
 * @param {number=} deleteCount
 * @param {string=} toAdd
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.splice = function(start, deleteCount, toAdd) {};

/**
 * @param {string|!Object<string,string>=} from
 * @param {string=} to
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.tr = function(from, to) {};

/**
 * @param {string=} whitespace
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.trim = function(whitespace) {};

/**
 * @param {string=} whitespace
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.trimLeft = function(whitespace) {};

/**
 * @param {string=} whitespace
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.trimRight = function(whitespace) {};

/**
 * @param {!v.WordWrapOptions=} options
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.wordWrap = function(options) {};

/**
 * @param {string=} end
 * @param {number=} position
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.endsWith = function(end, position) {};

/**
 * @param {string=} search
 * @param {number=} position
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.includes = function(search, position) {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isAlpha = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isAlphaDigit = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isBlank = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isDigit = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isEmpty = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isLowerCase = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isNumeric = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isString = function() {};

/**
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.isUpperCase = function() {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flags
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.matches = function(pattern, flags) {};

/**
 * @param {string=} start
 * @param {number=} position
 * @return {!v.ExplicitChain<boolean>}
 */
v.ExplicitChain.prototype.startsWith = function(start, position) {};

/**
 * @return {!v.ExplicitChain<!Array<string>>}
 */
v.ExplicitChain.prototype.chars = function() {};

/**
 * @return {!v.ExplicitChain<!Array<number>>}
 */
v.ExplicitChain.prototype.codePoints = function() {};

/**
 * @return {!v.ExplicitChain<!Array<string>>}
 */
v.ExplicitChain.prototype.graphemes = function() {};

/**
 * @param {(string|!RegExp)=} separator
 * @param {number=} limit
 * @return {!v.ExplicitChain<!Array<string>>}
 */
v.ExplicitChain.prototype.split = function(separator, limit) {};

/**
 * @param {(string|!RegExp)=} pattern
 * @param {string=} flag
 * @return {!v.ExplicitChain<!Array<string>>}
 */
v.ExplicitChain.prototype.words = function(pattern, flag) {};

/**
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.stripBom = function() {};

/**
 * @param {(string|!Array<string>)=} allowbleTags
 * @param {string=} replacement
 * @return {!v.ExplicitChain<string>}
 */
v.ExplicitChain.prototype.stripTags = function(allowbleTags, replacement) {};
