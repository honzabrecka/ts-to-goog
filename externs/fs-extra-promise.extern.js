/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fs-extra-promise/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ExportDeclaration in  */
/**
 * @record
 * @struct
 */
function MkdirOptions() {}
 /** @type {?} */
MkdirOptions.prototype.fs;
 /** @type {number} */
MkdirOptions.prototype.mode;

/**
 * copyAsync
 * @param {string} src
 * @param {string} dest
 * @param {(!RegExp|?)=} options 
 *              CopyFilter: filter
 *              CopyOptions: options
 * @return {!Bluebird<void>}
 */
function copyAsync(src, dest, options) {}

/**
 * @param {string} file
 * @return {!Bluebird<void>}
 */
function createFileAsync(file) {}

/**
 * @param {string} dir
 * @param {?=} options
 * @return {!Bluebird<void>}
 */
function mkdirsAsync(dir, options) {}

/**
 * @param {string} dir
 * @param {?=} options
 * @return {!Bluebird<void>}
 */
function mkdirpAsync(dir, options) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} options
 * @return {!Bluebird<void>}
 */
function moveAsync(src, dest, options) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {!Bluebird<void>}
 */
function outputFileAsync(file, data) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {!Bluebird<void>}
 */
function outputJsonAsync(file, data) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {!Bluebird<void>}
 */
function outputJSONAsync(file, data) {}

/**
 * @param {string} file
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
function readJsonAsync(file, options) {}

/**
 * @param {string} file
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
function readJSONAsync(file, options) {}

/**
 * @param {string} dir
 * @return {!Bluebird<void>}
 */
function removeAsync(dir) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {!Bluebird<void>}
 */
function writeJsonAsync(file, object, options) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {!Bluebird<void>}
 */
function writeJSONAsync(file, object, options) {}

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @return {!Bluebird<void>}
 */
function renameAsync(oldPath, newPath) {}

/**
 * @param {number} fd
 * @param {number} len
 * @return {!Bluebird<void>}
 */
function truncateAsync(fd, len) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {!Bluebird<void>}
 */
function chownAsync(path, uid, gid) {}

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @return {!Bluebird<void>}
 */
function fchownAsync(fd, uid, gid) {}

/**
 * @param {string} path
 * @param {number} uid
 * @param {number} gid
 * @return {!Bluebird<void>}
 */
function lchownAsync(path, uid, gid) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @return {!Bluebird<void>}
 */
function chmodAsync(path, mode) {}

/**
 * @param {number} fd
 * @param {(string|number)} mode
 * @return {!Bluebird<void>}
 */
function fchmodAsync(fd, mode) {}

/**
 * @param {string} path
 * @param {(string|number)} mode
 * @return {!Bluebird<void>}
 */
function lchmodAsync(path, mode) {}

/**
 * @param {string} path
 * @return {!Bluebird<!Stats>}
 */
function statAsync(path) {}

/**
 * @param {string} path
 * @return {!Bluebird<!Stats>}
 */
function lstatAsync(path) {}

/**
 * @param {number} fd
 * @return {!Bluebird<!Stats>}
 */
function fstatAsync(fd) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @return {!Bluebird<void>}
 */
function linkAsync(srcpath, dstpath) {}

/**
 * @param {string} srcpath
 * @param {string} dstpath
 * @param {string=} type
 * @return {!Bluebird<void>}
 */
function symlinkAsync(srcpath, dstpath, type) {}

/**
 * @param {string} path
 * @return {!Bluebird<string>}
 */
function readlinkAsync(path) {}

/**
 * @param {string} path
 * @param {?=} cache
 * @return {!Bluebird<string>}
 */
function realpathAsync(path, cache) {}

/**
 * @param {string} path
 * @return {!Bluebird<void>}
 */
function unlinkAsync(path) {}

/**
 * @param {string} path
 * @return {!Bluebird<void>}
 */
function rmdirAsync(path) {}

/**
 * @param {string} path
 * @param {(string|number)=} mode
 * @return {!Bluebird<void>}
 */
function mkdirAsync(path, mode) {}

/**
 * @param {string} path
 * @return {!Bluebird<!Array<string>>}
 */
function readdirAsync(path) {}

/**
 * @param {number} fd
 * @return {!Bluebird<void>}
 */
function closeAsync(fd) {}

/**
 * @param {string} path
 * @param {string} flags
 * @param {string=} mode
 * @return {!Bluebird<number>}
 */
function openAsync(path, flags, mode) {}

/**
 * @param {string} path
 * @param {number} atime
 * @param {number} mtime
 * @return {!Bluebird<void>}
 */
function utimesAsync(path, atime, mtime) {}

/**
 * @param {number} fd
 * @param {number} atime
 * @param {number} mtime
 * @return {!Bluebird<void>}
 */
function futimesAsync(fd, atime, mtime) {}

/**
 * @param {number} fd
 * @return {!Bluebird<void>}
 */
function fsyncAsync(fd) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {!Bluebird<!Array<?>>}
 */
function writeAsync(fd, buffer, offset, length, position) {}

/**
 * @param {number} fd
 * @param {!NodeBuffer} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @return {!Bluebird<!Array<?>>}
 */
function readAsync(fd, buffer, offset, length, position) {}

/**
 * readFileAsync
 * @param {string} filename
 * @param {(string|?)=} options
 * @return {!Bluebird<string>|!Bluebird<!NodeBuffer>}
 */
function readFileAsync(filename, options) {}

/**
 * writeFileAsync
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} options
 * @return {!Bluebird<void>}
 */
function writeFileAsync(filename, data, options) {}

/**
 * appendFileAsync
 * @param {string} filename
 * @param {?} data
 * @param {(string|?)=} option
 * @return {!Bluebird<void>}
 */
function appendFileAsync(filename, data, option) {}

/**
 * @param {string} path
 * @return {!Bluebird<boolean>}
 */
function existsAsync(path) {}

/**
 * @param {string} path
 * @return {!Bluebird<void>}
 */
function ensureDirAsync(path) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {void}
 */
function isDirectory(path, callback) {}

/**
 * @param {string} path
 * @return {boolean}
 */
function isDirectorySync(path) {}

/**
 * @param {string} path
 * @return {!Bluebird<boolean>}
 */
function isDirectoryAsync(path) {}
