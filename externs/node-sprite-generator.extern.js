/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-sprite-generator/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @param {!NodeSpriteGenerator.Option} option
 * @param {function(!Error): void=} callback
 * @return {void}
 */
function NodeSpriteGenerator(option, callback) {}

/** @typedef {string} */
NodeSpriteGenerator.BuiltinStylesheetFormats;

/** @typedef {string} */
NodeSpriteGenerator.BuiltinLayouts;

/** @typedef {string} */
NodeSpriteGenerator.BuiltinCompositors;
/**
 * @record
 * @struct
 */
NodeSpriteGenerator.StylesheetOption = function() {};
 /** @type {string} */
NodeSpriteGenerator.StylesheetOption.prototype.prefix;
 /** @type {string} */
NodeSpriteGenerator.StylesheetOption.prototype.spritePath;
 /** @type {number} */
NodeSpriteGenerator.StylesheetOption.prototype.pixelRatio;

/**
 * @return {string}
 */
NodeSpriteGenerator.StylesheetOption.prototype.nameMapping = function() {};
/**
 * @record
 * @struct
 */
NodeSpriteGenerator.LayoutOption = function() {};
 /** @type {number} */
NodeSpriteGenerator.LayoutOption.prototype.padding;
 /** @type {number} */
NodeSpriteGenerator.LayoutOption.prototype.scaling;

/** @typedef {string} */
NodeSpriteGenerator.CompositorFilters;
/**
 * @record
 * @struct
 */
NodeSpriteGenerator.CompositorOption = function() {};
 /** @type {number} */
NodeSpriteGenerator.CompositorOption.prototype.compressionLevel;
 /** @type {string} */
NodeSpriteGenerator.CompositorOption.prototype.filter;
/**
 * @record
 * @struct
 */
NodeSpriteGenerator.Image = function() {};
 /** @type {number} */
NodeSpriteGenerator.Image.prototype.width;
 /** @type {number} */
NodeSpriteGenerator.Image.prototype.height;
 /** @type {?} */
NodeSpriteGenerator.Image.prototype.data;
/**
 * @record
 * @struct
 */
NodeSpriteGenerator.Compositor = function() {};

/**
 * @param {!Array<string>} files
 * @param {function(!Error, !Array<!NodeSpriteGenerator.Image>): void} callback
 * @return {void}
 */
NodeSpriteGenerator.Compositor.prototype.readImages = function(files, callback) {};

/**
 * @param {!NodeSpriteGenerator.Layout} layout
 * @param {string} spritePath
 * @param {!NodeSpriteGenerator.CompositorOption} options
 * @param {function(!Error): void} callback
 * @return {void}
 */
NodeSpriteGenerator.Compositor.prototype.render = function(layout, spritePath, options, callback) {};
/**
 * @record
 * @struct
 */
NodeSpriteGenerator.Layout = function() {};
 /** @type {number} */
NodeSpriteGenerator.Layout.prototype.width;
 /** @type {number} */
NodeSpriteGenerator.Layout.prototype.height;
 /** @type {!Array<?>} */
NodeSpriteGenerator.Layout.prototype.images;

/** @typedef {function(!Array<!NodeSpriteGenerator.Image>, !NodeSpriteGenerator.LayoutOption, function(!Error, !NodeSpriteGenerator.Layout): void): void} */
NodeSpriteGenerator.LayoutFunc;

/** @typedef {function(!NodeSpriteGenerator.Layout, string, string, !NodeSpriteGenerator.StylesheetOption, function(!Error): void): void} */
NodeSpriteGenerator.StylesheetFunc;
/**
 * @record
 * @struct
 */
NodeSpriteGenerator.Option = function() {};
 /** @type {!Array<string>} */
NodeSpriteGenerator.Option.prototype.src;
 /** @type {string} */
NodeSpriteGenerator.Option.prototype.spritePath;
 /** @type {string} */
NodeSpriteGenerator.Option.prototype.stylesheetPath;
 /** @type {(string|function(!NodeSpriteGenerator.Layout, string, string, !NodeSpriteGenerator.StylesheetOption, function(!Error): void): void)} */
NodeSpriteGenerator.Option.prototype.stylesheet;
 /** @type {!NodeSpriteGenerator.StylesheetOption} */
NodeSpriteGenerator.Option.prototype.stylesheetOptions;
 /** @type {(string|function(!Array<!NodeSpriteGenerator.Image>, !NodeSpriteGenerator.LayoutOption, function(!Error, !NodeSpriteGenerator.Layout): void): void)} */
NodeSpriteGenerator.Option.prototype.layout;
 /** @type {!NodeSpriteGenerator.LayoutOption} */
NodeSpriteGenerator.Option.prototype.layoutOptions;
 /** @type {(string|!NodeSpriteGenerator.Compositor)} */
NodeSpriteGenerator.Option.prototype.compositor;
 /** @type {!NodeSpriteGenerator.CompositorOption} */
NodeSpriteGenerator.Option.prototype.compositorOptions;

/**
 * @param {!NodeSpriteGenerator.Option} option
 * @return {!e.RequestHandler}
 */
NodeSpriteGenerator.middleware = function(option) {};
