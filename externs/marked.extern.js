/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/marked/index.d.ts:

/* TODO: NamespaceExportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * Compiles markdown to HTML.
 * 
 * Compiles markdown to HTML.
 * 
 * @param {string} src String of markdown source to be compiled
 * @param {function(?, string): void|!marked.MarkedOptions=} callback_or_options Function called when the markdownString has been fully parsed when using async highlighting / Hash of options
 * @param {function(?, string): void=} callback Function called when the markdownString has been fully parsed when using async highlighting
 * @return {string} String of compiled HTML
 */
function marked(src, callback_or_options, callback) {}

/**
 * @param {string} src String of markdown source to be compiled
 * @param {!marked.MarkedOptions=} options Hash of options
 * @return {?}
 */
marked.lexer = function(src, options) {};

/**
 * Compiles markdown to HTML.
 * 
 * Compiles markdown to HTML.
 * 
 * @param {string} src String of markdown source to be compiled
 * @param {function(?, string): void|!marked.MarkedOptions=} callback_or_options Function called when the markdownString has been fully parsed when using async highlighting / Hash of options
 * @param {function(?, string): void=} callback Function called when the markdownString has been fully parsed when using async highlighting
 * @return {string} String of compiled HTML
 */
marked.parse = function(src, callback_or_options, callback) {};

/**
 * @param {?} src Tokenized source as array of tokens
 * @param {!marked.MarkedOptions=} options Hash of options
 * @return {string}
 */
marked.parser = function(src, options) {};

/**
 * Sets the default options.
 * 
 * @param {!marked.MarkedOptions} options Hash of options
 * @return {?}
 */
marked.setOptions = function(options) {};

/**
 * @constructor
 * @struct
 * @param {!marked.MarkedOptions=} options
 */
marked.Renderer = function(options) {};

/**
 * @param {string} code
 * @param {string} language
 * @param {boolean} isEscaped
 * @return {string}
 */
marked.Renderer.prototype.code = function(code, language, isEscaped) {};

/**
 * @param {string} quote
 * @return {string}
 */
marked.Renderer.prototype.blockquote = function(quote) {};

/**
 * @param {string} html
 * @return {string}
 */
marked.Renderer.prototype.html = function(html) {};

/**
 * @param {string} text
 * @param {number} level
 * @param {string} raw
 * @return {string}
 */
marked.Renderer.prototype.heading = function(text, level, raw) {};

/**
 * @return {string}
 */
marked.Renderer.prototype.hr = function() {};

/**
 * @param {string} body
 * @param {boolean} ordered
 * @return {string}
 */
marked.Renderer.prototype.list = function(body, ordered) {};

/**
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.listitem = function(text) {};

/**
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.paragraph = function(text) {};

/**
 * @param {string} header
 * @param {string} body
 * @return {string}
 */
marked.Renderer.prototype.table = function(header, body) {};

/**
 * @param {string} content
 * @return {string}
 */
marked.Renderer.prototype.tablerow = function(content) {};

/**
 * @param {string} content
 * @param {{header: boolean, align: string}} flags
 * @return {string}
 */
marked.Renderer.prototype.tablecell = function(content, flags) {};

/**
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.strong = function(text) {};

/**
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.em = function(text) {};

/**
 * @param {string} code
 * @return {string}
 */
marked.Renderer.prototype.codespan = function(code) {};

/**
 * @return {string}
 */
marked.Renderer.prototype.br = function() {};

/**
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.del = function(text) {};

/**
 * @param {string} href
 * @param {string} title
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.link = function(href, title, text) {};

/**
 * @param {string} href
 * @param {string} title
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.image = function(href, title, text) {};

/**
 * @param {string} text
 * @return {string}
 */
marked.Renderer.prototype.text = function(text) {};

/**
 * @constructor
 * @struct
 * @param {!marked.MarkedOptions=} options
 */
marked.Lexer = function(options) {};
 /** @type {!marked.Rules} */
marked.Lexer.prototype.rules;
 /** @type {?} */
marked.Lexer.prototype.tokens;

/**
 * @param {string} src
 * @return {?}
 */
marked.Lexer.prototype.lex = function(src) {};
/**
 * @record
 * @struct
 */
marked.Rules = function() {};

/* TODO: IndexSignature: marked */

/** @typedef {?} */
marked.TokensList;

/** @typedef {(!marked.Tokens.Space|!marked.Tokens.Code|!marked.Tokens.Heading|!marked.Tokens.Table|!marked.Tokens.Hr|!marked.Tokens.BlockquoteStart|!marked.Tokens.BlockquoteEnd|!marked.Tokens.ListStart|!marked.Tokens.LooseItemStart|!marked.Tokens.ListItemStart|!marked.Tokens.ListItemEnd|!marked.Tokens.ListEnd|!marked.Tokens.Paragraph|!marked.Tokens.HTML|!marked.Tokens.Text)} */
marked.Token;
/** @const */
marked.Tokens = {};
/**
 * @record
 * @struct
 */
marked.Tokens.Space = function() {};
 /** @type {string} */
marked.Tokens.Space.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.Code = function() {};
 /** @type {string} */
marked.Tokens.Code.prototype.type;
 /** @type {string} */
marked.Tokens.Code.prototype.lang;
 /** @type {string} */
marked.Tokens.Code.prototype.text;
/**
 * @record
 * @struct
 */
marked.Tokens.Heading = function() {};
 /** @type {string} */
marked.Tokens.Heading.prototype.type;
 /** @type {number} */
marked.Tokens.Heading.prototype.depth;
 /** @type {string} */
marked.Tokens.Heading.prototype.text;
/**
 * @record
 * @struct
 */
marked.Tokens.Table = function() {};
 /** @type {string} */
marked.Tokens.Table.prototype.type;
 /** @type {!Array<string>} */
marked.Tokens.Table.prototype.header;
 /** @type {!Array<string>} */
marked.Tokens.Table.prototype.align;
 /** @type {!Array<!Array<string>>} */
marked.Tokens.Table.prototype.cells;
/**
 * @record
 * @struct
 */
marked.Tokens.Hr = function() {};
 /** @type {string} */
marked.Tokens.Hr.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.BlockquoteStart = function() {};
 /** @type {string} */
marked.Tokens.BlockquoteStart.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.BlockquoteEnd = function() {};
 /** @type {string} */
marked.Tokens.BlockquoteEnd.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.ListStart = function() {};
 /** @type {string} */
marked.Tokens.ListStart.prototype.type;
 /** @type {boolean} */
marked.Tokens.ListStart.prototype.ordered;
/**
 * @record
 * @struct
 */
marked.Tokens.LooseItemStart = function() {};
 /** @type {string} */
marked.Tokens.LooseItemStart.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.ListItemStart = function() {};
 /** @type {string} */
marked.Tokens.ListItemStart.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.ListItemEnd = function() {};
 /** @type {string} */
marked.Tokens.ListItemEnd.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.ListEnd = function() {};
 /** @type {string} */
marked.Tokens.ListEnd.prototype.type;
/**
 * @record
 * @struct
 */
marked.Tokens.Paragraph = function() {};
 /** @type {string} */
marked.Tokens.Paragraph.prototype.type;
 /** @type {boolean} */
marked.Tokens.Paragraph.prototype.pre;
 /** @type {string} */
marked.Tokens.Paragraph.prototype.text;
/**
 * @record
 * @struct
 */
marked.Tokens.HTML = function() {};
 /** @type {string} */
marked.Tokens.HTML.prototype.type;
 /** @type {boolean} */
marked.Tokens.HTML.prototype.pre;
 /** @type {string} */
marked.Tokens.HTML.prototype.text;
/**
 * @record
 * @struct
 */
marked.Tokens.Text = function() {};
 /** @type {string} */
marked.Tokens.Text.prototype.type;
 /** @type {string} */
marked.Tokens.Text.prototype.text;
/**
 * @record
 * @struct
 */
marked.MarkedOptions = function() {};
 /** @type {!marked.Renderer} */
marked.MarkedOptions.prototype.renderer;
 /** @type {boolean} */
marked.MarkedOptions.prototype.gfm;
 /** @type {boolean} */
marked.MarkedOptions.prototype.tables;
 /** @type {boolean} */
marked.MarkedOptions.prototype.breaks;
 /** @type {boolean} */
marked.MarkedOptions.prototype.pedantic;
 /** @type {boolean} */
marked.MarkedOptions.prototype.sanitize;
 /** @type {boolean} */
marked.MarkedOptions.prototype.mangle;
 /** @type {boolean} */
marked.MarkedOptions.prototype.smartLists;
 /** @type {boolean} */
marked.MarkedOptions.prototype.silent;
 /** @type {string} */
marked.MarkedOptions.prototype.langPrefix;
 /** @type {boolean} */
marked.MarkedOptions.prototype.smartypants;
 /** @type {string} */
marked.MarkedOptions.prototype.headerPrefix;
 /** @type {boolean} */
marked.MarkedOptions.prototype.xhtml;

/**
 * Optionally sanitize found HTML with a sanitizer function.
 * @param {string} html
 * @return {string}
 */
marked.MarkedOptions.prototype.sanitizer = function(html) {};

/**
 * A function to highlight code blocks. The function takes three arguments: code, lang, and callback.
 * @param {string} code
 * @param {string} lang
 * @param {function(?, string): void=} callback
 * @return {string}
 */
marked.MarkedOptions.prototype.highlight = function(code, lang, callback) {};
