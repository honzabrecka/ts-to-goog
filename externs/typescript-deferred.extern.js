/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/typescript-deferred/index.d.ts:
/**
 * @record
 * @struct
 */
function ImmediateSuccessCB() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ImmediateErrorCB() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DeferredSuccessCB() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function DeferredErrorCB() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function ThenableInterface() {}

/**
 * @template TP
 * @param {?=} successCB
 * @param {?=} errorCB
 * @return {?}
 */
ThenableInterface.prototype.then = function(successCB, errorCB) {};
/**
 * @extends {ThenableInterface}
 * @record
 * @struct
 */
function PromiseInterface() {}

/**
 * @template TP
 * @param {?=} successCB
 * @param {?=} errorCB
 * @return {?}
 */
PromiseInterface.prototype.then = function(successCB, errorCB) {};

/**
 * @param {?=} errorCB
 * @return {?}
 */
PromiseInterface.prototype.otherwise = function(errorCB) {};

/**
 * @template TP
 * @param {?=} errorCB
 * @return {?}
 */
PromiseInterface.prototype.always = function(errorCB) {};
/**
 * @record
 * @struct
 */
function DeferredInterface() {}
 /** @type {?} */
DeferredInterface.prototype.promise;

/**
 * @param {?=} value
 * @return {?}
 */
DeferredInterface.prototype.resolve = function(value) {};

/**
 * @param {?=} error
 * @return {?}
 */
DeferredInterface.prototype.reject = function(error) {};

/**
 * @template T
 * @return {?}
 */
function create() {}

/**
 * @template T
 * @param {?|T=} value
 * @return {?}
 */
function when(value) {}
