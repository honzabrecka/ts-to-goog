/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.tooltipster/index.d.ts:
/**
 * @record
 * @struct
 */
function JQueryTooltipsterOptions() {}
 /** @type {string} */
JQueryTooltipsterOptions.prototype.animation;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.arrow;
 /** @type {string} */
JQueryTooltipsterOptions.prototype.arrowColor;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.autoClose;
 /** @type {(string|?<!HTMLElement>)} */
JQueryTooltipsterOptions.prototype.content;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.contentAsHTML;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.contentCloning;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.debug;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.delay;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.minWidth;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.maxWidth;
 /** @type {function(?<!HTMLElement>, string): (string|void)} */
JQueryTooltipsterOptions.prototype.functionInit;
 /** @type {function(?<!HTMLElement>, !Function): void} */
JQueryTooltipsterOptions.prototype.functionBefore;
 /** @type {function(?<!HTMLElement>, ?<!HTMLElement>): void} */
JQueryTooltipsterOptions.prototype.functionReady;
 /** @type {function(?<!HTMLElement>): void} */
JQueryTooltipsterOptions.prototype.functionAfter;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.hideOnClick;
 /** @type {(string|?<!HTMLElement>)} */
JQueryTooltipsterOptions.prototype.icon;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.iconCloning;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.iconDesktop;
 /** @type {string} */
JQueryTooltipsterOptions.prototype.iconTheme;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.iconTouch;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.interactive;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.interactiveTolerance;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.multiple;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.offsetX;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.offsetY;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.onlyOne;
 /** @type {string} */
JQueryTooltipsterOptions.prototype.position;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.positionTracker;
 /** @type {function(?<!HTMLElement>): void} */
JQueryTooltipsterOptions.prototype.positionTrackerCallback;
 /** @type {string} */
JQueryTooltipsterOptions.prototype.restoration;
 /** @type {(string|!Array<string>)} */
JQueryTooltipsterOptions.prototype.side;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.speed;
 /** @type {number} */
JQueryTooltipsterOptions.prototype.timer;
 /** @type {string} */
JQueryTooltipsterOptions.prototype.theme;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.touchDevices;
 /** @type {string} */
JQueryTooltipsterOptions.prototype.trigger;
 /** @type {boolean} */
JQueryTooltipsterOptions.prototype.updateAnimation;

/**
 * Show a tooltip (the 'callback' argument is optional)
 * Hide a tooltip (the 'callback' argument is optional)
 * Update tooltip content
 * Update tooltip content
 * Set the value of an option (use at your own risk, we do not provide support for issues you may encounter when using this method)
 * Temporarily disable a tooltip from being able to open
 * Temporarily disable a tooltip from being able to open
 * Hide and destroy tooltip functionality
 * Return a tooltip's current content (if selector contains multiple origins, only the value of the first will be returned)
 * Reposition and resize the tooltip
 * Return the HTML root element of the tooltip
 * Return the HTML root element of the icon if there is one, 'undefined' otherwise
 * Change default options for all future instances
 * Generics
 * Creates a new tooltip with the specified, or default, options.
 * \@example 
 * $('.tooltip').tooltipster({
 *   animation: 'fade',
 *   delay: 200,
 *   theme: 'tooltipster-default',
 *   touchDevices: false,
 *   trigger: 'hover'
 * });
 * Initiate the Tooltipster plugin
 * @param {string|!JQueryTooltipsterOptions=} methodName_or_options show / hide / content / option / disable / enable / destroy / reposition / elementTooltip / elementIcon / setDefaults / The options
 * @param {!Function|string|!JQueryTooltipsterOptions=} callback_or_newContent_or_optionName_or_options Function for call back / New content / Option name
 * @param {string=} optionValue New vale for option
 * @return {?<!HTMLElement>|string|(string|?<!HTMLElement>)}
 */
JQuery.prototype.tooltipster = function(methodName_or_options, callback_or_newContent_or_optionName_or_options, optionValue) {};
