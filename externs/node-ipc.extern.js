/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-ipc/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var NodeIPC = {};
/**
 * @constructor
 * @struct
 */
NodeIPC.IPC = function() {};
 /** @type {!NodeIPC.Config} */
NodeIPC.IPC.prototype.config;
 /** @type {?} */
NodeIPC.IPC.prototype.of;
 /** @type {!NodeIPC.Server} */
NodeIPC.IPC.prototype.server;

/**
 * https://www.npmjs.com/package/node-ipc#log
 * @param {...?} args
 * @return {void}
 */
NodeIPC.IPC.prototype.log = function(args) {};

/**
 * https://www.npmjs.com/package/node-ipc#connectto
 * Used for connecting as a client to local Unix Sockets and Windows Sockets.
 * This is the fastest way for processes on the same machine to communicate
 * because it bypasses the network card which TCP and UDP must both use.
 * https://www.npmjs.com/package/node-ipc#connectto
 * Used for connecting as a client to local Unix Sockets and Windows Sockets.
 * This is the fastest way for processes on the same machine to communicate
 * because it bypasses the network card which TCP and UDP must both use.
 * @param {string} id is the string id of the socket being connected to.
 * The socket with this id is added to the ipc.of object when created.
 * @param {string|function(): void=} path_or_callback is the path of the Unix Domain Socket File, if the System is Windows,
 * this will automatically be converted to an appropriate pipe with the same information as the Unix Domain Socket File.
 * If not set this will default to ipc.config.socketRoot+ipc.config.appspace+id / this is the function to execute when the socket has been created
 * @param {function(): void=} callback this is the function to execute when the socket has been created
 * @return {void}
 */
NodeIPC.IPC.prototype.connectTo = function(id, path_or_callback, callback) {};

/**
 * https://www.npmjs.com/package/node-ipc#connecttonet
 * Used to connect as a client to a TCP or TLS socket via the network card.
 * This can be local or remote, if local, it is recommended that you use the Unix
 * and Windows Socket Implementaion of connectTo instead as it is much faster since it avoids the network card altogether.
 * For TLS and SSL Sockets see the node-ipc TLS and SSL docs.
 * They have a few additional requirements, and things to know about and so have their own doc.
 * https://www.npmjs.com/package/node-ipc#connecttonet
 * Used to connect as a client to a TCP or TLS socket via the network card.
 * This can be local or remote, if local, it is recommended that you use the Unix
 * and Windows Socket Implementaion of connectTo instead as it is much faster since it avoids the network card altogether.
 * For TLS and SSL Sockets see the node-ipc TLS and SSL docs.
 * They have a few additional requirements, and things to know about and so have their own doc.
 * https://www.npmjs.com/package/node-ipc#connecttonet
 * Used to connect as a client to a TCP or TLS socket via the network card.
 * This can be local or remote, if local, it is recommended that you use the Unix
 * and Windows Socket Implementaion of connectTo instead as it is much faster since it avoids the network card altogether.
 * For TLS and SSL Sockets see the node-ipc TLS and SSL docs.
 * They have a few additional requirements, and things to know about and so have their own doc.
 * @param {string} id is the string id of the socket being connected to. For TCP & TLS sockets,
 * this id is added to the ipc.of object when the socket is created with a reference to the socket / is the string id of the socket being connected to.
 * For TCP & TLS sockets, this id is added to the ipc.of object when the socket is created with a reference to the socket
 * @param {string|function(): void|(string|number)=} host_or_callback_or_hostOrPort is the host on which the TCP or TLS socket resides.
 * This will default to ipc.config.networkHost if not specified / 	this is the function to execute when the socket has been created
 * @param {number|function(): void=} port_or_callback the port on which the TCP or TLS socket resides / 	this is the function to execute when the socket has been created
 * @param {function(): void=} callback 	this is the function to execute when the socket has been created
 * @return {void}
 */
NodeIPC.IPC.prototype.connectToNet = function(id, host_or_callback_or_hostOrPort, port_or_callback, callback) {};

/**
 * https://www.npmjs.com/package/node-ipc#disconnect
 * Used to disconnect a client from a Unix, Windows, TCP or TLS socket.
 * The socket and its refrence will be removed from memory and the ipc.of scope.
 * This can be local or remote. UDP clients do not maintain connections and so there are no Clients and this method has no value to them
 * @param {string} id is the string id of the socket from which to disconnect
 * @return {void}
 */
NodeIPC.IPC.prototype.disconnect = function(id) {};

/**
 * https://www.npmjs.com/package/node-ipc#serve
 * Used to create local Unix Socket Server or Windows Socket Server to which Clients can bind.
 * The server can emit events to specific Client Sockets, or broadcast events to all known Client Sockets
 * https://www.npmjs.com/package/node-ipc#serve
 * Used to create local Unix Socket Server or Windows Socket Server to which Clients can bind.
 * The server can emit events to specific Client Sockets, or broadcast events to all known Client Sockets
 * https://www.npmjs.com/package/node-ipc#serve
 * Used to create local Unix Socket Server or Windows Socket Server to which Clients can bind.
 * The server can emit events to specific Client Sockets, or broadcast events to all known Client Sockets
 * @param {string|function(): void|null=} path_or_callback This is the path of the Unix Domain Socket File, if the System is Windows,
 * this will automatically be converted to an appropriate pipe with the same information as the Unix Domain Socket File.
 * If not set this will default to ipc.config.socketRoot+ipc.config.appspace+id / This is a function to be called after the Server has started.
 * This can also be done by binding an event to the start event like ipc.server.on('start',function(){});
 * @param {function(): void=} callback This is a function to be called after the Server has started.
 * This can also be done by binding an event to the start event like ipc.server.on('start',function(){});
 * @return {void}
 */
NodeIPC.IPC.prototype.serve = function(path_or_callback, callback) {};

/**
 * https://www.npmjs.com/package/node-ipc#servenet
 * https://www.npmjs.com/package/node-ipc#servenet
 * https://www.npmjs.com/package/node-ipc#servenet
 * https://www.npmjs.com/package/node-ipc#servenet
 * @param {string|(number|function(): void)=} host_or_UDPType_or_callbackOrPort If not specified this defaults to the first address in os.networkInterfaces().
 * For TCP, TLS & UDP servers this is most likely going to be 127.0.0.1 or ::1 / If set this will create the server as a UDP socket. 'udp4' or 'udp6' are valid values.
 * This defaults to not being set. When using udp6 make sure to specify a valid IPv6 host, like ::1
 * @param {number|function(): void=} port_or_callback The port on which the TCP, UDP, or TLS Socket server will be bound, this defaults to 8000 if not specified / Function to be called when the server is created
 * @param {string|function(): void=} UDPType_or_callback If set this will create the server as a UDP socket. 'udp4' or 'udp6' are valid values.
 * This defaults to not being set. When using udp6 make sure to specify a valid IPv6 host, like ::1 / Function to be called when the server is created
 * @param {function(): void=} callback Function to be called when the server is created
 * @return {void}
 */
NodeIPC.IPC.prototype.serveNet = function(host_or_UDPType_or_callbackOrPort, port_or_callback, UDPType_or_callback, callback) {};

/** @typedef {function(): void} */
NodeIPC.EmptyCallback;
/**
 * @record
 * @struct
 */
NodeIPC.Client = function() {};

/**
 * triggered when a JSON message is received. The event name will be the type string from your message
 * and the param will be the data object from your message eg : { type:'myEvent',data:{a:1}}
 * triggered when an error has occured
 * connect - triggered when socket connected
 * disconnect - triggered by client when socket has disconnected from server
 * destroy - triggered when socket has been totally destroyed, no further auto retries will happen and all references are gone
 * triggered by server when a client socket has disconnected
 * triggered when ipc.config.rawBuffer is true and a message is received
 * @param {string} event
 * @param {function(!Array<?>): void|function(?): void|function(): void|function(?, string): void} callback
 * @return {!NodeIPC.Client}
 */
NodeIPC.Client.prototype.on = function(event, callback) {};

/**
 * @param {string} event
 * @param {?=} value
 * @return {!NodeIPC.Client}
 */
NodeIPC.Client.prototype.emit = function(event, value) {};
/**
 * @extends {NodeIPC.Client}
 * @record
 * @struct
 */
NodeIPC.Server = function() {};

/**
 * start serving need top call serve or serveNet first to set up the server
 * @return {void}
 */
NodeIPC.Server.prototype.start = function() {};

/**
 * close the server and stop serving
 * @return {void}
 */
NodeIPC.Server.prototype.stop = function() {};

/**
 * @param {?|string|(?|!NodeIPC.SocketConfig)} value_or_event_or_socket_or_socketConfig
 * @param {?|string=} value_or_event
 * @param {?=} value
 * @return {!NodeIPC.Client|!NodeIPC.Server}
 */
NodeIPC.Server.prototype.emit = function(value_or_event_or_socket_or_socketConfig, value_or_event, value) {};
/**
 * @record
 * @struct
 */
NodeIPC.SocketConfig = function() {};
 /** @type {string} */
NodeIPC.SocketConfig.prototype.address;
 /** @type {number} */
NodeIPC.SocketConfig.prototype.port;
/**
 * @record
 * @struct
 */
NodeIPC.Config = function() {};
 /** @type {string} */
NodeIPC.Config.prototype.appspace;
 /** @type {string} */
NodeIPC.Config.prototype.socketRoot;
 /** @type {string} */
NodeIPC.Config.prototype.id;
 /** @type {string} */
NodeIPC.Config.prototype.networkHost;
 /** @type {number} */
NodeIPC.Config.prototype.networkPort;
 /** @type {string} */
NodeIPC.Config.prototype.encoding;
 /** @type {boolean} */
NodeIPC.Config.prototype.rawBuffer;
 /** @type {boolean} */
NodeIPC.Config.prototype.sync;
 /** @type {boolean} */
NodeIPC.Config.prototype.silent;
 /** @type {boolean} */
NodeIPC.Config.prototype.logInColor;
 /** @type {number} */
NodeIPC.Config.prototype.logDepth;
 /** @type {number} */
NodeIPC.Config.prototype.maxConnections;
 /** @type {number} */
NodeIPC.Config.prototype.retry;
 /** @type {boolean} */
NodeIPC.Config.prototype.maxRetries;
 /** @type {boolean} */
NodeIPC.Config.prototype.stopRetrying;
 /** @type {{localAddress: boolean, localPort: boolean, family: boolean, hints: boolean, lookup: boolean}} */
NodeIPC.Config.prototype.interfaces;
 /** @type {{rejectUnauthorized: boolean, public: string, private: string}} */
NodeIPC.Config.prototype.tls;
 /** @type {?} */
var RootIPC;

/* TODO: ExportAssignment in  */
