/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tedious-connection-pool/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
/** @const */
var tcp = {};
/**
 * @extends {Connection}
 * @constructor
 * @struct
 */
tcp.PooledConnection = function() {};

/**
 * If the connection is issued from a connection pool returns the connection to the pool.
 * @return {void}
 */
tcp.PooledConnection.prototype.release = function() {};

/** @typedef {function(!Error, !tcp.PooledConnection): void} */
tcp.ConnectionCallback;
/**
 * @record
 * @struct
 */
tcp.PoolConfig = function() {};
 /** @type {number} */
tcp.PoolConfig.prototype.min;
 /** @type {number} */
tcp.PoolConfig.prototype.max;
 /** @type {boolean} */
tcp.PoolConfig.prototype.log;
 /** @type {number} */
tcp.PoolConfig.prototype.idleTimeout;
 /** @type {number} */
tcp.PoolConfig.prototype.retryDelay;
 /** @type {number} */
tcp.PoolConfig.prototype.acquireTimeout;

/**
 * acquires a connection from the pool
 * @param {function(!Error, !tcp.PooledConnection): void} callback invoked when the connection is retrieved and ready
 * @return {void}
 */
tcp.prototype.acquire = function(callback) {};

/**
 * closes opened connections
 * @return {void}
 */
tcp.prototype.drain = function() {};

/* TODO: ExportAssignment in  */
