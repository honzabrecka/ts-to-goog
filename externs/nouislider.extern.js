/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/nouislider/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var noUiSlider = {};

/**
 * To create a slider, call noUiSlider.create() with an element and your options.
 * @param {!HTMLElement} target
 * @param {!noUiSlider.Options} options
 * @return {void}
 */
noUiSlider.create = function(target, options) {};
/**
 * @record
 * @struct
 */
noUiSlider.Options = function() {};
 /** @type {(number|!Array<number>|!Array<!Array<number>>)} */
noUiSlider.Options.prototype.start;
 /** @type {!Object} */
noUiSlider.Options.prototype.range;
 /** @type {(boolean|!Array<boolean>)} */
noUiSlider.Options.prototype.connect;
 /** @type {number} */
noUiSlider.Options.prototype.margin;
 /** @type {number} */
noUiSlider.Options.prototype.limit;
 /** @type {number} */
noUiSlider.Options.prototype.padding;
 /** @type {number} */
noUiSlider.Options.prototype.step;
 /** @type {string} */
noUiSlider.Options.prototype.orientation;
 /** @type {string} */
noUiSlider.Options.prototype.direction;
 /** @type {(boolean|!Object|function(!Array<?>): ?)} */
noUiSlider.Options.prototype.tooltips;
 /** @type {boolean} */
noUiSlider.Options.prototype.animate;
 /** @type {number} */
noUiSlider.Options.prototype.animationDuration;
 /** @type {boolean} */
noUiSlider.Options.prototype.snap;
 /** @type {string} */
noUiSlider.Options.prototype.behaviour;
 /** @type {(!Object|function(!Array<?>): ?)} */
noUiSlider.Options.prototype.format;
 /** @type {!noUiSlider.PipsOptions} */
noUiSlider.Options.prototype.pips;
/**
 * @record
 * @struct
 */
noUiSlider.PipsOptions = function() {};
 /** @type {string} */
noUiSlider.PipsOptions.prototype.mode;
 /** @type {number} */
noUiSlider.PipsOptions.prototype.density;
 /** @type {function(!Array<?>): noUiSlider.PipFilterResult} */
noUiSlider.PipsOptions.prototype.filter;
 /** @type {(!Object|function(!Array<?>): ?)} */
noUiSlider.PipsOptions.prototype.format;
 /** @type {(number|!Array<number>)} */
noUiSlider.PipsOptions.prototype.values;
 /** @type {boolean} */
noUiSlider.PipsOptions.prototype.stepped;

/** @const */
noUiSlider.PipFilterResult = {};
/** @const {number} */
noUiSlider.PipFilterResult.NoValue;
/** @const {number} */
noUiSlider.PipFilterResult.LargeValue;
/** @const {number} */
noUiSlider.PipFilterResult.SmallValue;
/**
 * @record
 * @struct
 */
noUiSlider.Callback = function() {};

/* TODO: CallSignature: noUiSlider */
/**
 * @record
 * @struct
 */
noUiSlider.noUiSlider = function() {};

/**
 * Bind event to the slider.
 * @param {string} eventName
 * @param {!noUiSlider.Callback} callback
 * @return {void}
 */
noUiSlider.noUiSlider.prototype.on = function(eventName, callback) {};

/**
 * Unbind event to the slider.
 * @param {string} eventName
 * @return {void}
 */
noUiSlider.noUiSlider.prototype.off = function(eventName) {};

/**
 * Destroy's the slider.
 * @return {void}
 */
noUiSlider.noUiSlider.prototype.destroy = function() {};

/**
 * To get the current slider value. For one-handle sliders, calling .get() will return the value.
 * For two-handle sliders, an array[value, value] will be returned.
 * @return {(number|!Array<number>)}
 */
noUiSlider.noUiSlider.prototype.get = function() {};

/**
 * noUiSlider will keep your values within the slider range, which saves you a bunch of validation.
 * If you have configured the slider to use one handle, you can change the current value by passing
 * a number to the .set() method. If you have two handles, pass an array. One-handled sliders
 * will also accept arrays. Within an array, you can set one position to null
 * if you want to leave a handle unchanged.
 * @param {(number|!Array<number>)} value
 * @return {void}
 */
noUiSlider.noUiSlider.prototype.set = function(value) {};

/**
 * To return to the initial slider values, you can use the .reset() method. This will only reset the slider values.
 * @return {void}
 */
noUiSlider.noUiSlider.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
noUiSlider.Instance = function() {};
 /** @type {!noUiSlider.noUiSlider} */
noUiSlider.Instance.prototype.noUiSlider;
