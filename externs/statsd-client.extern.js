/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/statsd-client/index.d.ts:
/**
 * @record
 * @struct
 */
function CommonOptions() {}
 /** @type {string} */
CommonOptions.prototype.prefix;
 /** @type {boolean} */
CommonOptions.prototype.debug;
 /** @type {boolean} */
CommonOptions.prototype.tcp;
 /** @type {number} */
CommonOptions.prototype.socketTimeout;
/**
 * @extends {CommonOptions}
 * @record
 * @struct
 */
function TcpOptions() {}
 /** @type {string} */
TcpOptions.prototype.host;
 /** @type {number} */
TcpOptions.prototype.port;
 /** @type {number} */
TcpOptions.prototype.socketTimeoutsToClose;
/**
 * @extends {CommonOptions}
 * @record
 * @struct
 */
function UdpOptions() {}
 /** @type {string} */
UdpOptions.prototype.host;
 /** @type {number} */
UdpOptions.prototype.port;
/**
 * @extends {CommonOptions}
 * @record
 * @struct
 */
function HttpOptions() {}
 /** @type {string} */
HttpOptions.prototype.host;
 /** @type {?} */
HttpOptions.prototype.headers;
 /** @type {string} */
HttpOptions.prototype.method;

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function StatsdClient(options) {}

/**
 * @param {string} metric
 * @param {number} delta
 * @return {void}
 */
StatsdClient.prototype.counter = function(metric, delta) {};

/**
 * @param {string} metric
 * @param {number=} delta
 * @return {void}
 */
StatsdClient.prototype.increment = function(metric, delta) {};

/**
 * @param {string} metric
 * @param {number=} delta
 * @return {void}
 */
StatsdClient.prototype.decrement = function(metric, delta) {};

/**
 * @param {string} name
 * @param {number} value
 * @return {void}
 */
StatsdClient.prototype.gauge = function(name, value) {};

/**
 * @param {string} name
 * @param {number} delta
 * @return {void}
 */
StatsdClient.prototype.gaugeDelta = function(name, delta) {};

/**
 * @param {string} name
 * @param {number} value
 * @return {void}
 */
StatsdClient.prototype.set = function(name, value) {};

/**
 * @param {string} name
 * @param {!Date|number} start_or_duration
 * @return {void}
 */
StatsdClient.prototype.timing = function(name, start_or_duration) {};

/**
 * @return {void}
 */
StatsdClient.prototype.close = function() {};

/**
 * @param {string} name
 * @return {!StatsdClient}
 */
StatsdClient.prototype.getChildClient = function(name) {};

/* TODO: ExportAssignment in  */
