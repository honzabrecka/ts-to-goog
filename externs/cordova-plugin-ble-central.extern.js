/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-ble-central/index.d.ts:
/** @const */
var BLECentralPlugin = {};
/**
 * @record
 * @struct
 */
BLECentralPlugin.PeripheralCharacteristic = function() {};
 /** @type {string} */
BLECentralPlugin.PeripheralCharacteristic.prototype.service;
 /** @type {string} */
BLECentralPlugin.PeripheralCharacteristic.prototype.characteristic;
 /** @type {!Array<string>} */
BLECentralPlugin.PeripheralCharacteristic.prototype.properties;
 /** @type {!Array<?>} */
BLECentralPlugin.PeripheralCharacteristic.prototype.descriptors;
/**
 * @record
 * @struct
 */
BLECentralPlugin.PeripheralData = function() {};
 /** @type {string} */
BLECentralPlugin.PeripheralData.prototype.name;
 /** @type {string} */
BLECentralPlugin.PeripheralData.prototype.id;
 /** @type {number} */
BLECentralPlugin.PeripheralData.prototype.rssi;
 /** @type {?} */
BLECentralPlugin.PeripheralData.prototype.advertising;
/**
 * @extends {BLECentralPlugin.PeripheralData}
 * @record
 * @struct
 */
BLECentralPlugin.PeripheralDataExtended = function() {};
 /** @type {!Array<string>} */
BLECentralPlugin.PeripheralDataExtended.prototype.services;
 /** @type {!Array<!BLECentralPlugin.PeripheralCharacteristic>} */
BLECentralPlugin.PeripheralDataExtended.prototype.characteristics;
/**
 * @record
 * @struct
 */
BLECentralPlugin.StartScanOptions = function() {};
 /** @type {boolean} */
BLECentralPlugin.StartScanOptions.prototype.reportDuplicates;
/**
 * @record
 * @struct
 */
BLECentralPlugin.BLECentralPluginStatic = function() {};

/**
 * @param {!Array<string>} services
 * @param {number} seconds
 * @param {function(!BLECentralPlugin.PeripheralData): ?} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.scan = function(services, seconds, success, failure) {};

/**
 * @param {!Array<string>} services
 * @param {function(!BLECentralPlugin.PeripheralData): ?} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.startScan = function(services, success, failure) {};

/**
 * @param {!Array<string>} services
 * @param {!BLECentralPlugin.StartScanOptions} options
 * @param {function(!BLECentralPlugin.PeripheralData): ?} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.startScanWithOptions = function(services, options, success, failure) {};

/**
 * @param {function(): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.stopScan = function(success, failure) {};

/**
 * @param {string} device_id
 * @param {function(!BLECentralPlugin.PeripheralDataExtended): ?} success
 * @param {function(): ?} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.connect = function(device_id, success, failure) {};

/**
 * @param {string} device_id
 * @param {function(): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.disconnect = function(device_id, success, failure) {};

/**
 * @param {string} device_id
 * @param {string} service_uuid
 * @param {string} characteristic_uuid
 * @param {function(!ArrayBuffer): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.read = function(device_id, service_uuid, characteristic_uuid, success, failure) {};

/**
 * @param {string} device_id
 * @param {string} service_uuid
 * @param {string} characteristic_uuid
 * @param {!ArrayBuffer} data
 * @param {function(): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.write = function(device_id, service_uuid, characteristic_uuid, data, success, failure) {};

/**
 * @param {string} device_id
 * @param {string} service_uuid
 * @param {string} characteristic_uuid
 * @param {!ArrayBuffer} data
 * @param {function(): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.writeWithoutResponse = function(device_id, service_uuid, characteristic_uuid, data, success, failure) {};

/**
 * @param {string} device_id
 * @param {string} service_uuid
 * @param {string} characteristic_uuid
 * @param {function(!ArrayBuffer): ?} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.startNotification = function(device_id, service_uuid, characteristic_uuid, success, failure) {};

/**
 * @param {string} device_id
 * @param {string} service_uuid
 * @param {string} characteristic_uuid
 * @param {function(): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.stopNotification = function(device_id, service_uuid, characteristic_uuid, success, failure) {};

/**
 * @param {function(): ?} success
 * @param {function(): ?} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.isEnabled = function(success, failure) {};

/**
 * @param {string} device_id
 * @param {function(): ?} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.isConnected = function(device_id, success, failure) {};

/**
 * @param {function(string): ?} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.startStateNotifications = function(success, failure) {};

/**
 * @param {function(): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.stopStateNotifications = function(success, failure) {};

/**
 * @param {function(): ?=} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.showBluetoothSettings = function(success, failure) {};

/**
 * @param {function(): ?} success
 * @param {function(): ?} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.enable = function(success, failure) {};

/**
 * @param {string} device_id
 * @param {function(number): ?} success
 * @param {function(): ?=} failure
 * @return {void}
 */
BLECentralPlugin.BLECentralPluginStatic.prototype.readRSSI = function(device_id, success, failure) {};
 /** @type {!BLECentralPlugin.BLECentralPluginStatic} */
var ble;
