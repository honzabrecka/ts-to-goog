/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/isotope-layout/index.d.ts:
/** @const */
var IsotopeLibrary = {};

/** @typedef {string} */
IsotopeLibrary.LayoutModes;

/** @typedef {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} */
IsotopeLibrary.Elements;
/**
 * @record
 * @struct
 */
IsotopeLibrary.IsotopeOptions = function() {};
 /** @type {!IsotopeLibrary.CellsByColumn} */
IsotopeLibrary.IsotopeOptions.prototype.cellsByColumn;
 /** @type {!IsotopeLibrary.CellsByRow} */
IsotopeLibrary.IsotopeOptions.prototype.cellsByRow;
 /** @type {!IsotopeLibrary.Style} */
IsotopeLibrary.IsotopeOptions.prototype.containerStyle;
 /** @type {(string|function(): boolean)} */
IsotopeLibrary.IsotopeOptions.prototype.filter;
 /** @type {!IsotopeLibrary.FitRows} */
IsotopeLibrary.IsotopeOptions.prototype.fitRows;
 /** @type {boolean} */
IsotopeLibrary.IsotopeOptions.prototype.initLayout;
 /** @type {string} */
IsotopeLibrary.IsotopeOptions.prototype.itemSelector;
 /** @type {string} */
IsotopeLibrary.IsotopeOptions.prototype.layoutMode;
 /** @type {!IsotopeLibrary.Sorter} */
IsotopeLibrary.IsotopeOptions.prototype.getSortData;
 /** @type {!IsotopeLibrary.Style} */
IsotopeLibrary.IsotopeOptions.prototype.hiddenStyle;
 /** @type {!IsotopeLibrary.Horizontal} */
IsotopeLibrary.IsotopeOptions.prototype.horiz;
 /** @type {!IsotopeLibrary.Masonry} */
IsotopeLibrary.IsotopeOptions.prototype.masonry;
 /** @type {!IsotopeLibrary.MasonryHorizontal} */
IsotopeLibrary.IsotopeOptions.prototype.masontryHorizontal;
 /** @type {boolean} */
IsotopeLibrary.IsotopeOptions.prototype.originLeft;
 /** @type {boolean} */
IsotopeLibrary.IsotopeOptions.prototype.originTop;
 /** @type {!IsotopeLibrary.Packery} */
IsotopeLibrary.IsotopeOptions.prototype.packery;
 /** @type {boolean} */
IsotopeLibrary.IsotopeOptions.prototype.percentPosition;
 /** @type {boolean} */
IsotopeLibrary.IsotopeOptions.prototype.resize;
 /** @type {(boolean|!IsotopeLibrary.SortOrder)} */
IsotopeLibrary.IsotopeOptions.prototype.sortAscending;
 /** @type {string} */
IsotopeLibrary.IsotopeOptions.prototype.sortBy;
 /** @type {(string|number)} */
IsotopeLibrary.IsotopeOptions.prototype.stagger;
 /** @type {string} */
IsotopeLibrary.IsotopeOptions.prototype.stamp;
 /** @type {(string|number)} */
IsotopeLibrary.IsotopeOptions.prototype.transitionDuration;
 /** @type {!IsotopeLibrary.Vertical} */
IsotopeLibrary.IsotopeOptions.prototype.vertical;
 /** @type {!IsotopeLibrary.Style} */
IsotopeLibrary.IsotopeOptions.prototype.visibleStyle;
/**
 * @record
 * @struct
 */
IsotopeLibrary.Isotope = function() {};

/**
 * Adds item elements to the Isotope instance. addItems does not lay out items like appended, prepended, or insert.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.addItems = function(elements) {};

/**
 * Adds and lays out newly appended item elements to the end of the layout.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.appended = function(elements) {};

/**
 * Filters, sorts, and lays out items. arrange is the principle method of Isotope. It is the default method with jQuery .isotope(). Pass in options to apply filtering and sorting.
 * @param {!IsotopeLibrary.IsotopeOptions} options All options are optional, but itemSelector is recommended. Layout modes have their own separate options.
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.arrange = function(options) {};

/**
 * Removes the Isotope functionality completely. destroy will return the element back to its pre-initialized state.
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.destroy = function() {};

/**
 * Returns an array of filtered item elements in current sorted order.
 * @return {!Array<!Element>}
 */
IsotopeLibrary.Isotope.prototype.getFilteredItemElements = function() {};

/**
 * Returns an array of all item elements in the Isotope instance.
 * @return {!Array<!Element>}
 */
IsotopeLibrary.Isotope.prototype.getItemElements = function() {};

/**
 * Hide items.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.hideItemElements = function(elements) {};

/**
 * Appends elements into container element, adds elements as items, and arranges items with filtering and sorting.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.insert = function(elements) {};

/**
 * Lays out all item elements. layout is useful when an item has changed size, and all items need to be laid out again. layout does not apply filtering or sorting.
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.layout = function() {};

/**
 * Lays out specified items.
 * @param {!Array<!HTMLElement>} elements Array of Isotope.Items
 * @param {boolean} isStill Disables transitions
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.layoutItems = function(elements, isStill) {};

/**
 * Adds and lays out newly prepended item elements at the beginning of layout.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.prepended = function(elements) {};

/**
 * Recollects all item elements.
 * For frameworks like Angular and React, reloadItems may be useful to apply changes to the DOM to Isotope.
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.reloadItems = function() {};

/**
 * Removes elements from the Isotope instance and DOM.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.remove = function(elements) {};

/**
 * Reveals hidden items.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.revealItemElements = function(elements) {};

/**
 * Shuffles items in a random order.
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.shuffle = function() {};

/**
 * Stamps elements in the layout. Isotope will lay out item elements around stamped elements.
 * Stamping is only supported by some layout modes: masonry, packery and masonryhorizontal.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.stamp = function(elements) {};

/**
 * Un-stamps elements in the layout, so that Isotope will no longer layout item elements around them.
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.unstamp = function(elements) {};

/**
 * Updates sort data
 * @param {(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)} elements Element, jQuery Object, NodeList, or Array of Elements
 * @return {void}
 */
IsotopeLibrary.Isotope.prototype.updateSortData = function(elements) {};
/**
 * @record
 * @struct
 */
IsotopeLibrary.Sorter = function() {};

/* TODO: IndexSignature: IsotopeLibrary */
/**
 * @record
 * @struct
 */
IsotopeLibrary.SortOrder = function() {};

/* TODO: IndexSignature: IsotopeLibrary */
/**
 * @record
 * @struct
 */
IsotopeLibrary.Style = function() {};

/* TODO: IndexSignature: IsotopeLibrary */
/**
 * @record
 * @struct
 */
IsotopeLibrary.CellsByColumn = function() {};
 /** @type {(string|number)} */
IsotopeLibrary.CellsByColumn.prototype.columnWidth;
 /** @type {(string|number)} */
IsotopeLibrary.CellsByColumn.prototype.rowHeight;
/**
 * @record
 * @struct
 */
IsotopeLibrary.CellsByRow = function() {};
 /** @type {(string|number)} */
IsotopeLibrary.CellsByRow.prototype.columnWidth;
 /** @type {(string|number)} */
IsotopeLibrary.CellsByRow.prototype.rowHeight;
/**
 * @record
 * @struct
 */
IsotopeLibrary.FitRows = function() {};
 /** @type {(string|number)} */
IsotopeLibrary.FitRows.prototype.gutter;
/**
 * @record
 * @struct
 */
IsotopeLibrary.Horizontal = function() {};
 /** @type {number} */
IsotopeLibrary.Horizontal.prototype.verticalAligment;
/**
 * @record
 * @struct
 */
IsotopeLibrary.Masonry = function() {};
 /** @type {(string|number)} */
IsotopeLibrary.Masonry.prototype.columnWidth;
 /** @type {boolean} */
IsotopeLibrary.Masonry.prototype.fitWidth;
 /** @type {(string|number)} */
IsotopeLibrary.Masonry.prototype.gutter;
/**
 * @record
 * @struct
 */
IsotopeLibrary.MasonryHorizontal = function() {};
 /** @type {(string|number)} */
IsotopeLibrary.MasonryHorizontal.prototype.gutter;
 /** @type {(string|number)} */
IsotopeLibrary.MasonryHorizontal.prototype.rowHeight;
/**
 * @record
 * @struct
 */
IsotopeLibrary.Packery = function() {};
 /** @type {(string|number)} */
IsotopeLibrary.Packery.prototype.columnWidth;
 /** @type {(string|number)} */
IsotopeLibrary.Packery.prototype.gutter;
 /** @type {boolean} */
IsotopeLibrary.Packery.prototype.horizontal;
 /** @type {number} */
IsotopeLibrary.Packery.prototype.rowHeight;
/**
 * @record
 * @struct
 */
IsotopeLibrary.Vertical = function() {};
 /** @type {number} */
IsotopeLibrary.Vertical.prototype.horizontalAlignment;
/**
 * @extends {IsotopeLibrary.Isotope}
 * @record
 * @struct
 */
function Isotope() {}
 /** @type {function(new: (!IsotopeLibrary.Isotope), string): ?} */
var Isotope;

/**
 * Get the Isotope instance from a jQuery object. Isotope instances are useful to access Isotope properties.
 * @param {string} methodName
 * @return {!IsotopeLibrary.Isotope}
 */
JQuery.prototype.data = function(methodName) {};

/**
 * Lays out specified items.
 * Adds item elements to the Isotope instance. addItems does not lay out items like appended, prepended, or insert.
 * Adds and lays out newly appended item elements to the end of the layout.
 * Hide items.
 * Appends elements into container element, adds elements as items, and arranges items with filtering and sorting.
 * Adds and lays out newly prepended item elements at the beginning of layout.
 * Removes elements from the Isotope instance and DOM.
 * Reveals hidden items.
 * Stamps elements in the layout. Isotope will lay out item elements around stamped elements.
 * Stamping is only supported by some layout modes: masonry, packery and masonryhorizontal.
 * Un-stamps elements in the layout, so that Isotope will no longer layout item elements around them.
 * Updates sort data
 * Removes the Isotope functionality completely. destroy will return the element back to its pre-initialized state.
 * Returns an array of filtered item elements in current sorted order.
 * Returns an array of all item elements in the Isotope instance.
 * Lays out all item elements. layout is useful when an item has changed size, and all items need to be laid out again. layout does not apply filtering or sorting.
 * Recollects all item elements.
 * For frameworks like Angular and React, reloadItems may be useful to apply changes to the DOM to Isotope.
 * Shuffles items in a random order.
 * Filters, sorts, and lays out items. Pass in options to apply filtering and sorting.
 * @param {string|!IsotopeLibrary.IsotopeOptions} methodName_or_options All options are optional, but itemSelector is recommended. Layout modes have their own separate options.
 * @param {!Array<!HTMLElement>|(!HTMLElement|!Array<!HTMLElement>|?<!HTMLElement>|!NodeList)=} elements Array of Isotope.Items / Element, jQuery Object, NodeList, or Array of Elements
 * @param {boolean=} isStill Disables transitions
 * @return {?<!HTMLElement>|void|!Array<!Element>}
 */
JQuery.prototype.isotope = function(methodName_or_options, elements, isStill) {};
