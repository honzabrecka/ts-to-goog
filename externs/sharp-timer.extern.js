/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sharp-timer/index.d.ts:
 /** @type {number} */
var millisPerSecond;
 /** @type {number} */
var millisPerMinute;
 /** @type {number} */
var millisPerHour;
 /** @type {number} */
var millisPerDay;

/** @typedef {?} */
var ElapsedEvent;

/** @typedef {?} */
var ElapsingEvent;

/**
 * @constructor
 * @struct
 * Initializes a new instance of the Timer class,
 * and sets all the properties to their initial values.
 * @param {number} interval 
 * The time, in milliseconds, in which the timer will be active.
 * The value must be greater than zero.
 */
function Timer(interval) {}
 /** @type {boolean} */
Timer.prototype._enabled;
 /** @type {boolean} */
Timer.prototype._stopped;
 /** @type {number} */
Timer.prototype._interval;
 /** @type {!Array<?>} */
Timer.prototype._intervalElapsedEvents;
 /** @type {!Array<?>} */
Timer.prototype._intervalElapsingEvents;
 /** @type {boolean} */
Timer.prototype.enabled;
 /** @type {boolean} */
Timer.prototype.stopped;
 /** @type {number} */
Timer.prototype.interval;

/**
 * Starts raising the Timer events
 * by setting the enabled property to true.
 * @return {void}
 */
Timer.prototype.start = function() {};

/**
 * Pauses the Timer instance by setting the enabled property to false.
 * @return {void}
 */
Timer.prototype.pause = function() {};

/**
 * Resumes the Timer instance by setting the enabled property to true.
 * @return {void}
 */
Timer.prototype.resume = function() {};

/**
 * Stops raising the Timer event
 * by setting the enabled property to false.
 * @return {void}
 */
Timer.prototype.stop = function() {};

/**
 * Occurs when the interval has completely elapsed.
 * @param {?} intervalElapsedHandler 
 * The callback which will be executed when
 * the interval elapsed event occurs.
 * @return {void}
 */
Timer.prototype.onIntervalElapsed = function(intervalElapsedHandler) {};

/**
 * Occurs when the interval elapses and completely elapsed.
 * @param {?} intervalElapsingHandler 
 * The callback which will be executed when
 * the interval elapsing event occurs.
 * @return {void}
 */
Timer.prototype.onIntervalElapsing = function(intervalElapsingHandler) {};

/**
 * Returns a string represenation of the remaining
 * in this format: minutes:seconds.
 * examples: 20:23, 00:04, 59:59
 * @return {string}
 */
Timer.prototype.toString = function() {};

/**
 * @param {number} number
 * @return {string}
 */
Timer.prototype.getDoubleDigit = function(number) {};

/**
 * @param {number} interval
 * @return {void}
 */
Timer.prototype.checkForValidInterval = function(interval) {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the Stopwatch class.
 */
function Stopwatch() {}
 /** @type {boolean} */
Stopwatch.prototype._isRunning;
 /** @type {number} */
Stopwatch.prototype._elapsedMilliseconds;
 /** @type {number} */
Stopwatch.prototype._startedTimeInMillis;
 /** @type {!Array<(number|!NodeJS.Timer)>} */
Stopwatch.prototype._intervalIds;
 /** @type {string} */
Stopwatch.prototype.elapsed;
 /** @type {number} */
Stopwatch.prototype.elapsedMilliseconds;
 /** @type {number} */
Stopwatch.prototype.elapsedSeconds;
 /** @type {number} */
Stopwatch.prototype.elapsedMinutes;
 /** @type {number} */
Stopwatch.prototype.elapsedHours;
 /** @type {boolean} */
Stopwatch.prototype.isRunning;

/**
 * Initializes a new Stopwatch instance and
 * starts measuring elapsed time.
 * @return {?}
 */
Stopwatch.startNew = function() {};

/**
 * Starts, or resumes the Stopwatch
 * from measuring elapsed time.
 * @return {void}
 */
Stopwatch.prototype.start = function() {};

/**
 * Stops the Stopwatch from measuring elapsed time.
 * @return {void}
 */
Stopwatch.prototype.stop = function() {};

/**
 * Stops the Stopwatch and resets the elapsed time to zero.
 * @return {void}
 */
Stopwatch.prototype.reset = function() {};

/**
 * Stops the Stopwatch,
 * resets the elapsed time to zero
 * and starts the Stopwatch for measuring elapsed time.
 * It is a shortcut for writing
 * reset then start.
 * @return {void}
 */
Stopwatch.prototype.restart = function() {};

/**
 * Stops the Stopwatch and cleans up the intervals.
 * @return {void}
 */
Stopwatch.prototype.dispose = function() {};

/**
 * @param {number} num
 * @return {string}
 */
Stopwatch.prototype.getDoubleDigit = function(num) {};

/**
 * @constructor
 * @struct
 * @param {number} milliseconds
 */
function Timespan(milliseconds) {}
 /** @type {number} */
Timespan.prototype._milliseconds;
 /** @type {number} */
Timespan.prototype.milliseconds;
 /** @type {number} */
Timespan.prototype.seconds;
 /** @type {number} */
Timespan.prototype.minutes;
 /** @type {number} */
Timespan.prototype.hours;
 /** @type {number} */
Timespan.prototype.days;

/**
 * Returns a Timespan that represents a specified number of days.
 * @param {number} days The number of days.
 * @return {?}
 */
Timespan.fromDays = function(days) {};

/**
 * Returns a Timespan that represents a specified number of hours.
 * @param {number} hours The number of hours.
 * @return {?}
 */
Timespan.fromHours = function(hours) {};

/**
 * Returns a Timespan that represents a specified number of minutes.
 * @param {number} minutes The number of minutes.
 * @return {?}
 */
Timespan.fromMinutes = function(minutes) {};

/**
 * Returns a Timespan that represents a specified number of seconds.
 * @param {number} seconds The number of seconds.
 * @return {?}
 */
Timespan.fromSeconds = function(seconds) {};

/**
 * Returns a Timespan that represents a specified number of milliseconds.
 * @param {number} milliseconds The number of milliseconds.
 * @return {?}
 */
Timespan.fromMilliseconds = function(milliseconds) {};

/**
 * Compares two Timespan objects and
 * returns an integer that indicates whether
 * the first value is shorter than, equal to,
 * or longer than the second value.
 * @param {?} t1 The first Timespan to compare.
 * @param {?} t2 The second Timespan to compare.
 * @return {number}
 */
Timespan.compare = function(t1, t2) {};

/**
 * Returns a boolean value that indicates
 * whether two specified instances of Timespan are equal.
 * @param {?} t1 The first Timespan to compare.
 * @param {?} t2 The second Timespan to compare.
 * @return {boolean}
 */
Timespan.equals = function(t1, t2) {};

/**
 * Adds the specified Timespan to this instance.
 * @param {?} timespan The Timespan to add.
 * @return {void}
 */
Timespan.prototype.addMutable = function(timespan) {};

/**
 * Substracts the specified Timespan from this instance.
 * @param {?} timespan The Timespan to substract.
 * @return {void}
 */
Timespan.prototype.substractMutable = function(timespan) {};

/**
 * Returns a new Timespan object whose
 * value is the sum of the specified Timespan object and this instance.
 * @param {?} timespan The Timespan to add.
 * @return {?}
 */
Timespan.prototype.add = function(timespan) {};

/**
 * Returns a new Timespan object whose
 * value is the difference between the
 * specified Timespan object and this instance.
 * @param {?} timespan The Timespan to substract.
 * @return {?}
 */
Timespan.prototype.substract = function(timespan) {};

/**
 * Returns a new Timespan object
 * whose value is the negated value of this instance.
 * @return {?}
 */
Timespan.prototype.negate = function() {};
