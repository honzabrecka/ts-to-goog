/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "jquery"
/** @const */
tsickle_declare_module.jquery = {};

/* TODO: ExportAssignment in tsickle_declare_module.jquery */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "jquery/dist/jquery.slim"
/** @const */
tsickle_declare_module.jquery_dist_jquery_slim = {};

/* TODO: ExportAssignment in tsickle_declare_module.jquery_dist_jquery_slim */
 /** @type {!JQueryStatic<!HTMLElement>} */
var jQuery;
 /** @type {!JQueryStatic<!HTMLElement>} */
var $;

/** @typedef {!Event} */
var _Event;
/**
 * @record
 * @struct
 */
function JQueryStatic() {}
 /** @type {!JQuery.DeferredStatic} */
JQueryStatic.prototype.Deferred;
 /** @type {!JQuery.EventStatic<TElement>} */
JQueryStatic.prototype.Event;
 /** @type {!JQuery.PlainObject<!JQuery.CSSHook<TElement>>} */
JQueryStatic.prototype.cssHooks;
 /** @type {!JQuery.PlainObject<boolean>} */
JQueryStatic.prototype.cssNumber;
 /** @type {?<TElement>} */
JQueryStatic.prototype.fn;
 /** @type {{interval: number, off: boolean, step: !JQuery.PlainObject<!JQuery.AnimationHook<TElement>>}} */
JQueryStatic.prototype.fx;
 /** @type {!JQuery.Thenable<!JQueryStatic>} */
JQueryStatic.prototype.ready;
 /** @type {!JQuery.PlainObject<?>} */
JQueryStatic.prototype.support;
 /** @type {!JQuery.PlainObject<!JQuery.ValHook<TElement>>} */
JQueryStatic.prototype.valHooks;

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * A multi-purpose callbacks list object that provides a powerful way to manage callback lists.
 * 
 * @see {\@link https://api.jquery.com/jQuery.Callbacks/}
 * \@since 1.7
 * @template T
 * @param {string=} flags An optional list of space-separated flags that change how the callback list behaves.
 * @return {!JQuery.Callbacks<T>}
 */
JQueryStatic.prototype.Callbacks = function(flags) {};

/**
 * Perform an asynchronous HTTP (Ajax) request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajax/}
 * \@since 1.5
 * Perform an asynchronous HTTP (Ajax) request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajax/}
 * \@since 1.0
 * @param {string|!JQuery.AjaxSettings<?>=} url_or_settings A string containing the URL to which the request is sent. / A set of key/value pairs that configure the Ajax request. All settings are optional. A default can
 *                 be set for any option with $.ajaxSetup().
 * @param {!JQuery.AjaxSettings<?>=} settings A set of key/value pairs that configure the Ajax request. All settings are optional. A default can
 *                 be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings.
 * @return {!JQuery.jqXHR<?>}
 */
JQueryStatic.prototype.ajax = function(url_or_settings, settings) {};

/**
 * Handle custom Ajax options or modify existing options before each request is sent and before they
 * are processed by $.ajax().
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxPrefilter/}
 * \@since 1.5
 * Handle custom Ajax options or modify existing options before each request is sent and before they
 * are processed by $.ajax().
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxPrefilter/}
 * \@since 1.5
 * @param {string|function(!JQuery.AjaxSettings<?>, !JQuery.AjaxSettings<?>, !JQuery.jqXHR<?>): (string|void)} dataTypes_or_handler An optional string containing one or more space-separated dataTypes / A handler to set default values for future Ajax requests.
 * @param {function(!JQuery.AjaxSettings<?>, !JQuery.AjaxSettings<?>, !JQuery.jqXHR<?>): (string|void)=} handler A handler to set default values for future Ajax requests.
 * @return {void}
 */
JQueryStatic.prototype.ajaxPrefilter = function(dataTypes_or_handler, handler) {};

/**
 * Set default values for future Ajax requests. Its use is not recommended.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxSetup/}
 * \@since 1.1
 * @param {!JQuery.AjaxSettings<?>} options A set of key/value pairs that configure the default Ajax request. All options are optional.
 * @return {!JQuery.AjaxSettings<?>}
 */
JQueryStatic.prototype.ajaxSetup = function(options) {};

/**
 * Creates an object that handles the actual transmission of Ajax data.
 * 
 * @see {\@link https://api.jquery.com/jQuery.ajaxTransport/}
 * \@since 1.5
 * @param {string} dataType A string identifying the data type to use
 * @param {function(!JQuery.AjaxSettings<?>, !JQuery.AjaxSettings<?>, !JQuery.jqXHR<?>): (void|!JQuery.Transport)} handler A handler to return the new transport object to use with the data type provided in the first argument.
 * @return {void}
 */
JQueryStatic.prototype.ajaxTransport = function(dataType, handler) {};

/**
 * Check to see if a DOM element is a descendant of another DOM element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.contains/}
 * \@since 1.4
 * @param {!Element} container The DOM element that may contain the other element.
 * @param {!Element} contained The DOM element that may be contained by (a descendant of) the other element.
 * @return {boolean}
 */
JQueryStatic.prototype.contains = function(container, contained) {};

/**
 * @param {!Element} elem
 * @param {?} unknown
 * @return {?}
 */
JQueryStatic.prototype.css = function(elem, unknown) {};

/**
 * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or
 * the full data store for the element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.data/}
 * \@since 1.2.3
 * Store arbitrary data associated with the specified element. Returns the value that was set.
 * 
 * @see {\@link https://api.jquery.com/jQuery.data/}
 * \@since 1.2.3
 * Returns value at named data store for the element, as set by jQuery.data(element, name, value), or
 * the full data store for the element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.data/}
 * \@since 1.2.3
 * \@since 1.4
 * @template T
 * @param {!Element} element The DOM element to query for the data. / The DOM element to associate with the data.
 * @param {string=} key Name of the data stored. / A string naming the piece of data to set.
 * @param {undefined|T=} undefined_or_value The new data value; this can be any Javascript type except undefined.
 * @return {?|T}
 */
JQueryStatic.prototype.data = function(element, key, undefined_or_value) {};

/**
 * Execute the next function on the queue for the matched element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.dequeue/}
 * \@since 1.3
 * @param {!Element} element A DOM element from which to remove and execute a queued function.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {void}
 */
JQueryStatic.prototype.dequeue = function(element, queueName) {};

/**
 * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays.
 * Arrays and array-like objects with a length property (such as a function's arguments object) are
 * iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
 * 
 * @see {\@link https://api.jquery.com/jQuery.each/}
 * \@since 1.0
 * A generic iterator function, which can be used to seamlessly iterate over both objects and arrays.
 * Arrays and array-like objects with a length property (such as a function's arguments object) are
 * iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.
 * 
 * @see {\@link https://api.jquery.com/jQuery.each/}
 * \@since 1.0
 * @template T, K
 * @param {!ArrayLike<T>|T} array_or_obj The array to iterate over. / The object to iterate over.
 * @param {function(number, T): ?|function(K, ?): ?} callback The function that will be executed on every object.
 * @return {!ArrayLike<T>|T}
 */
JQueryStatic.prototype.each = function(array_or_obj, callback) {};

/**
 * Takes a string and throws an exception containing it.
 * 
 * @see {\@link https://api.jquery.com/jQuery.error/}
 * \@since 1.4.1
 * @param {string} message The message to send out.
 * @return {?}
 */
JQueryStatic.prototype.error = function(message) {};

/**
 * Escapes any character that has a special meaning in a CSS selector.
 * 
 * @see {\@link https://api.jquery.com/jQuery.escapeSelector/}
 * \@since 3.0
 * @param {string} selector A string containing a selector expression to escape.
 * @return {string}
 */
JQueryStatic.prototype.escapeSelector = function(selector) {};

/**
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.1.4
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.1.4
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.1.4
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.1.4
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.1.4
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.1.4
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.1.4
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.0
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.0
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.0
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.0
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.0
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.0
 * Merge the contents of two or more objects together into the first object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.extend/}
 * \@since 1.0
 * @template T, U, V, W, X, Y, Z
 * @param {boolean|T|?} deep_or_target If true, the merge becomes recursive (aka. deep copy). Passing false for this argument is not supported. / An object that will receive the new properties if additional objects are passed in or that will
 *               extend the jQuery namespace if it is the sole argument.
 * @param {T|?|U} target_or_object1 The object to extend. It will receive the new properties.
 * @param {...U|?|V} object1_or_object2_or_objects
 * @return {?}
 */
JQueryStatic.prototype.extend = function(deep_or_target, target_or_object1, object1_or_object2_or_objects) {};

/**
 * Load data from the server using a HTTP GET request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.get/}
 * \@since 1.0
 * Load data from the server using a HTTP GET request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.get/}
 * \@since 1.0
 * Load data from the server using a HTTP GET request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.get/}
 * \@since 1.0
 * Load data from the server using a HTTP GET request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.get/}
 * \@since 1.0
 * \@since 1.12
 * \@since 2.2
 * @param {string|(string|!JQuery.UrlAjaxSettings<?>)=} url_or_url_settings A string containing the URL to which the request is sent. / A string containing the URL to which the request is sent.
 *                     A set of key/value pairs that configure the Ajax request. All properties except for url are
 *                     optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) for a
 *                     complete list of all settings. The type option will automatically be set to GET.
 * @param {(string|!JQuery.PlainObject<?>)|!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>|(string|!JQuery.PlainObject<?>|!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>)=} data_or_success_or_success_data A plain object or string that is sent to the server with the request. / A callback function that is executed if the request succeeds. Required if dataType is provided, but
 *                you can use null or jQuery.noop as a placeholder. / A callback function that is executed if the request succeeds. Required if dataType is provided, but
 *                     you can use null or jQuery.noop as a placeholder.
 *                     A plain object or string that is sent to the server with the request.
 * @param {!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>|string=} success_or_dataType A callback function that is executed if the request succeeds. Required if dataType is provided, but
 *                you can use null or jQuery.noop as a placeholder. / The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
 * @param {string=} dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
 * @return {!JQuery.jqXHR<?>}
 */
JQueryStatic.prototype.get = function(url_or_url_settings, data_or_success_or_success_data, success_or_dataType, dataType) {};

/**
 * Load JSON-encoded data from the server using a GET HTTP request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.getJSON/}
 * \@since 1.0
 * Load JSON-encoded data from the server using a GET HTTP request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.getJSON/}
 * \@since 1.0
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {(string|!JQuery.PlainObject<?>)|(string|!JQuery.PlainObject<?>|!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>)=} data_or_success_data A plain object or string that is sent to the server with the request. / A callback function that is executed if the request succeeds.
 *                     A plain object or string that is sent to the server with the request.
 * @param {!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>=} success A callback function that is executed if the request succeeds.
 * @return {!JQuery.jqXHR<?>}
 */
JQueryStatic.prototype.getJSON = function(url, data_or_success_data, success) {};

/**
 * Load a JavaScript file from the server using a GET HTTP request, then execute it.
 * 
 * @see {\@link https://api.jquery.com/jQuery.getScript/}
 * \@since 1.0
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {!JQuery.jqXHR.DoneCallback<string, !JQuery.jqXHR<string>>=} success A callback function that is executed if the request succeeds.
 * @return {!JQuery.jqXHR<string>}
 */
JQueryStatic.prototype.getScript = function(url, success) {};

/**
 * Execute some JavaScript code globally.
 * 
 * @see {\@link https://api.jquery.com/jQuery.globalEval/}
 * \@since 1.0.4
 * @param {string} code The JavaScript code to execute.
 * @return {void}
 */
JQueryStatic.prototype.globalEval = function(code) {};

/**
 * Finds the elements of an array which satisfy a filter function. The original array is not affected.
 * 
 * @see {\@link https://api.jquery.com/jQuery.grep/}
 * \@since 1.0
 * @template T
 * @param {!ArrayLike<T>} array The array-like object to search through.
 * @param {function(T, number): boolean} fn The function to process each item against. The first argument to the function is the item, and the
 *           second argument is the index. The function should return a Boolean value. this will be the global window object.
 * @param {boolean=} invert If "invert" is false, or not provided, then the function returns an array consisting of all elements
 *               for which "callback" returns true. If "invert" is true, then the function returns an array
 *               consisting of all elements for which "callback" returns false.
 * @return {!Array<T>}
 */
JQueryStatic.prototype.grep = function(array, fn, invert) {};

/**
 * Determine whether an element has any jQuery data associated with it.
 * 
 * @see {\@link https://api.jquery.com/jQuery.hasData/}
 * \@since 1.5
 * @param {!Element} element A DOM element to be checked for data.
 * @return {boolean}
 */
JQueryStatic.prototype.hasData = function(element) {};

/**
 * Holds or releases the execution of jQuery's ready event.
 * 
 * @see {\@link https://api.jquery.com/jQuery.holdReady/}
 * \@since 1.6
 * @deprecated 3.2
 * @param {boolean} hold Indicates whether the ready hold is being requested or released
 * @return {void}
 */
JQueryStatic.prototype.holdReady = function(hold) {};

/**
 * Modify and filter HTML strings passed through jQuery manipulation methods.
 * 
 * @see {\@link https://api.jquery.com/jQuery.htmlPrefilter/}
 * \@since 1.12/2.2
 * @param {string} html The HTML string on which to operate.
 * @return {string}
 */
JQueryStatic.prototype.htmlPrefilter = function(html) {};

/**
 * Search for a specified value within an array and return its index (or -1 if not found).
 * 
 * @see {\@link https://api.jquery.com/jQuery.inArray/}
 * \@since 1.2
 * @template T
 * @param {T} value The value to search for.
 * @param {!Array<T>} array An array through which to search.
 * @param {number=} fromIndex The index of the array at which to begin the search. The default is 0, which will search the whole array.
 * @return {number}
 */
JQueryStatic.prototype.inArray = function(value, array, fromIndex) {};

/**
 * Determine whether the argument is an array.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isArray/}
 * \@since 1.3
 * @deprecated 3.2
 * @param {?} obj Object to test whether or not it is an array.
 * @return {boolean}
 */
JQueryStatic.prototype.isArray = function(obj) {};

/**
 * Check to see if an object is empty (contains no enumerable properties).
 * 
 * @see {\@link https://api.jquery.com/jQuery.isEmptyObject/}
 * \@since 1.4
 * @param {?} obj The object that will be checked to see if it's empty.
 * @return {boolean}
 */
JQueryStatic.prototype.isEmptyObject = function(obj) {};

/**
 * Determine if the argument passed is a JavaScript function object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isFunction/}
 * \@since 1.2
 * @param {?} obj Object to test whether or not it is a function.
 * @return {boolean}
 */
JQueryStatic.prototype.isFunction = function(obj) {};

/**
 * Determines whether its argument represents a JavaScript number.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isNumeric/}
 * \@since 1.7
 * @param {?} value The value to be tested.
 * @return {boolean}
 */
JQueryStatic.prototype.isNumeric = function(value) {};

/**
 * Check to see if an object is a plain object (created using "{}" or "new Object").
 * 
 * @see {\@link https://api.jquery.com/jQuery.isPlainObject/}
 * \@since 1.4
 * @param {?} obj The object that will be checked to see if it's a plain object.
 * @return {boolean}
 */
JQueryStatic.prototype.isPlainObject = function(obj) {};

/**
 * Determine whether the argument is a window.
 * 
 * @see {\@link https://api.jquery.com/jQuery.isWindow/}
 * \@since 1.4.3
 * @param {?} obj Object to test whether or not it is a window.
 * @return {boolean}
 */
JQueryStatic.prototype.isWindow = function(obj) {};

/**
 * Check to see if a DOM node is within an XML document (or is an XML document).
 * 
 * @see {\@link https://api.jquery.com/jQuery.isXMLDoc/}
 * \@since 1.1.4
 * @param {!Node} node The DOM node that will be checked to see if it's in an XML document.
 * @return {boolean}
 */
JQueryStatic.prototype.isXMLDoc = function(node) {};

/**
 * Convert an array-like object into a true JavaScript array.
 * 
 * @see {\@link https://api.jquery.com/jQuery.makeArray/}
 * \@since 1.2
 * @template T
 * @param {!ArrayLike<T>} obj Any object to turn into a native Array.
 * @return {!Array<T>}
 */
JQueryStatic.prototype.makeArray = function(obj) {};

/**
 * Translate all items in an array or object to new array of items.
 * 
 * @see {\@link https://api.jquery.com/jQuery.map/}
 * \@since 1.0
 * Translate all items in an array or object to new array of items.
 * 
 * @see {\@link https://api.jquery.com/jQuery.map/}
 * \@since 1.6
 * @template T, R, K
 * @param {!Array<T>|T} array_or_obj The Array to translate. / The Object to translate.
 * @param {function(T, number): R|function(?, K): R} callback The function to process each item against. The first argument to the function is the array item, the
 *                 second argument is the index in array The function can return any value. A returned array will be
 *                 flattened into the resulting array. Within the function, this refers to the global (window) object. / The function to process each item against. The first argument to the function is the value; the
 *                 second argument is the key of the object property. The function can return any value to add to the
 *                 array. A returned array will be flattened into the resulting array. Within the function, this refers
 *                 to the global (window) object.
 * @return {!Array<R>}
 */
JQueryStatic.prototype.map = function(array_or_obj, callback) {};

/**
 * Merge the contents of two arrays together into the first array.
 * 
 * @see {\@link https://api.jquery.com/jQuery.merge/}
 * \@since 1.0
 * @template T, U
 * @param {!ArrayLike<T>} first The first array-like object to merge, the elements of second added.
 * @param {!ArrayLike<U>} second The second array-like object to merge into the first, unaltered.
 * @return {!Array<(T|U)>}
 */
JQueryStatic.prototype.merge = function(first, second) {};

/**
 * Relinquish jQuery's control of the $ variable.
 * 
 * @see {\@link https://api.jquery.com/jQuery.noConflict/}
 * \@since 1.0
 * @param {boolean=} removeAll A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).
 * @return {JQueryStatic}
 */
JQueryStatic.prototype.noConflict = function(removeAll) {};

/**
 * An empty function.
 * 
 * @see {\@link https://api.jquery.com/jQuery.noop/}
 * \@since 1.4
 * @return {undefined}
 */
JQueryStatic.prototype.noop = function() {};

/**
 * Return a number representing the current time.
 * 
 * @see {\@link https://api.jquery.com/jQuery.now/}
 * \@since 1.4.3
 * @return {number}
 */
JQueryStatic.prototype.now = function() {};

/**
 * Create a serialized representation of an array, a plain object, or a jQuery object suitable for use
 * in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input
 * elements with name/value properties.
 * 
 * @see {\@link https://api.jquery.com/jQuery.param/}
 * \@since 1.2
 * \@since 1.4
 * @param {(!Array<?>|!JQuery.PlainObject<?>|?<!HTMLElement>)} obj An array, a plain object, or a jQuery object to serialize.
 * @param {boolean=} traditional A Boolean indicating whether to perform a traditional "shallow" serialization.
 * @return {string}
 */
JQueryStatic.prototype.param = function(obj, traditional) {};

/**
 * Parses a string into an array of DOM nodes.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseHTML/}
 * \@since 1.8
 * Parses a string into an array of DOM nodes.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseHTML/}
 * \@since 1.8
 * @param {string} data HTML string to be parsed
 * @param {!Document|(boolean|!Document)=} context_or_context_keepScripts Document element to serve as the context in which the HTML fragment will be created / Document element to serve as the context in which the HTML fragment will be created
 *                            A Boolean indicating whether to include scripts passed in the HTML string
 * @param {boolean=} keepScripts A Boolean indicating whether to include scripts passed in the HTML string
 * @return {!Array<(!Element|!Text|!Comment)>}
 */
JQueryStatic.prototype.parseHTML = function(data, context_or_context_keepScripts, keepScripts) {};

/**
 * Takes a well-formed JSON string and returns the resulting JavaScript value.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseJSON/}
 * \@since 1.4.1
 * @deprecated 3.0
 * @param {string} json The JSON string to parse.
 * @return {?}
 */
JQueryStatic.prototype.parseJSON = function(json) {};

/**
 * Parses a string into an XML document.
 * 
 * @see {\@link https://api.jquery.com/jQuery.parseXML/}
 * \@since 1.5
 * @param {string} data a well-formed XML string to be parsed
 * @return {!XMLDocument}
 */
JQueryStatic.prototype.parseXML = function(data) {};

/**
 * Load data from the server using a HTTP POST request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.post/}
 * \@since 1.0
 * Load data from the server using a HTTP POST request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.post/}
 * \@since 1.0
 * Load data from the server using a HTTP POST request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.post/}
 * \@since 1.0
 * Load data from the server using a HTTP POST request.
 * 
 * @see {\@link https://api.jquery.com/jQuery.post/}
 * \@since 1.0
 * \@since 1.12
 * \@since 2.2
 * @param {string|(string|!JQuery.UrlAjaxSettings<?>)=} url_or_url_settings A string containing the URL to which the request is sent. / A string containing the URL to which the request is sent.
 *                     A set of key/value pairs that configure the Ajax request. All properties except for url are
 *                     optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) for a
 *                     complete list of all settings. Type will automatically be set to POST.
 * @param {(string|!JQuery.PlainObject<?>)|!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>|(string|!JQuery.PlainObject<?>|!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>)=} data_or_success_or_success_data A plain object or string that is sent to the server with the request. / A callback function that is executed if the request succeeds. Required if dataType is provided, but
 *                can be null in that case. / A callback function that is executed if the request succeeds. Required if dataType is provided, but
 *                     can be null in that case.
 *                     A plain object or string that is sent to the server with the request.
 * @param {!JQuery.jqXHR.DoneCallback<?, !JQuery.jqXHR<?>>|string=} success_or_dataType A callback function that is executed if the request succeeds. Required if dataType is provided, but
 *                can be null in that case. / The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
 * @param {string=} dataType The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).
 * @return {!JQuery.jqXHR<?>}
 */
JQueryStatic.prototype.post = function(url_or_url_settings, data_or_success_or_success_data, success_or_dataType, dataType) {};

/**
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4`
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.9
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4`
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * Takes a function and returns a new one that will always have a particular context.
 * 
 * @see {\@link https://api.jquery.com/jQuery.proxy/}
 * \@since 1.4
 * \@since 1.6
 * @template TReturn, A, B, C, D, E, F, G, T, U, V, W, X, Y, Z, TContext
 * @param {function(A, B, C, D, E, F, G): TReturn|function(A, B, C, D, E, F): TReturn|function(A, B, C, D, E): TReturn|function(A, B, C, D): TReturn|function(A, B, C): TReturn|function(A, B): TReturn|function(A): TReturn|function(): TReturn|function(A, B, C, D, E, F, G, T): TReturn|function(A, B, C, D, E, F, T): TReturn|function(A, B, C, D, E, T): TReturn|function(A, B, C, D, T): TReturn|function(A, B, C, T): TReturn|function(A, B, T): TReturn|function(A, T): TReturn|function(T): TReturn|function(A, B, C, D, E, F, G, T, U): TReturn|function(A, B, C, D, E, F, T, U): TReturn|function(A, B, C, D, E, T, U): TReturn|function(A, B, C, D, T, U): TReturn|function(A, B, C, T, U): TReturn|function(A, B, T, U): TReturn|function(A, T, U): TReturn|function(T, U): TReturn|function(A, B, C, D, E, F, G, T, U, V): TReturn|function(A, B, C, D, E, F, T, U, V): TReturn|function(A, B, C, D, E, T, U, V): TReturn|function(A, B, C, D, T, U, V): TReturn|function(A, B, C, T, U, V): TReturn|function(A, B, T, U, V): TReturn|function(A, T, U, V): TReturn|function(T, U, V): TReturn|function(A, B, C, D, E, F, G, T, U, V, W): TReturn|function(A, B, C, D, E, F, T, U, V, W): TReturn|function(A, B, C, D, E, T, U, V, W): TReturn|function(A, B, C, D, T, U, V, W): TReturn|function(A, B, C, T, U, V, W): TReturn|function(A, B, T, U, V, W): TReturn|function(A, T, U, V, W): TReturn|function(T, U, V, W): TReturn|function(A, B, C, D, E, F, G, T, U, V, W, X): TReturn|function(A, B, C, D, E, F, T, U, V, W, X): TReturn|function(A, B, C, D, E, T, U, V, W, X): TReturn|function(A, B, C, D, T, U, V, W, X): TReturn|function(A, B, C, T, U, V, W, X): TReturn|function(A, B, T, U, V, W, X): TReturn|function(A, T, U, V, W, X): TReturn|function(T, U, V, W, X): TReturn|function(A, B, C, D, E, F, G, T, U, V, W, X, Y): TReturn|function(A, B, C, D, E, F, T, U, V, W, X, Y): TReturn|function(A, B, C, D, E, T, U, V, W, X, Y): TReturn|function(A, B, C, D, T, U, V, W, X, Y): TReturn|function(A, B, C, T, U, V, W, X, Y): TReturn|function(A, B, T, U, V, W, X, Y): TReturn|function(A, T, U, V, W, X, Y): TReturn|function(T, U, V, W, X, Y): TReturn|function(A, B, C, D, E, F, G, T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(A, B, C, D, E, F, T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(A, B, C, D, E, T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(A, B, C, D, T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(A, B, C, T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(A, B, T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(A, T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(!Array<?>): TReturn|TContext} fn_or_context The function whose context will be changed. / The object to which the context of the function should be set.
 * @param {null|TContext|?} context_or_name The object to which the context (this) of the function should be set. / The name of the function whose context will be changed (should be a property of the context object).
 * @param {...A|?} a_or_additionalArguments Any number of arguments to be passed to the function referenced in the function argument. / Any number of arguments to be passed to the function named in the name argument.
 * @return {function(): TReturn|function(T): TReturn|function(T, U): TReturn|function(T, U, V): TReturn|function(T, U, V, W): TReturn|function(T, U, V, W, X): TReturn|function(T, U, V, W, X, Y): TReturn|function(T, U, V, W, X, Y, Z, !Array<?>): TReturn|function(!Array<?>): TReturn|function(!Array<?>): ?}
 */
JQueryStatic.prototype.proxy = function(fn_or_context, context_or_name, a_or_additionalArguments) {};

/**
 * Manipulate the queue of functions to be executed on the matched element.
 * 
 * @see {\@link https://api.jquery.com/jQuery.queue/}
 * \@since 1.3
 * @template T
 * @param {T} element A DOM element where the array of queued functions is attached.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @param {(!JQuery.QueueFunction<T>|!Array<!JQuery.QueueFunction<T>>)=} newQueue The new function to add to the queue.
 *                 An array of functions to replace the current queue contents.
 * @return {?}
 */
JQueryStatic.prototype.queue = function(element, queueName, newQueue) {};

/**
 * Handles errors thrown synchronously in functions wrapped in jQuery().
 * 
 * @see {\@link https://api.jquery.com/jQuery.readyException/}
 * \@since 3.1
 * @param {!Error} error An error thrown in the function wrapped in jQuery().
 * @return {?}
 */
JQueryStatic.prototype.readyException = function(error) {};

/**
 * Remove a previously-stored piece of data.
 * 
 * @see {\@link https://api.jquery.com/jQuery.removeData/}
 * \@since 1.2.3
 * @param {!Element} element A DOM element from which to remove data.
 * @param {string=} name A string naming the piece of data to remove.
 * @return {void}
 */
JQueryStatic.prototype.removeData = function(element, name) {};

/**
 * Creates an object containing a set of properties ready to be used in the definition of custom animations.
 * 
 * @see {\@link https://api.jquery.com/jQuery.speed/}
 * \@since 1.1
 * Creates an object containing a set of properties ready to be used in the definition of custom animations.
 * 
 * @see {\@link https://api.jquery.com/jQuery.speed/}
 * \@since 1.0
 * \@since 1.1
 * Creates an object containing a set of properties ready to be used in the definition of custom animations.
 * 
 * @see {\@link https://api.jquery.com/jQuery.speed/}
 * \@since 1.0
 * \@since 1.1
 * @param {(number|string)|(number|string|function(): void|!JQuery.SpeedSettings<TElement>)=} duration_or_duration_complete_settings A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                                   A function to call once the animation is complete, called once per matched element.
 * @param {string|(string|function(): void)=} easing_or_easing_complete A string indicating which easing function to use for the transition. / A string indicating which easing function to use for the transition.
 *                        A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {!JQuery.EffectsOptions<TElement>}
 */
JQueryStatic.prototype.speed = function(duration_or_duration_complete_settings, easing_or_easing_complete, complete) {};

/**
 * Remove the whitespace from the beginning and end of a string.
 * 
 * @see {\@link https://api.jquery.com/jQuery.trim/}
 * \@since 1.0
 * @param {string} str The string to trim.
 * @return {string}
 */
JQueryStatic.prototype.trim = function(str) {};

/**
 * Determine the internal JavaScript [[Class]] of an object.
 * 
 * @see {\@link https://api.jquery.com/jQuery.type/}
 * \@since 1.4.3
 * @param {?} obj Object to get the internal JavaScript [[Class]] of.
 * @return {string}
 */
JQueryStatic.prototype.type = function(obj) {};

/**
 * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on
 * arrays of DOM elements, not strings or numbers.
 * 
 * @see {\@link https://api.jquery.com/jQuery.unique/}
 * \@since 1.1.3
 * @deprecated 3.0
 * @template T
 * @param {!Array<T>} array The Array of DOM elements.
 * @return {!Array<T>}
 */
JQueryStatic.prototype.unique = function(array) {};

/**
 * Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on
 * arrays of DOM elements, not strings or numbers.
 * 
 * @see {\@link https://api.jquery.com/jQuery.uniqueSort/}
 * \@since 1.12
 * \@since 2.2
 * @template T
 * @param {!Array<T>} array The Array of DOM elements.
 * @return {!Array<T>}
 */
JQueryStatic.prototype.uniqueSort = function(array) {};

/**
 * Provides a way to execute callback functions based on zero or more Thenable objects, usually
 * Deferred objects that represent asynchronous events.
 * 
 * @see {\@link https://api.jquery.com/jQuery.when/}
 * \@since 1.5
 * Provides a way to execute callback functions based on zero or more Thenable objects, usually
 * Deferred objects that represent asynchronous events.
 * 
 * @see {\@link https://api.jquery.com/jQuery.when/}
 * \@since 1.5
 * Provides a way to execute callback functions based on zero or more Thenable objects, usually
 * Deferred objects that represent asynchronous events.
 * 
 * @see {\@link https://api.jquery.com/jQuery.when/}
 * \@since 1.5
 * Provides a way to execute callback functions based on zero or more Thenable objects, usually
 * Deferred objects that represent asynchronous events.
 * 
 * @see {\@link https://api.jquery.com/jQuery.when/}
 * \@since 1.5
 * Provides a way to execute callback functions based on zero or more Thenable objects, usually
 * Deferred objects that represent asynchronous events.
 * 
 * @see {\@link https://api.jquery.com/jQuery.when/}
 * \@since 1.5
 * Provides a way to execute callback functions based on zero or more Thenable objects, usually
 * Deferred objects that represent asynchronous events.
 * 
 * @see {\@link https://api.jquery.com/jQuery.when/}
 * \@since 1.5
 * @template TR1, UR1, VR1, TJ1, UJ1, VJ1, TR2, TJ2, TR3, TJ3
 * @param {...(TR1|!JQuery.Promise<TR1, TJ1, ?>|!JQuery.Thenable<TR1>)|(!JQuery.Promise3<TR1, TJ1, ?, TR2, TJ2, ?, TR3, TJ3, ?>|!JQuery.Promise2<TR1, TJ1, ?, TR2, TJ2, ?>)|?} deferredT_or_deferred_or_deferreds Zero or more Thenable objects.
 * @return {!JQuery.Promise3<TR1, TJ1, ?, UR1, UJ1, ?, VR1, VJ1, ?>|!JQuery.Promise2<TR1, TJ1, ?, UR1, UJ1, ?>|!JQuery.Promise3<TR1, TJ1, ?, TR2, TJ2, ?, TR3, TJ3, ?>|!JQuery.Promise<TR1, TJ1, ?>|!JQuery.Promise<?, ?, ?>}
 */
JQueryStatic.prototype.when = function(deferredT_or_deferred_or_deferreds) {};
/**
 * @extends {Iterable}
 * @record
 * @struct
 */
function JQuery() {}
 /** @type {string} */
JQuery.prototype.jquery;
 /** @type {number} */
JQuery.prototype.length;

/* TODO: IndexSignature:  */

/**
 * Create a new jQuery object with elements added to the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/add/}
 * \@since 1.4
 * Create a new jQuery object with elements added to the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/add/}
 * \@since 1.0
 * \@since 1.3.2
 * @param {string|(string|!Element|?<!HTMLElement>|!Array<!Element>)} selector A string representing a selector expression to find additional elements to add to the set of matched elements. / A string representing a selector expression to find additional elements to add to the set of matched elements.
 *                 One or more elements to add to the set of matched elements.
 *                 An HTML fragment to add to the set of matched elements.
 *                 An existing jQuery object to add to the set of matched elements.
 * @param {!Element=} context The point in the document at which the selector should begin matching; similar to the context
 *                argument of the $(selector, context) method.
 * @return {JQuery}
 */
JQuery.prototype.add = function(selector, context) {};

/**
 * Add the previous set of elements on the stack to the current set, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/addBack/}
 * \@since 1.8
 * @param {string=} selector A string containing a selector expression to match the current set of elements against.
 * @return {JQuery}
 */
JQuery.prototype.addBack = function(selector) {};

/**
 * Adds the specified class(es) to each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/addClass/}
 * \@since 1.0
 * \@since 1.4
 * @param {(string|function(number, string): string)} className One or more space-separated classes to be added to the class attribute of each matched element.
 *                  A function returning one or more space-separated class names to be added to the existing class
 *                  name(s). Receives the index position of the element in the set and the existing class name(s) as
 *                  arguments. Within the function, this refers to the current element in the set.
 * @return {JQuery}
 */
JQuery.prototype.addClass = function(className) {};

/**
 * Insert content, specified by the parameter, after each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/after/}
 * \@since 1.0
 * Insert content, specified by the parameter, after each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/after/}
 * \@since 1.4
 * \@since 1.10
 * @param {...(string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)|function(number, string): (string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)} contents_or_fn One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
 *                 jQuery objects to insert after each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
 *           after each element in the set of matched elements. Receives the index position of the element in the
 *           set and the old HTML value of the element as arguments. Within the function, this refers to the
 *           current element in the set.
 * @return {JQuery}
 */
JQuery.prototype.after = function(contents_or_fn) {};

/**
 * Register a handler to be called when Ajax requests complete. This is an AjaxEvent.
 * 
 * @see {\@link https://api.jquery.com/ajaxComplete/}
 * \@since 1.0
 * @param {function(!JQuery.Event<!Document, null>, !JQuery.jqXHR<?>, !JQuery.AjaxSettings<?>): (boolean|void)} handler The function to be invoked.
 * @return {JQuery}
 */
JQuery.prototype.ajaxComplete = function(handler) {};

/**
 * Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxError/}
 * \@since 1.0
 * @param {function(!JQuery.Event<!Document, null>, !JQuery.jqXHR<?>, !JQuery.AjaxSettings<?>, string): (boolean|void)} handler The function to be invoked.
 * @return {JQuery}
 */
JQuery.prototype.ajaxError = function(handler) {};

/**
 * Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxSend/}
 * \@since 1.0
 * @param {function(!JQuery.Event<!Document, null>, !JQuery.jqXHR<?>, !JQuery.AjaxSettings<?>): (boolean|void)} handler The function to be invoked.
 * @return {JQuery}
 */
JQuery.prototype.ajaxSend = function(handler) {};

/**
 * Register a handler to be called when the first Ajax request begins. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxStart/}
 * \@since 1.0
 * @param {function(): (boolean|void)} handler The function to be invoked.
 * @return {JQuery}
 */
JQuery.prototype.ajaxStart = function(handler) {};

/**
 * Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxStop/}
 * \@since 1.0
 * @param {function(): (boolean|void)} handler The function to be invoked.
 * @return {JQuery}
 */
JQuery.prototype.ajaxStop = function(handler) {};

/**
 * Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.
 * 
 * @see {\@link https://api.jquery.com/ajaxSuccess/}
 * \@since 1.0
 * @param {function(!JQuery.Event<!Document, null>, !JQuery.jqXHR<?>, !JQuery.AjaxSettings<?>, !JQuery.PlainObject<?>): (boolean|void)} handler The function to be invoked.
 * @return {JQuery}
 */
JQuery.prototype.ajaxSuccess = function(handler) {};

/**
 * Perform a custom animation of a set of CSS properties.
 * 
 * @see {\@link https://api.jquery.com/animate/}
 * \@since 1.0
 * Perform a custom animation of a set of CSS properties.
 * 
 * @see {\@link https://api.jquery.com/animate/}
 * \@since 1.0
 * Perform a custom animation of a set of CSS properties.
 * 
 * @see {\@link https://api.jquery.com/animate/}
 * \@since 1.0
 * Perform a custom animation of a set of CSS properties.
 * 
 * @see {\@link https://api.jquery.com/animate/}
 * \@since 1.0
 * @param {!JQuery.PlainObject<?>} properties An object of CSS properties and values that the animation will move toward.
 * @param {(number|string)|(string|number)|!JQuery.EffectsOptions<TElement>|function(): void=} duration_or_duration_easing_or_options_or_complete A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                        A string indicating which easing function to use for the transition. / A map of additional options to pass to the method. / A function to call once the animation is complete, called once per matched element.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.animate = function(properties, duration_or_duration_easing_or_options_or_complete, easing_or_complete, complete) {};

/**
 * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/append/}
 * \@since 1.0
 * Insert content, specified by the parameter, to the end of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/append/}
 * \@since 1.4
 * @param {...(string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)|function(number, string): (string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)} contents_or_fn One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
 *                 jQuery objects to insert at the end of each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
 *           the end of each element in the set of matched elements. Receives the index position of the element
 *           in the set and the old HTML value of the element as arguments. Within the function, this refers to
 *           the current element in the set.
 * @return {JQuery}
 */
JQuery.prototype.append = function(contents_or_fn) {};

/**
 * Insert every element in the set of matched elements to the end of the target.
 * 
 * @see {\@link https://api.jquery.com/appendTo/}
 * \@since 1.0
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>)} target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
 *               will be inserted at the end of the element(s) specified by this parameter.
 * @return {JQuery}
 */
JQuery.prototype.appendTo = function(target) {};

/**
 * Set one or more attributes for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/attr/}
 * \@since 1.0
 * \@since 1.1
 * Set one or more attributes for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/attr/}
 * \@since 1.0
 * Get the value of an attribute for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/attr/}
 * \@since 1.0
 * @param {string|!JQuery.PlainObject<?>} attributeName_or_attributes The name of the attribute to set. / An object of attribute-value pairs to set. / The name of the attribute to get.
 * @param {(string|number|function(number, string): (string|number|void))=} value A value to set for the attribute. If null, the specified attribute will be removed (as in .removeAttr()).
 *              A function returning the value to set. this is the current element. Receives the index position of
 *              the element in the set and the old attribute value as arguments.
 * @return {JQuery|string}
 */
JQuery.prototype.attr = function(attributeName_or_attributes, value) {};

/**
 * Insert content, specified by the parameter, before each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/before/}
 * \@since 1.0
 * Insert content, specified by the parameter, before each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/before/}
 * \@since 1.4
 * \@since 1.10
 * @param {...(string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)|function(number, string): (string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)} contents_or_fn One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
 *                 jQuery objects to insert before each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert
 *           before each element in the set of matched elements. Receives the index position of the element in
 *           the set and the old HTML value of the element as arguments. Within the function, this refers to the
 *           current element in the set.
 * @return {JQuery}
 */
JQuery.prototype.before = function(contents_or_fn) {};

/**
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/}
 * \@since 1.0
 * \@since 1.4.3
 * @deprecated 3.0
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/}
 * \@since 1.0
 * \@since 1.4.3
 * Attach a handler to an event for the elements.
 * 
 * @see {\@link https://api.jquery.com/bind/}
 * \@since 1.4
 * @template TData
 * @param {string|!JQuery.PlainObject<(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)>} eventType_or_events A string containing one or more DOM event types, such as "click" or "submit," or custom event names. / An object containing one or more DOM event types and functions to execute for them.
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 *                Setting the second argument to false will attach a function that prevents the default action from
 *                occurring and stops the event from bubbling.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.bind = function(eventType_or_events, eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/blur/}
 * \@since 1.4.3
 * Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/blur/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.blur = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/change/}
 * \@since 1.4.3
 * Bind an event handler to the "change" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/change/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.change = function(eventData_or_handler, handler) {};

/**
 * Get the children of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/children/}
 * \@since 1.0
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.children = function(selector) {};

/**
 * Remove from the queue all items that have not yet been run.
 * 
 * @see {\@link https://api.jquery.com/clearQueue/}
 * \@since 1.4
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {JQuery}
 */
JQuery.prototype.clearQueue = function(queueName) {};

/**
 * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/click/}
 * \@since 1.4.3
 * Bind an event handler to the "click" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/click/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.click = function(eventData_or_handler, handler) {};

/**
 * Create a deep copy of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/clone/}
 * \@since 1.0
 * \@since 1.5
 * @param {boolean=} withDataAndEvents A Boolean indicating whether event handlers and data should be copied along with the elements. The
 *                          default value is false. *In jQuery 1.5.0 the default value was incorrectly true; it was changed back
 *                          to false in 1.5.1 and up.
 * @param {boolean=} deepWithDataAndEvents A Boolean indicating whether event handlers and data for all children of the cloned element should
 *                              be copied. By default its value matches the first argument's value (which defaults to false).
 * @return {JQuery}
 */
JQuery.prototype.clone = function(withDataAndEvents, deepWithDataAndEvents) {};

/**
 * For each element in the set, get the first element that matches the selector by testing the element
 * itself and traversing up through its ancestors in the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/closest/}
 * \@since 1.4
 * For each element in the set, get the first element that matches the selector by testing the element
 * itself and traversing up through its ancestors in the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/closest/}
 * \@since 1.3
 * \@since 1.6
 * @param {string|(string|!Element|?<!HTMLElement>)} selector A string containing a selector expression to match elements against. / A string containing a selector expression to match elements against.
 *                 A jQuery object to match elements against.
 *                 An element to match elements against.
 * @param {!Element=} context A DOM element within which a matching element may be found.
 * @return {JQuery}
 */
JQuery.prototype.closest = function(selector, context) {};

/**
 * Get the children of each element in the set of matched elements, including text and comment nodes.
 * 
 * @see {\@link https://api.jquery.com/contents/}
 * \@since 1.2
 * @return {?<(TElement|!Text|!Comment)>}
 */
JQuery.prototype.contents = function() {};

/**
 * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/contextmenu/}
 * \@since 1.4.3
 * Bind an event handler to the "contextmenu" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/contextmenu/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.contextmenu = function(eventData_or_handler, handler) {};

/**
 * Set one or more CSS properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/}
 * \@since 1.0
 * \@since 1.4
 * Set one or more CSS properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/}
 * \@since 1.0
 * Get the computed style properties for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/}
 * \@since 1.0
 * Get the computed style properties for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/css/}
 * \@since 1.9
 * @param {string|!JQuery.PlainObject<(string|number|function(number, string): (string|number|void))>|!Array<string>} propertyName_or_properties_or_propertyNames A CSS property name. / An object of property-value pairs to set. / A CSS property.
 *                     An array of one or more CSS properties. / An array of one or more CSS properties.
 * @param {(string|number|function(number, string): (string|number|void))=} value A value to set for the property.
 *              A function returning the value to set. this is the current element. Receives the index position of
 *              the element in the set and the old value as arguments.
 * @return {JQuery|string|!JQuery.PlainObject<string>}
 */
JQuery.prototype.css = function(propertyName_or_properties_or_propertyNames, value) {};

/**
 * Return the value at the named data store for the first element in the jQuery collection, as set by
 * data(name, value) or by an HTML5 data-* attribute.
 * 
 * @see {\@link https://api.jquery.com/data/}
 * \@since 1.2.3
 * Store arbitrary data associated with the matched elements.
 * 
 * @see {\@link https://api.jquery.com/data/}
 * \@since 1.2.3
 * Store arbitrary data associated with the matched elements.
 * 
 * @see {\@link https://api.jquery.com/data/}
 * \@since 1.4.3
 * Return the value at the named data store for the first element in the jQuery collection, as set by
 * data(name, value) or by an HTML5 data-* attribute.
 * 
 * @see {\@link https://api.jquery.com/data/}
 * \@since 1.2.3
 * Return the value at the named data store for the first element in the jQuery collection, as set by
 * data(name, value) or by an HTML5 data-* attribute.
 * 
 * @see {\@link https://api.jquery.com/data/}
 * \@since 1.4
 * @param {string|!JQuery.PlainObject<?>=} key_or_obj Name of the data stored. / A string naming the piece of data to set. / An object of key-value pairs of data to update.
 * @param {undefined|?=} undefined_or_value The new data value; this can be any Javascript type except undefined.
 * @return {?|JQuery|!JQuery.PlainObject<?>}
 */
JQuery.prototype.data = function(key_or_obj, undefined_or_value) {};

/**
 * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/dblclick/}
 * \@since 1.4.3
 * Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/dblclick/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.dblclick = function(eventData_or_handler, handler) {};

/**
 * Set a timer to delay execution of subsequent items in the queue.
 * 
 * @see {\@link https://api.jquery.com/delay/}
 * \@since 1.4
 * @param {(number|string)} duration An integer indicating the number of milliseconds to delay execution of the next item in the queue.
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {JQuery}
 */
JQuery.prototype.delay = function(duration, queueName) {};

/**
 * Attach a handler to one or more events for all elements that match the selector, now or in the
 * future, based on a specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/delegate/}
 * \@since 1.4.2
 * @deprecated 3.0
 * Attach a handler to one or more events for all elements that match the selector, now or in the
 * future, based on a specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/delegate/}
 * \@since 1.4.2
 * Attach a handler to one or more events for all elements that match the selector, now or in the
 * future, based on a specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/delegate/}
 * \@since 1.4.3
 * @template TData
 * @param {string} selector A selector to filter the elements that trigger the event.
 * @param {string|!JQuery.PlainObject<(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)>} eventType_or_events A string containing one or more space-separated JavaScript event types, such as "click" or
 *                  "keydown," or custom event names. / A plain object of one or more event types and functions to execute for them.
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.delegate = function(selector, eventType_or_events, eventData_or_handler, handler) {};

/**
 * Execute the next function on the queue for the matched elements.
 * 
 * @see {\@link https://api.jquery.com/dequeue/}
 * \@since 1.2
 * @param {string=} queueName A string containing the name of the queue. Defaults to fx, the standard effects queue.
 * @return {JQuery}
 */
JQuery.prototype.dequeue = function(queueName) {};

/**
 * Remove the set of matched elements from the DOM.
 * 
 * @see {\@link https://api.jquery.com/detach/}
 * \@since 1.4
 * @param {string=} selector A selector expression that filters the set of matched elements to be removed.
 * @return {JQuery}
 */
JQuery.prototype.detach = function(selector) {};

/**
 * Iterate over a jQuery object, executing a function for each matched element.
 * 
 * @see {\@link https://api.jquery.com/each/}
 * \@since 1.0
 * @param {function(number, TElement): (boolean|void)} fn A function to execute for each matched element.
 * @return {JQuery}
 */
JQuery.prototype.each = function(fn) {};

/**
 * Remove all child nodes of the set of matched elements from the DOM.
 * 
 * @see {\@link https://api.jquery.com/empty/}
 * \@since 1.0
 * @return {JQuery}
 */
JQuery.prototype.empty = function() {};

/**
 * End the most recent filtering operation in the current chain and return the set of matched elements
 * to its previous state.
 * 
 * @see {\@link https://api.jquery.com/end/}
 * \@since 1.0
 * @return {JQuery}
 */
JQuery.prototype.end = function() {};

/**
 * Reduce the set of matched elements to the one at the specified index.
 * 
 * @see {\@link https://api.jquery.com/eq/}
 * \@since 1.1.2
 * \@since 1.4
 * @param {number} index An integer indicating the 0-based position of the element.
 *              An integer indicating the position of the element, counting backwards from the last element in the set.
 * @return {JQuery}
 */
JQuery.prototype.eq = function(index) {};

/**
 * Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.
 * 
 * @see {\@link https://api.jquery.com/jQuery.fn.extend/}
 * \@since 1.0
 * @param {!Object} obj An object to merge onto the jQuery prototype.
 * @return {JQuery}
 */
JQuery.prototype.extend = function(obj) {};

/**
 * Display the matched elements by fading them to opaque.
 * 
 * @see {\@link https://api.jquery.com/fadeIn/}
 * \@since 1.4.3
 * Display the matched elements by fading them to opaque.
 * 
 * @see {\@link https://api.jquery.com/fadeIn/}
 * \@since 1.0
 * \@since 1.4.3
 * Display the matched elements by fading them to opaque.
 * 
 * @see {\@link https://api.jquery.com/fadeIn/}
 * \@since 1.0
 * \@since 1.4.3
 * @param {(number|string)|(string|number)|(string|number|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_easing_or_duration_easing_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                        A string indicating which easing function to use for the transition. / A string or number determining how long the animation will run.
 *                                         A string indicating which easing function to use for the transition.
 *                                         A function to call once the animation is complete, called once per matched element.
 *                                         A map of additional options to pass to the method.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.fadeIn = function(duration_or_duration_easing_or_duration_easing_complete_options, easing_or_complete, complete) {};

/**
 * Hide the matched elements by fading them to transparent.
 * 
 * @see {\@link https://api.jquery.com/fadeOut/}
 * \@since 1.4.3
 * Hide the matched elements by fading them to transparent.
 * 
 * @see {\@link https://api.jquery.com/fadeOut/}
 * \@since 1.0
 * \@since 1.4.3
 * Hide the matched elements by fading them to transparent.
 * 
 * @see {\@link https://api.jquery.com/fadeOut/}
 * \@since 1.0
 * \@since 1.4.3
 * @param {(number|string)|(string|number)|(string|number|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_easing_or_duration_easing_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                        A string indicating which easing function to use for the transition. / A string or number determining how long the animation will run.
 *                                         A string indicating which easing function to use for the transition.
 *                                         A function to call once the animation is complete, called once per matched element.
 *                                         A map of additional options to pass to the method.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.fadeOut = function(duration_or_duration_easing_or_duration_easing_complete_options, easing_or_complete, complete) {};

/**
 * Adjust the opacity of the matched elements.
 * 
 * @see {\@link https://api.jquery.com/fadeTo/}
 * \@since 1.4.3
 * Adjust the opacity of the matched elements.
 * 
 * @see {\@link https://api.jquery.com/fadeTo/}
 * \@since 1.0
 * @param {(number|string)} duration A string or number determining how long the animation will run.
 * @param {number} opacity A number between 0 and 1 denoting the target opacity.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.fadeTo = function(duration, opacity, easing_or_complete, complete) {};

/**
 * Display or hide the matched elements by animating their opacity.
 * 
 * @see {\@link https://api.jquery.com/fadeToggle/}
 * \@since 1.4.4
 * Display or hide the matched elements by animating their opacity.
 * 
 * @see {\@link https://api.jquery.com/fadeToggle/}
 * \@since 1.0
 * \@since 1.4.3
 * Display or hide the matched elements by animating their opacity.
 * 
 * @see {\@link https://api.jquery.com/fadeToggle/}
 * \@since 1.0
 * \@since 1.4.3
 * @param {(number|string)|(string|number)|(string|number|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_easing_or_duration_easing_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                        A string indicating which easing function to use for the transition. / A string or number determining how long the animation will run.
 *                                         A string indicating which easing function to use for the transition.
 *                                         A function to call once the animation is complete, called once per matched element.
 *                                         A map of additional options to pass to the method.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.fadeToggle = function(duration_or_duration_easing_or_duration_easing_complete_options, easing_or_complete, complete) {};

/**
 * Reduce the set of matched elements to those that match the selector or pass the function's test.
 * 
 * @see {\@link https://api.jquery.com/filter/}
 * \@since 1.0
 * \@since 1.4
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>|function(number, TElement): boolean)} selector A string containing a selector expression to match the current set of elements against.
 *                 One or more DOM elements to match the current set of elements against.
 *                 An existing jQuery object to match the current set of elements against.
 *                 A function used as a test for each element in the set. this is the current DOM element.
 * @return {JQuery}
 */
JQuery.prototype.filter = function(selector) {};

/**
 * Get the descendants of each element in the current set of matched elements, filtered by a selector,
 * jQuery object, or element.
 * 
 * @see {\@link https://api.jquery.com/find/}
 * \@since 1.0
 * \@since 1.6
 * @param {(string|!Element|?<!HTMLElement>)} selector A string containing a selector expression to match elements against.
 *                 An element or a jQuery object to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.find = function(selector) {};

/**
 * Stop the currently-running animation, remove all queued animations, and complete all animations for
 * the matched elements.
 * 
 * @see {\@link https://api.jquery.com/finish/}
 * \@since 1.9
 * @param {string=} queue The name of the queue in which to stop animations.
 * @return {JQuery}
 */
JQuery.prototype.finish = function(queue) {};

/**
 * Reduce the set of matched elements to the first in the set.
 * 
 * @see {\@link https://api.jquery.com/first/}
 * \@since 1.4
 * @return {JQuery}
 */
JQuery.prototype.first = function() {};

/**
 * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/focus/}
 * \@since 1.4.3
 * Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/focus/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.focus = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "focusin" event.
 * 
 * @see {\@link https://api.jquery.com/focusin/}
 * \@since 1.4.3
 * Bind an event handler to the "focusin" event.
 * 
 * @see {\@link https://api.jquery.com/focusin/}
 * \@since 1.4
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.focusin = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "focusout" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/focusout/}
 * \@since 1.4.3
 * Bind an event handler to the "focusout" JavaScript event.
 * 
 * @see {\@link https://api.jquery.com/focusout/}
 * \@since 1.4
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.focusout = function(eventData_or_handler, handler) {};

/**
 * Retrieve one of the elements matched by the jQuery object.
 * 
 * @see {\@link https://api.jquery.com/get/}
 * \@since 1.0
 * Retrieve the elements matched by the jQuery object.
 * 
 * @see {\@link https://api.jquery.com/get/}
 * \@since 1.0
 * @param {number=} index A zero-based integer indicating which element to retrieve.
 * @return {TElement|!Array<TElement>}
 */
JQuery.prototype.get = function(index) {};

/**
 * Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
 * 
 * @see {\@link https://api.jquery.com/has/}
 * \@since 1.4
 * @param {(string|!Element)} selector A string containing a selector expression to match elements against.
 *                 A DOM element to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.has = function(selector) {};

/**
 * Determine whether any of the matched elements are assigned the given class.
 * 
 * @see {\@link https://api.jquery.com/hasClass/}
 * \@since 1.2
 * @param {string} className The class name to search for.
 * @return {boolean}
 */
JQuery.prototype.hasClass = function(className) {};

/**
 * Set the CSS height of every matched element.
 * 
 * @see {\@link https://api.jquery.com/height/}
 * \@since 1.0
 * \@since 1.4.1
 * Get the current computed height for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/height/}
 * \@since 1.0
 * @param {(string|number|function(number, number): (string|number))=} value An integer representing the number of pixels, or an integer with an optional unit of measure
 *              appended (as a string).
 *              A function returning the height to set. Receives the index position of the element in the set and
 *              the old height as arguments. Within the function, this refers to the current element in the set.
 * @return {JQuery|number}
 */
JQuery.prototype.height = function(value) {};

/**
 * Hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/hide/}
 * \@since 1.4.3
 * Hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/hide/}
 * \@since 1.0
 * \@since 1.4.3
 * Hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/hide/}
 * \@since 1.0
 * @param {(number|string)|(number|string|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                                  A function to call once the animation is complete, called once per matched element.
 *                                  A map of additional options to pass to the method.
 * @param {string|(string|function(): void)=} easing_or_easing_complete A string indicating which easing function to use for the transition. / A string indicating which easing function to use for the transition.
 *                        A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.hide = function(duration_or_duration_complete_options, easing_or_easing_complete, complete) {};

/**
 * Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and
 * leaves the elements.
 * 
 * @see {\@link https://api.jquery.com/hover/}
 * \@since 1.0
 * \@since 1.4
 * @template T
 * @param {(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)} handlerInOut A function to execute when the mouse pointer enters or leaves the element.
 * @param {(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} handlerOut A function to execute when the mouse pointer leaves the element.
 * @return {JQuery}
 */
JQuery.prototype.hover = function(handlerInOut, handlerOut) {};

/**
 * Set the HTML contents of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/html/}
 * \@since 1.0
 * \@since 1.4
 * Get the HTML contents of the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/html/}
 * \@since 1.0
 * @param {(string|function(number, string): string)=} htmlString A string of HTML to set as the content of each matched element.
 *                   A function returning the HTML content to set. Receives the index position of the element in the set
 *                   and the old HTML value as arguments. jQuery empties the element before calling the function; use the
 *                   oldhtml argument to reference the previous content. Within the function, this refers to the current element in the set.
 * @return {JQuery|string}
 */
JQuery.prototype.html = function(htmlString) {};

/**
 * Search for a given element from among the matched elements.
 * 
 * @see {\@link https://api.jquery.com/index/}
 * \@since 1.0
 * \@since 1.4
 * @param {(string|!Element|?<!HTMLElement>)=} element The DOM element or first element within the jQuery object to look for.
 *                A selector representing a jQuery collection in which to look for an element.
 * @return {number}
 */
JQuery.prototype.index = function(element) {};

/**
 * Set the CSS inner height of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/innerHeight/}
 * \@since 1.8.0
 * Get the current computed height for the first element in the set of matched elements, including
 * padding but not border.
 * 
 * @see {\@link https://api.jquery.com/innerHeight/}
 * \@since 1.2.6
 * @param {(string|number|function(number, number): (string|number))=} value A number representing the number of pixels, or a number along with an optional unit of measure
 *              appended (as a string).
 *              A function returning the inner height (including padding but not border) to set. Receives the index
 *              position of the element in the set and the old inner height as arguments. Within the function, this
 *              refers to the current element in the set.
 * @return {JQuery|number}
 */
JQuery.prototype.innerHeight = function(value) {};

/**
 * Set the CSS inner width of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/innerWidth/}
 * \@since 1.8.0
 * Get the current computed inner width for the first element in the set of matched elements, including
 * padding but not border.
 * 
 * @see {\@link https://api.jquery.com/innerWidth/}
 * \@since 1.2.6
 * @param {(string|number|function(number, number): (string|number))=} value A number representing the number of pixels, or a number along with an optional unit of measure
 *              appended (as a string).
 *              A function returning the inner width (including padding but not border) to set. Receives the index
 *              position of the element in the set and the old inner width as arguments. Within the function, this
 *              refers to the current element in the set.
 * @return {JQuery|number}
 */
JQuery.prototype.innerWidth = function(value) {};

/**
 * Insert every element in the set of matched elements after the target.
 * 
 * @see {\@link https://api.jquery.com/insertAfter/}
 * \@since 1.0
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>)} target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
 *               will be inserted after the element(s) specified by this parameter.
 * @return {JQuery}
 */
JQuery.prototype.insertAfter = function(target) {};

/**
 * Insert every element in the set of matched elements before the target.
 * 
 * @see {\@link https://api.jquery.com/insertBefore/}
 * \@since 1.0
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>)} target A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements
 *               will be inserted before the element(s) specified by this parameter.
 * @return {JQuery}
 */
JQuery.prototype.insertBefore = function(target) {};

/**
 * Check the current matched set of elements against a selector, element, or jQuery object and return
 * true if at least one of these elements matches the given arguments.
 * 
 * @see {\@link https://api.jquery.com/is/}
 * \@since 1.0
 * \@since 1.6
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>|function(number, TElement): boolean)} selector A string containing a selector expression to match elements against.
 *                 A function used as a test for every element in the set. It accepts two arguments, index, which is
 *                 the element's index in the jQuery collection, and element, which is the DOM element. Within the
 *                 function, this refers to the current DOM element.
 *                 An existing jQuery object to match the current set of elements against.
 *                 One or more elements to match the current set of elements against.
 * @return {boolean}
 */
JQuery.prototype.is = function(selector) {};

/**
 * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/keydown/}
 * \@since 1.4.3
 * Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/keydown/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.keydown = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/keypress/}
 * \@since 1.4.3
 * Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/keypress/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.keypress = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/keyup/}
 * \@since 1.4.3
 * Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/keyup/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.keyup = function(eventData_or_handler, handler) {};

/**
 * Reduce the set of matched elements to the final one in the set.
 * 
 * @see {\@link https://api.jquery.com/last/}
 * \@since 1.4
 * @return {JQuery}
 */
JQuery.prototype.last = function() {};

/**
 * Load data from the server and place the returned HTML into the matched element.
 * 
 * @see {\@link https://api.jquery.com/load/}
 * \@since 1.0
 * Load data from the server and place the returned HTML into the matched element.
 * 
 * @see {\@link https://api.jquery.com/load/}
 * \@since 1.0
 * @param {string} url A string containing the URL to which the request is sent.
 * @param {(string|!JQuery.PlainObject<?>)|(string|!JQuery.PlainObject<?>|function(string, string, !JQuery.jqXHR<?>): void)=} data_or_complete_data A plain object or string that is sent to the server with the request. / A callback function that is executed when the request completes.
 *                      A plain object or string that is sent to the server with the request.
 * @param {function(string, string, !JQuery.jqXHR<?>): void=} complete A callback function that is executed when the request completes.
 * @return {JQuery}
 */
JQuery.prototype.load = function(url, data_or_complete_data, complete) {};

/**
 * Pass each element in the current matched set through a function, producing a new jQuery object
 * containing the return values.
 * 
 * @see {\@link https://api.jquery.com/map/}
 * \@since 1.2
 * @param {function(number, TElement): ?} callback A function object that will be invoked for each element in the current set.
 * @return {JQuery}
 */
JQuery.prototype.map = function(callback) {};

/**
 * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mousedown/}
 * \@since 1.4.3
 * Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mousedown/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.mousedown = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseenter/}
 * \@since 1.4.3
 * Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseenter/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.mouseenter = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseleave/}
 * \@since 1.4.3
 * Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseleave/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.mouseleave = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mousemove/}
 * \@since 1.4.3
 * Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mousemove/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.mousemove = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseout/}
 * \@since 1.4.3
 * Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseout/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.mouseout = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseover/}
 * \@since 1.4.3
 * Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseover/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.mouseover = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseup/}
 * \@since 1.4.3
 * Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/mouseup/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.mouseup = function(eventData_or_handler, handler) {};

/**
 * Get the immediately following sibling of each element in the set of matched elements. If a selector
 * is provided, it retrieves the next sibling only if it matches that selector.
 * 
 * @see {\@link https://api.jquery.com/next/}
 * \@since 1.0
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.next = function(selector) {};

/**
 * Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/nextAll/}
 * \@since 1.2
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.nextAll = function(selector) {};

/**
 * Get all following siblings of each element up to but not including the element matched by the
 * selector, DOM node, or jQuery object passed.
 * 
 * @see {\@link https://api.jquery.com/nextUntil/}
 * \@since 1.4
 * \@since 1.6
 * @param {(string|!Element|?<!HTMLElement>)=} selector A string containing a selector expression to indicate where to stop matching following sibling elements.
 *                 A DOM node or jQuery object indicating where to stop matching following sibling elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.nextUntil = function(selector, filter) {};

/**
 * Remove elements from the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/not/}
 * \@since 1.0
 * \@since 1.4
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>|function(number, TElement): boolean)} selector A string containing a selector expression, a DOM element, or an array of elements to match against the set.
 *                 A function used as a test for each element in the set. It accepts two arguments, index, which is the
 *                 element's index in the jQuery collection, and element, which is the DOM element. Within the
 *                 function, this refers to the current DOM element.
 *                 An existing jQuery object to match the current set of elements against.
 * @return {JQuery}
 */
JQuery.prototype.not = function(selector) {};

/**
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/}
 * \@since 1.7
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/}
 * \@since 1.7
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/}
 * \@since 1.7
 * Remove an event handler.
 * 
 * @see {\@link https://api.jquery.com/off/}
 * \@since 1.7
 * @param {string|!JQuery.PlainObject<(boolean|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, ?>>)>|!JQuery.Event<TElement, null>=} events_or_event One or more space-separated event types and optional namespaces, or just namespaces, such as
 *               "click", "keydown.myPlugin", or ".myPlugin". / An object where the string keys represent one or more space-separated event types and optional
 *               namespaces, and the values represent handler functions previously attached for the event(s). / A jQuery.Event object.
 * @param {string|(string|boolean|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, ?>>)=} selector_or_selector_handler A selector which should match the one originally passed to .on() when attaching event handlers. / A selector which should match the one originally passed to .on() when attaching event handlers.
 *                         A function to execute each time the event is triggered.
 * @param {(boolean|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, ?>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.off = function(events_or_event, selector_or_selector_handler, handler) {};

/**
 * Set the current coordinates of every element in the set of matched elements, relative to the document.
 * 
 * @see {\@link https://api.jquery.com/offset/}
 * \@since 1.4
 * Get the current coordinates of the first element in the set of matched elements, relative to the document.
 * 
 * @see {\@link https://api.jquery.com/offset/}
 * \@since 1.2
 * @param {(!JQuery.Coordinates|function(number, !JQuery.Coordinates): !JQuery.Coordinates)=} coordinates An object containing the properties top and left, which are numbers indicating the new top and left
 *                    coordinates for the elements.
 *                    A function to return the coordinates to set. Receives the index of the element in the collection as
 *                    the first argument and the current coordinates as the second argument. The function should return an
 *                    object with the new top and left properties.
 * @return {JQuery|!JQuery.Coordinates}
 */
JQuery.prototype.offset = function(coordinates) {};

/**
 * Get the closest ancestor element that is positioned.
 * 
 * @see {\@link https://api.jquery.com/offsetParent/}
 * \@since 1.2.6
 * @return {JQuery}
 */
JQuery.prototype.offsetParent = function() {};

/**
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * Attach an event handler function for one or more events to the selected elements.
 * 
 * @see {\@link https://api.jquery.com/on/}
 * \@since 1.7
 * @template TData
 * @param {string|!JQuery.PlainObject<(boolean|!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)>|!JQuery.PlainObject<(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)>} events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin". / An object in which the string keys represent one or more space-separated event types and optional
 *               namespaces, and the values represent a handler function to be called for the event(s).
 * @param {string|TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} selector_or_data_or_handler A selector string to filter the descendants of the selected elements that trigger the event. If the
 *                 selector is null or omitted, the event is always triggered when it reaches the selected element. / Data to be passed to the handler in event.data when an event is triggered. / A function to execute when the event is triggered. The value false is also allowed as a shorthand
 *                for a function that simply does return false. / A selector string to filter the descendants of the selected elements that will call the handler. If
 *                 the selector is null or omitted, the handler is always called when it reaches the selected element. / Data to be passed to the handler in event.data when an event occurs.
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)|(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} data_or_handler Data to be passed to the handler in event.data when an event is triggered. / A function to execute when the event is triggered. The value false is also allowed as a shorthand
 *                for a function that simply does return false. / A function to execute when the event is triggered. / Data to be passed to the handler in event.data when an event occurs.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute when the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.on = function(events, selector_or_data_or_handler, data_or_handler, handler) {};

/**
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * Attach a handler to an event for the elements. The handler is executed at most once per element per event type.
 * 
 * @see {\@link https://api.jquery.com/one/}
 * \@since 1.7
 * @template TData
 * @param {string|!JQuery.PlainObject<(boolean|!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)>|!JQuery.PlainObject<(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)>} events One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin". / An object in which the string keys represent one or more space-separated event types and optional
 *               namespaces, and the values represent a handler function to be called for the event(s).
 * @param {string|TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} selector_or_data_or_handler A selector string to filter the descendants of the selected elements that trigger the event. If the
 *                 selector is null or omitted, the event is always triggered when it reaches the selected element. / Data to be passed to the handler in event.data when an event is triggered. / A function to execute when the event is triggered. The value false is also allowed as a shorthand
 *                for a function that simply does return false. / A selector string to filter the descendants of the selected elements that will call the handler. If
 *                 the selector is null or omitted, the handler is always called when it reaches the selected element. / Data to be passed to the handler in event.data when an event occurs.
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)|(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} data_or_handler Data to be passed to the handler in event.data when an event is triggered. / A function to execute when the event is triggered. The value false is also allowed as a shorthand
 *                for a function that simply does return false. / A function to execute when the event is triggered. / Data to be passed to the handler in event.data when an event occurs.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute when the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.one = function(events, selector_or_data_or_handler, data_or_handler, handler) {};

/**
 * Set the CSS outer height of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/outerHeight/}
 * \@since 1.8.0
 * Get the current computed outer height (including padding, border, and optionally margin) for the
 * first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/outerHeight/}
 * \@since 1.2.6
 * @param {(string|number|function(number, number): (string|number))|boolean=} value_or_includeMargin A number representing the number of pixels, or a number along with an optional unit of measure
 *              appended (as a string). / A Boolean indicating whether to include the element's margin in the calculation.
 * @return {JQuery|number}
 */
JQuery.prototype.outerHeight = function(value_or_includeMargin) {};

/**
 * Set the CSS outer width of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/outerWidth/}
 * \@since 1.8.0
 * Get the current computed outer width (including padding, border, and optionally margin) for the
 * first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/outerWidth/}
 * \@since 1.2.6
 * @param {(string|number|function(number, number): (string|number))|boolean=} value_or_includeMargin A number representing the number of pixels, or a number along with an optional unit of measure
 *              appended (as a string).
 *              A function returning the outer width to set. Receives the index position of the element in the set
 *              and the old outer width as arguments. Within the function, this refers to the current element in the set. / A Boolean indicating whether to include the element's margin in the calculation.
 * @return {JQuery|number}
 */
JQuery.prototype.outerWidth = function(value_or_includeMargin) {};

/**
 * Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/parent/}
 * \@since 1.0
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.parent = function(selector) {};

/**
 * Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/parents/}
 * \@since 1.0
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.parents = function(selector) {};

/**
 * Get the ancestors of each element in the current set of matched elements, up to but not including
 * the element matched by the selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/parentsUntil/}
 * \@since 1.4
 * \@since 1.6
 * @param {(string|!Element|?<!HTMLElement>)=} selector A string containing a selector expression to indicate where to stop matching ancestor elements.
 *                 A DOM node or jQuery object indicating where to stop matching ancestor elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.parentsUntil = function(selector, filter) {};

/**
 * Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.
 * 
 * @see {\@link https://api.jquery.com/position/}
 * \@since 1.2
 * @return {!JQuery.Coordinates}
 */
JQuery.prototype.position = function() {};

/**
 * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prepend/}
 * \@since 1.0
 * Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prepend/}
 * \@since 1.4
 * @param {...(string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)|function(number, string): (string|!Element|!Text|!Comment|!Array<(!Element|!Text|!Comment)>|?<(!Element|!Text|!Comment)>)} contents_or_fn One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or
 *                 jQuery objects to insert at the beginning of each element in the set of matched elements. / A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at
 *           the beginning of each element in the set of matched elements. Receives the index position of the
 *           element in the set and the old HTML value of the element as arguments. Within the function, this
 *           refers to the current element in the set.
 * @return {JQuery}
 */
JQuery.prototype.prepend = function(contents_or_fn) {};

/**
 * Insert every element in the set of matched elements to the beginning of the target.
 * 
 * @see {\@link https://api.jquery.com/prependTo/}
 * \@since 1.0
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>)} target A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements
 *               will be inserted at the beginning of the element(s) specified by this parameter.
 * @return {JQuery}
 */
JQuery.prototype.prependTo = function(target) {};

/**
 * Get the immediately preceding sibling of each element in the set of matched elements. If a selector
 * is provided, it retrieves the previous sibling only if it matches that selector.
 * 
 * @see {\@link https://api.jquery.com/prev/}
 * \@since 1.0
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.prev = function(selector) {};

/**
 * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/prevAll/}
 * \@since 1.2
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.prevAll = function(selector) {};

/**
 * Get all preceding siblings of each element up to but not including the element matched by the
 * selector, DOM node, or jQuery object.
 * 
 * @see {\@link https://api.jquery.com/prevUntil/}
 * \@since 1.4
 * \@since 1.6
 * @param {(string|!Element|?<!HTMLElement>)=} selector A string containing a selector expression to indicate where to stop matching preceding sibling elements.
 *                 A DOM node or jQuery object indicating where to stop matching preceding sibling elements.
 * @param {string=} filter A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.prevUntil = function(selector, filter) {};

/**
 * Return a Promise object to observe when all actions of a certain type bound to the collection,
 * queued or not, have finished.
 * 
 * @see {\@link https://api.jquery.com/promise/}
 * \@since 1.6
 * Return a Promise object to observe when all actions of a certain type bound to the collection,
 * queued or not, have finished.
 * 
 * @see {\@link https://api.jquery.com/promise/}
 * \@since 1.6
 * Return a Promise object to observe when all actions of a certain type bound to the collection,
 * queued or not, have finished.
 * 
 * @see {\@link https://api.jquery.com/promise/}
 * \@since 1.6
 * @template T
 * @param {string|T=} type_or_target The type of queue that needs to be observed. / Object onto which the promise methods have to be attached
 * @param {T=} target Object onto which the promise methods have to be attached
 * @return {?|!JQuery.Promise<JQuery, ?, ?>}
 */
JQuery.prototype.promise = function(type_or_target, target) {};

/**
 * Set one or more properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/}
 * \@since 1.6
 * Set one or more properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/}
 * \@since 1.6
 * Set one or more properties for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/}
 * \@since 1.6
 * Get the value of a property for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/prop/}
 * \@since 1.6
 * @param {string|!JQuery.PlainObject<?>} propertyName_or_properties The name of the property to set. / An object of property-value pairs to set. / The name of the property to get.
 * @param {function(number, ?): ?|?=} value A function returning the value to set. Receives the index position of the element in the set and the
 *              old property value as arguments. Within the function, the keyword this refers to the current element. / A value to set for the property.
 * @return {JQuery|?}
 */
JQuery.prototype.prop = function(propertyName_or_properties, value) {};

/**
 * Add a collection of DOM elements onto the jQuery stack.
 * 
 * @see {\@link https://api.jquery.com/pushStack/}
 * \@since 1.3
 * Add a collection of DOM elements onto the jQuery stack.
 * 
 * @see {\@link https://api.jquery.com/pushStack/}
 * \@since 1.0
 * @param {!ArrayLike<!Element>} elements An array of elements to push onto the stack and make into a new jQuery object.
 * @param {string=} name The name of a jQuery method that generated the array of elements.
 * @param {!Array<?>=} args The arguments that were passed in to the jQuery method (for serialization).
 * @return {JQuery}
 */
JQuery.prototype.pushStack = function(elements, name, args) {};

/**
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * @see {\@link https://api.jquery.com/queue/}
 * \@since 1.2
 * Manipulate the queue of functions to be executed, once for each matched element.
 * 
 * @see {\@link https://api.jquery.com/queue/}
 * \@since 1.2
 * Show the queue of functions to be executed on the matched elements.
 * 
 * @see {\@link https://api.jquery.com/queue/}
 * \@since 1.2
 * @param {string|(!JQuery.QueueFunction<TElement>|!Array<!JQuery.QueueFunction<TElement>>)=} queueName_or_newQueue A string containing the name of the queue. Defaults to fx, the standard effects queue. / The new function to add to the queue, with a function to call that will dequeue the next item.
 *                 An array of functions to replace the current queue contents.
 * @param {(!JQuery.QueueFunction<TElement>|!Array<!JQuery.QueueFunction<TElement>>)=} newQueue The new function to add to the queue, with a function to call that will dequeue the next item.
 *                 An array of functions to replace the current queue contents.
 * @return {JQuery|?}
 */
JQuery.prototype.queue = function(queueName_or_newQueue, newQueue) {};

/**
 * Specify a function to execute when the DOM is fully loaded.
 * 
 * @see {\@link https://api.jquery.com/ready/}
 * \@since 1.0
 * @deprecated 3.0
 * @param {function(!JQueryStatic<TElement>): void} handler A function to execute after the DOM is ready.
 * @return {JQuery}
 */
JQuery.prototype.ready = function(handler) {};

/**
 * Remove the set of matched elements from the DOM.
 * 
 * @see {\@link https://api.jquery.com/remove/}
 * \@since 1.0
 * @param {string=} selector A selector expression that filters the set of matched elements to be removed.
 * @return {JQuery}
 */
JQuery.prototype.remove = function(selector) {};

/**
 * Remove an attribute from each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/removeAttr/}
 * \@since 1.0
 * @param {string} attributeName An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.
 * @return {JQuery}
 */
JQuery.prototype.removeAttr = function(attributeName) {};

/**
 * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/removeClass/}
 * \@since 1.0
 * \@since 1.4
 * @param {(string|function(number, string): string)=} className One or more space-separated classes to be removed from the class attribute of each matched element.
 *                  A function returning one or more space-separated class names to be removed. Receives the index
 *                  position of the element in the set and the old class value as arguments.
 * @return {JQuery}
 */
JQuery.prototype.removeClass = function(className) {};

/**
 * Remove a previously-stored piece of data.
 * 
 * @see {\@link https://api.jquery.com/removeData/}
 * \@since 1.2.3
 * \@since 1.7
 * @param {(string|!Array<string>)=} name A string naming the piece of data to delete.
 *             An array or space-separated string naming the pieces of data to delete.
 * @return {JQuery}
 */
JQuery.prototype.removeData = function(name) {};

/**
 * Remove a property for the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/removeProp/}
 * \@since 1.6
 * @param {string} propertyName The name of the property to remove.
 * @return {JQuery}
 */
JQuery.prototype.removeProp = function(propertyName) {};

/**
 * Replace each target element with the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/replaceAll/}
 * \@since 1.2
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>)} target A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.
 * @return {JQuery}
 */
JQuery.prototype.replaceAll = function(target) {};

/**
 * Replace each element in the set of matched elements with the provided new content and return the set
 * of elements that was removed.
 * 
 * @see {\@link https://api.jquery.com/replaceWith/}
 * \@since 1.2
 * \@since 1.4
 * @param {(string|!Element|?<!HTMLElement>|!Array<!Element>|function(): ?)} newContent The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.
 *                   A function that returns content with which to replace the set of matched elements.
 * @return {JQuery}
 */
JQuery.prototype.replaceWith = function(newContent) {};

/**
 * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/resize/}
 * \@since 1.4.3
 * Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/resize/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.resize = function(eventData_or_handler, handler) {};

/**
 * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/scroll/}
 * \@since 1.4.3
 * Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/scroll/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.scroll = function(eventData_or_handler, handler) {};

/**
 * Set the current horizontal position of the scroll bar for each of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/scrollLeft/}
 * \@since 1.2.6
 * Get the current horizontal position of the scroll bar for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/scrollLeft/}
 * \@since 1.2.6
 * @param {number=} value An integer indicating the new position to set the scroll bar to.
 * @return {JQuery|number}
 */
JQuery.prototype.scrollLeft = function(value) {};

/**
 * Set the current vertical position of the scroll bar for each of the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/scrollTop/}
 * \@since 1.2.6
 * Get the current vertical position of the scroll bar for the first element in the set of matched
 * elements or set the vertical position of the scroll bar for every matched element.
 * 
 * @see {\@link https://api.jquery.com/scrollTop/}
 * \@since 1.2.6
 * @param {number=} value A number indicating the new position to set the scroll bar to.
 * @return {JQuery|number}
 */
JQuery.prototype.scrollTop = function(value) {};

/**
 * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/select/}
 * \@since 1.4.3
 * Bind an event handler to the "select" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/select/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.select = function(eventData_or_handler, handler) {};

/**
 * Encode a set of form elements as a string for submission.
 * 
 * @see {\@link https://api.jquery.com/serialize/}
 * \@since 1.0
 * @return {string}
 */
JQuery.prototype.serialize = function() {};

/**
 * Encode a set of form elements as an array of names and values.
 * 
 * @see {\@link https://api.jquery.com/serializeArray/}
 * \@since 1.2
 * @return {!Array<!JQuery.NameValuePair>}
 */
JQuery.prototype.serializeArray = function() {};

/**
 * Display the matched elements.
 * 
 * @see {\@link https://api.jquery.com/show/}
 * \@since 1.4.3
 * Display the matched elements.
 * 
 * @see {\@link https://api.jquery.com/show/}
 * \@since 1.0
 * \@since 1.4.3
 * Display the matched elements.
 * 
 * @see {\@link https://api.jquery.com/show/}
 * \@since 1.0
 * @param {(number|string)|(number|string|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                                  A function to call once the animation is complete, called once per matched element.
 *                                  A map of additional options to pass to the method.
 * @param {string|(string|function(): void)=} easing_or_easing_complete A string indicating which easing function to use for the transition. / A string indicating which easing function to use for the transition.
 *                        A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.show = function(duration_or_duration_complete_options, easing_or_easing_complete, complete) {};

/**
 * Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
 * 
 * @see {\@link https://api.jquery.com/siblings/}
 * \@since 1.0
 * @param {string=} selector A string containing a selector expression to match elements against.
 * @return {JQuery}
 */
JQuery.prototype.siblings = function(selector) {};

/**
 * Reduce the set of matched elements to a subset specified by a range of indices.
 * 
 * @see {\@link https://api.jquery.com/slice/}
 * \@since 1.1.4
 * @param {number} start An integer indicating the 0-based position at which the elements begin to be selected. If negative,
 *              it indicates an offset from the end of the set.
 * @param {number=} end An integer indicating the 0-based position at which the elements stop being selected. If negative,
 *            it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.
 * @return {JQuery}
 */
JQuery.prototype.slice = function(start, end) {};

/**
 * Display the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideDown/}
 * \@since 1.4.3
 * Display the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideDown/}
 * \@since 1.0
 * \@since 1.4.3
 * Display the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideDown/}
 * \@since 1.0
 * \@since 1.4.3
 * @param {(number|string)|(string|number)|(string|number|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_easing_or_duration_easing_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                        A string indicating which easing function to use for the transition. / A string or number determining how long the animation will run.
 *                                         A string indicating which easing function to use for the transition.
 *                                         A function to call once the animation is complete, called once per matched element.
 *                                         A map of additional options to pass to the method.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.slideDown = function(duration_or_duration_easing_or_duration_easing_complete_options, easing_or_complete, complete) {};

/**
 * Display or hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideToggle/}
 * \@since 1.4.3
 * Display or hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideToggle/}
 * \@since 1.0
 * \@since 1.4.3
 * Display or hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideToggle/}
 * \@since 1.0
 * \@since 1.4.3
 * @param {(number|string)|(string|number)|(string|number|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_easing_or_duration_easing_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                        A string indicating which easing function to use for the transition. / A string or number determining how long the animation will run.
 *                                         A string indicating which easing function to use for the transition.
 *                                         A function to call once the animation is complete, called once per matched element.
 *                                         A map of additional options to pass to the method.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.slideToggle = function(duration_or_duration_easing_or_duration_easing_complete_options, easing_or_complete, complete) {};

/**
 * Hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideUp/}
 * \@since 1.4.3
 * Hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideUp/}
 * \@since 1.0
 * \@since 1.4.3
 * Hide the matched elements with a sliding motion.
 * 
 * @see {\@link https://api.jquery.com/slideUp/}
 * \@since 1.0
 * \@since 1.4.3
 * @param {(number|string)|(string|number)|(string|number|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_easing_or_duration_easing_complete_options A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                        A string indicating which easing function to use for the transition. / A string or number determining how long the animation will run.
 *                                         A string indicating which easing function to use for the transition.
 *                                         A function to call once the animation is complete, called once per matched element.
 *                                         A map of additional options to pass to the method.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.slideUp = function(duration_or_duration_easing_or_duration_easing_complete_options, easing_or_complete, complete) {};

/**
 * Stop the currently-running animation on the matched elements.
 * 
 * @see {\@link https://api.jquery.com/stop/}
 * \@since 1.7
 * Stop the currently-running animation on the matched elements.
 * 
 * @see {\@link https://api.jquery.com/stop/}
 * \@since 1.2
 * @param {string|boolean=} queue_or_clearQueue The name of the queue in which to stop animations. / A Boolean indicating whether to remove queued animation as well. Defaults to false.
 * @param {boolean=} clearQueue_or_jumpToEnd A Boolean indicating whether to remove queued animation as well. Defaults to false. / A Boolean indicating whether to complete the current animation immediately. Defaults to false.
 * @param {boolean=} jumpToEnd A Boolean indicating whether to complete the current animation immediately. Defaults to false.
 * @return {JQuery}
 */
JQuery.prototype.stop = function(queue_or_clearQueue, clearQueue_or_jumpToEnd, jumpToEnd) {};

/**
 * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/submit/}
 * \@since 1.4.3
 * Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.
 * 
 * @see {\@link https://api.jquery.com/submit/}
 * \@since 1.0
 * @template TData
 * @param {TData|(boolean|!JQuery.EventHandler<TElement, null>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, null>>)=} eventData_or_handler An object containing data that will be passed to the event handler. / A function to execute each time the event is triggered.
 * @param {(!JQuery.EventHandler<TElement, TData>|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, TData>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.submit = function(eventData_or_handler, handler) {};

/**
 * Set the content of each element in the set of matched elements to the specified text.
 * 
 * @see {\@link https://api.jquery.com/text/}
 * \@since 1.0
 * \@since 1.4
 * Get the combined text contents of each element in the set of matched elements, including their descendants.
 * 
 * @see {\@link https://api.jquery.com/text/}
 * \@since 1.0
 * @param {(string|number|boolean|function(number, string): (string|number|boolean))=} text The text to set as the content of each matched element. When Number or Boolean is supplied, it will
 *             be converted to a String representation.
 *             A function returning the text content to set. Receives the index position of the element in the set
 *             and the old text value as arguments.
 * @return {JQuery|string}
 */
JQuery.prototype.text = function(text) {};

/**
 * Retrieve all the elements contained in the jQuery set, as an array.
 * 
 * @see {\@link https://api.jquery.com/toArray/}
 * \@since 1.4
 * @return {!Array<TElement>}
 */
JQuery.prototype.toArray = function() {};

/**
 * Display or hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/toggle/}
 * \@since 1.4.3
 * Display or hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/toggle/}
 * \@since 1.0
 * Display or hide the matched elements.
 * 
 * @see {\@link https://api.jquery.com/toggle/}
 * \@since 1.0
 * \@since 1.3
 * @param {(number|string)|(number|boolean|string|!JQuery.EffectsOptions<TElement>|function(): void)=} duration_or_duration_complete_options_display A string or number determining how long the animation will run. / A string or number determining how long the animation will run.
 *                                          A function to call once the animation is complete, called once per matched element.
 *                                          A map of additional options to pass to the method.
 *                                          Use true to show the element or false to hide it.
 * @param {string|function(): void=} easing_or_complete A string indicating which easing function to use for the transition. / A function to call once the animation is complete, called once per matched element.
 * @param {function(): void=} complete A function to call once the animation is complete, called once per matched element.
 * @return {JQuery}
 */
JQuery.prototype.toggle = function(duration_or_duration_complete_options_display, easing_or_complete, complete) {};

/**
 * Add or remove one or more classes from each element in the set of matched elements, depending on
 * either the class's presence or the value of the state argument.
 * 
 * @see {\@link https://api.jquery.com/toggleClass/}
 * \@since 1.0
 * \@since 1.3
 * \@since 1.4
 * Add or remove one or more classes from each element in the set of matched elements, depending on
 * either the class's presence or the value of the state argument.
 * 
 * @see {\@link https://api.jquery.com/toggleClass/}
 * \@since 1.4
 * @deprecated 3.0
 * @template TState
 * @param {(string|function(number, string, TState): string)|boolean=} className_or_state One or more class names (separated by spaces) to be toggled for each element in the matched set.
 *                  A function that returns class names to be toggled in the class attribute of each element in the
 *                  matched set. Receives the index position of the element in the set, the old class value, and the state as arguments. / A boolean value to determine whether the class should be added or removed.
 * @param {TState=} state A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.
 * @return {JQuery}
 */
JQuery.prototype.toggleClass = function(className_or_state, state) {};

/**
 * Execute all handlers and behaviors attached to the matched elements for the given event type.
 * 
 * @see {\@link https://api.jquery.com/trigger/}
 * \@since 1.0
 * \@since 1.3
 * @param {(string|!JQuery.Event<TElement, null>)} eventType A string containing a JavaScript event type, such as click or submit.
 *                  A jQuery.Event object.
 * @param {(string|number|!Array<?>|!JQuery.PlainObject<?>)=} extraParameters Additional parameters to pass along to the event handler.
 * @return {JQuery}
 */
JQuery.prototype.trigger = function(eventType, extraParameters) {};

/**
 * Execute all handlers attached to an element for an event.
 * 
 * @see {\@link https://api.jquery.com/triggerHandler/}
 * \@since 1.2
 * \@since 1.3
 * @param {(string|!JQuery.Event<TElement, null>)} eventType A string containing a JavaScript event type, such as click or submit.
 *                  A jQuery.Event object.
 * @param {(string|number|!Array<?>|!JQuery.PlainObject<?>)=} extraParameters Additional parameters to pass along to the event handler.
 * @return {?}
 */
JQuery.prototype.triggerHandler = function(eventType, extraParameters) {};

/**
 * Remove a previously-attached event handler from the elements.
 * 
 * @see {\@link https://api.jquery.com/unbind/}
 * \@since 1.0
 * \@since 1.4.3
 * @deprecated 3.0
 * Remove a previously-attached event handler from the elements.
 * 
 * @see {\@link https://api.jquery.com/unbind/}
 * \@since 1.0
 * @param {string|(string|!JQuery.Event<TElement, null>)=} event A string containing one or more DOM event types, such as "click" or "submit," or custom event names. / A string containing one or more DOM event types, such as "click" or "submit," or custom event names.
 *              A jQuery.Event object.
 * @param {(boolean|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, ?>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.unbind = function(event, handler) {};

/**
 * Remove a handler from the event for all elements which match the current selector, based upon a
 * specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/undelegate/}
 * \@since 1.4.2
 * @deprecated 3.0
 * Remove a handler from the event for all elements which match the current selector, based upon a
 * specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/undelegate/}
 * \@since 1.4.2
 * \@since 1.4.3
 * Remove a handler from the event for all elements which match the current selector, based upon a
 * specific set of root elements.
 * 
 * @see {\@link https://api.jquery.com/undelegate/}
 * \@since 1.4.2
 * \@since 1.6
 * @param {string=} selector_or_namespace A selector which will be used to filter the event results.
 * @param {string|(string|!JQuery.PlainObject<(boolean|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, ?>>)>)=} eventType_or_eventTypes A string containing a JavaScript event type, such as "click" or "keydown" / A string containing a JavaScript event type, such as "click" or "keydown"
 *                   An object of one or more event types and previously bound functions to unbind from them.
 * @param {(boolean|!JQuery.EventHandlerBase<?, !JQuery.Event<TElement, ?>>)=} handler A function to execute each time the event is triggered.
 * @return {JQuery}
 */
JQuery.prototype.undelegate = function(selector_or_namespace, eventType_or_eventTypes, handler) {};

/**
 * Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.
 * 
 * @see {\@link https://api.jquery.com/unwrap/}
 * \@since 1.4
 * \@since 3.0
 * @param {string=} selector A selector to check the parent element against. If an element's parent does not match the selector,
 *                 the element won't be unwrapped.
 * @return {JQuery}
 */
JQuery.prototype.unwrap = function(selector) {};

/**
 * Set the value of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/val/}
 * \@since 1.0
 * \@since 1.4
 * Get the current value of the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/val/}
 * \@since 1.0
 * @param {(string|number|!Array<string>|function(number, string): string)=} value A string of text, a number, or an array of strings corresponding to the value of each matched
 *              element to set as selected/checked.
 *              A function returning the value to set. this is the current element. Receives the index position of
 *              the element in the set and the old value as arguments.
 * @return {JQuery|(string|number|!Array<string>)}
 */
JQuery.prototype.val = function(value) {};

/**
 * Set the CSS width of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/width/}
 * \@since 1.0
 * \@since 1.4.1
 * Get the current computed width for the first element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/width/}
 * \@since 1.0
 * @param {(string|number|function(number, number): (string|number))=} value An integer representing the number of pixels, or an integer along with an optional unit of measure
 *              appended (as a string).
 *              A function returning the width to set. Receives the index position of the element in the set and the
 *              old width as arguments. Within the function, this refers to the current element in the set.
 * @return {JQuery|number}
 */
JQuery.prototype.width = function(value) {};

/**
 * Wrap an HTML structure around each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrap/}
 * \@since 1.0
 * \@since 1.4
 * @param {(string|!Element|?<!HTMLElement>|function(number): (string|?<!HTMLElement>))} wrappingElement A selector, element, HTML string, or jQuery object specifying the structure to wrap around the
 *                        matched elements. When you pass a jQuery collection containing more than one element, or a selector
 *                        matching more than one element, the first element will be used.
 *                        A callback function returning the HTML content or jQuery object to wrap around the matched elements.
 *                        Receives the index position of the element in the set as an argument. Within the function, this
 *                        refers to the current element in the set.
 * @return {JQuery}
 */
JQuery.prototype.wrap = function(wrappingElement) {};

/**
 * Wrap an HTML structure around all elements in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrapAll/}
 * \@since 1.2
 * \@since 1.4
 * @param {(string|!Element|?<!HTMLElement>|function(): (string|?<!HTMLElement>))} wrappingElement A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.
 *                        A callback function returning the HTML content or jQuery object to wrap around all the matched
 *                        elements. Within the function, this refers to the first element in the set. Prior to jQuery 3.0, the
 *                        callback was incorrectly called for every element in the set and received the index position of the
 *                        element in the set as an argument.
 * @return {JQuery}
 */
JQuery.prototype.wrapAll = function(wrappingElement) {};

/**
 * Wrap an HTML structure around the content of each element in the set of matched elements.
 * 
 * @see {\@link https://api.jquery.com/wrapInner/}
 * \@since 1.2
 * \@since 1.4
 * @param {(string|!Element|?<!HTMLElement>|function(number): (string|!Element|?<!HTMLElement>))} wrappingElement An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap
 *                        around the content of the matched elements.
 *                        A callback function which generates a structure to wrap around the content of the matched elements.
 *                        Receives the index position of the element in the set as an argument. Within the function, this
 *                        refers to the current element in the set.
 * @return {JQuery}
 */
JQuery.prototype.wrapInner = function(wrappingElement) {};

/** @typedef {(T|!Array<T>)} */
JQuery.TypeOrArray;

/** @typedef {(!Element|!Text|!Comment)} */
JQuery.Node;

/** @typedef {string} */
JQuery.htmlString;

/** @typedef {string} */
JQuery.Selector;
/**
 * @record
 * @struct
 */
JQuery.PlainObject = function() {};

/* TODO: IndexSignature: JQuery */
/**
 * @extends {JQuery.Ajax.AjaxSettingsBase}
 * @record
 * @struct
 */
JQuery.AjaxSettings = function() {};
 /** @type {string} */
JQuery.AjaxSettings.prototype.url;
/**
 * @extends {JQuery.Ajax.AjaxSettingsBase}
 * @record
 * @struct
 */
JQuery.UrlAjaxSettings = function() {};
 /** @type {string} */
JQuery.UrlAjaxSettings.prototype.url;
/** @const */
JQuery.Ajax = {};

/** @typedef {string} */
JQuery.Ajax.SuccessTextStatus;

/** @typedef {string} */
JQuery.Ajax.ErrorTextStatus;

/** @typedef {string} */
JQuery.Ajax.TextStatus;
/**
 * @record
 * @struct
 */
JQuery.Ajax.SuccessCallback = function() {};

/* TODO: CallSignature: JQuery.Ajax */
/**
 * @record
 * @struct
 */
JQuery.Ajax.ErrorCallback = function() {};

/* TODO: CallSignature: JQuery.Ajax */
/**
 * @record
 * @struct
 */
JQuery.Ajax.CompleteCallback = function() {};

/* TODO: CallSignature: JQuery.Ajax */
/**
 * @record
 * @struct
 */
JQuery.Ajax.AjaxSettingsBase = function() {};
 /** @type {!JQuery.PlainObject<string>} */
JQuery.Ajax.AjaxSettingsBase.prototype.accepts;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.async;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.cache;
 /** @type {(!JQuery.Ajax.CompleteCallback<TContext>|!Array<!JQuery.Ajax.CompleteCallback<TContext>>)} */
JQuery.Ajax.AjaxSettingsBase.prototype.complete;
 /** @type {!JQuery.PlainObject<!RegExp>} */
JQuery.Ajax.AjaxSettingsBase.prototype.contents;
 /** @type {(string|boolean)} */
JQuery.Ajax.AjaxSettingsBase.prototype.contentType;
 /** @type {TContext} */
JQuery.Ajax.AjaxSettingsBase.prototype.context;
 /** @type {!JQuery.PlainObject<(boolean|function(?): ?)>} */
JQuery.Ajax.AjaxSettingsBase.prototype.converters;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.crossDomain;
 /** @type {(string|!JQuery.PlainObject<?>)} */
JQuery.Ajax.AjaxSettingsBase.prototype.data;
 /** @type {string} */
JQuery.Ajax.AjaxSettingsBase.prototype.dataType;
 /** @type {(!JQuery.Ajax.ErrorCallback<TContext>|!Array<!JQuery.Ajax.ErrorCallback<TContext>>)} */
JQuery.Ajax.AjaxSettingsBase.prototype.error;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.global;
 /** @type {!JQuery.PlainObject<string>} */
JQuery.Ajax.AjaxSettingsBase.prototype.headers;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.ifModified;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.isLocal;
 /** @type {(string|boolean)} */
JQuery.Ajax.AjaxSettingsBase.prototype.jsonp;
 /** @type {(string|function(): string)} */
JQuery.Ajax.AjaxSettingsBase.prototype.jsonpCallback;
 /** @type {string} */
JQuery.Ajax.AjaxSettingsBase.prototype.method;
 /** @type {string} */
JQuery.Ajax.AjaxSettingsBase.prototype.mimeType;
 /** @type {string} */
JQuery.Ajax.AjaxSettingsBase.prototype.password;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.processData;
 /** @type {string} */
JQuery.Ajax.AjaxSettingsBase.prototype.scriptCharset;
 /** @type {?} */
JQuery.Ajax.AjaxSettingsBase.prototype.statusCode;
 /** @type {(!JQuery.Ajax.SuccessCallback<TContext>|!Array<!JQuery.Ajax.SuccessCallback<TContext>>)} */
JQuery.Ajax.AjaxSettingsBase.prototype.success;
 /** @type {number} */
JQuery.Ajax.AjaxSettingsBase.prototype.timeout;
 /** @type {boolean} */
JQuery.Ajax.AjaxSettingsBase.prototype.traditional;
 /** @type {string} */
JQuery.Ajax.AjaxSettingsBase.prototype.type;
 /** @type {string} */
JQuery.Ajax.AjaxSettingsBase.prototype.username;
 /** @type {!JQuery.Ajax.XHRFields} */
JQuery.Ajax.AjaxSettingsBase.prototype.xhrFields;

/**
 * A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x,
 * XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and
 * settings objects are passed as arguments. This is an Ajax Event. Returning false in the beforeSend
 * function will cancel the request. As of jQuery 1.5, the beforeSend option will be called regardless
 * of the type of request.
 * @this {TContext}
 * @param {!JQuery.jqXHR<?>} jqXHR
 * @param {!JQuery.Ajax.AjaxSettingsBase} settings
 * @return {(boolean|void)}
 */
JQuery.Ajax.AjaxSettingsBase.prototype.beforeSend = function(jqXHR, settings) {};

/**
 * A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering
 * function to sanitize the response. You should return the sanitized data. The function accepts two
 * arguments: The raw data returned from the server and the 'dataType' parameter.
 * @param {string} data
 * @param {string} type
 * @return {?}
 */
JQuery.Ajax.AjaxSettingsBase.prototype.dataFilter = function(data, type) {};

/**
 * Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE),
 * the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or
 * enhancements to the factory.
 * @return {!XMLHttpRequest}
 */
JQuery.Ajax.AjaxSettingsBase.prototype.xhr = function() {};

/** @typedef {?} */
JQuery.Ajax.StatusCodeCallbacks;
/**
 * @extends {Partial}
 * @record
 * @struct
 */
JQuery.Ajax.XHRFields = function() {};
/**
 * @record
 * @struct
 */
JQuery.Transport = function() {};

/**
 * @param {!JQuery.PlainObject<?>} headers
 * @param {!JQuery.Transport.SuccessCallback} completeCallback
 * @return {void}
 */
JQuery.Transport.prototype.send = function(headers, completeCallback) {};

/**
 * @return {void}
 */
JQuery.Transport.prototype.abort = function() {};
/**
 * @record
 * @struct
 */
JQuery.Transport.SuccessCallback = function() {};

/* TODO: CallSignature: JQuery.Transport */
/**
 * @extends {JQuery.Promise3}
 * @extends {Pick}
 * @extends {Partial}
 * @record
 * @struct
 */
JQuery.jqXHR = function() {};
 /** @type {?} */
JQuery.jqXHR.prototype.responseJSON;

/**
 * Determine the current state of a Deferred object.
 * 
 * @see {\@link https://api.jquery.com/deferred.state/}
 * \@since 1.7
 * @return {string}
 */
JQuery.jqXHR.prototype.state = function() {};

/**
 * @param {?} map
 * @return {void}
 */
JQuery.jqXHR.prototype.statusCode = function(map) {};
/**
 * @extends {JQuery.Deferred.Callback3}
 * @record
 * @struct
 */
JQuery.jqXHR.DoneCallback = function() {};
/**
 * @extends {JQuery.Deferred.Callback3}
 * @record
 * @struct
 */
JQuery.jqXHR.FailCallback = function() {};
/**
 * @extends {JQuery.Deferred.Callback3}
 * @record
 * @struct
 */
JQuery.jqXHR.AlwaysCallback = function() {};
/**
 * @record
 * @struct
 */
JQuery.Callbacks = function() {};

/**
 * Add a callback or a collection of callbacks to a callback list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.add/}
 * \@since 1.7
 * @param {(T|!Array<T>)} callback A function, or array of functions, that are to be added to the callback list.
 * @param {...(T|!Array<T>)} callbacks A function, or array of functions, that are to be added to the callback list.
 * @return {Callbacks}
 */
JQuery.Callbacks.prototype.add = function(callback, callbacks) {};

/**
 * Disable a callback list from doing anything more.
 * 
 * @see {\@link https://api.jquery.com/callbacks.disable/}
 * \@since 1.7
 * @return {Callbacks}
 */
JQuery.Callbacks.prototype.disable = function() {};

/**
 * Determine if the callbacks list has been disabled.
 * 
 * @see {\@link https://api.jquery.com/callbacks.disabled/}
 * \@since 1.7
 * @return {boolean}
 */
JQuery.Callbacks.prototype.disabled = function() {};

/**
 * Remove all of the callbacks from a list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.empty/}
 * \@since 1.7
 * @return {Callbacks}
 */
JQuery.Callbacks.prototype.empty = function() {};

/**
 * Call all of the callbacks with the given arguments.
 * 
 * @see {\@link https://api.jquery.com/callbacks.fire/}
 * \@since 1.7
 * @param {...?} args The argument or list of arguments to pass back to the callback list.
 * @return {Callbacks}
 */
JQuery.Callbacks.prototype.fire = function(args) {};

/**
 * Call all callbacks in a list with the given context and arguments.
 * 
 * @see {\@link https://api.jquery.com/callbacks.fireWith/}
 * \@since 1.7
 * @param {!Object} context A reference to the context in which the callbacks in the list should be fired.
 * @param {!ArrayLike<?>=} args An argument, or array of arguments, to pass to the callbacks in the list.
 * @return {Callbacks}
 */
JQuery.Callbacks.prototype.fireWith = function(context, args) {};

/**
 * Determine if the callbacks have already been called at least once.
 * 
 * @see {\@link https://api.jquery.com/callbacks.fired/}
 * \@since 1.7
 * @return {boolean}
 */
JQuery.Callbacks.prototype.fired = function() {};

/**
 * Determine whether or not the list has any callbacks attached. If a callback is provided as an
 * argument, determine whether it is in a list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.has/}
 * \@since 1.7
 * @param {T=} callback The callback to search for.
 * @return {boolean}
 */
JQuery.Callbacks.prototype.has = function(callback) {};

/**
 * Lock a callback list in its current state.
 * 
 * @see {\@link https://api.jquery.com/callbacks.lock/}
 * \@since 1.7
 * @return {Callbacks}
 */
JQuery.Callbacks.prototype.lock = function() {};

/**
 * Determine if the callbacks list has been locked.
 * 
 * @see {\@link https://api.jquery.com/callbacks.locked/}
 * \@since 1.7
 * @return {boolean}
 */
JQuery.Callbacks.prototype.locked = function() {};

/**
 * Remove a callback or a collection of callbacks from a callback list.
 * 
 * @see {\@link https://api.jquery.com/callbacks.remove/}
 * \@since 1.7
 * @param {...T} callbacks A function, or array of functions, that are to be removed from the callback list.
 * @return {Callbacks}
 */
JQuery.Callbacks.prototype.remove = function(callbacks) {};
/**
 * @record
 * @struct
 */
JQuery.CSSHook = function() {};

/**
 * @this {CSSHook}
 * @param {TElement} elem
 * @param {?} computed
 * @param {?} extra
 * @return {?}
 */
JQuery.CSSHook.prototype.get = function(elem, computed, extra) {};

/**
 * @this {CSSHook}
 * @param {TElement} elem
 * @param {?} value
 * @return {void}
 */
JQuery.CSSHook.prototype.set = function(elem, value) {};
/**
 * @extends {PromiseLike}
 * @record
 * @struct
 */
JQuery.Thenable = function() {};
/**
 * @extends {PromiseLike}
 * @record
 * @struct
 */
JQuery.Promise3 = function() {};

/**
 * Add handlers to be called when the Deferred object is either resolved or rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.always/}
 * \@since 1.6
 * @param {(!JQuery.Deferred.Callback3<(TR|TJ), (UR|UJ), (VR|VJ)>|!Array<!JQuery.Deferred.Callback3<(TR|TJ), (UR|UJ), (VR|VJ)>>)} alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
 * @param {...(!JQuery.Deferred.Callback3<(TR|TJ), (UR|UJ), (VR|VJ)>|!Array<!JQuery.Deferred.Callback3<(TR|TJ), (UR|UJ), (VR|VJ)>>)} alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
 * @return {Promise3}
 */
JQuery.Promise3.prototype.always = function(alwaysCallback, alwaysCallbacks) {};

/**
 * Add handlers to be called when the Deferred object is resolved.
 * 
 * @see {\@link https://api.jquery.com/deferred.done/}
 * \@since 1.5
 * @param {(!JQuery.Deferred.Callback3<TR, UR, VR>|!Array<!JQuery.Deferred.Callback3<TR, UR, VR>>)} doneCallback A function, or array of functions, that are called when the Deferred is resolved.
 * @param {...(!JQuery.Deferred.Callback3<TR, UR, VR>|!Array<!JQuery.Deferred.Callback3<TR, UR, VR>>)} doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
 * @return {Promise3}
 */
JQuery.Promise3.prototype.done = function(doneCallback, doneCallbacks) {};

/**
 * Add handlers to be called when the Deferred object is rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.fail/}
 * \@since 1.5
 * @param {(!JQuery.Deferred.Callback3<TJ, UJ, VJ>|!Array<!JQuery.Deferred.Callback3<TJ, UJ, VJ>>)} failCallback A function, or array of functions, that are called when the Deferred is rejected.
 * @param {...(!JQuery.Deferred.Callback3<TJ, UJ, VJ>|!Array<!JQuery.Deferred.Callback3<TJ, UJ, VJ>>)} failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
 * @return {Promise3}
 */
JQuery.Promise3.prototype.fail = function(failCallback, failCallbacks) {};

/**
 * Add handlers to be called when the Deferred object generates progress notifications.
 * 
 * @see {\@link https://api.jquery.com/deferred.progress/}
 * \@since 1.7
 * @param {(!JQuery.Deferred.Callback3<TN, UN, VN>|!Array<!JQuery.Deferred.Callback3<TN, UN, VN>>)} progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
 * @param {...(!JQuery.Deferred.Callback3<TN, UN, VN>|!Array<!JQuery.Deferred.Callback3<TN, UN, VN>>)} progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
 *                          progress notifications.
 * @return {Promise3}
 */
JQuery.Promise3.prototype.progress = function(progressCallback, progressCallbacks) {};

/**
 * Return a Deferred's Promise object.
 * 
 * @see {\@link https://api.jquery.com/deferred.promise/}
 * \@since 1.5
 * Return a Deferred's Promise object.
 * 
 * @see {\@link https://api.jquery.com/deferred.promise/}
 * \@since 1.5
 * @template TTarget
 * @param {TTarget=} target Object onto which the promise methods have to be attached
 * @return {?|Promise3}
 */
JQuery.Promise3.prototype.promise = function(target) {};

/**
 * Determine the current state of a Deferred object.
 * 
 * @see {\@link https://api.jquery.com/deferred.state/}
 * \@since 1.7
 * @return {string}
 */
JQuery.Promise3.prototype.state = function() {};

/**
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * @deprecated 1.8
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * @template ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP
 * @param {function(TR, UR, VR): (ARD|!JQuery.Promise3<ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND>|!JQuery.Thenable<ARD>)|null} doneFilter An optional function that is called when the Deferred is resolved.
 * @param {function(TJ, UJ, VJ): (AJF|!JQuery.Promise3<ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF>|!JQuery.Thenable<AJF>)|null=} failFilter An optional function that is called when the Deferred is rejected.
 * @param {function(TN, UN, VN): (ANP|!JQuery.Promise3<ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP>|!JQuery.Thenable<ANP>)|null=} progressFilter An optional function that is called when progress notifications are sent to the Deferred.
 * @return {!JQuery.Promise3<(ARD|ARF|ARP), (AJD|AJF|AJP), (AND|ANF|ANP), (BRD|BRF|BRP), (BJD|BJF|BJP), (BND|BNF|BNP), (CRD|CRF|CRP), (CJD|CJF|CJP), (CND|CNF|CNP)>|!JQuery.Promise3<(ARF|ARP), (AJF|AJP), (ANF|ANP), (BRF|BRP), (BJF|BJP), (BNF|BNP), (CRF|CRP), (CJF|CJP), (CNF|CNP)>|!JQuery.Promise3<(ARD|ARP), (AJD|AJP), (AND|ANP), (BRD|BRP), (BJD|BJP), (BND|BNP), (CRD|CRP), (CJD|CJP), (CND|CNP)>|!JQuery.Promise3<(ARD|ARF), (AJD|AJF), (AND|ANF), (BRD|BRF), (BJD|BJF), (BND|BNF), (CRD|CRF), (CJD|CJF), (CND|CNF)>|!JQuery.Promise3<ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF>|!JQuery.Promise3<ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND>}
 */
JQuery.Promise3.prototype.pipe = function(doneFilter, failFilter, progressFilter) {};

/**
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * @template ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND, ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF, ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP
 * @param {function(TR, UR, VR): (ARD|!JQuery.Promise3<ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND>|!JQuery.Thenable<ARD>)|null} doneFilter A function that is called when the Deferred is resolved.
 * @param {function(TJ, UJ, VJ): (ARF|!JQuery.Promise3<ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF>|!JQuery.Thenable<ARF>)|null=} failFilter An optional function that is called when the Deferred is rejected.
 * @param {function(TN, UN, VN): (ANP|!JQuery.Promise3<ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP>|!JQuery.Thenable<ANP>)|null=} progressFilter An optional function that is called when progress notifications are sent to the Deferred.
 * @return {!JQuery.Promise3<(ARD|ARF|ARP), (AJD|AJF|AJP), (AND|ANF|ANP), (BRD|BRF|BRP), (BJD|BJF|BJP), (BND|BNF|BNP), (CRD|CRF|CRP), (CJD|CJF|CJP), (CND|CNF|CNP)>|!JQuery.Promise3<(ARF|ARP), (AJF|AJP), (ANF|ANP), (BRF|BRP), (BJF|BJP), (BNF|BNP), (CRF|CRP), (CJF|CJP), (CNF|CNP)>|!JQuery.Promise3<(ARD|ARP), (AJD|AJP), (AND|ANP), (BRD|BRP), (BJD|BJP), (BND|BNP), (CRD|CRP), (CJD|CJP), (CND|CNP)>|!JQuery.Promise3<ARP, AJP, ANP, BRP, BJP, BNP, CRP, CJP, CNP>|!JQuery.Promise3<(ARD|ARF), (AJD|AJF), (AND|ANF), (BRD|BRF), (BJD|BJF), (BND|BNF), (CRD|CRF), (CJD|CJF), (CND|CNF)>|!JQuery.Promise3<ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF>|!JQuery.Promise3<ARD, AJD, AND, BRD, BJD, BND, CRD, CJD, CND>}
 */
JQuery.Promise3.prototype.then = function(doneFilter, failFilter, progressFilter) {};

/**
 * Add handlers to be called when the Deferred object is rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.catch/}
 * \@since 3.0
 * @template ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF
 * @param {function(TJ, UJ, VJ): (ARF|!JQuery.Promise3<ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF>|!JQuery.Thenable<ARF>)} failFilter A function that is called when the Deferred is rejected.
 * @return {!JQuery.Promise3<ARF, AJF, ANF, BRF, BJF, BNF, CRF, CJF, CNF>}
 */
JQuery.Promise3.prototype.catch = function(failFilter) {};
/**
 * @extends {JQuery.Promise3}
 * @record
 * @struct
 */
JQuery.Promise2 = function() {};
/**
 * @extends {PromiseLike}
 * @record
 * @struct
 */
JQuery.Promise = function() {};

/**
 * Add handlers to be called when the Deferred object is either resolved or rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.always/}
 * \@since 1.6
 * @param {(!JQuery.Deferred.AlwaysCallback<TR, TJ>|!Array<!JQuery.Deferred.AlwaysCallback<TR, TJ>>)} alwaysCallback A function, or array of functions, that is called when the Deferred is resolved or rejected.
 * @param {...(!JQuery.Deferred.AlwaysCallback<TR, TJ>|!Array<!JQuery.Deferred.AlwaysCallback<TR, TJ>>)} alwaysCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
 * @return {Promise}
 */
JQuery.Promise.prototype.always = function(alwaysCallback, alwaysCallbacks) {};

/**
 * Add handlers to be called when the Deferred object is resolved.
 * 
 * @see {\@link https://api.jquery.com/deferred.done/}
 * \@since 1.5
 * @param {(!JQuery.Deferred.DoneCallback<TR>|!Array<!JQuery.Deferred.DoneCallback<TR>>)} doneCallback A function, or array of functions, that are called when the Deferred is resolved.
 * @param {...(!JQuery.Deferred.DoneCallback<TR>|!Array<!JQuery.Deferred.DoneCallback<TR>>)} doneCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
 * @return {Promise}
 */
JQuery.Promise.prototype.done = function(doneCallback, doneCallbacks) {};

/**
 * Add handlers to be called when the Deferred object is rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.fail/}
 * \@since 1.5
 * @param {(!JQuery.Deferred.FailCallback<TJ>|!Array<!JQuery.Deferred.FailCallback<TJ>>)} failCallback A function, or array of functions, that are called when the Deferred is rejected.
 * @param {...(!JQuery.Deferred.FailCallback<TJ>|!Array<!JQuery.Deferred.FailCallback<TJ>>)} failCallbacks Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
 * @return {Promise}
 */
JQuery.Promise.prototype.fail = function(failCallback, failCallbacks) {};

/**
 * Add handlers to be called when the Deferred object generates progress notifications.
 * 
 * @see {\@link https://api.jquery.com/deferred.progress/}
 * \@since 1.7
 * @param {(!JQuery.Deferred.ProgressCallback<TN>|!Array<!JQuery.Deferred.ProgressCallback<TN>>)} progressCallback A function, or array of functions, to be called when the Deferred generates progress notifications.
 * @param {...(!JQuery.Deferred.ProgressCallback<TN>|!Array<!JQuery.Deferred.ProgressCallback<TN>>)} progressCallbacks Optional additional functions, or arrays of functions, to be called when the Deferred generates
 *                          progress notifications.
 * @return {Promise}
 */
JQuery.Promise.prototype.progress = function(progressCallback, progressCallbacks) {};

/**
 * Return a Deferred's Promise object.
 * 
 * @see {\@link https://api.jquery.com/deferred.promise/}
 * \@since 1.5
 * Return a Deferred's Promise object.
 * 
 * @see {\@link https://api.jquery.com/deferred.promise/}
 * \@since 1.5
 * @template TTarget
 * @param {TTarget=} target Object onto which the promise methods have to be attached
 * @return {?|!JQuery.Promise}
 */
JQuery.Promise.prototype.promise = function(target) {};

/**
 * Determine the current state of a Deferred object.
 * 
 * @see {\@link https://api.jquery.com/deferred.state/}
 * \@since 1.7
 * @return {string}
 */
JQuery.Promise.prototype.state = function() {};

/**
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * @deprecated 1.8
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * Utility method to filter and/or chain Deferreds.
 * 
 * @see {\@link https://api.jquery.com/deferred.pipe/}
 * \@since 1.6
 * \@since 1.7
 * @template ARD, AJD, AND, ARF, AJF, ANF, ARP, AJP, ANP
 * @param {function(!Array<TR>): (ARD|!JQuery.Promise<ARD, AJD, AND>|!JQuery.Thenable<ARD>)|null} doneFilter An optional function that is called when the Deferred is resolved.
 * @param {function(!Array<TJ>): (AJF|!JQuery.Promise<ARF, AJF, ANF>|!JQuery.Thenable<AJF>)|null|function(!Array<TR>): (AJF|!JQuery.Promise<ARF, AJF, ANF>|!JQuery.Thenable<AJF>)=} failFilter An optional function that is called when the Deferred is rejected.
 * @param {function(!Array<TN>): (ANP|!JQuery.Promise<ARP, AJP, ANP>|!JQuery.Thenable<ANP>)|null=} progressFilter An optional function that is called when progress notifications are sent to the Deferred.
 * @return {!JQuery.Promise<(ARD|ARF|ARP), (AJD|AJF|AJP), (AND|ANF|ANP)>|!JQuery.Promise<(ARF|ARP), (AJF|AJP), (ANF|ANP)>|!JQuery.Promise<(ARD|ARP), (AJD|AJP), (AND|ANP)>|!JQuery.Promise<(ARD|ARF), (AJD|AJF), (AND|ANF)>|!JQuery.Promise<ARF, AJF, ANF>|!JQuery.Promise<ARD, AJD, AND>}
 */
JQuery.Promise.prototype.pipe = function(doneFilter, failFilter, progressFilter) {};

/**
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.
 * 
 * @see {\@link https://api.jquery.com/deferred.then/}
 * \@since 1.8
 * @template ARD, AJD, AND, ARF, AJF, ANF, ARP, AJP, ANP
 * @param {function(!Array<TR>): (ARD|!JQuery.Promise<ARD, AJD, AND>|!JQuery.Thenable<ARD>)|null} doneFilter A function that is called when the Deferred is resolved.
 * @param {function(!Array<TJ>): (ARF|!JQuery.Promise<ARF, AJF, ANF>|!JQuery.Thenable<ARF>)|null=} failFilter An optional function that is called when the Deferred is rejected.
 * @param {function(!Array<TN>): (ANP|!JQuery.Promise<ARP, AJP, ANP>|!JQuery.Thenable<ANP>)|null=} progressFilter An optional function that is called when progress notifications are sent to the Deferred.
 * @return {!JQuery.Promise<(ARD|ARF|ARP), (AJD|AJF|AJP), (AND|ANF|ANP)>|!JQuery.Promise<(ARF|ARP), (AJF|AJP), (ANF|ANP)>|!JQuery.Promise<(ARD|ARP), (AJD|AJP), (AND|ANP)>|!JQuery.Promise<ARP, AJP, ANP>|!JQuery.Promise<(ARD|ARF), (AJD|AJF), (AND|ANF)>|!JQuery.Promise<ARF, AJF, ANF>|!JQuery.Promise<ARD, AJD, AND>}
 */
JQuery.Promise.prototype.then = function(doneFilter, failFilter, progressFilter) {};

/**
 * Add handlers to be called when the Deferred object is rejected.
 * 
 * @see {\@link https://api.jquery.com/deferred.catch/}
 * \@since 3.0
 * @template ARF, AJF, ANF
 * @param {function(!Array<TJ>): (ARF|!JQuery.Promise<ARF, AJF, ANF>|!JQuery.Thenable<ARF>)} failFilter A function that is called when the Deferred is rejected.
 * @return {!JQuery.Promise<ARF, AJF, ANF>}
 */
JQuery.Promise.prototype.catch = function(failFilter) {};
/**
 * @record
 * @struct
 */
JQuery.DeferredStatic = function() {};
 /** @type {?} */
JQuery.DeferredStatic.prototype.exceptionHook;

/* TODO: CallSignature: JQuery */
/**
 * @extends {JQuery.Promise}
 * @record
 * @struct
 */
JQuery.Deferred = function() {};

/**
 * Call the progressCallbacks on a Deferred object with the given args.
 * 
 * @see {\@link https://api.jquery.com/deferred.notify/}
 * \@since 1.7
 * @param {...TN} args Optional arguments that are passed to the progressCallbacks.
 * @return {Deferred}
 */
JQuery.Deferred.prototype.notify = function(args) {};

/**
 * Call the progressCallbacks on a Deferred object with the given context and args.
 * 
 * @see {\@link https://api.jquery.com/deferred.notifyWith/}
 * \@since 1.7
 * @param {!Object} context Context passed to the progressCallbacks as the this object.
 * @param {!ArrayLike<TN>=} args An optional array of arguments that are passed to the progressCallbacks.
 * @return {Deferred}
 */
JQuery.Deferred.prototype.notifyWith = function(context, args) {};

/**
 * Reject a Deferred object and call any failCallbacks with the given args.
 * 
 * @see {\@link https://api.jquery.com/deferred.reject/}
 * \@since 1.5
 * @param {...TJ} args Optional arguments that are passed to the failCallbacks.
 * @return {Deferred}
 */
JQuery.Deferred.prototype.reject = function(args) {};

/**
 * Reject a Deferred object and call any failCallbacks with the given context and args.
 * 
 * @see {\@link https://api.jquery.com/deferred.rejectWith/}
 * \@since 1.5
 * @param {!Object} context Context passed to the failCallbacks as the this object.
 * @param {!ArrayLike<TJ>=} args An optional array of arguments that are passed to the failCallbacks.
 * @return {Deferred}
 */
JQuery.Deferred.prototype.rejectWith = function(context, args) {};

/**
 * Resolve a Deferred object and call any doneCallbacks with the given args.
 * 
 * @see {\@link https://api.jquery.com/deferred.resolve/}
 * \@since 1.5
 * @param {...TR} args Optional arguments that are passed to the doneCallbacks.
 * @return {Deferred}
 */
JQuery.Deferred.prototype.resolve = function(args) {};

/**
 * Resolve a Deferred object and call any doneCallbacks with the given context and args.
 * 
 * @see {\@link https://api.jquery.com/deferred.resolveWith/}
 * \@since 1.5
 * @param {!Object} context Context passed to the doneCallbacks as the this object.
 * @param {!ArrayLike<TR>=} args An optional array of arguments that are passed to the doneCallbacks.
 * @return {Deferred}
 */
JQuery.Deferred.prototype.resolveWith = function(context, args) {};
/**
 * @record
 * @struct
 */
JQuery.Deferred.Callback3 = function() {};

/* TODO: CallSignature: JQuery.Deferred */
/**
 * @record
 * @struct
 */
JQuery.Deferred.Callback = function() {};

/* TODO: CallSignature: JQuery.Deferred */
/**
 * @extends {JQuery.Deferred.Callback}
 * @record
 * @struct
 */
JQuery.Deferred.DoneCallback = function() {};
/**
 * @extends {JQuery.Deferred.Callback}
 * @record
 * @struct
 */
JQuery.Deferred.FailCallback = function() {};
/**
 * @extends {JQuery.Deferred.Callback}
 * @record
 * @struct
 */
JQuery.Deferred.AlwaysCallback = function() {};
/**
 * @extends {JQuery.Deferred.Callback}
 * @record
 * @struct
 */
JQuery.Deferred.ProgressCallback = function() {};

/** @typedef {(number|string)} */
JQuery.Duration;

/** @typedef {?} */
JQuery.Queue;
/**
 * @record
 * @struct
 */
JQuery.QueueFunction = function() {};

/* TODO: CallSignature: JQuery */
/**
 * @record
 * @struct
 */
JQuery.EffectsOptions = function() {};
 /** @type {(number|string)} */
JQuery.EffectsOptions.prototype.duration;
 /** @type {string} */
JQuery.EffectsOptions.prototype.easing;
 /** @type {(string|boolean)} */
JQuery.EffectsOptions.prototype.queue;
 /** @type {!JQuery.PlainObject<string>} */
JQuery.EffectsOptions.prototype.specialEasing;

/**
 * A function to be called when the animation on an element completes or stops without completing (its
 * Promise object is either resolved or rejected).
 * @this {TElement}
 * @param {!JQuery.Promise<?, ?, ?>} animation
 * @param {boolean} jumpedToEnd
 * @return {void}
 */
JQuery.EffectsOptions.prototype.always = function(animation, jumpedToEnd) {};

/**
 * A function that is called once the animation on an element is complete.
 * @this {TElement}
 * @return {void}
 */
JQuery.EffectsOptions.prototype.complete = function() {};

/**
 * A function to be called when the animation on an element completes (its Promise object is resolved).
 * @this {TElement}
 * @param {!JQuery.Promise<?, ?, ?>} animation
 * @param {boolean} jumpedToEnd
 * @return {void}
 */
JQuery.EffectsOptions.prototype.done = function(animation, jumpedToEnd) {};

/**
 * A function to be called when the animation on an element fails to complete (its Promise object is rejected).
 * @this {TElement}
 * @param {!JQuery.Promise<?, ?, ?>} animation
 * @param {boolean} jumpedToEnd
 * @return {void}
 */
JQuery.EffectsOptions.prototype.fail = function(animation, jumpedToEnd) {};

/**
 * A function to be called after each step of the animation, only once per animated element regardless
 * of the number of animated properties.
 * @this {TElement}
 * @param {!JQuery.Promise<?, ?, ?>} animation
 * @param {number} progress
 * @param {number} remainingMs
 * @return {void}
 */
JQuery.EffectsOptions.prototype.progress = function(animation, progress, remainingMs) {};

/**
 * A function to call when the animation on an element begins.
 * @this {TElement}
 * @param {!JQuery.Promise<?, ?, ?>} animation
 * @return {void}
 */
JQuery.EffectsOptions.prototype.start = function(animation) {};

/**
 * A function to be called for each animated property of each animated element. This function provides
 * an opportunity to modify the Tween object to change the value of the property before it is set.
 * @this {TElement}
 * @param {number} now
 * @param {!JQuery.Tween<TElement>} tween
 * @return {void}
 */
JQuery.EffectsOptions.prototype.step = function(now, tween) {};
/**
 * @record
 * @struct
 */
JQuery.SpeedSettings = function() {};
 /** @type {(number|string)} */
JQuery.SpeedSettings.prototype.duration;
 /** @type {string} */
JQuery.SpeedSettings.prototype.easing;

/**
 * A function to call once the animation is complete.
 * @this {TElement}
 * @return {void}
 */
JQuery.SpeedSettings.prototype.complete = function() {};
/**
 * @record
 * @struct
 */
JQuery.Tween = function() {};
 /** @type {string} */
JQuery.Tween.prototype.easing;
 /** @type {TElement} */
JQuery.Tween.prototype.elem;
 /** @type {number} */
JQuery.Tween.prototype.end;
 /** @type {number} */
JQuery.Tween.prototype.now;
 /** @type {!JQuery.EffectsOptions<TElement>} */
JQuery.Tween.prototype.options;
 /** @type {number} */
JQuery.Tween.prototype.pos;
 /** @type {string} */
JQuery.Tween.prototype.prop;
 /** @type {number} */
JQuery.Tween.prototype.start;
 /** @type {string} */
JQuery.Tween.prototype.unit;
/**
 * @record
 * @struct
 */
JQuery.AnimationHook = function() {};

/* TODO: CallSignature: JQuery */
/**
 * @record
 * @struct
 */
JQuery.EventStatic = function() {};

/* TODO: CallSignature: JQuery */

/* TODO: CallSignature: JQuery */

/* TODO: ConstructSignature: JQuery */

/* TODO: ConstructSignature: JQuery */
/**
 * @record
 * @struct
 */
JQuery.Event = function() {};
 /** @type {boolean} */
JQuery.Event.prototype.metaKey;
 /** @type {string} */
JQuery.Event.prototype.namespace;
 /** @type {number} */
JQuery.Event.prototype.pageX;
 /** @type {number} */
JQuery.Event.prototype.pageY;
 /** @type {?} */
JQuery.Event.prototype.result;
 /** @type {number} */
JQuery.Event.prototype.timeStamp;
 /** @type {string} */
JQuery.Event.prototype.type;
 /** @type {number} */
JQuery.Event.prototype.which;

/**
 * Returns whether event.preventDefault() was ever called on this event object.
 * 
 * @see {\@link https://api.jquery.com/event.isDefaultPrevented/}
 * \@since 1.3
 * @return {boolean}
 */
JQuery.Event.prototype.isDefaultPrevented = function() {};

/**
 * Returns whether event.stopImmediatePropagation() was ever called on this event object.
 * 
 * @see {\@link https://api.jquery.com/event.isImmediatePropagationStopped/}
 * \@since 1.3
 * @return {boolean}
 */
JQuery.Event.prototype.isImmediatePropagationStopped = function() {};

/**
 * Returns whether event.stopPropagation() was ever called on this event object.
 * 
 * @see {\@link https://api.jquery.com/event.isPropagationStopped/}
 * \@since 1.3
 * @return {boolean}
 */
JQuery.Event.prototype.isPropagationStopped = function() {};

/**
 * If this method is called, the default action of the event will not be triggered.
 * 
 * @see {\@link https://api.jquery.com/event.preventDefault/}
 * \@since 1.0
 * @return {void}
 */
JQuery.Event.prototype.preventDefault = function() {};

/**
 * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
 * 
 * @see {\@link https://api.jquery.com/event.stopImmediatePropagation/}
 * \@since 1.3
 * @return {void}
 */
JQuery.Event.prototype.stopImmediatePropagation = function() {};

/**
 * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
 * 
 * @see {\@link https://api.jquery.com/event.stopPropagation/}
 * \@since 1.0
 * @return {void}
 */
JQuery.Event.prototype.stopPropagation = function() {};
 /** @type {TTarget} */
JQuery.Event.prototype.currentTarget;
 /** @type {TData} */
JQuery.Event.prototype.data;
 /** @type {TTarget} */
JQuery.Event.prototype.delegateTarget;
 /** @type {!Event} */
JQuery.Event.prototype.originalEvent;
 /** @type {TTarget} */
JQuery.Event.prototype.relatedTarget;
 /** @type {TTarget} */
JQuery.Event.prototype.target;
/**
 * @record
 * @struct
 */
JQuery.EventLike = function() {};
 /** @type {string} */
JQuery.EventLike.prototype.type;
/**
 * @extends {JQuery.EventHandlerBase}
 * @record
 * @struct
 */
JQuery.EventHandler = function() {};
/**
 * @record
 * @struct
 */
JQuery.EventHandlerBase = function() {};

/* TODO: CallSignature: JQuery */

/** @const */
JQuery.Mouse = {};
/** @const {number} */
JQuery.Mouse.None;
/** @const {number} */
JQuery.Mouse.Left;
/** @const {number} */
JQuery.Mouse.Middle;
/** @const {number} */
JQuery.Mouse.Right;

/** @const */
JQuery.Key = {};
/** @const {number} */
JQuery.Key.Backspace;
/** @const {number} */
JQuery.Key.Tab;
/** @const {number} */
JQuery.Key.Enter;
/** @const {number} */
JQuery.Key.Shift;
/** @const {number} */
JQuery.Key.Control;
/** @const {number} */
JQuery.Key.Alt;
/** @const {number} */
JQuery.Key.CapsLock;
/** @const {number} */
JQuery.Key.Escape;
/** @const {number} */
JQuery.Key.Space;
/** @const {number} */
JQuery.Key.PageUp;
/** @const {number} */
JQuery.Key.PageDown;
/** @const {number} */
JQuery.Key.End;
/** @const {number} */
JQuery.Key.Home;
/** @const {number} */
JQuery.Key.ArrowLeft;
/** @const {number} */
JQuery.Key.ArrowUp;
/** @const {number} */
JQuery.Key.ArrowRight;
/** @const {number} */
JQuery.Key.ArrowDown;
/** @const {number} */
JQuery.Key.Semicolon;
/** @const {number} */
JQuery.Key.Colon;
/** @const {number} */
JQuery.Key.EqualsSign;
/** @const {number} */
JQuery.Key.Plus;
/** @const {number} */
JQuery.Key.Comma;
/** @const {number} */
JQuery.Key.LessThanSign;
/** @const {number} */
JQuery.Key.Minus;
/** @const {number} */
JQuery.Key.Underscore;
/** @const {number} */
JQuery.Key.Period;
/** @const {number} */
JQuery.Key.GreaterThanSign;
/** @const {number} */
JQuery.Key.ForwardSlash;
/** @const {number} */
JQuery.Key.QuestionMark;
/** @const {number} */
JQuery.Key.Backtick;
/** @const {number} */
JQuery.Key.Tilde;
/** @const {number} */
JQuery.Key.OpeningSquareBracket;
/** @const {number} */
JQuery.Key.OpeningCurlyBrace;
/** @const {number} */
JQuery.Key.Backslash;
/** @const {number} */
JQuery.Key.Pipe;
/** @const {number} */
JQuery.Key.ClosingSquareBracket;
/** @const {number} */
JQuery.Key.ClosingCurlyBrace;
/** @const {number} */
JQuery.Key.SingleQuote;
/** @const {number} */
JQuery.Key.DoubleQuote;
/** @const {number} */
JQuery.Key.Pause;
/** @const {number} */
JQuery.Key.PrintScreen;
/** @const {number} */
JQuery.Key.Insert;
/** @const {number} */
JQuery.Key.Delete;
/** @const {number} */
JQuery.Key.Num0;
/** @const {number} */
JQuery.Key.Num1;
/** @const {number} */
JQuery.Key.Num2;
/** @const {number} */
JQuery.Key.Num3;
/** @const {number} */
JQuery.Key.Num4;
/** @const {number} */
JQuery.Key.Num5;
/** @const {number} */
JQuery.Key.Num6;
/** @const {number} */
JQuery.Key.Num7;
/** @const {number} */
JQuery.Key.Num8;
/** @const {number} */
JQuery.Key.Num9;
/** @const {number} */
JQuery.Key.A;
/** @const {number} */
JQuery.Key.B;
/** @const {number} */
JQuery.Key.C;
/** @const {number} */
JQuery.Key.D;
/** @const {number} */
JQuery.Key.E;
/** @const {number} */
JQuery.Key.F;
/** @const {number} */
JQuery.Key.G;
/** @const {number} */
JQuery.Key.H;
/** @const {number} */
JQuery.Key.I;
/** @const {number} */
JQuery.Key.J;
/** @const {number} */
JQuery.Key.K;
/** @const {number} */
JQuery.Key.L;
/** @const {number} */
JQuery.Key.M;
/** @const {number} */
JQuery.Key.N;
/** @const {number} */
JQuery.Key.O;
/** @const {number} */
JQuery.Key.P;
/** @const {number} */
JQuery.Key.Q;
/** @const {number} */
JQuery.Key.R;
/** @const {number} */
JQuery.Key.S;
/** @const {number} */
JQuery.Key.T;
/** @const {number} */
JQuery.Key.U;
/** @const {number} */
JQuery.Key.V;
/** @const {number} */
JQuery.Key.W;
/** @const {number} */
JQuery.Key.X;
/** @const {number} */
JQuery.Key.Y;
/** @const {number} */
JQuery.Key.Z;
/** @const {number} */
JQuery.Key.MetaLeft;
/** @const {number} */
JQuery.Key.MetaRight;
/** @const {number} */
JQuery.Key.ContextMenu;
/** @const {number} */
JQuery.Key.Numpad0;
/** @const {number} */
JQuery.Key.Numpad1;
/** @const {number} */
JQuery.Key.Numpad2;
/** @const {number} */
JQuery.Key.Numpad3;
/** @const {number} */
JQuery.Key.Numpad4;
/** @const {number} */
JQuery.Key.Numpad5;
/** @const {number} */
JQuery.Key.Numpad6;
/** @const {number} */
JQuery.Key.Numpad7;
/** @const {number} */
JQuery.Key.Numpad8;
/** @const {number} */
JQuery.Key.Numpad9;
/** @const {number} */
JQuery.Key.NumpadMultiply;
/** @const {number} */
JQuery.Key.NumpadAdd;
/** @const {number} */
JQuery.Key.NumpadSubtract;
/** @const {number} */
JQuery.Key.NumpadDecimal;
/** @const {number} */
JQuery.Key.NumpadDivide;
/** @const {number} */
JQuery.Key.F1;
/** @const {number} */
JQuery.Key.F2;
/** @const {number} */
JQuery.Key.F3;
/** @const {number} */
JQuery.Key.F4;
/** @const {number} */
JQuery.Key.F5;
/** @const {number} */
JQuery.Key.F6;
/** @const {number} */
JQuery.Key.F7;
/** @const {number} */
JQuery.Key.F8;
/** @const {number} */
JQuery.Key.F9;
/** @const {number} */
JQuery.Key.F10;
/** @const {number} */
JQuery.Key.F11;
/** @const {number} */
JQuery.Key.F12;
/** @const {number} */
JQuery.Key.NumLock;
/** @const {number} */
JQuery.Key.ScrollLock;
/**
 * @record
 * @struct
 */
JQuery.NameValuePair = function() {};
 /** @type {string} */
JQuery.NameValuePair.prototype.name;
 /** @type {string} */
JQuery.NameValuePair.prototype.value;
/**
 * @record
 * @struct
 */
JQuery.Coordinates = function() {};
 /** @type {number} */
JQuery.Coordinates.prototype.left;
 /** @type {number} */
JQuery.Coordinates.prototype.top;
/**
 * @record
 * @struct
 */
JQuery.ValHook = function() {};

/**
 * @param {TElement} elem
 * @return {?}
 */
JQuery.ValHook.prototype.get = function(elem) {};

/**
 * @param {TElement} elem
 * @param {?} value
 * @return {?}
 */
JQuery.ValHook.prototype.set = function(elem, value) {};
/**
 * @extends {JQuery.Callbacks}
 * @record
 * @struct
 */
function JQueryCallback() {}
/**
 * @extends {JQuery.Deferred}
 * @record
 * @struct
 */
function JQueryDeferred() {}
/**
 * @extends {JQuery.Event}
 * @record
 * @struct
 */
function JQueryEventConstructor() {}
/**
 * @extends {JQuery.AjaxSettings}
 * @record
 * @struct
 */
function JQueryAjaxSettings() {}
/**
 * @extends {JQuery.EffectsOptions}
 * @record
 * @struct
 */
function JQueryAnimationOptions() {}
/**
 * @extends {JQuery.Coordinates}
 * @record
 * @struct
 */
function JQueryCoordinates() {}
/**
 * @extends {JQuery.Thenable}
 * @record
 * @struct
 */
function JQueryGenericPromise() {}
/**
 * @extends {JQuery.jqXHR}
 * @record
 * @struct
 */
function JQueryXHR() {}
/**
 * @extends {JQuery.Promise}
 * @record
 * @struct
 */
function JQueryPromise() {}
/**
 * @extends {JQuery.NameValuePair}
 * @record
 * @struct
 */
function JQuerySerializeArrayElement() {}
/**
 * @extends {JQuery.PlainObject}
 * @record
 * @struct
 */
function JQuerySupport() {}
/**
 * @record
 * @struct
 */
function JQueryPromiseCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function JQueryParam() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function BaseJQueryEventObject() {}
 /** @type {!Element} */
BaseJQueryEventObject.prototype.currentTarget;
 /** @type {?} */
BaseJQueryEventObject.prototype.data;
 /** @type {!Element} */
BaseJQueryEventObject.prototype.delegateTarget;
 /** @type {string} */
BaseJQueryEventObject.prototype.namespace;
 /** @type {!Event} */
BaseJQueryEventObject.prototype.originalEvent;
 /** @type {!Element} */
BaseJQueryEventObject.prototype.relatedTarget;
 /** @type {?} */
BaseJQueryEventObject.prototype.result;
 /** @type {!Element} */
BaseJQueryEventObject.prototype.target;
 /** @type {number} */
BaseJQueryEventObject.prototype.pageX;
 /** @type {number} */
BaseJQueryEventObject.prototype.pageY;
 /** @type {number} */
BaseJQueryEventObject.prototype.which;
 /** @type {boolean} */
BaseJQueryEventObject.prototype.metaKey;

/**
 * Returns whether event.preventDefault() was ever called on this event object.
 * @see {\@link https://api.jquery.com/event.isDefaultPrevented/}
 * @return {boolean}
 */
BaseJQueryEventObject.prototype.isDefaultPrevented = function() {};

/**
 * Returns whether event.stopImmediatePropagation() was ever called on this event object.
 * @see {\@link https://api.jquery.com/event.isImmediatePropagationStopped/}
 * @return {boolean}
 */
BaseJQueryEventObject.prototype.isImmediatePropagationStopped = function() {};

/**
 * Returns whether event.stopPropagation() was ever called on this event object.
 * @see {\@link https://api.jquery.com/event.isPropagationStopped/}
 * @return {boolean}
 */
BaseJQueryEventObject.prototype.isPropagationStopped = function() {};

/**
 * If this method is called, the default action of the event will not be triggered.
 * @see {\@link https://api.jquery.com/event.preventDefault/}
 * @return {?}
 */
BaseJQueryEventObject.prototype.preventDefault = function() {};

/**
 * Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
 * @see {\@link https://api.jquery.com/event.stopImmediatePropagation/}
 * @return {void}
 */
BaseJQueryEventObject.prototype.stopImmediatePropagation = function() {};

/**
 * Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.
 * @see {\@link https://api.jquery.com/event.stopPropagation/}
 * @return {void}
 */
BaseJQueryEventObject.prototype.stopPropagation = function() {};
/**
 * @extends {BaseJQueryEventObject}
 * @record
 * @struct
 */
function JQueryInputEventObject() {}
 /** @type {boolean} */
JQueryInputEventObject.prototype.altKey;
 /** @type {boolean} */
JQueryInputEventObject.prototype.ctrlKey;
 /** @type {boolean} */
JQueryInputEventObject.prototype.metaKey;
 /** @type {boolean} */
JQueryInputEventObject.prototype.shiftKey;
/**
 * @extends {JQueryInputEventObject}
 * @record
 * @struct
 */
function JQueryMouseEventObject() {}
 /** @type {number} */
JQueryMouseEventObject.prototype.button;
 /** @type {number} */
JQueryMouseEventObject.prototype.clientX;
 /** @type {number} */
JQueryMouseEventObject.prototype.clientY;
 /** @type {number} */
JQueryMouseEventObject.prototype.offsetX;
 /** @type {number} */
JQueryMouseEventObject.prototype.offsetY;
 /** @type {number} */
JQueryMouseEventObject.prototype.pageX;
 /** @type {number} */
JQueryMouseEventObject.prototype.pageY;
 /** @type {number} */
JQueryMouseEventObject.prototype.screenX;
 /** @type {number} */
JQueryMouseEventObject.prototype.screenY;
/**
 * @extends {JQueryInputEventObject}
 * @record
 * @struct
 */
function JQueryKeyEventObject() {}
 /** @type {?} */
JQueryKeyEventObject.prototype.char;
 /** @type {number} */
JQueryKeyEventObject.prototype.charCode;
 /** @type {?} */
JQueryKeyEventObject.prototype.key;
 /** @type {number} */
JQueryKeyEventObject.prototype.keyCode;
/**
 * @extends {BaseJQueryEventObject}
 * @extends {JQueryInputEventObject}
 * @extends {JQueryMouseEventObject}
 * @extends {JQueryKeyEventObject}
 * @record
 * @struct
 */
function JQueryEventObject() {}
/**
 * @record
 * @struct
 */
function JQueryPromiseOperator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function JQueryEasingFunction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function JQueryEasingFunctions() {}

/* TODO: IndexSignature:  */
 /** @type {!JQueryEasingFunction} */
JQueryEasingFunctions.prototype.linear;
 /** @type {!JQueryEasingFunction} */
JQueryEasingFunctions.prototype.swing;
