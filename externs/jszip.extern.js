/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jszip/index.d.ts:
/**
 * @record
 * @struct
 */
function JSZip() {}
 /** @type {!Object<string,!JSZipObject>} */
JSZip.prototype.files;

/**
 * Get a file from the archive
 * 
 * Get files matching a RegExp from archive
 * 
 * Add a file to the archive
 * 
 * @param {string|!RegExp} path RegExp to match / Relative path to file
 * @param {?=} data
 * @param {!JSZipFileOptions=} options Optional information about the file
 * @return {!JSZipObject|!Array<!JSZipObject>|?} File matching path, null if no file found / Return all matching files or an empty array / JSZip object
 */
JSZip.prototype.file = function(path, data, options) {};

/**
 * Return an new JSZip instance with the given folder as root
 * 
 * Returns new JSZip instances with the matching folders as root
 * 
 * @param {string|!RegExp} name Name of the folder / RegExp to match
 * @return {?|!Array<!JSZipObject>} New JSZip object with the given folder as root or null / New array of JSZipFile objects which match the RegExp
 */
JSZip.prototype.folder = function(name) {};

/**
 * Call a callback function for each entry at this folder level.
 * 
 * @param {function(string, !JSZipObject): void} callback function
 * @return {void}
 */
JSZip.prototype.forEach = function(callback) {};

/**
 * Get all files wchich match the given filter function
 * 
 * @param {function(string, !JSZipObject): boolean} predicate Filter function
 * @return {!Array<!JSZipObject>} Array of matched elements
 */
JSZip.prototype.filter = function(predicate) {};

/**
 * Removes the file or folder from the archive
 * 
 * @param {string} path Relative path of file or folder
 * @return {?} Returns the JSZip instance
 */
JSZip.prototype.remove = function(path) {};

/**
 * @deprecated since version 3.0
 * @see {\@link generateAsync}
 * http://stuk.github.io/jszip/documentation/upgrade_guide.html
 * @param {!JSZipGeneratorOptions=} options
 * @return {?}
 */
JSZip.prototype.generate = function(options) {};

/**
 * Generates a new archive asynchronously
 * 
 * @param {!JSZipGeneratorOptions=} options Optional options for the generator
 * @param {!Function=} onUpdate
 * @return {!Promise<?>} The serialized archive
 */
JSZip.prototype.generateAsync = function(options, onUpdate) {};

/**
 * @deprecated since version 3.0
 * @see {\@link loadAsync}
 * http://stuk.github.io/jszip/documentation/upgrade_guide.html
 * @return {void}
 */
JSZip.prototype.load = function() {};

/**
 * Deserialize zip file asynchronously
 * 
 * @param {?} data Serialized zip file
 * @param {!JSZipLoadOptions=} options Options for deserializing
 * @return {!Promise<?>} Returns promise
 */
JSZip.prototype.loadAsync = function(data, options) {};

/** @typedef {string} */
var Serialization;
/**
 * @record
 * @struct
 */
function JSZipObject() {}
 /** @type {string} */
JSZipObject.prototype.name;
 /** @type {boolean} */
JSZipObject.prototype.dir;
 /** @type {!Date} */
JSZipObject.prototype.date;
 /** @type {string} */
JSZipObject.prototype.comment;
 /** @type {!JSZipObjectOptions} */
JSZipObject.prototype.options;

/**
 * Prepare the content in the asked type.
 * @param {string} type
 * @param {!Function=} onUpdate
 * @return {!Promise<?>} Promise the promise of the result.
 */
JSZipObject.prototype.async = function(type, onUpdate) {};

/**
 * @deprecated since version 3.0
 * @return {void}
 */
JSZipObject.prototype.asText = function() {};

/**
 * @deprecated since version 3.0
 * @return {void}
 */
JSZipObject.prototype.asBinary = function() {};

/**
 * @deprecated since version 3.0
 * @return {void}
 */
JSZipObject.prototype.asArrayBuffer = function() {};

/**
 * @deprecated since version 3.0
 * @return {void}
 */
JSZipObject.prototype.asUint8Array = function() {};
/**
 * @record
 * @struct
 */
function JSZipFileOptions() {}
 /** @type {boolean} */
JSZipFileOptions.prototype.base64;
 /** @type {boolean} */
JSZipFileOptions.prototype.binary;
 /** @type {!Date} */
JSZipFileOptions.prototype.date;
 /** @type {string} */
JSZipFileOptions.prototype.compression;
 /** @type {string} */
JSZipFileOptions.prototype.comment;
 /** @type {boolean} */
JSZipFileOptions.prototype.optimizedBinaryString;
 /** @type {boolean} */
JSZipFileOptions.prototype.createFolders;
 /** @type {boolean} */
JSZipFileOptions.prototype.dir;
/**
 * @record
 * @struct
 */
function JSZipObjectOptions() {}
 /** @type {boolean} */
JSZipObjectOptions.prototype.base64;
 /** @type {boolean} */
JSZipObjectOptions.prototype.binary;
 /** @type {boolean} */
JSZipObjectOptions.prototype.dir;
 /** @type {!Date} */
JSZipObjectOptions.prototype.date;
 /** @type {string} */
JSZipObjectOptions.prototype.compression;
/**
 * @record
 * @struct
 */
function JSZipGeneratorOptions() {}
 /** @type {boolean} */
JSZipGeneratorOptions.prototype.base64;
 /** @type {string} */
JSZipGeneratorOptions.prototype.compression;
 /** @type {string} */
JSZipGeneratorOptions.prototype.type;
 /** @type {string} */
JSZipGeneratorOptions.prototype.comment;
 /** @type {string} */
JSZipGeneratorOptions.prototype.mimeType;
 /** @type {boolean} */
JSZipGeneratorOptions.prototype.streamFiles;
 /** @type {string} */
JSZipGeneratorOptions.prototype.platform;
/**
 * @record
 * @struct
 */
function JSZipLoadOptions() {}
 /** @type {boolean} */
JSZipLoadOptions.prototype.base64;
 /** @type {boolean} */
JSZipLoadOptions.prototype.checkCRC32;
 /** @type {boolean} */
JSZipLoadOptions.prototype.optimizedBinaryString;
 /** @type {boolean} */
JSZipLoadOptions.prototype.createFolders;
/**
 * @record
 * @struct
 */
function JSZipSupport() {}
 /** @type {boolean} */
JSZipSupport.prototype.arraybuffer;
 /** @type {boolean} */
JSZipSupport.prototype.uint8array;
 /** @type {boolean} */
JSZipSupport.prototype.blob;
 /** @type {boolean} */
JSZipSupport.prototype.nodebuffer;
 /** @type {function(new: (?)): ?} */
var JSZip;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "jszip"
/** @const */
tsickle_declare_module.jszip = {};

/* TODO: ExportAssignment in tsickle_declare_module.jszip */
