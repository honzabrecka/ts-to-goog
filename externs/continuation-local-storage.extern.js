/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/continuation-local-storage/index.d.ts:

/** @typedef {?} */
var Context;

/** @typedef {?} */
var Func;
/**
 * @record
 * @struct
 */
function Namespace() {}
 /** @type {string} */
Namespace.prototype.name;
 /** @type {?} */
Namespace.prototype.active;

/**
 * @return {?}
 */
Namespace.prototype.createContext = function() {};

/**
 * @template T
 * @param {string} key
 * @param {?} value
 * @return {?}
 */
Namespace.prototype.set = function(key, value) {};

/**
 * @param {string} key
 * @return {?}
 */
Namespace.prototype.get = function(key) {};

/**
 * @template T
 * @param {?} callback
 * @return {?}
 */
Namespace.prototype.run = function(callback) {};

/**
 * @template T
 * @param {?} callback
 * @return {?}
 */
Namespace.prototype.runAndReturn = function(callback) {};

/**
 * @template T
 * @param {?} callback
 * @param {?=} context
 * @return {?}
 */
Namespace.prototype.bind = function(callback, context) {};

/**
 * @param {!NodeJS.EventEmitter} emitter
 * @return {void}
 */
Namespace.prototype.bindEmitter = function(emitter) {};

/**
 * @param {string} name
 * @return {?}
 */
function createNamespace(name) {}

/**
 * @param {string} name
 * @return {?}
 */
function getNamespace(name) {}

/**
 * @param {string} name
 * @return {void}
 */
function destroyNamespace(name) {}

/**
 * @return {void}
 */
function reset() {}
