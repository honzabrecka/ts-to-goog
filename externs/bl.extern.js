/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bl/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/**
 * @extends {internal.Duplex}
 * @constructor
 * @struct
 */
function BufferList() {}
 /** @type {number} */
BufferList.prototype.length;

/**
 * @param {function(!Error, ?): void=} callback
 * @return {void}
 */
BufferList.prototype.new = function(callback) {};

/**
 * @param {?} buffer
 * @return {void}
 */
BufferList.prototype.append = function(buffer) {};

/**
 * @param {number} index
 * @return {number}
 */
BufferList.prototype.get = function(index) {};

/**
 * @param {number=} start
 * @param {number=} end
 * @return {?}
 */
BufferList.prototype.slice = function(start, end) {};

/**
 * @param {?} dest
 * @param {number=} destStart
 * @param {number=} srcStart
 * @param {number=} srcEnd
 * @return {void}
 */
BufferList.prototype.copy = function(dest, destStart, srcStart, srcEnd) {};

/**
 * @return {!BufferList}
 */
BufferList.prototype.duplicate = function() {};

/**
 * @param {number=} bytes
 * @return {void}
 */
BufferList.prototype.consume = function(bytes) {};

/**
 * @param {string=} encoding
 * @param {number=} start
 * @param {number=} end
 * @return {string}
 */
BufferList.prototype.toString = function(encoding, start, end) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readDoubleBE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readDoubleLE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readFloatBE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readFloatLE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readInt32BE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readInt32LE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readUInt32BE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readUInt32LE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readInt16BE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readInt16LE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readUInt16BE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readUInt16LE = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readInt8 = function(offset, noAssert) {};

/**
 * @param {number} offset
 * @param {boolean=} noAssert
 * @return {number}
 */
BufferList.prototype.readUInt8 = function(offset, noAssert) {};

/* TODO: ExportAssignment in  */
