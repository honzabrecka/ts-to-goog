/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/pickadate/index.d.ts:
/** @const */
var Pickadate = {};
/**
 * @record
 * @struct
 */
Pickadate.KlassOptions = function() {};
 /** @type {string} */
Pickadate.KlassOptions.prototype.input;
 /** @type {string} */
Pickadate.KlassOptions.prototype.active;
 /** @type {string} */
Pickadate.KlassOptions.prototype.picker;
 /** @type {string} */
Pickadate.KlassOptions.prototype.opened;
 /** @type {string} */
Pickadate.KlassOptions.prototype.focused;
 /** @type {string} */
Pickadate.KlassOptions.prototype.holder;
 /** @type {string} */
Pickadate.KlassOptions.prototype.frame;
 /** @type {string} */
Pickadate.KlassOptions.prototype.wrap;
 /** @type {string} */
Pickadate.KlassOptions.prototype.box;
 /** @type {string} */
Pickadate.KlassOptions.prototype.disabled;
 /** @type {string} */
Pickadate.KlassOptions.prototype.selected;
 /** @type {string} */
Pickadate.KlassOptions.prototype.highlighted;
 /** @type {string} */
Pickadate.KlassOptions.prototype.now;
 /** @type {string} */
Pickadate.KlassOptions.prototype.buttonClear;
/**
 * @extends {Pickadate.KlassOptions}
 * @record
 * @struct
 */
Pickadate.DateKlassOptions = function() {};
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.header;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.navPrev;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.navNext;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.navDisabled;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.month;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.year;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.selectMonth;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.selectYear;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.table;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.weekdays;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.day;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.infocus;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.outfocus;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.footer;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.buttonClose;
 /** @type {string} */
Pickadate.DateKlassOptions.prototype.buttonToday;
/**
 * @extends {Pickadate.KlassOptions}
 * @record
 * @struct
 */
Pickadate.TimeKlassOptions = function() {};
 /** @type {string} */
Pickadate.TimeKlassOptions.prototype.picker;
 /** @type {string} */
Pickadate.TimeKlassOptions.prototype.list;
 /** @type {string} */
Pickadate.TimeKlassOptions.prototype.listItem;
 /** @type {string} */
Pickadate.TimeKlassOptions.prototype.viewset;
/**
 * @record
 * @struct
 */
Pickadate.Options = function() {};
 /** @type {string} */
Pickadate.Options.prototype.clear;
 /** @type {string} */
Pickadate.Options.prototype.format;
 /** @type {string} */
Pickadate.Options.prototype.formatSubmit;
 /** @type {string} */
Pickadate.Options.prototype.hiddenPrefix;
 /** @type {string} */
Pickadate.Options.prototype.hiddenSuffix;
 /** @type {boolean} */
Pickadate.Options.prototype.hiddenName;
 /** @type {boolean} */
Pickadate.Options.prototype.editable;
 /** @type {(string|?<!HTMLElement>)} */
Pickadate.Options.prototype.container;
 /** @type {string} */
Pickadate.Options.prototype.containerHidden;
 /** @type {boolean} */
Pickadate.Options.prototype.closeOnSelect;
 /** @type {boolean} */
Pickadate.Options.prototype.closeOnClear;
 /** @type {function(?): void} */
Pickadate.Options.prototype.onStart;
 /** @type {function(?): void} */
Pickadate.Options.prototype.onRender;
 /** @type {function(?): void} */
Pickadate.Options.prototype.onOpen;
 /** @type {function(?): void} */
Pickadate.Options.prototype.onClose;
 /** @type {function(?): void} */
Pickadate.Options.prototype.onSet;
 /** @type {function(?): void} */
Pickadate.Options.prototype.onStop;

/** @typedef {(number|boolean|!Date|!Array<?>)} */
Pickadate.MinOrMaxDateOption;

/** @typedef {(number|boolean|!Date|!Array<?>)} */
Pickadate.MinOrMaxTimeOption;
/**
 * @extends {Pickadate.Options}
 * @record
 * @struct
 */
Pickadate.DateOptions = function() {};
 /** @type {!Array<string>} */
Pickadate.DateOptions.prototype.monthsFull;
 /** @type {!Array<string>} */
Pickadate.DateOptions.prototype.monthsShort;
 /** @type {!Array<string>} */
Pickadate.DateOptions.prototype.weekdaysFull;
 /** @type {!Array<string>} */
Pickadate.DateOptions.prototype.weekdaysShort;
 /** @type {boolean} */
Pickadate.DateOptions.prototype.showMonthsShort;
 /** @type {boolean} */
Pickadate.DateOptions.prototype.showWeekdaysFull;
 /** @type {string} */
Pickadate.DateOptions.prototype.today;
 /** @type {string} */
Pickadate.DateOptions.prototype.close;
 /** @type {string} */
Pickadate.DateOptions.prototype.labelMonthNext;
 /** @type {string} */
Pickadate.DateOptions.prototype.labelMonthPrev;
 /** @type {string} */
Pickadate.DateOptions.prototype.labelMonthSelect;
 /** @type {string} */
Pickadate.DateOptions.prototype.labelYearSelect;
 /** @type {(number|boolean)} */
Pickadate.DateOptions.prototype.selectYears;
 /** @type {boolean} */
Pickadate.DateOptions.prototype.selectMonths;
 /** @type {(number|boolean)} */
Pickadate.DateOptions.prototype.firstDay;
 /** @type {(number|boolean|!Date|!Array<?>)} */
Pickadate.DateOptions.prototype.min;
 /** @type {(number|boolean|!Date|!Array<?>)} */
Pickadate.DateOptions.prototype.max;
 /** @type {!Array<?>} */
Pickadate.DateOptions.prototype.disable;
 /** @type {!Pickadate.DateKlassOptions} */
Pickadate.DateOptions.prototype.klass;
/**
 * @extends {Pickadate.Options}
 * @record
 * @struct
 */
Pickadate.TimeOptions = function() {};
 /** @type {(string|function(!Pickadate.TimeItem): string)} */
Pickadate.TimeOptions.prototype.formatLabel;
 /** @type {number} */
Pickadate.TimeOptions.prototype.interval;
 /** @type {(number|boolean|!Date|!Array<?>)} */
Pickadate.TimeOptions.prototype.min;
 /** @type {(number|boolean|!Date|!Array<?>)} */
Pickadate.TimeOptions.prototype.max;
 /** @type {!Array<?>} */
Pickadate.TimeOptions.prototype.disable;
 /** @type {!Pickadate.TimeKlassOptions} */
Pickadate.TimeOptions.prototype.klass;
/**
 * @record
 * @struct
 */
Pickadate.Item = function() {};
 /** @type {number} */
Pickadate.Item.prototype.pick;
/**
 * @extends {Pickadate.Item}
 * @record
 * @struct
 */
Pickadate.DateItem = function() {};
 /** @type {number} */
Pickadate.DateItem.prototype.year;
 /** @type {number} */
Pickadate.DateItem.prototype.month;
 /** @type {number} */
Pickadate.DateItem.prototype.date;
 /** @type {number} */
Pickadate.DateItem.prototype.day;
 /** @type {!Date} */
Pickadate.DateItem.prototype.obj;
/**
 * @extends {Pickadate.Item}
 * @record
 * @struct
 */
Pickadate.TimeItem = function() {};
 /** @type {number} */
Pickadate.TimeItem.prototype.hour;
 /** @type {number} */
Pickadate.TimeItem.prototype.mins;
/**
 * @record
 * @struct
 */
Pickadate.CallbackObject = function() {};
 /** @type {function(): void} */
Pickadate.CallbackObject.prototype.open;
 /** @type {function(): void} */
Pickadate.CallbackObject.prototype.close;
 /** @type {function(): void} */
Pickadate.CallbackObject.prototype.render;
 /** @type {function(): void} */
Pickadate.CallbackObject.prototype.start;
 /** @type {function(): void} */
Pickadate.CallbackObject.prototype.stop;
 /** @type {function(?): void} */
Pickadate.CallbackObject.prototype.set;
/**
 * @record
 * @struct
 */
Pickadate.SetObject = function() {};
 /** @type {?} */
Pickadate.SetObject.prototype.clear;
 /** @type {?} */
Pickadate.SetObject.prototype.select;
 /** @type {?} */
Pickadate.SetObject.prototype.highlight;
 /** @type {?} */
Pickadate.SetObject.prototype.view;
 /** @type {?} */
Pickadate.SetObject.prototype.min;
 /** @type {?} */
Pickadate.SetObject.prototype.max;
 /** @type {?} */
Pickadate.SetObject.prototype.disable;
 /** @type {?} */
Pickadate.SetObject.prototype.enable;
/**
 * @extends {Pickadate.SetObject}
 * @record
 * @struct
 */
Pickadate.TimeSetObject = function() {};
 /** @type {number} */
Pickadate.TimeSetObject.prototype.interval;
/**
 * @record
 * @struct
 */
Pickadate.SetOptions = function() {};
 /** @type {boolean} */
Pickadate.SetOptions.prototype.muted;
 /** @type {string} */
Pickadate.SetOptions.prototype.format;
/**
 * @record
 * @struct
 */
Pickadate.Picker = function() {};
 /** @type {?<!HTMLElement>} */
Pickadate.Picker.prototype.$node;
 /** @type {?<!HTMLElement>} */
Pickadate.Picker.prototype.$root;
 /** @type {!HTMLInputElement} */
Pickadate.Picker.prototype._hidden;

/**
 * @param {boolean=} withoutFocus
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.open = function(withoutFocus) {};

/**
 * @param {boolean=} withFocus
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.close = function(withFocus) {};

/**
 * Rebuild the picker.
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.start = function() {};

/**
 * Destroy the picker.
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.stop = function() {};

/**
 * Refresh the picker box after adding something to the holder.
 * By default, only the "face" of the picker (i.e. the box element)
 * has itâ€™s contents re-rendered. To render the entire picker from
 * the root up, pass true as the first argument.
 * @param {boolean=} entirePicker
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.render = function(entirePicker) {};

/**
 * Clear the value in the picker's input element.
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.clear = function() {};

/**
 * Short for picker.get('value')
 * Get the properties, objects, and states that make up the current
 * state of the picker.
 * Returns the string value of the picker's input element.
 * Returns the item object that is visually selected.
 * Returns the item object that is visually highlighted.
 * Returns the item object that sets the current view.
 * Returns the item object that limits the picker's lower range.
 * Returns the item object that limits the picker's upper range.
 * Returns a boolean value of whether the picker is open or not.
 * Returns a boolean value of whether the picker has started or not.
 * Returns a unique 9-digit integer that is the ID of the picker.
 * Returns an array of items that determine which item objects to
 * disable on the picker.
 * Returns a formatted string for the item object specified by `thing`
 * @param {string=} thing
 * @param {string=} format
 * @return {string|?|TItemObject|boolean|number|!Array<?>}
 */
Pickadate.Picker.prototype.get = function(thing, format) {};

/**
 * Set the properties, objects, and states to change the state of the picker.
 * @param {string|TOptions} thing_or_things
 * @param {?|!Pickadate.SetOptions=} value_or_options
 * @param {!Pickadate.SetOptions=} options
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.set = function(thing_or_things, value_or_options, options) {};

/**
 * Bind callbacks to get fired off when the relative picker method is called.
 * Bind multiple callbacks at once to get fired off when the relative
 * picker method is called.
 * @param {string|!Pickadate.CallbackObject} methodName_or_callbackObject
 * @param {function(?): void=} callback
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.on = function(methodName_or_callbackObject, callback) {};

/**
 * Unbind callbacks that are bound using the on method.
 * @param {...string} methodName
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.off = function(methodName) {};

/**
 * Trigger callbacks that have been queued up using the the on method.
 * @param {string} event
 * @param {?=} data
 * @return {TPickerObject}
 */
Pickadate.Picker.prototype.trigger = function(event, data) {};
/**
 * @extends {Pickadate.Picker}
 * @record
 * @struct
 */
Pickadate.DatePicker = function() {};
/**
 * @extends {Pickadate.Picker}
 * @record
 * @struct
 */
Pickadate.TimePicker = function() {};
/**
 * @record
 * @struct
 */
Pickadate.Pickadate = function() {};
 /** @type {!Pickadate.DateOptions} */
Pickadate.Pickadate.prototype.defaults;

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */
/**
 * @record
 * @struct
 */
Pickadate.Pickatime = function() {};
 /** @type {!Pickadate.TimeOptions} */
Pickadate.Pickatime.prototype.defaults;

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */

/* TODO: CallSignature: Pickadate */
 /** @type {!Pickadate.Pickadate} */
JQuery.prototype.pickadate;
 /** @type {!Pickadate.Pickatime} */
JQuery.prototype.pickatime;
