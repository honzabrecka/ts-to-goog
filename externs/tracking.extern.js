/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/tracking/index.d.ts:
/** @const */
var tracking = {};

/**
 * @constructor
 * @struct
 * @param {!Array<string>} colours
 */
tracking.ColorTracker = function(colours) {};

/**
 * @param {string} name
 * @param {function(number, number, number): boolean} predicate
 * @return {void}
 */
tracking.ColorTracker.registerColor = function(name, predicate) {};

/**
 * @constructor
 * @struct
 * @param {!Array<string>} objects
 */
tracking.ObjectTracker = function(objects) {};

/**
 * @constructor
 * @struct
 * @param {string} target
 */
tracking.Tracker = function(target) {};

/**
 * @param {string} eventName
 * @param {function(!tracking.TrackEvent): void} callback
 * @return {void}
 */
tracking.Tracker.prototype.on = function(eventName, callback) {};
/**
 * @record
 * @struct
 */
tracking.TrackEvent = function() {};
 /** @type {!Array<!tracking.TrackRect>} */
tracking.TrackEvent.prototype.data;
/**
 * @record
 * @struct
 */
tracking.TrackRect = function() {};
 /** @type {number} */
tracking.TrackRect.prototype.x;
 /** @type {number} */
tracking.TrackRect.prototype.y;
 /** @type {number} */
tracking.TrackRect.prototype.height;
 /** @type {number} */
tracking.TrackRect.prototype.width;
 /** @type {string} */
tracking.TrackRect.prototype.color;
/**
 * @record
 * @struct
 */
tracking.TrackerTask = function() {};

/**
 * @return {void}
 */
tracking.TrackerTask.prototype.stop = function() {};

/**
 * @return {void}
 */
tracking.TrackerTask.prototype.run = function() {};

/**
 * @param {string} selector
 * @param {!tracking.Tracker} tracker
 * @return {!tracking.TrackerTask}
 */
tracking.track = function(selector, tracker) {};
