/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/moment-range/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {(string|!Array<!Date>|!Array<!moment.Moment>)|(!Date|!moment.Moment)} range_or_start
 * @param {(!Date|!moment.Moment)=} end
 */
function DateRange(range_or_start, end) {}
 /** @type {!moment.Moment} */
DateRange.prototype.start;
 /** @type {!moment.Moment} */
DateRange.prototype.end;

/**
 * @param {(?|!Date|!moment.Moment)} other
 * @param {?=} options
 * @return {boolean}
 */
DateRange.prototype.contains = function(other, options) {};

/**
 * @param {?} range
 * @param {?=} options
 * @return {boolean}
 */
DateRange.prototype.overlaps = function(range, options) {};

/**
 * @param {?} other
 * @return {?}
 */
DateRange.prototype.intersect = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
DateRange.prototype.add = function(other) {};

/**
 * @param {?} other
 * @return {!Array<?>}
 */
DateRange.prototype.subtract = function(other) {};

/**
 * @param {string} interval
 * @param {?=} options
 * @return {!Iterable<!moment.Moment>}
 */
DateRange.prototype.by = function(interval, options) {};

/**
 * @param {?} interval
 * @param {?=} options
 * @return {!Iterable<!moment.Moment>}
 */
DateRange.prototype.byRange = function(interval, options) {};

/**
 * @param {?} other
 * @return {boolean}
 */
DateRange.prototype.isSame = function(other) {};

/**
 * @param {string=} unit
 * @param {boolean=} rounded
 * @return {number}
 */
DateRange.prototype.diff = function(unit, rounded) {};

/**
 * @return {!Array<!Date>}
 */
DateRange.prototype.toDate = function() {};

/**
 * @return {string}
 */
DateRange.prototype.toString = function() {};

/**
 * @return {number}
 */
DateRange.prototype.valueOf = function() {};

/**
 * @return {!moment.Moment}
 */
DateRange.prototype.center = function() {};

/**
 * @return {?}
 */
DateRange.prototype.clone = function() {};

/**
 * @param {?} other
 * @return {boolean}
 */
DateRange.prototype.isEqual = function(other) {};

/**
 * @param {?} other
 * @return {boolean}
 */
DateRange.prototype.adjacent = function(other) {};

/**
 * @param {string=} unit
 * @param {boolean=} precise
 * @return {number}
 */
DateRange.prototype.duration = function(unit, precise) {};

/**
 * @param {string} interval
 * @param {?=} options
 * @return {!Iterable<!moment.Moment>}
 */
DateRange.prototype.reverseBy = function(interval, options) {};

/**
 * @param {?} interval
 * @param {?=} options
 * @return {!Iterable<!moment.Moment>}
 */
DateRange.prototype.reverseByRange = function(interval, options) {};
/**
 * @record
 * @struct
 */
function MomentRangeMethods() {}

/**
 * @param {(string|!Array<!Date>|!Array<!moment.Moment>)|(!Date|!moment.Moment)} range_or_start
 * @param {(!Date|!moment.Moment)=} end
 * @return {?}
 */
MomentRangeMethods.prototype.range = function(range_or_start, end) {};

/**
 * @param {?} range
 * @return {boolean}
 */
MomentRangeMethods.prototype.within = function(range) {};
/**
 * @extends {MomentRangeMethods}
 * @record
 * @struct
 */
function MomentRangeExtends() {}

/* TODO: CallSignature:  */

/**
 * @param {(!moment.Moment|?)} momentInstance
 * @return {?}
 */
function extendMoment(momentInstance) {}
