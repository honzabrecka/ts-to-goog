/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/smart-fox-server/index.d.ts:
/** @const */
var SFS2X = {};
/** @const */
SFS2X.Entities = {};
/** @const */
SFS2X.Entities.Data = {};

/**
 * @constructor
 * @struct
 * Creates a new Vec3D instance.
 * @param {number} px
 * @param {number} py
 * @param {number=} pz
 */
SFS2X.Entities.Data.Vec3D = function(px, py, pz) {};
 /** @type {number} */
SFS2X.Entities.Data.Vec3D.prototype.px;
 /** @type {number} */
SFS2X.Entities.Data.Vec3D.prototype.py;
 /** @type {number} */
SFS2X.Entities.Data.Vec3D.prototype.pz;

/**
 * Indicates whether the position is expressed using floating point values or not.
 * @return {boolean}
 */
SFS2X.Entities.Data.Vec3D.prototype.isFloat = function() {};
/** @const */
SFS2X.Entities.Invitation = {};
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Invitation.InvitationReply = function() {};
 /** @type {number} */
SFS2X.Entities.Invitation.InvitationReply.ACCEPT;
 /** @type {number} */
SFS2X.Entities.Invitation.InvitationReply.REFUSE;

/**
 * @constructor
 * @struct
 * Creates a new SFSInvitation instance.
 * @param {!SFS2X.Entities.SFSUser} inviter
 * @param {!SFS2X.Entities.SFSUser} invitee
 * @param {number} secondsForAnswer
 * @param {!Object} params
 */
SFS2X.Entities.Invitation.SFSInvitation = function(inviter, invitee, secondsForAnswer, params) {};
 /** @type {number} */
SFS2X.Entities.Invitation.SFSInvitation.prototype.id;
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.Entities.Invitation.SFSInvitation.prototype.invitee;
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.Entities.Invitation.SFSInvitation.prototype.inviter;
 /** @type {!Object} */
SFS2X.Entities.Invitation.SFSInvitation.prototype.params;
 /** @type {number} */
SFS2X.Entities.Invitation.SFSInvitation.prototype.secondsForAnswer;
/** @const */
SFS2X.Entities.Match = {};
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Match.BoolMatch = function() {};
 /** @type {!SFS2X.Entities.Match.BoolMatch} */
SFS2X.Entities.Match.BoolMatch.EQUALS;
 /** @type {!SFS2X.Entities.Match.BoolMatch} */
SFS2X.Entities.Match.BoolMatch.NOT_EQUALS;
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Match.LogicOperator = function() {};
 /** @type {!SFS2X.Entities.Match.LogicOperator} */
SFS2X.Entities.Match.LogicOperator.AND;
 /** @type {!SFS2X.Entities.Match.LogicOperator} */
SFS2X.Entities.Match.LogicOperator.OR;

/**
 * @constructor
 * @struct
 * Creates a new MatchExpression instance.
 * @param {string} varName
 * @param {(!SFS2X.Entities.Match.BoolMatch|!SFS2X.Entities.Match.RoomProperties|!SFS2X.Entities.Match.UserProperties|!SFS2X.Entities.Match.NumberMatch|!SFS2X.Entities.Match.StringMatch|!SFS2X.Requests.Game.CreateSFSGameRequest|!SFS2X.Requests.System.FindRoomsRequest|!SFS2X.Requests.System.FindUsersRequest)} condition
 * @param {?} value
 */
SFS2X.Entities.Match.MatchExpression = function(varName, condition, value) {};
 /** @type {(!SFS2X.Entities.Match.BoolMatch|!SFS2X.Entities.Match.RoomProperties|!SFS2X.Entities.Match.UserProperties|!SFS2X.Entities.Match.NumberMatch|!SFS2X.Entities.Match.StringMatch|!SFS2X.Requests.Game.CreateSFSGameRequest|!SFS2X.Requests.System.FindRoomsRequest|!SFS2X.Requests.System.FindUsersRequest)} */
SFS2X.Entities.Match.MatchExpression.prototype.condition;
 /** @type {!SFS2X.Entities.Match.LogicOperator} */
SFS2X.Entities.Match.MatchExpression.prototype.loginOp;
 /** @type {!SFS2X.Entities.Match.MatchExpression} */
SFS2X.Entities.Match.MatchExpression.prototype.next;
 /** @type {?} */
SFS2X.Entities.Match.MatchExpression.prototype.value;
 /** @type {string} */
SFS2X.Entities.Match.MatchExpression.prototype.varName;

/**
 * Concatenates the current expression with a new one using the logical AND operator.
 * @param {string} varName
 * @param {(!SFS2X.Entities.Match.BoolMatch|!SFS2X.Entities.Match.RoomProperties|!SFS2X.Entities.Match.UserProperties|!SFS2X.Entities.Match.NumberMatch|!SFS2X.Entities.Match.StringMatch|!SFS2X.Requests.Game.CreateSFSGameRequest|!SFS2X.Requests.System.FindRoomsRequest|!SFS2X.Requests.System.FindUsersRequest)} condition
 * @param {?} value
 * @return {!SFS2X.Entities.Match.MatchExpression}
 */
SFS2X.Entities.Match.MatchExpression.prototype.and = function(varName, condition, value) {};

/**
 * Checks if the current matching expression is concatenated to another one through a logical operator.
 * @return {boolean}
 */
SFS2X.Entities.Match.MatchExpression.prototype.hasNext = function() {};

/**
 * Concatenates the current expression with a new one using the logical OR operator.
 * @param {string} varName
 * @param {(!SFS2X.Entities.Match.BoolMatch|!SFS2X.Entities.Match.RoomProperties|!SFS2X.Entities.Match.UserProperties|!SFS2X.Entities.Match.NumberMatch|!SFS2X.Entities.Match.StringMatch|!SFS2X.Requests.Game.CreateSFSGameRequest|!SFS2X.Requests.System.FindRoomsRequest|!SFS2X.Requests.System.FindUsersRequest)} condition
 * @param {?} value
 * @return {!SFS2X.Entities.Match.MatchExpression}
 */
SFS2X.Entities.Match.MatchExpression.prototype.or = function(varName, condition, value) {};

/**
 * Moves the iterator cursor to the first matching expression in the chain.
 * @return {!SFS2X.Entities.Match.MatchExpression}
 */
SFS2X.Entities.Match.MatchExpression.prototype.rewind = function() {};

/**
 * Returns a string representation of the matching expression.
 * @return {string}
 */
SFS2X.Entities.Match.MatchExpression.prototype.toString = function() {};
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Match.NumberMatch = function() {};
 /** @type {!SFS2X.Entities.Match.NumberMatch} */
SFS2X.Entities.Match.NumberMatch.EQUALS;
 /** @type {!SFS2X.Entities.Match.NumberMatch} */
SFS2X.Entities.Match.NumberMatch.GREATER_THAN;
 /** @type {!SFS2X.Entities.Match.NumberMatch} */
SFS2X.Entities.Match.NumberMatch.GREATER_THAN_OR_EQUAL_TO;
 /** @type {!SFS2X.Entities.Match.NumberMatch} */
SFS2X.Entities.Match.NumberMatch.LESS_THAN;
 /** @type {!SFS2X.Entities.Match.NumberMatch} */
SFS2X.Entities.Match.NumberMatch.LESS_THAN_OR_EQUAL_TO;
 /** @type {!SFS2X.Entities.Match.NumberMatch} */
SFS2X.Entities.Match.NumberMatch.NOT_EQUALS;
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Match.RoomProperties = function() {};
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.GROUP_ID;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.HAS_FREE_PLAYER_SLOTS;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.IS_GAME;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.IS_PRIVATE;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.IS_TYPE_SFSGAME;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.MAX_SPECTATORS;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.MAX_USERS;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.NAME;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.SPECTATOR_COUNT;
 /** @type {string} */
SFS2X.Entities.Match.RoomProperties.USER_COUNT;
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Match.StringMatch = function() {};
 /** @type {!SFS2X.Entities.Match.StringMatch} */
SFS2X.Entities.Match.StringMatch.CONTAINS;
 /** @type {!SFS2X.Entities.Match.StringMatch} */
SFS2X.Entities.Match.StringMatch.ENDS_WITH;
 /** @type {!SFS2X.Entities.Match.StringMatch} */
SFS2X.Entities.Match.StringMatch.EQUALS;
 /** @type {!SFS2X.Entities.Match.StringMatch} */
SFS2X.Entities.Match.StringMatch.NOT_EQUALS;
 /** @type {!SFS2X.Entities.Match.StringMatch} */
SFS2X.Entities.Match.StringMatch.STARTS_WITH;
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Match.UserProperties = function() {};
 /** @type {string} */
SFS2X.Entities.Match.UserProperties.IS_IN_ANY_ROOM;
 /** @type {string} */
SFS2X.Entities.Match.UserProperties.IS_NPC;
 /** @type {string} */
SFS2X.Entities.Match.UserProperties.IS_PLAYER;
 /** @type {string} */
SFS2X.Entities.Match.UserProperties.IS_SPECTATOR;
 /** @type {string} */
SFS2X.Entities.Match.UserProperties.NAME;
 /** @type {string} */
SFS2X.Entities.Match.UserProperties.PRIVILEGE_ID;

/**
 * @constructor
 * @struct
 * Creates a new MMOItem instance.
 * @param {number} id
 */
SFS2X.Entities.MMOItem = function(id) {};
 /** @type {!SFS2X.Entities.Data.Vec3D} */
SFS2X.Entities.MMOItem.prototype.aoiEnteryPoint;
 /** @type {number} */
SFS2X.Entities.MMOItem.prototype.id;

/**
 * Indicates whether this item has the specified MMOItem Variable set or not.
 * @param {string} varName
 * @return {boolean}
 */
SFS2X.Entities.MMOItem.prototype.containsVariable = function(varName) {};

/**
 * Retrieves an MMOItem Variable from its name.
 * @param {string} varName
 * @return {!SFS2X.Entities.Variables.MMOItemVariable}
 */
SFS2X.Entities.MMOItem.prototype.getVariable = function(varName) {};

/**
 * Retrieves all the MMOItem Variables of this item.
 * @return {!Array<!SFS2X.Entities.Variables.MMOItemVariable>}
 */
SFS2X.Entities.MMOItem.prototype.getVariables = function() {};

/**
 * Returns a string that contains the item id.
 * @return {string}
 */
SFS2X.Entities.MMOItem.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * Creates a new MMORoom instance.
 * @param {number} id
 * @param {string} name
 * @param {string=} groupId
 */
SFS2X.Entities.MMORoom = function(id, name, groupId) {};
 /** @type {!SFS2X.Entities.Data.Vec3D} */
SFS2X.Entities.MMORoom.prototype.defaultAOI;
 /** @type {!SFS2X.Requests.MMO.MapLimits} */
SFS2X.Entities.MMORoom.prototype.higherMapLimit;
 /** @type {!SFS2X.Requests.MMO.MapLimits} */
SFS2X.Entities.MMORoom.prototype.lowerMapLimit;

/**
 * Retrieves an MMOItem object from its id property. The item is available to the current user if it falls within his Area of Interest only.
 * @param {number} id
 * @return {!SFS2X.Entities.MMOItem}
 */
SFS2X.Entities.MMORoom.prototype.getMMOItem = function(id) {};

/**
 * Retrieves all MMOItem object in the MMORoom that fall within the current user's Area of Interest.
 * @return {!Array<!SFS2X.Entities.MMOItem>}
 */
SFS2X.Entities.MMORoom.prototype.getMMOItems = function() {};

/**
 * @constructor
 * @struct
 * Creates a new SFSBuddy instance.
 * @param {number} id
 * @param {string} name
 * @param {boolean=} isBlocked
 * @param {boolean=} isTemp
 */
SFS2X.Entities.SFSBuddy = function(id, name, isBlocked, isTemp) {};
 /** @type {number} */
SFS2X.Entities.SFSBuddy.prototype.id;
 /** @type {string} */
SFS2X.Entities.SFSBuddy.prototype.name;

/**
 * Indicates whether this user has the specified Buddy Variable set or not.
 * @param {string} varName
 * @return {boolean}
 */
SFS2X.Entities.SFSBuddy.prototype.containsVariable = function(varName) {};

/**
 * Returns the nickname of this buddy. If the nickname is not set, null is returned.
 * @return {string}
 */
SFS2X.Entities.SFSBuddy.prototype.getNickName = function() {};

/**
 * Retrieves the list of persistent Buddy Variables for this buddy.
 * @return {!Array<!SFS2X.Entities.Variables.SFSBuddyVariable>}
 */
SFS2X.Entities.SFSBuddy.prototype.getOfflineVariables = function() {};

/**
 * Retrieves the list of non-persistent Buddy Variables for this buddy.
 * @return {!Array<!SFS2X.Entities.Variables.SFSBuddyVariable>}
 */
SFS2X.Entities.SFSBuddy.prototype.getOnlineVariables = function() {};

/**
 * Returns the custom state of this buddy. Examples of custom states are "Available", "Busy", "Be right back", etc. If the custom state is not set, null is returned.
 * @return {string}
 */
SFS2X.Entities.SFSBuddy.prototype.getState = function() {};

/**
 * Retrieves a Buddy Variable from its name.
 * @param {string} varName
 * @return {!SFS2X.Entities.Variables.SFSBuddyVariable}
 */
SFS2X.Entities.SFSBuddy.prototype.getVariable = function(varName) {};

/**
 * Retrieves all the Buddy Variables of this user.
 * @return {!Array<!SFS2X.Entities.Variables.SFSBuddyVariable>}
 */
SFS2X.Entities.SFSBuddy.prototype.getVariables = function() {};

/**
 * Indicates whether this buddy is blocked in the current user's buddy list or not. A buddy can be blocked by means of a BlockBuddyRequest request.
 * @return {boolean}
 */
SFS2X.Entities.SFSBuddy.prototype.isBlocked = function() {};

/**
 * Indicates whether this buddy is online in the Buddy List system or not.
 * @return {boolean}
 */
SFS2X.Entities.SFSBuddy.prototype.isOnline = function() {};

/**
 * Indicates whether this buddy is temporary (non-persistent) in the current user's buddy list or not.
 * @return {boolean}
 */
SFS2X.Entities.SFSBuddy.prototype.isTemp = function() {};

/**
 * Returns a string that contains the buddy id and name.
 * @return {string}
 */
SFS2X.Entities.SFSBuddy.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * Creates a new SFSRoom instance.
 * @param {number} id
 * @param {string} name
 * @param {string=} groupId
 */
SFS2X.Entities.SFSRoom = function(id, name, groupId) {};
 /** @type {string} */
SFS2X.Entities.SFSRoom.prototype.groupId;
 /** @type {number} */
SFS2X.Entities.SFSRoom.prototype.id;
 /** @type {boolean} */
SFS2X.Entities.SFSRoom.prototype.isGame;
 /** @type {boolean} */
SFS2X.Entities.SFSRoom.prototype.isHidden;
 /** @type {boolean} */
SFS2X.Entities.SFSRoom.prototype.isJoined;
 /** @type {boolean} */
SFS2X.Entities.SFSRoom.prototype.isPasswordProtected;
 /** @type {number} */
SFS2X.Entities.SFSRoom.prototype.maxSpectators;
 /** @type {number} */
SFS2X.Entities.SFSRoom.prototype.maxUsers;
 /** @type {string} */
SFS2X.Entities.SFSRoom.prototype.name;
 /** @type {!Object} */
SFS2X.Entities.SFSRoom.prototype.properties;

/**
 * Indicates whether the specified user is currently inside this Room or not.
 * @param {!SFS2X.Entities.SFSUser} user
 * @return {boolean}
 */
SFS2X.Entities.SFSRoom.prototype.containsUser = function(user) {};

/**
 * Indicates whether this Room has the specified Room Variable set or not.
 * @param {string} varName
 * @return {boolean}
 */
SFS2X.Entities.SFSRoom.prototype.containsVariable = function(varName) {};

/**
 * Returns the maximum amount of users, including spectators, that can be contained in this Room.
 * @return {number}
 */
SFS2X.Entities.SFSRoom.prototype.getCapacity = function() {};

/**
 * Retrieves the list of SFSUser objects representing the players currently inside this Room (Game Rooms only).
 * @return {!Array<!SFS2X.Entities.SFSUser>}
 */
SFS2X.Entities.SFSRoom.prototype.getPlayerList = function() {};

/**
 * Retrieves a reference to the Room Manager which manages this Room.
 * @return {!SFS2X.Managers.RoomManager}
 */
SFS2X.Entities.SFSRoom.prototype.getRoomManager = function() {};

/**
 * Returns the current number of spectators in this Room (Game Rooms only).
 * @return {number}
 */
SFS2X.Entities.SFSRoom.prototype.getSpectatorCount = function() {};

/**
 * Retrieves the list of SFSUser objects representing the spectators currently inside this Room (Game Rooms only).
 * @return {!Array<!SFS2X.Entities.SFSUser>}
 */
SFS2X.Entities.SFSRoom.prototype.getSpectatorList = function() {};

/**
 * Retrieves a SFSUser object from its id property.
 * @param {number} id
 * @return {!SFS2X.Entities.SFSUser}
 */
SFS2X.Entities.SFSRoom.prototype.getUserById = function(id) {};

/**
 * Retrieves a SFSUser object from its name property.
 * @param {string} name
 * @return {!SFS2X.Entities.SFSUser}
 */
SFS2X.Entities.SFSRoom.prototype.getUserByName = function(name) {};

/**
 * Returns the current number of users in this Room. In case of Game Rooms, this is the number of players.
 * @return {number}
 */
SFS2X.Entities.SFSRoom.prototype.getUserCount = function() {};

/**
 * Returns the current number of users in this Room. In case of Game Rooms, this is the number of players.
 * @return {!Array<!SFS2X.Entities.SFSUser>}
 */
SFS2X.Entities.SFSRoom.prototype.getUserList = function() {};

/**
 * Retrieves a Room Variable from its name.
 * @param {string} varName
 * @return {!SFS2X.Entities.Variables.SFSRoomVariable}
 */
SFS2X.Entities.SFSRoom.prototype.getVariable = function(varName) {};

/**
 * Retrieves all the Room Variables of this Room.
 * @return {!Array<!SFS2X.Entities.Variables.SFSRoomVariable>}
 */
SFS2X.Entities.SFSRoom.prototype.getVariables = function() {};

/**
 * Returns a string that contains the Room id, name and id of the Group to which it belongs.
 * @return {string}
 */
SFS2X.Entities.SFSRoom.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * Creates a new SFSUser instance.
 * @param {number} id
 * @param {string} name
 * @param {boolean=} isItMe
 */
SFS2X.Entities.SFSUser = function(id, name, isItMe) {};
 /** @type {!SFS2X.Entities.Data.Vec3D} */
SFS2X.Entities.SFSUser.prototype.aoiEntryPoint;
 /** @type {number} */
SFS2X.Entities.SFSUser.prototype.id;
 /** @type {boolean} */
SFS2X.Entities.SFSUser.prototype.isItMe;
 /** @type {string} */
SFS2X.Entities.SFSUser.prototype.name;
 /** @type {number} */
SFS2X.Entities.SFSUser.prototype.privilegeId;
 /** @type {!Object} */
SFS2X.Entities.SFSUser.prototype.properties;

/**
 * Indicates whether this user has the specified User Variable set or not.
 * @param {string} varName
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.containsVariable = function(varName) {};

/**
 * Returns the playerId value of this user in the passed Room. See the playerId property description for more informations.
 * @param {!SFS2X.Entities.SFSRoom} room
 * @return {number}
 */
SFS2X.Entities.SFSUser.prototype.getPlayerId = function(room) {};

/**
 * Returns a reference to the User Manager which manages this user.
 * @return {!SFS2X.Managers.UserManager}
 */
SFS2X.Entities.SFSUser.prototype.getUserManager = function() {};

/**
 * Retrieves a User Variable from its name.
 * @param {string} varName
 * @return {!SFS2X.Entities.Variables.SFSUserVariable}
 */
SFS2X.Entities.SFSUser.prototype.getVariable = function(varName) {};

/**
 * Retrieves all the User Variables of this user.
 * @return {!Array<!SFS2X.Entities.Variables.SFSUserVariable>}
 */
SFS2X.Entities.SFSUser.prototype.getVariables = function() {};

/**
 * Indicates whether this user logged in as an administrator or not. Administrator users have the privilegeId property set to UserPrivileges.ADMINISTRATOR.
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isAdmin = function() {};

/**
 * Indicates whether this user logged in as a guest or not. Guest users have the privilegeId property set to UserPrivileges.GUEST.
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isGuest = function() {};

/**
 * Indicates whether this user joined the passed Room or not.
 * @param {!SFS2X.Entities.SFSRoom} room
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isJoinedInRoom = function(room) {};

/**
 * Indicates whether this user logged in as a moderator or not. Moderator users have the privilegeId property set to UserPrivileges.MODERATOR.
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isModerator = function() {};

/**
 * Indicates whether this user is a player (playerId greater than 0) in the last joined Room or not. Non-Game Rooms always return false.
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isPlayer = function() {};

/**
 * Indicates whether this user is a player (playerId greater than 0) in the passed Room or not. Non-Game Rooms always return false.
 * @param {!SFS2X.Entities.SFSRoom} room
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isPlayerInRoom = function(room) {};

/**
 * Indicates whether this user is a spectator (playerId lower than 0) in the last joined Room or not. Non-Game Rooms always return false.
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isSpectator = function() {};

/**
 * Indicates whether this user is a spectator (playerId lower than 0) in the passed Room or not. Non-Game Rooms always return false.
 * @param {!SFS2X.Entities.SFSRoom} room
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isSpectatorInRoom = function(room) {};

/**
 * Indicates whether this user logged in as a standard user or not. Standard users have the privilegeId property set to UserPrivileges.STANDARD.
 * @return {boolean}
 */
SFS2X.Entities.SFSUser.prototype.isStandardUser = function() {};

/**
 * Returns a string that contains the user id, name and a boolean indicating if the SFSUser object represents the current client.
 * @return {string}
 */
SFS2X.Entities.SFSUser.prototype.toString = function() {};
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.UserPrivileges = function() {};
 /** @type {number} */
SFS2X.Entities.UserPrivileges.ADMINISTRATOR;
 /** @type {number} */
SFS2X.Entities.UserPrivileges.GUEST;
 /** @type {number} */
SFS2X.Entities.UserPrivileges.MODERATOR;
 /** @type {number} */
SFS2X.Entities.UserPrivileges.STANDARD;
/** @const */
SFS2X.Entities.Variables = {};

/**
 * @constructor
 * @struct
 * Creates a new MMOItemVariable instance.
 * @param {string} name
 * @param {?} value
 * @param {number=} type
 */
SFS2X.Entities.Variables.MMOItemVariable = function(name, value, type) {};

/**
 * Returns a string that contains the MMOItem Variable name, type and value.
 * @return {string}
 */
SFS2X.Entities.Variables.MMOItemVariable.prototype.toString = function() {};
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Variables.ReservedBuddyVariables = function() {};
 /** @type {string} */
SFS2X.Entities.Variables.ReservedBuddyVariables.BV_NICKNAME;
 /** @type {string} */
SFS2X.Entities.Variables.ReservedBuddyVariables.BV_ONLINE;
 /** @type {string} */
SFS2X.Entities.Variables.ReservedBuddyVariables.BV_STATE;
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Variables.ReservedRoomVariables = function() {};
 /** @type {string} */
SFS2X.Entities.Variables.ReservedRoomVariables.RV_GAME_STARTED;

/**
 * @constructor
 * @struct
 * Creates a new SFSBuddyVariable instance.
 * @param {string} name
 * @param {?} value
 * @param {number=} type
 */
SFS2X.Entities.Variables.SFSBuddyVariable = function(name, value, type) {};
 /** @type {string} */
SFS2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX;

/**
 * Indicates whether the Buddy Variable is persistent or not.
 * @return {boolean}
 */
SFS2X.Entities.Variables.SFSBuddyVariable.prototype.isOffline = function() {};

/**
 * Returns a string that contains the Buddy Variable name, type and value.
 * @return {string}
 */
SFS2X.Entities.Variables.SFSBuddyVariable.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * Creates a new SFSRoomVariable instance.
 * @param {string} name
 * @param {?} value
 * @param {number=} type
 */
SFS2X.Entities.Variables.SFSRoomVariable = function(name, value, type) {};
 /** @type {boolean} */
SFS2X.Entities.Variables.SFSRoomVariable.prototype.isPersistent;
 /** @type {boolean} */
SFS2X.Entities.Variables.SFSRoomVariable.prototype.isPrivate;

/**
 * Returns a string that contains the Room Variable name, type, value and isPrivate flag.
 * @return {string}
 */
SFS2X.Entities.Variables.SFSRoomVariable.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 * Creates a new SFSUserVariable instance.
 * @param {string} name
 * @param {?} value
 * @param {number=} type
 */
SFS2X.Entities.Variables.SFSUserVariable = function(name, value, type) {};
 /** @type {string} */
SFS2X.Entities.Variables.SFSUserVariable.prototype.name;
 /** @type {number} */
SFS2X.Entities.Variables.SFSUserVariable.prototype.value;

/**
 * Indicates the type of this variable. Possibly returned strings are: Null, Bool, Int, Double, String, Object, Array.
 * @param {number} typeId
 * @return {string}
 */
SFS2X.Entities.Variables.SFSUserVariable.prototype.getTypeName = function(typeId) {};

/**
 * Indicates if the variable is null.
 * @return {boolean}
 */
SFS2X.Entities.Variables.SFSUserVariable.prototype.isNull = function() {};

/**
 * Returns a string that contains the User Variable name, type and value.
 * @return {string}
 */
SFS2X.Entities.Variables.SFSUserVariable.prototype.toString = function() {};
/**
 * @constructor
 * @struct
 */
SFS2X.Entities.Variables.VariableType = function() {};
 /** @type {number} */
SFS2X.Entities.Variables.VariableType.ARRAY;
 /** @type {number} */
SFS2X.Entities.Variables.VariableType.BOOL;
 /** @type {number} */
SFS2X.Entities.Variables.VariableType.DOUBLE;
 /** @type {number} */
SFS2X.Entities.Variables.VariableType.INT;
 /** @type {number} */
SFS2X.Entities.Variables.VariableType.NULL;
 /** @type {number} */
SFS2X.Entities.Variables.VariableType.OBJECT;
 /** @type {number} */
SFS2X.Entities.Variables.VariableType.STRING;
/**
 * @constructor
 * @struct
 */
SFS2X.ErrorCodes = function() {};

/**
 * Sets the text of the error message corresponding to the passed error code.
 * @param {number} code
 * @param {string} message
 * @return {void}
 */
SFS2X.ErrorCodes.setErrorMessage = function(code, message) {};
/**
 * @constructor
 * @struct
 */
SFS2X.Logger = function() {};

/**
 * Sets the current logging level.
 * @param {number} level
 * @return {void}
 */
SFS2X.Logger.prototype.setLevel = function(level) {};
/**
 * @constructor
 * @struct
 */
SFS2X.LogLevel = function() {};
 /** @type {number} */
SFS2X.LogLevel.DEBUG;
 /** @type {number} */
SFS2X.LogLevel.ERROR;
 /** @type {number} */
SFS2X.LogLevel.INFO;
 /** @type {number} */
SFS2X.LogLevel.WARN;
/** @const */
SFS2X.Managers = {};

/**
 * @constructor
 * @struct
 * Creates a new BuddyManager instance.
 * @param {!SFS2X.SmartFox} sfs
 */
SFS2X.Managers.BuddyManager = function(sfs) {};

/**
 * Indicates whether a buddy exists in user's buddy list or not.
 * @param {string} name
 * @return {boolean}
 */
SFS2X.Managers.BuddyManager.prototype.containsBuddy = function(name) {};

/**
 * Retrieves a SFSBuddy object from its id property.
 * @param {number} id
 * @return {!SFS2X.Entities.SFSBuddy}
 */
SFS2X.Managers.BuddyManager.prototype.getBuddyById = function(id) {};

/**
 * Retrieves a SFSBuddy object from its name property.
 * @param {string} name
 * @return {!SFS2X.Entities.SFSBuddy}
 */
SFS2X.Managers.BuddyManager.prototype.getBuddyByName = function(name) {};

/**
 * Retrieves a SFSBuddy object using its getNickName method.
 * @param {string} nickName
 * @return {!SFS2X.Entities.SFSBuddy}
 */
SFS2X.Managers.BuddyManager.prototype.getBuddyByNickName = function(nickName) {};

/**
 * Returns a list of SFSBuddy objects representing all the buddies in the user's buddy list.
 * @return {!Array<!SFS2X.Entities.SFSBuddy>}
 */
SFS2X.Managers.BuddyManager.prototype.getBuddyList = function() {};

/**
 * Returns a list of strings representing the available custom buddy states.
 * @return {!Array<string>}
 */
SFS2X.Managers.BuddyManager.prototype.getBuddyStates = function() {};

/**
 * Returns the current user's nickname (if set). If the nickname was never set before, null is returned.
 * @return {string}
 */
SFS2X.Managers.BuddyManager.prototype.getMyNickName = function() {};

/**
 * Returns the current user's online/offline state.
 * @return {boolean}
 */
SFS2X.Managers.BuddyManager.prototype.getMyOnlineState = function() {};

/**
 * Returns the current user's custom state (if set). Examples of custom states are "Available", "Busy", "Be right back", etc. If the custom state was never set before, null is returned.
 * @return {string}
 */
SFS2X.Managers.BuddyManager.prototype.getMyState = function() {};

/**
 * Retrieves a Buddy Variable set for the current user from its name.
 * @param {string} varName
 * @return {!SFS2X.Entities.Variables.SFSBuddyVariable}
 */
SFS2X.Managers.BuddyManager.prototype.getMyVariable = function(varName) {};

/**
 * Returns all the Buddy Variables set for the current user.
 * @return {!Array<!SFS2X.Entities.Variables.SFSBuddyVariable>}
 */
SFS2X.Managers.BuddyManager.prototype.getMyVariables = function() {};

/**
 * Returns a list of SFSBuddy objects representing all the offline buddies in the user's buddy list.
 * @return {!Array<!SFS2X.Entities.SFSBuddy>}
 */
SFS2X.Managers.BuddyManager.prototype.getOfflineBuddies = function() {};

/**
 * Returns a list of SFSBuddy objects representing all the online buddies in the user's buddy list.
 * @return {!Array<!SFS2X.Entities.SFSBuddy>}
 */
SFS2X.Managers.BuddyManager.prototype.getOnlineBuddies = function() {};

/**
 * Indicates whether the client's Buddy List system is initialized or not. If not, an InitBuddyListRequest request should be sent to the server in order to retrieve the persistent Buddy List data.
 * @return {boolean}
 */
SFS2X.Managers.BuddyManager.prototype.isInited = function() {};

/**
 * @constructor
 * @struct
 * Creates a new RoomManager instance.
 * @param {!SFS2X.SmartFox} sfs
 */
SFS2X.Managers.RoomManager = function(sfs) {};

/**
 * Indicates whether the specified Group has been subscribed by the client or not.
 * @param {string} groupId
 * @return {boolean}
 */
SFS2X.Managers.RoomManager.prototype.containsGroup = function(groupId) {};

/**
 * Indicates whether the Rooms list contains a Room belonging to the specified Group or not.
 * @param {?} idOrName
 * @return {boolean}
 */
SFS2X.Managers.RoomManager.prototype.containsRoom = function(idOrName) {};

/**
 * Indicates whether the Rooms list contains a Room belonging to the specified Group or not.
 * @param {?} idOrName
 * @param {string} groupId
 * @return {boolean}
 */
SFS2X.Managers.RoomManager.prototype.containsRoomInGroup = function(idOrName, groupId) {};

/**
 * Returns a list of Rooms currently joined by the client.
 * @return {!Array<!SFS2X.Entities.SFSRoom>}
 */
SFS2X.Managers.RoomManager.prototype.getJoinedRooms = function() {};

/**
 * Retrieves a SFSRoom object from its id.
 * @param {number} id
 * @return {!SFS2X.Entities.SFSRoom}
 */
SFS2X.Managers.RoomManager.prototype.getRoomById = function(id) {};

/**
 * Retrieves a SFSRoom object from its name.
 * @param {string} name
 * @return {!SFS2X.Entities.SFSRoom}
 */
SFS2X.Managers.RoomManager.prototype.getRoomByName = function(name) {};

/**
 * Returns the current number of Rooms in the Rooms list.
 * @return {number}
 */
SFS2X.Managers.RoomManager.prototype.getRoomCount = function() {};

/**
 * Returns the names of Groups currently subscribed by the client.
 * @return {!Array<string>}
 */
SFS2X.Managers.RoomManager.prototype.getRoomGroups = function() {};

/**
 * Returns a list of Rooms currently "known" by the client. The list contains all the Rooms that are currently joined and all the Rooms belonging to the Room Groups that have been subscribed.
 * @return {!Array<!SFS2X.Entities.SFSRoom>}
 */
SFS2X.Managers.RoomManager.prototype.getRoomList = function() {};

/**
 * Retrieves the list of Rooms which are part of the specified Room Group.
 * @param {string} groupId
 * @return {!Array<!SFS2X.Entities.SFSRoom>}
 */
SFS2X.Managers.RoomManager.prototype.getRoomListFromGroup = function(groupId) {};

/**
 * Retrieves a list of Rooms joined by the specified user. The list contains only those Rooms "known" by the Room Manager; the user might have joined others the client is not aware of.
 * @param {!SFS2X.Entities.SFSUser} user
 * @return {!Array<!SFS2X.Entities.SFSRoom>}
 */
SFS2X.Managers.RoomManager.prototype.getUserRooms = function(user) {};

/**
 * @constructor
 * @struct
 * Creates a new UserManager instance.
 * @param {!SFS2X.SmartFox} sfs
 */
SFS2X.Managers.UserManager = function(sfs) {};

/**
 * Indicates whether a user exists in the local users list or not.
 * @param {!SFS2X.Entities.SFSUser} user
 * @return {boolean}
 */
SFS2X.Managers.UserManager.prototype.containsUser = function(user) {};

/**
 * Indicates whether a user exists in the local users list or not from the id.
 * @param {number} userId
 * @return {boolean}
 */
SFS2X.Managers.UserManager.prototype.containsUserId = function(userId) {};

/**
 * Indicates whether a user exists in the local users list or not from the name.
 * @param {string} userName
 * @return {boolean}
 */
SFS2X.Managers.UserManager.prototype.containsUserName = function(userName) {};

/**
 * Retrieves a SFSUser object from its id property.
 * @param {number} userId
 * @return {!SFS2X.Entities.SFSUser}
 */
SFS2X.Managers.UserManager.prototype.getUserById = function(userId) {};

/**
 * Retrieves a SFSUser object from its name property.
 * @param {string} userName
 * @return {!SFS2X.Entities.SFSUser}
 */
SFS2X.Managers.UserManager.prototype.getUserByName = function(userName) {};

/**
 * Returns the total number of users in the local users list.
 * @return {number}
 */
SFS2X.Managers.UserManager.prototype.getUserCount = function() {};

/**
 * Get the whole list of users inside the Rooms joined by the client.
 * @return {!Array<!SFS2X.Entities.SFSUser>}
 */
SFS2X.Managers.UserManager.prototype.getUserList = function() {};
/** @const */
SFS2X.Requests = {};
/**
 * @constructor
 * @struct
 */
SFS2X.Requests.BanMode = function() {};
 /** @type {number} */
SFS2X.Requests.BanMode.BY_ADDRESS;
 /** @type {number} */
SFS2X.Requests.BanMode.BY_NAME;
/** @const */
SFS2X.Requests.BuddyList = {};

/**
 * @constructor
 * @struct
 * Creates a new AddBuddyRequest instance.
 * @param {string} buddyName
 */
SFS2X.Requests.BuddyList.AddBuddyRequest = function(buddyName) {};

/**
 * @constructor
 * @struct
 * Creates a new BlockBuddyRequest instance.
 * @param {string} buddyName
 * @param {boolean} blocked
 */
SFS2X.Requests.BuddyList.BlockBuddyRequest = function(buddyName, blocked) {};

/**
 * @constructor
 * @struct
 * Creates a new BuddyMessageRequest instance.
 * @param {string} message
 * @param {!SFS2X.Entities.SFSBuddy} targetBuddy
 * @param {!Object=} parms
 */
SFS2X.Requests.BuddyList.BuddyMessageRequest = function(message, targetBuddy, parms) {};

/**
 * @constructor
 * @struct
 * Creates a new GoOnlineRequest instance.
 * @param {boolean} online
 */
SFS2X.Requests.BuddyList.GoOnlineRequest = function(online) {};

/**
 * @constructor
 * @struct
 * Creates a new InitBuddyListRequest instance.
 */
SFS2X.Requests.BuddyList.InitBuddyListRequest = function() {};

/**
 * @constructor
 * @struct
 * Creates a new RemoveBuddyRequest instance.
 * @param {string} buddyName
 */
SFS2X.Requests.BuddyList.RemoveBuddyRequest = function(buddyName) {};

/**
 * @constructor
 * @struct
 * Creates a new SetBuddyVariablesRequest instance.
 * @param {!Array<!SFS2X.Entities.Variables.SFSBuddyVariable>} buddyVariables
 */
SFS2X.Requests.BuddyList.SetBuddyVariablesRequest = function(buddyVariables) {};
/** @const */
SFS2X.Requests.Game = {};

/**
 * @constructor
 * @struct
 * Creates a new CreateSFSGameRequest instance.
 * @param {!SFS2X.Requests.Game.SFSGameSettings} settings
 */
SFS2X.Requests.Game.CreateSFSGameRequest = function(settings) {};

/**
 * @constructor
 * @struct
 * Creates a new InvitationReplyRequest instance.
 * @param {!SFS2X.IINVITATION} invitation
 * @param {number} invitationReply
 * @param {!Object=} params
 */
SFS2X.Requests.Game.InvitationReplyRequest = function(invitation, invitationReply, params) {};

/**
 * @constructor
 * @struct
 * Creates a new InviteUsersRequest instance.
 * @param {!Array<!SFS2X.Entities.SFSUser>} invitedUsers
 * @param {number} secondsForAnswer
 * @param {!Object=} params
 */
SFS2X.Requests.Game.InviteUsersRequest = function(invitedUsers, secondsForAnswer, params) {};

/**
 * @constructor
 * @struct
 * Creates a new QuickJoinGameRequest instance.
 * Creates a new QuickJoinGameRequest instance.
 * @param {!Array<!SFS2X.Entities.SFSRoom>|!SFS2X.Entities.Match.MatchExpression} whereToSearch_or_matchExpression
 * @param {!SFS2X.Entities.SFSRoom|!Array<!SFS2X.Entities.SFSRoom>=} roomToLeave_or_whereToSearch
 * @param {!SFS2X.Entities.SFSRoom=} roomToLeave
 */
SFS2X.Requests.Game.QuickJoinGameRequest = function(whereToSearch_or_matchExpression, roomToLeave_or_whereToSearch, roomToLeave) {};

/**
 * @constructor
 * @struct
 * Creates a new SFSGameSettings instance.
 * @param {string} name
 */
SFS2X.Requests.Game.SFSGameSettings = function(name) {};
 /** @type {number} */
SFS2X.Requests.Game.SFSGameSettings.prototype.invitationExpiryTime;
 /** @type {!Object} */
SFS2X.Requests.Game.SFSGameSettings.prototype.invitiationParams;
 /** @type {!Array<!SFS2X.Entities.SFSUser>} */
SFS2X.Requests.Game.SFSGameSettings.prototype.invitiedPlayers;
 /** @type {boolean} */
SFS2X.Requests.Game.SFSGameSettings.prototype.isPublic;
 /** @type {boolean} */
SFS2X.Requests.Game.SFSGameSettings.prototype.leaveLastJoinedRoom;
 /** @type {number} */
SFS2X.Requests.Game.SFSGameSettings.prototype.minPlayersToStartGame;
 /** @type {boolean} */
SFS2X.Requests.Game.SFSGameSettings.prototype.notifyGameStarted;
 /** @type {!SFS2X.Entities.Match.MatchExpression} */
SFS2X.Requests.Game.SFSGameSettings.prototype.playerMatchExpression;
 /** @type {!Array<string>} */
SFS2X.Requests.Game.SFSGameSettings.prototype.serachableRooms;
 /** @type {!SFS2X.Entities.Match.MatchExpression} */
SFS2X.Requests.Game.SFSGameSettings.prototype.spectatorMatchExpression;

/**
 * @constructor
 * @struct
 * Creates a new MessageRecipientMode instance.
 * @param {number} mode
 * @param {?} target
 */
SFS2X.Requests.MessageRecipientMode = function(mode, target) {};
 /** @type {number} */
SFS2X.Requests.MessageRecipientMode.prototype.mode;
 /** @type {?} */
SFS2X.Requests.MessageRecipientMode.prototype.target;
 /** @type {number} */
SFS2X.Requests.MessageRecipientMode.TO_GROUP;
 /** @type {number} */
SFS2X.Requests.MessageRecipientMode.TO_ROOM;
 /** @type {number} */
SFS2X.Requests.MessageRecipientMode.TO_USER;
 /** @type {number} */
SFS2X.Requests.MessageRecipientMode.TO_ZONE;
/** @const */
SFS2X.Requests.MMO = {};

/**
 * @constructor
 * @struct
 * Creates a new MapLimits instance.
 * @param {!SFS2X.Entities.Data.Vec3D} lowerLimit
 * @param {!SFS2X.Entities.Data.Vec3D} higherLimit
 */
SFS2X.Requests.MMO.MapLimits = function(lowerLimit, higherLimit) {};
 /** @type {!SFS2X.Entities.Data.Vec3D} */
SFS2X.Requests.MMO.MapLimits.prototype.higherLimit;
 /** @type {!SFS2X.Entities.Data.Vec3D} */
SFS2X.Requests.MMO.MapLimits.prototype.lowerLimit;

/**
 * @constructor
 * @struct
 * Creates a new MMORoomSettings instance.
 * @param {string} name
 */
SFS2X.Requests.MMO.MMORoomSettings = function(name) {};
 /** @type {!SFS2X.Entities.Data.Vec3D} */
SFS2X.Requests.MMO.MMORoomSettings.prototype.defaultAOI;
 /** @type {!SFS2X.Requests.MMO.MapLimits} */
SFS2X.Requests.MMO.MMORoomSettings.prototype.mapLimits;
 /** @type {number} */
SFS2X.Requests.MMO.MMORoomSettings.prototype.proximityListUpdateMillis;
 /** @type {boolean} */
SFS2X.Requests.MMO.MMORoomSettings.prototype.sendAOIEntryPoint;
 /** @type {number} */
SFS2X.Requests.MMO.MMORoomSettings.prototype.userMaxLimboSeconds;

/**
 * @constructor
 * @struct
 * Creates a new SetUserPositionRequest instance.
 * @param {!SFS2X.Entities.Data.Vec3D} pos
 * @param {!SFS2X.Entities.MMORoom=} targetRoom
 */
SFS2X.Requests.MMO.SetUserPositionRequest = function(pos, targetRoom) {};

/**
 * @constructor
 * @struct
 * Creates a new RoomEvents instance.
 */
SFS2X.Requests.RoomEvents = function() {};
 /** @type {boolean} */
SFS2X.Requests.RoomEvents.prototype.allowUserCountChance;
 /** @type {boolean} */
SFS2X.Requests.RoomEvents.prototype.allowUserEnter;
 /** @type {boolean} */
SFS2X.Requests.RoomEvents.prototype.allowUserExit;
 /** @type {boolean} */
SFS2X.Requests.RoomEvents.prototype.allowUserVariablesUpdate;

/**
 * @constructor
 * @struct
 * Creates a new RoomExtension instance.
 * @param {string} id
 * @param {string} className
 */
SFS2X.Requests.RoomExtension = function(id, className) {};
 /** @type {string} */
SFS2X.Requests.RoomExtension.prototype.className;
 /** @type {string} */
SFS2X.Requests.RoomExtension.prototype.id;
 /** @type {string} */
SFS2X.Requests.RoomExtension.prototype.propertiesFile;

/**
 * @constructor
 * @struct
 * Creates a new RoomPermissions instance.
 */
SFS2X.Requests.RoomPermissions = function() {};
 /** @type {boolean} */
SFS2X.Requests.RoomPermissions.prototype.allowNameChange;
 /** @type {boolean} */
SFS2X.Requests.RoomPermissions.prototype.allowPasswordStateChange;
 /** @type {boolean} */
SFS2X.Requests.RoomPermissions.prototype.allowPublicMessages;
 /** @type {boolean} */
SFS2X.Requests.RoomPermissions.prototype.aloowResizing;

/**
 * @constructor
 * @struct
 * Creates a new RoomSettings instance.
 * @param {string} name
 */
SFS2X.Requests.RoomSettings = function(name) {};
 /** @type {!SFS2X.Requests.RoomEvents} */
SFS2X.Requests.RoomSettings.prototype.events;
 /** @type {!SFS2X.Requests.RoomExtension} */
SFS2X.Requests.RoomSettings.prototype.extension;
 /** @type {string} */
SFS2X.Requests.RoomSettings.prototype.groupId;
 /** @type {boolean} */
SFS2X.Requests.RoomSettings.prototype.isGame;
 /** @type {number} */
SFS2X.Requests.RoomSettings.prototype.maxSpectators;
 /** @type {number} */
SFS2X.Requests.RoomSettings.prototype.maxUsers;
 /** @type {number} */
SFS2X.Requests.RoomSettings.prototype.maxVariables;
 /** @type {string} */
SFS2X.Requests.RoomSettings.prototype.name;
 /** @type {string} */
SFS2X.Requests.RoomSettings.prototype.password;
 /** @type {!SFS2X.Requests.RoomPermissions} */
SFS2X.Requests.RoomSettings.prototype.permissions;
 /** @type {!Array<!SFS2X.Entities.Variables.ReservedRoomVariables>} */
SFS2X.Requests.RoomSettings.prototype.variables;
/** @const */
SFS2X.Requests.System = {};

/**
 * @constructor
 * @struct
 * Creates a new AdminMessageRequest instance.
 * @param {string} message
 * @param {!SFS2X.Requests.MessageRecipientMode} recipientMode
 * @param {!Object=} params
 */
SFS2X.Requests.System.AdminMessageRequest = function(message, recipientMode, params) {};

/**
 * @constructor
 * @struct
 * Creates a new BanUserRequest instance.
 * @param {number} userId
 * @param {string=} message
 * @param {!SFS2X.Requests.BanMode=} banMode
 * @param {number=} delaySeconds
 * @param {number=} durationHours
 */
SFS2X.Requests.System.BanUserRequest = function(userId, message, banMode, delaySeconds, durationHours) {};

/**
 * @constructor
 * @struct
 * Creates a new ChangeRoomCapacityRequest instance.
 * @param {!SFS2X.Entities.SFSRoom} room
 * @param {number} newMaxUsers
 * @param {number} newMaxSpect
 */
SFS2X.Requests.System.ChangeRoomCapacityRequest = function(room, newMaxUsers, newMaxSpect) {};

/**
 * @constructor
 * @struct
 * Creates a new ChangeRoomNameRequest instance.
 * @param {!SFS2X.Entities.SFSRoom} room
 * @param {string} newName
 */
SFS2X.Requests.System.ChangeRoomNameRequest = function(room, newName) {};

/**
 * @constructor
 * @struct
 * Creates a new ChangeRoomPasswordStateRequest instance.
 * @param {!SFS2X.Entities.SFSRoom} room
 * @param {string} newPass
 */
SFS2X.Requests.System.ChangeRoomPasswordStateRequest = function(room, newPass) {};

/**
 * @constructor
 * @struct
 * Creates a new CreateRoomRequest instance.
 * @param {!SFS2X.Requests.RoomSettings} settings
 * @param {boolean=} autoJoin
 * @param {!SFS2X.Entities.SFSRoom=} roomToLeave
 */
SFS2X.Requests.System.CreateRoomRequest = function(settings, autoJoin, roomToLeave) {};

/**
 * @constructor
 * @struct
 * Creates a new ExtensionRequest instance.
 * @param {string} extCmd
 * @param {!Object=} params
 * @param {!SFS2X.Entities.SFSRoom=} room
 */
SFS2X.Requests.System.ExtensionRequest = function(extCmd, params, room) {};

/**
 * @constructor
 * @struct
 * Creates a new FindRoomsRequest instance.
 * @param {!SFS2X.Entities.Match.MatchExpression} expr
 * @param {string=} groupId
 * @param {number=} limit
 */
SFS2X.Requests.System.FindRoomsRequest = function(expr, groupId, limit) {};

/**
 * @constructor
 * @struct
 * Creates a new FindUsersRequest instance.
 * @param {!SFS2X.Entities.Match.MatchExpression} expr
 * @param {?=} target
 * @param {number=} limit
 */
SFS2X.Requests.System.FindUsersRequest = function(expr, target, limit) {};

/**
 * @constructor
 * @struct
 * Creates a new JoinRoomRequest instance.
 * @param {?} room
 * @param {string=} password
 * @param {number=} roomIdToLeave
 * @param {boolean=} asSpect
 */
SFS2X.Requests.System.JoinRoomRequest = function(room, password, roomIdToLeave, asSpect) {};

/**
 * @constructor
 * @struct
 * Creates a new KickUserRequest instance.
 * @param {number} userId
 * @param {string=} message
 * @param {number=} delaySeconds
 */
SFS2X.Requests.System.KickUserRequest = function(userId, message, delaySeconds) {};

/**
 * @constructor
 * @struct
 * Creates a new LeaveRoomRequest instance.
 * @param {!SFS2X.Entities.SFSRoom=} room
 */
SFS2X.Requests.System.LeaveRoomRequest = function(room) {};

/**
 * @constructor
 * @struct
 * Creates a new LoginRequest instance.
 * @param {string} userName
 * @param {string=} password
 * @param {!Object=} params
 * @param {string=} zoneName
 */
SFS2X.Requests.System.LoginRequest = function(userName, password, params, zoneName) {};

/**
 * @constructor
 * @struct
 * Creates a new LogoutRequest instance.
 */
SFS2X.Requests.System.LogoutRequest = function() {};

/**
 * @constructor
 * @struct
 * Creates a new ModeratorMessageRequest instance.
 * @param {string} message
 * @param {!SFS2X.Requests.MessageRecipientMode} recipientMode
 * @param {!Object=} params
 */
SFS2X.Requests.System.ModeratorMessageRequest = function(message, recipientMode, params) {};

/**
 * @constructor
 * @struct
 * Creates a new ObjectMessageRequest instance.
 * @param {!Object} obj
 * @param {!SFS2X.Entities.SFSRoom=} targetRoom
 * @param {!Array<!SFS2X.Entities.SFSUser>=} recipients
 */
SFS2X.Requests.System.ObjectMessageRequest = function(obj, targetRoom, recipients) {};

/**
 * @constructor
 * @struct
 * Creates a new SpectatorToPlayerRequest instance.
 * @param {!SFS2X.Entities.SFSRoom=} targetRoom
 */
SFS2X.Requests.System.PlayerToSpectatorRequest = function(targetRoom) {};

/**
 * @constructor
 * @struct
 * Creates a new PrivateMessageRequest instance.
 * @param {string} message
 * @param {number} recipientId
 * @param {!Object=} params
 */
SFS2X.Requests.System.PrivateMessageRequest = function(message, recipientId, params) {};

/**
 * @constructor
 * @struct
 * Creates a new PublicMessageRequest instance.
 * @param {string} message
 * @param {!Object=} params
 * @param {!SFS2X.Entities.SFSRoom=} targetRoom
 */
SFS2X.Requests.System.PublicMessageRequest = function(message, params, targetRoom) {};

/**
 * @constructor
 * @struct
 * Creates a new SetRoomVariablesRequest instance.
 * @param {!Array<!SFS2X.Entities.Variables.SFSRoomVariable>} roomVariables
 * @param {!SFS2X.Entities.SFSRoom} room
 */
SFS2X.Requests.System.SetRoomVariablesRequest = function(roomVariables, room) {};

/**
 * @constructor
 * @struct
 * Creates a new SetUserVariablesRequest instance.
 * @param {!SFS2X.Entities.Variables.SFSUserVariable} userVariables
 */
SFS2X.Requests.System.SetUserVariablesRequest = function(userVariables) {};

/**
 * @constructor
 * @struct
 * Creates a new SpectatorToPlayerRequest instance.
 * @param {!SFS2X.Entities.SFSRoom} targetRoom
 */
SFS2X.Requests.System.SpectatorToPlayerRequest = function(targetRoom) {};

/**
 * @constructor
 * @struct
 * Creates a new SubscribeRoomGroupRequest instance.
 * @param {string} groupId
 */
SFS2X.Requests.System.SubscribeRoomGroupRequest = function(groupId) {};

/**
 * @constructor
 * @struct
 * Creates a new UnsubscribeRoomGroupRequest instance.
 * @param {string} groupId
 */
SFS2X.Requests.System.UnsubscribeRoomGroupRequest = function(groupId) {};
/**
 * @constructor
 * @struct
 */
SFS2X.SFSBuddyEvent = function() {};
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_ADD;
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_BLOCK;
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_ERROR;
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_LIST_INIT;
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_MESSAGE;
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_ONLINE_STATE_CHANGE;
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_REMOVE;
 /** @type {string} */
SFS2X.SFSBuddyEvent.BUDDY_VARIABLES_UPDATE;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_ADD = function() {};
 /** @type {!SFS2X.Entities.SFSBuddy} */
SFS2X.IBUDDY_ADD.prototype.buddy;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_BLOCK = function() {};
 /** @type {!SFS2X.Entities.SFSBuddy} */
SFS2X.IBUDDY_BLOCK.prototype.buddy;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_ERROR = function() {};
 /** @type {string} */
SFS2X.IBUDDY_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IBUDDY_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_LIST_INIT = function() {};
 /** @type {!Array<!SFS2X.Entities.SFSBuddy>} */
SFS2X.IBUDDY_LIST_INIT.prototype.buddyList;
 /** @type {!Array<!SFS2X.Entities.Variables.SFSBuddyVariable>} */
SFS2X.IBUDDY_LIST_INIT.prototype.myVariables;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_MESSAGE = function() {};
 /** @type {!SFS2X.Entities.SFSBuddy} */
SFS2X.IBUDDY_MESSAGE.prototype.buddy;
 /** @type {boolean} */
SFS2X.IBUDDY_MESSAGE.prototype.isItMe;
 /** @type {string} */
SFS2X.IBUDDY_MESSAGE.prototype.message;
 /** @type {!Object} */
SFS2X.IBUDDY_MESSAGE.prototype.data;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_ONLINE_STATE_CHANGE = function() {};
 /** @type {!SFS2X.Entities.SFSBuddy} */
SFS2X.IBUDDY_ONLINE_STATE_CHANGE.prototype.buddy;
 /** @type {boolean} */
SFS2X.IBUDDY_ONLINE_STATE_CHANGE.prototype.isItMe;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_REMOVE = function() {};
 /** @type {!SFS2X.Entities.SFSBuddy} */
SFS2X.IBUDDY_REMOVE.prototype.buddy;
/**
 * @record
 * @struct
 */
SFS2X.IBUDDY_VARIABLES_UPDATE = function() {};
 /** @type {!SFS2X.Entities.SFSBuddy} */
SFS2X.IBUDDY_VARIABLES_UPDATE.prototype.buddy;
 /** @type {boolean} */
SFS2X.IBUDDY_VARIABLES_UPDATE.prototype.isItMe;
 /** @type {!Array<string>} */
SFS2X.IBUDDY_VARIABLES_UPDATE.prototype.changedVars;
/**
 * @constructor
 * @struct
 */
SFS2X.SFSEvent = function() {};
 /** @type {string} */
SFS2X.SFSEvent.ADMIN_MESSAGE;
 /** @type {string} */
SFS2X.SFSEvent.CONNECTION;
 /** @type {string} */
SFS2X.SFSEvent.CONNECTION_LOST;
 /** @type {string} */
SFS2X.SFSEvent.EXTENSION_RESPONSE;
 /** @type {string} */
SFS2X.SFSEvent.INVITATION;
 /** @type {string} */
SFS2X.SFSEvent.INVITATION_REPLY;
 /** @type {string} */
SFS2X.SFSEvent.INVITATION_REPLY_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.LOGIN;
 /** @type {string} */
SFS2X.SFSEvent.LOGIN_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.LOGOUT;
 /** @type {string} */
SFS2X.SFSEvent.MMOITEM_VARIABLES_UPDATE;
 /** @type {string} */
SFS2X.SFSEvent.MODERATOR_MESSAGE;
 /** @type {string} */
SFS2X.SFSEvent.OBJECT_MESSAGE;
 /** @type {string} */
SFS2X.SFSEvent.PING_PONG;
 /** @type {string} */
SFS2X.SFSEvent.PLAYER_TO_SPECTATOR;
 /** @type {string} */
SFS2X.SFSEvent.PLAYER_TO_SPECTATOR_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.PRIVATE_MESSAGE;
 /** @type {string} */
SFS2X.SFSEvent.PROXIMITY_LIST_UPDATE;
 /** @type {string} */
SFS2X.SFSEvent.PUBLIC_MESSAGE;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_ADD;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_CAPACITY_CHANGE;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_CAPACITY_CHANGE_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_CREATION_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_FIND_RESULT;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_GROUP_SUBSCRIBE;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_GROUP_SUBSCRIBE_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_GROUP_UNSUBSCRIBE;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_GROUP_UNSUBSCRIBE_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_JOIN;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_JOIN_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_NAME_CHANGE;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_NAME_CHANGE_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_PASSWORD_STATE_CHANGE;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_PASSWORD_STATE_CHANGE_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_REMOVE;
 /** @type {string} */
SFS2X.SFSEvent.ROOM_VARIABLES_UPDATE;
 /** @type {string} */
SFS2X.SFSEvent.SOCKET_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.SPECTATOR_TO_PLAYER;
 /** @type {string} */
SFS2X.SFSEvent.SPECTATOR_TO_PLAYER_ERROR;
 /** @type {string} */
SFS2X.SFSEvent.USER_COUNT_CHANGE;
 /** @type {string} */
SFS2X.SFSEvent.USER_ENTER_ROOM;
 /** @type {string} */
SFS2X.SFSEvent.USER_EXIT_ROOM;
 /** @type {string} */
SFS2X.SFSEvent.USER_FIND_RESULT;
 /** @type {string} */
SFS2X.SFSEvent.USER_VARIABLES_UPDATE;
/**
 * @record
 * @struct
 */
SFS2X.IADMIN_MESSAGE = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IADMIN_MESSAGE.prototype.sender;
 /** @type {string} */
SFS2X.IADMIN_MESSAGE.prototype.message;
 /** @type {!Object} */
SFS2X.IADMIN_MESSAGE.prototype.data;
/**
 * @record
 * @struct
 */
SFS2X.ICONNECTION = function() {};
 /** @type {boolean} */
SFS2X.ICONNECTION.prototype.success;
/**
 * @record
 * @struct
 */
SFS2X.ICONNECTION_LOST = function() {};
 /** @type {string} */
SFS2X.ICONNECTION_LOST.prototype.reason;
/**
 * @record
 * @struct
 */
SFS2X.IEXTENSION_RESPONSE = function() {};
 /** @type {string} */
SFS2X.IEXTENSION_RESPONSE.prototype.cmd;
 /** @type {!Object} */
SFS2X.IEXTENSION_RESPONSE.prototype.params;
 /** @type {number} */
SFS2X.IEXTENSION_RESPONSE.prototype.sourceRoom;
/**
 * @record
 * @struct
 */
SFS2X.IINVITATION = function() {};
 /** @type {!SFS2X.Entities.Invitation.SFSInvitation} */
SFS2X.IINVITATION.prototype.invitation;
/**
 * @record
 * @struct
 */
SFS2X.IINVITATION_REPLY = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IINVITATION_REPLY.prototype.invitee;
 /** @type {number} */
SFS2X.IINVITATION_REPLY.prototype.reply;
 /** @type {!Object} */
SFS2X.IINVITATION_REPLY.prototype.data;
/**
 * @record
 * @struct
 */
SFS2X.IINVITATION_REPLY_ERROR = function() {};
 /** @type {string} */
SFS2X.IINVITATION_REPLY_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IINVITATION_REPLY_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.ILOGIN = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.ILOGIN.prototype.user;
 /** @type {!Object} */
SFS2X.ILOGIN.prototype.data;
/**
 * @record
 * @struct
 */
SFS2X.ILOGIN_ERROR = function() {};
 /** @type {string} */
SFS2X.ILOGIN_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.ILOGIN_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.ILOGOUT = function() {};
/**
 * @record
 * @struct
 */
SFS2X.IMMOITEM_VARIABLES_UPDATE = function() {};
 /** @type {!SFS2X.Entities.MMORoom} */
SFS2X.IMMOITEM_VARIABLES_UPDATE.prototype.room;
 /** @type {!SFS2X.Entities.MMOItem} */
SFS2X.IMMOITEM_VARIABLES_UPDATE.prototype.mmoItem;
 /** @type {!Array<string>} */
SFS2X.IMMOITEM_VARIABLES_UPDATE.prototype.changedVars;
/**
 * @record
 * @struct
 */
SFS2X.IMODERATOR_MESSAGE = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IMODERATOR_MESSAGE.prototype.sender;
 /** @type {string} */
SFS2X.IMODERATOR_MESSAGE.prototype.message;
 /** @type {!Object} */
SFS2X.IMODERATOR_MESSAGE.prototype.data;
/**
 * @record
 * @struct
 */
SFS2X.IOBJECT_MESSAGE = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IOBJECT_MESSAGE.prototype.sender;
 /** @type {string} */
SFS2X.IOBJECT_MESSAGE.prototype.message;
/**
 * @record
 * @struct
 */
SFS2X.IPING_PONG = function() {};
 /** @type {number} */
SFS2X.IPING_PONG.prototype.lagValue;
/**
 * @record
 * @struct
 */
SFS2X.IPLAYER_TO_SPECTATOR = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IPLAYER_TO_SPECTATOR.prototype.room;
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IPLAYER_TO_SPECTATOR.prototype.user;
/**
 * @record
 * @struct
 */
SFS2X.IPLAYER_TO_SPECTATOR_ERROR = function() {};
 /** @type {string} */
SFS2X.IPLAYER_TO_SPECTATOR_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IPLAYER_TO_SPECTATOR_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IPRIVATE_MESSAGE = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IPRIVATE_MESSAGE.prototype.sender;
 /** @type {string} */
SFS2X.IPRIVATE_MESSAGE.prototype.message;
 /** @type {!Object} */
SFS2X.IPRIVATE_MESSAGE.prototype.data;
/**
 * @record
 * @struct
 */
SFS2X.IPROXIMITY_LIST_UPDATE = function() {};
 /** @type {!Array<!SFS2X.Entities.SFSUser>} */
SFS2X.IPROXIMITY_LIST_UPDATE.prototype.addedUsers;
 /** @type {!Array<!SFS2X.Entities.SFSUser>} */
SFS2X.IPROXIMITY_LIST_UPDATE.prototype.removedUsers;
 /** @type {!Array<!SFS2X.Entities.MMOItem>} */
SFS2X.IPROXIMITY_LIST_UPDATE.prototype.addedItems;
 /** @type {!Array<!SFS2X.Entities.MMOItem>} */
SFS2X.IPROXIMITY_LIST_UPDATE.prototype.removedItems;
/**
 * @record
 * @struct
 */
SFS2X.IPUBLIC_MESSAGE = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IPUBLIC_MESSAGE.prototype.room;
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IPUBLIC_MESSAGE.prototype.sender;
 /** @type {string} */
SFS2X.IPUBLIC_MESSAGE.prototype.message;
 /** @type {!Object} */
SFS2X.IPUBLIC_MESSAGE.prototype.data;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_ADD = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IROOM_ADD.prototype.room;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_CAPACITY_CHANGE = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IROOM_CAPACITY_CHANGE.prototype.room;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_CAPACITY_CHANGE_ERROR = function() {};
 /** @type {string} */
SFS2X.IROOM_CAPACITY_CHANGE_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IROOM_CAPACITY_CHANGE_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_CREATION_ERROR = function() {};
 /** @type {string} */
SFS2X.IROOM_CREATION_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IROOM_CREATION_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_FIND_RESULT = function() {};
 /** @type {!Array<!SFS2X.Entities.SFSRoom>} */
SFS2X.IROOM_FIND_RESULT.prototype.rooms;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_GROUP_SUBSCRIBE = function() {};
 /** @type {string} */
SFS2X.IROOM_GROUP_SUBSCRIBE.prototype.groupId;
 /** @type {!Array<!SFS2X.Entities.SFSRoom>} */
SFS2X.IROOM_GROUP_SUBSCRIBE.prototype.newRooms;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_GROUP_SUBSCRIBE_ERROR = function() {};
 /** @type {string} */
SFS2X.IROOM_GROUP_SUBSCRIBE_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IROOM_GROUP_SUBSCRIBE_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_GROUP_UNSUBSCRIBE = function() {};
 /** @type {string} */
SFS2X.IROOM_GROUP_UNSUBSCRIBE.prototype.groupId;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_GROUP_UNSUBSCRIBE_ERROR = function() {};
 /** @type {string} */
SFS2X.IROOM_GROUP_UNSUBSCRIBE_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IROOM_GROUP_UNSUBSCRIBE_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_JOIN = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IROOM_JOIN.prototype.room;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_JOIN_ERROR = function() {};
 /** @type {string} */
SFS2X.IROOM_JOIN_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IROOM_JOIN_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_NAME_CHANGE = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IROOM_NAME_CHANGE.prototype.room;
 /** @type {string} */
SFS2X.IROOM_NAME_CHANGE.prototype.oldName;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_NAME_CHANGE_ERROR = function() {};
 /** @type {string} */
SFS2X.IROOM_NAME_CHANGE_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IROOM_NAME_CHANGE_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_PASSWORD_STATE_CHANGE = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IROOM_PASSWORD_STATE_CHANGE.prototype.room;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_PASSWORD_STATE_CHANGE_ERROR = function() {};
 /** @type {string} */
SFS2X.IROOM_PASSWORD_STATE_CHANGE_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.IROOM_PASSWORD_STATE_CHANGE_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_REMOVE = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IROOM_REMOVE.prototype.room;
/**
 * @record
 * @struct
 */
SFS2X.IROOM_VARIABLES_UPDATE = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IROOM_VARIABLES_UPDATE.prototype.room;
 /** @type {!Array<string>} */
SFS2X.IROOM_VARIABLES_UPDATE.prototype.changedVars;
/**
 * @record
 * @struct
 */
SFS2X.ISOCKET_ERROR = function() {};
 /** @type {string} */
SFS2X.ISOCKET_ERROR.prototype.errorMessage;
/**
 * @record
 * @struct
 */
SFS2X.ISPECTATOR_TO_PLAYER = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.ISPECTATOR_TO_PLAYER.prototype.room;
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.ISPECTATOR_TO_PLAYER.prototype.user;
 /** @type {number} */
SFS2X.ISPECTATOR_TO_PLAYER.prototype.playerId;
/**
 * @record
 * @struct
 */
SFS2X.ISPECTATOR_TO_PLAYER_ERROR = function() {};
 /** @type {string} */
SFS2X.ISPECTATOR_TO_PLAYER_ERROR.prototype.errorMessage;
 /** @type {number} */
SFS2X.ISPECTATOR_TO_PLAYER_ERROR.prototype.errorCode;
/**
 * @record
 * @struct
 */
SFS2X.IUSER_COUNT_CHANGE = function() {};
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IUSER_COUNT_CHANGE.prototype.room;
 /** @type {number} */
SFS2X.IUSER_COUNT_CHANGE.prototype.uCount;
 /** @type {number} */
SFS2X.IUSER_COUNT_CHANGE.prototype.sCount;
/**
 * @record
 * @struct
 */
SFS2X.IUSER_ENTER_ROOM = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IUSER_ENTER_ROOM.prototype.user;
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IUSER_ENTER_ROOM.prototype.room;
/**
 * @record
 * @struct
 */
SFS2X.IUSER_EXIT_ROOM = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IUSER_EXIT_ROOM.prototype.user;
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.IUSER_EXIT_ROOM.prototype.room;
/**
 * @record
 * @struct
 */
SFS2X.IUSER_FIND_RESULT = function() {};
 /** @type {!Array<!SFS2X.Entities.SFSUser>} */
SFS2X.IUSER_FIND_RESULT.prototype.users;
/**
 * @record
 * @struct
 */
SFS2X.IUSER_VARIABLES_UPDATE = function() {};
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.IUSER_VARIABLES_UPDATE.prototype.user;
 /** @type {!Array<string>} */
SFS2X.IUSER_VARIABLES_UPDATE.prototype.changedVars;

/**
 * @constructor
 * @struct
 * Creates a new SmartFox instance.
 * @param {!SFS2X.IconfigObj=} configObj
 */
SFS2X.SmartFox = function(configObj) {};
 /** @type {!SFS2X.Managers.BuddyManager} */
SFS2X.SmartFox.prototype.buddyManager;
 /** @type {!SFS2X.IconfigObj} */
SFS2X.SmartFox.prototype.config;
 /** @type {boolean} */
SFS2X.SmartFox.prototype.debug;
 /** @type {!SFS2X.Entities.SFSRoom} */
SFS2X.SmartFox.prototype.lastJoinedRoom;
 /** @type {!SFS2X.Logger} */
SFS2X.SmartFox.prototype.logger;
 /** @type {!SFS2X.Entities.SFSUser} */
SFS2X.SmartFox.prototype.mySelf;
 /** @type {!SFS2X.Managers.RoomManager} */
SFS2X.SmartFox.prototype.roomManager;
 /** @type {string} */
SFS2X.SmartFox.prototype.sessionToken;
 /** @type {!SFS2X.Managers.UserManager} */
SFS2X.SmartFox.prototype.userManager;
 /** @type {string} */
SFS2X.SmartFox.prototype.version;

/**
 * Registers an event listener function that will receive notification of an event.
 * @param {string} evtType
 * @param {!Function} listener
 * @param {number} scope
 * @return {void}
 */
SFS2X.SmartFox.prototype.addEventListener = function(evtType, listener, scope) {};

/**
 * Establishes a connection between the client and a SmartFoxServer 2X instance.
 * @param {string=} host
 * @param {number=} port
 * @param {boolean=} useSSL
 * @return {void}
 */
SFS2X.SmartFox.prototype.connect = function(host, port, useSSL) {};

/**
 * Closes the connection between the client and the SmartFoxServer 2X instance.
 * @return {void}
 */
SFS2X.SmartFox.prototype.disconnect = function() {};

/**
 * Enables the automatic realtime monitoring of the lag between the client and the server (round robin).
 * @param {boolean} enabled
 * @param {number=} interval
 * @param {number=} queueSize
 * @return {void}
 */
SFS2X.SmartFox.prototype.enableLagMonitor = function(enabled, interval, queueSize) {};

/**
 * Returns a list of SFSRoom objects representing the Rooms currently joined by the client.
 * @return {!Array<!SFS2X.Entities.SFSRoom>}
 */
SFS2X.SmartFox.prototype.getJoinedRooms = function() {};

/**
 * Returns the maximum size of messages allowed by the server.
 * @return {number}
 */
SFS2X.SmartFox.prototype.getMaxMessageSize = function() {};

/**
 * Retrieves a SFSRoom object from its id.
 * @param {number} id
 * @return {!SFS2X.Entities.SFSRoom}
 */
SFS2X.SmartFox.prototype.getRoomById = function(id) {};

/**
 * Retrieves a SFSRoom object from its name.
 * @param {string} name
 * @return {!SFS2X.Entities.SFSRoom}
 */
SFS2X.SmartFox.prototype.getRoomByName = function(name) {};

/**
 * Returns the list of SFSRoom objects representing the Rooms currently "watched" by the client.
 * @return {!Array<!SFS2X.Entities.SFSRoom>}
 */
SFS2X.SmartFox.prototype.getRoomList = function() {};

/**
 * Retrieves the list of Rooms which are part of the specified Room Group.
 * @param {string} groupId
 * @return {!SFS2X.Entities.SFSRoom}
 */
SFS2X.SmartFox.prototype.getRoomListFromGroup = function(groupId) {};

/**
 * Indicates whether the client is connected to the server or not.
 * @return {boolean}
 */
SFS2X.SmartFox.prototype.isConnected = function() {};

/**
 * Removes an event listener.
 * @param {string} evtType
 * @param {!Function} listener
 * @return {void}
 */
SFS2X.SmartFox.prototype.removeEventListener = function(evtType, listener) {};

/**
 * Sends a request to the server.
 * @param {(!SFS2X.Requests.Game.CreateSFSGameRequest|!SFS2X.Requests.System.FindRoomsRequest|!SFS2X.Requests.System.FindUsersRequest|!SFS2X.Requests.BuddyList.AddBuddyRequest|!SFS2X.Requests.BuddyList.BlockBuddyRequest|!SFS2X.Requests.BuddyList.BuddyMessageRequest|!SFS2X.Requests.BuddyList.GoOnlineRequest|!SFS2X.Requests.BuddyList.InitBuddyListRequest|!SFS2X.Requests.BuddyList.RemoveBuddyRequest|!SFS2X.Requests.BuddyList.SetBuddyVariablesRequest|!SFS2X.Requests.Game.InvitationReplyRequest|!SFS2X.Requests.Game.InviteUsersRequest|!SFS2X.Requests.Game.QuickJoinGameRequest|!SFS2X.Requests.MMO.SetUserPositionRequest|!SFS2X.Requests.System.AdminMessageRequest|!SFS2X.Requests.System.BanUserRequest|!SFS2X.Requests.System.ChangeRoomCapacityRequest|!SFS2X.Requests.System.ChangeRoomNameRequest|!SFS2X.Requests.System.ChangeRoomPasswordStateRequest|!SFS2X.Requests.System.CreateRoomRequest|!SFS2X.Requests.System.ExtensionRequest|!SFS2X.Requests.System.JoinRoomRequest|!SFS2X.Requests.System.KickUserRequest|!SFS2X.Requests.System.LeaveRoomRequest|!SFS2X.Requests.System.LoginRequest|!SFS2X.Requests.System.LogoutRequest|!SFS2X.Requests.System.ModeratorMessageRequest|!SFS2X.Requests.System.ObjectMessageRequest|!SFS2X.Requests.System.PlayerToSpectatorRequest|!SFS2X.Requests.System.PrivateMessageRequest|!SFS2X.Requests.System.PublicMessageRequest|!SFS2X.Requests.System.SetRoomVariablesRequest|!SFS2X.Requests.System.SetUserVariablesRequest|!SFS2X.Requests.System.SpectatorToPlayerRequest|!SFS2X.Requests.System.SubscribeRoomGroupRequest|!SFS2X.Requests.System.UnsubscribeRoomGroupRequest)} request
 * @return {void}
 */
SFS2X.SmartFox.prototype.send = function(request) {};

/**
 * Allows to specify custom client details that will be used to gather statistics about the client platform via the AdminTool's Analytics Module.
 * @param {string} platformId
 * @param {string} version
 * @return {void}
 */
SFS2X.SmartFox.prototype.setClientDetails = function(platformId, version) {};
/**
 * @record
 * @struct
 */
SFS2X.IconfigObj = function() {};
 /** @type {string} */
SFS2X.IconfigObj.prototype.host;
 /** @type {number} */
SFS2X.IconfigObj.prototype.port;
 /** @type {boolean} */
SFS2X.IconfigObj.prototype.useSSL;
 /** @type {string} */
SFS2X.IconfigObj.prototype.zone;
 /** @type {boolean} */
SFS2X.IconfigObj.prototype.debug;
/** @const */
SFS2X.Utils = {};
/**
 * @constructor
 * @struct
 */
SFS2X.Utils.ClientDisconnectionReason = function() {};
 /** @type {string} */
SFS2X.Utils.ClientDisconnectionReason.BAN;
 /** @type {string} */
SFS2X.Utils.ClientDisconnectionReason.IDLE;
 /** @type {string} */
SFS2X.Utils.ClientDisconnectionReason.KICK;
 /** @type {string} */
SFS2X.Utils.ClientDisconnectionReason.MANUAL;
 /** @type {string} */
SFS2X.Utils.ClientDisconnectionReason.UNKNOWN;
