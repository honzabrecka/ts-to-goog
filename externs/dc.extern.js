/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dc/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */
 /** @type {!dc.Base} */
var dc;

/* TODO: NamespaceExportDeclaration in  */
/**
 * @record
 * @struct
 */
dc.IGetSet = function() {};

/* TODO: CallSignature: dc */

/* TODO: CallSignature: dc */
/**
 * @record
 * @struct
 */
dc.IBiGetSet = function() {};

/* TODO: CallSignature: dc */

/* TODO: CallSignature: dc */
/**
 * @record
 * @struct
 */
dc.IGetSetComputed = function() {};

/* TODO: CallSignature: dc */

/* TODO: CallSignature: dc */
/**
 * @record
 * @struct
 */
dc.Scale = function() {};

/* TODO: CallSignature: dc */

/**
 * @param {!Array<?>=} values
 * @return {!dc.Scale|!Array<?>}
 */
dc.Scale.prototype.domain = function(values) {};

/**
 * @param {!Array<T>=} values
 * @return {!dc.Scale|!Array<T>}
 */
dc.Scale.prototype.range = function(values) {};
/**
 * @record
 * @struct
 */
dc.Accessor = function() {};

/* TODO: CallSignature: dc */
/**
 * @record
 * @struct
 */
dc.Columns = function() {};
 /** @type {string} */
dc.Columns.prototype.label;
 /** @type {!dc.Accessor<?, string>} */
dc.Columns.prototype.format;
/**
 * @record
 * @struct
 */
dc.UnitFunction = function() {};

/* TODO: CallSignature: dc */
/**
 * @record
 * @struct
 */
dc.FloatPointUnits = function() {};

/**
 * @param {number} precision
 * @return {!dc.UnitFunction}
 */
dc.FloatPointUnits.prototype.precision = function(precision) {};
/**
 * @record
 * @struct
 */
dc.Units = function() {};
 /** @type {!dc.UnitFunction} */
dc.Units.prototype.integers;
 /** @type {!dc.UnitFunction} */
dc.Units.prototype.ordinal;
 /** @type {!dc.FloatPointUnits} */
dc.Units.prototype.fp;
/**
 * @record
 * @struct
 */
dc.Events = function() {};

/**
 * @param {function(): void} fn
 * @param {number=} delay
 * @return {void}
 */
dc.Events.prototype.trigger = function(fn, delay) {};
/**
 * @record
 * @struct
 */
dc.Errors = function() {};

/**
 * @param {string} msg
 * @return {void}
 */
dc.Errors.prototype.Exception = function(msg) {};

/**
 * @param {string} msg
 * @return {void}
 */
dc.Errors.prototype.InvalidStateException = function(msg) {};
/**
 * @record
 * @struct
 */
dc.Filter = function() {};

/**
 * @param {?} value
 * @return {boolean}
 */
dc.Filter.prototype.isFiltered = function(value) {};
/**
 * @record
 * @struct
 */
dc.Filters = function() {};

/**
 * @param {?} low
 * @param {?} high
 * @return {!dc.Filter}
 */
dc.Filters.prototype.RangedFilter = function(low, high) {};

/**
 * @param {!Array<?>} arr
 * @return {!dc.Filter}
 */
dc.Filters.prototype.TwoDimensionalFilter = function(arr) {};

/**
 * @param {!Array<?>} arr
 * @return {!dc.Filter}
 */
dc.Filters.prototype.RangedTwoDimensionalFilter = function(arr) {};
/**
 * @record
 * @struct
 */
dc.Logger = function() {};
 /** @type {boolean} */
dc.Logger.prototype.enableDebugLog;

/**
 * @param {string} msg
 * @return {void}
 */
dc.Logger.prototype.warn = function(msg) {};

/**
 * @param {string} msg
 * @return {void}
 */
dc.Logger.prototype.debug = function(msg) {};

/**
 * @param {!Function} fn
 * @param {string} msg
 * @return {void}
 */
dc.Logger.prototype.deprecate = function(fn, msg) {};
/**
 * @record
 * @struct
 */
dc.Printers = function() {};

/**
 * @param {!Array<?>} filters
 * @return {string}
 */
dc.Printers.prototype.filters = function(filters) {};

/**
 * @param {?} filter
 * @return {string}
 */
dc.Printers.prototype.filter = function(filter) {};
/**
 * @record
 * @struct
 */
dc.Round = function() {};

/**
 * @param {number} n
 * @return {number}
 */
dc.Round.prototype.floor = function(n) {};

/**
 * @param {number} n
 * @return {number}
 */
dc.Round.prototype.ceil = function(n) {};

/**
 * @param {number} n
 * @return {number}
 */
dc.Round.prototype.round = function(n) {};
/**
 * @record
 * @struct
 */
dc.Utils = function() {};

/**
 * @param {?} filter
 * @return {string}
 */
dc.Utils.prototype.printSingleValue = function(filter) {};

/**
 * @param {?} l
 * @param {?} r
 * @return {?}
 */
dc.Utils.prototype.add = function(l, r) {};

/**
 * @param {?} l
 * @param {?} r
 * @return {?}
 */
dc.Utils.prototype.subtract = function(l, r) {};

/**
 * @param {?} n
 * @return {boolean}
 */
dc.Utils.prototype.isNumber = function(n) {};

/**
 * @param {?} n
 * @return {boolean}
 */
dc.Utils.prototype.isFloat = function(n) {};

/**
 * @param {?} n
 * @return {boolean}
 */
dc.Utils.prototype.isInteger = function(n) {};

/**
 * @param {?} n
 * @return {boolean}
 */
dc.Utils.prototype.isNegligible = function(n) {};

/**
 * @param {number} n
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
dc.Utils.prototype.clamp = function(n, min, max) {};

/**
 * @return {number}
 */
dc.Utils.prototype.uniqueId = function() {};

/**
 * @param {string} name
 * @return {string}
 */
dc.Utils.prototype.nameToId = function(name) {};

/**
 * @param {!d3.Selection<?>} parent
 * @param {string} selector
 * @param {?} tag
 * @return {!d3.Selection<?>}
 */
dc.Utils.prototype.appendOrSelect = function(parent, selector, tag) {};

/**
 * @param {?} n
 * @return {number}
 */
dc.Utils.prototype.safeNumber = function(n) {};
/**
 * @record
 * @struct
 */
dc.Legend = function() {};
 /** @type {!dc.IGetSet<number, !dc.Legend>} */
dc.Legend.prototype.x;
 /** @type {!dc.IGetSet<number, !dc.Legend>} */
dc.Legend.prototype.y;
 /** @type {!dc.IGetSet<number, !dc.Legend>} */
dc.Legend.prototype.gap;
 /** @type {!dc.IGetSet<number, !dc.Legend>} */
dc.Legend.prototype.itemHeight;
 /** @type {!dc.IGetSet<boolean, !dc.Legend>} */
dc.Legend.prototype.horizontal;
 /** @type {!dc.IGetSet<number, !dc.Legend>} */
dc.Legend.prototype.legendWidth;
 /** @type {!dc.IGetSet<?, !dc.Legend>} */
dc.Legend.prototype.legendText;
 /** @type {!dc.IGetSet<number, !dc.Legend>} */
dc.Legend.prototype.itemWidth;
 /** @type {!dc.IGetSet<boolean, !dc.Legend>} */
dc.Legend.prototype.autoItemWidth;
 /** @type {function(): void} */
dc.Legend.prototype.render;
/**
 * @record
 * @struct
 */
dc.BaseMixin = function() {};
 /** @type {!dc.IGetSet<number, T>} */
dc.BaseMixin.prototype.width;
 /** @type {!dc.IGetSet<number, T>} */
dc.BaseMixin.prototype.height;
 /** @type {!dc.IGetSet<number, T>} */
dc.BaseMixin.prototype.minWidth;
 /** @type {!dc.IGetSet<number, T>} */
dc.BaseMixin.prototype.minHeight;
 /** @type {!dc.IGetSet<?, T>} */
dc.BaseMixin.prototype.dimension;
 /** @type {!dc.IGetSetComputed<function(?): !Array<?>, !Array<?>, T>} */
dc.BaseMixin.prototype.data;
 /** @type {!dc.IGetSet<?, T>} */
dc.BaseMixin.prototype.group;
 /** @type {!dc.IGetSet<!dc.Accessor<?, ?>, T>} */
dc.BaseMixin.prototype.ordering;
 /** @type {!dc.IGetSet<!d3.Selection<?>, !d3.Selection<?>>} */
dc.BaseMixin.prototype.svg;
 /** @type {!dc.IGetSet<function(!Array<?>): string, T>} */
dc.BaseMixin.prototype.filterPrinter;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.BaseMixin.prototype.controlsUseVisibility;
 /** @type {!dc.IGetSet<number, T>} */
dc.BaseMixin.prototype.transitionDuration;
 /** @type {!dc.IGetSet<function(!Array<?>, ?): boolean, T>} */
dc.BaseMixin.prototype.hasFilterHandler;
 /** @type {!dc.IGetSet<function(!Array<?>): !Array<?>, T>} */
dc.BaseMixin.prototype.removeFilterHandler;
 /** @type {!dc.IGetSet<function(!Array<?>): !Array<?>, T>} */
dc.BaseMixin.prototype.addFilterHandler;
 /** @type {!dc.IGetSet<function(!Array<?>): !Array<?>, T>} */
dc.BaseMixin.prototype.resetFilterHandler;
 /** @type {!dc.IGetSet<?, T>} */
dc.BaseMixin.prototype.filter;
 /** @type {!dc.IGetSet<function(?, ?): ?, T>} */
dc.BaseMixin.prototype.filterHandler;
 /** @type {!dc.IGetSet<!dc.Accessor<?, ?>, T>} */
dc.BaseMixin.prototype.keyAccessor;
 /** @type {!dc.IGetSet<!dc.Accessor<?, ?>, T>} */
dc.BaseMixin.prototype.valueAccessor;
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, T>} */
dc.BaseMixin.prototype.label;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.BaseMixin.prototype.renderLabel;
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, T>} */
dc.BaseMixin.prototype.title;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.BaseMixin.prototype.renderTitle;
 /** @type {!dc.IGetSet<string, T>} */
dc.BaseMixin.prototype.chartGroup;
 /** @type {!dc.IGetSet<!dc.Legend, T>} */
dc.BaseMixin.prototype.legend;

/**
 * @return {void}
 */
dc.BaseMixin.prototype.filterAll = function() {};

/**
 * @param {(string|!d3.Selection<?>)} selector
 * @return {!d3.Selection<?>}
 */
dc.BaseMixin.prototype.select = function(selector) {};

/**
 * @param {(string|!d3.Selection<?>)} selector
 * @return {!d3.Selection<?>}
 */
dc.BaseMixin.prototype.selectAll = function(selector) {};

/**
 * @param {(string|!d3.Selection<?>|!dc.BaseMixin<?>)} anchor
 * @param {string=} chartGroup
 * @return {!d3.Selection<?>}
 */
dc.BaseMixin.prototype.anchor = function(anchor, chartGroup) {};

/**
 * @return {string}
 */
dc.BaseMixin.prototype.anchorName = function() {};

/**
 * @return {void}
 */
dc.BaseMixin.prototype.resetSvg = function() {};

/**
 * @return {void}
 */
dc.BaseMixin.prototype.turnOnControls = function() {};

/**
 * @return {void}
 */
dc.BaseMixin.prototype.turnOffControls = function() {};

/**
 * @return {void}
 */
dc.BaseMixin.prototype.render = function() {};

/**
 * @return {void}
 */
dc.BaseMixin.prototype.redraw = function() {};

/**
 * @return {void}
 */
dc.BaseMixin.prototype.redrawGroup = function() {};

/**
 * @param {?=} filter
 * @return {boolean}
 */
dc.BaseMixin.prototype.hasFilter = function(filter) {};

/**
 * @return {!Array<?>}
 */
dc.BaseMixin.prototype.filters = function() {};

/**
 * @param {?} datum
 * @return {void}
 */
dc.BaseMixin.prototype.onClick = function(datum) {};

/**
 * @return {T}
 */
dc.BaseMixin.prototype.expireCache = function() {};

/**
 * @param {?} optionsObject
 * @return {T}
 */
dc.BaseMixin.prototype.options = function(optionsObject) {};

/**
 * @param {function(T): ?} fn
 * @return {T}
 */
dc.BaseMixin.prototype.renderlet = function(fn) {};

/**
 * @param {string} event
 * @param {function(T, ?): ?|function(T): ?|function(T, !Array<?>): ?} fn
 * @return {T}
 */
dc.BaseMixin.prototype.on = function(event, fn) {};
/**
 * @record
 * @struct
 */
dc.Margins = function() {};
 /** @type {number} */
dc.Margins.prototype.left;
 /** @type {number} */
dc.Margins.prototype.top;
 /** @type {number} */
dc.Margins.prototype.right;
 /** @type {number} */
dc.Margins.prototype.bottom;
/**
 * @record
 * @struct
 */
dc.MarginMixin = function() {};
 /** @type {!dc.IGetSet<!dc.Margins, T>} */
dc.MarginMixin.prototype.margins;
/**
 * @record
 * @struct
 */
dc.ColorMixin = function() {};
 /** @type {!dc.IGetSet<(!Array<string>|!dc.Scale<(string|!d3.Color)>), T>} */
dc.ColorMixin.prototype.colors;
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, T>} */
dc.ColorMixin.prototype.colorAccessor;
 /** @type {!dc.IGetSet<!Array<?>, T>} */
dc.ColorMixin.prototype.colorDomain;
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, T>} */
dc.ColorMixin.prototype.colorCalculator;

/**
 * @param {!Array<string>} r
 * @return {void}
 */
dc.ColorMixin.prototype.ordinalColors = function(r) {};

/**
 * @param {!Array<string>} r
 * @return {void}
 */
dc.ColorMixin.prototype.linearColors = function(r) {};

/**
 * @return {void}
 */
dc.ColorMixin.prototype.calculateColorDomain = function() {};

/**
 * @param {?} datum
 * @param {number=} index
 * @return {string}
 */
dc.ColorMixin.prototype.getColor = function(datum, index) {};
/**
 * @extends {dc.BaseMixin}
 * @extends {dc.MarginMixin}
 * @extends {dc.ColorMixin}
 * @record
 * @struct
 */
dc.CoordinateGridMixin = function() {};
 /** @type {!dc.IGetSet<!dc.BaseMixin<?>, T>} */
dc.CoordinateGridMixin.prototype.rangeChart;
 /** @type {!dc.IGetSet<!Array<?>, T>} */
dc.CoordinateGridMixin.prototype.zoomScale;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.zoomOutRestrict;
 /** @type {!dc.IGetSet<!d3.Selection<?>, T>} */
dc.CoordinateGridMixin.prototype.g;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.mouseZoomable;
 /** @type {!dc.IGetSet<function(?): ?, T>} */
dc.CoordinateGridMixin.prototype.x;
 /** @type {!dc.IGetSet<!dc.UnitFunction, T>} */
dc.CoordinateGridMixin.prototype.xUnits;
 /** @type {!dc.IGetSet<!d3.svg.Axis, T>} */
dc.CoordinateGridMixin.prototype.xAxis;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.elasticX;
 /** @type {!dc.IGetSet<number, T>} */
dc.CoordinateGridMixin.prototype.xAxisPadding;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.useRightYAxis;
 /** @type {!dc.IBiGetSet<string, number, T>} */
dc.CoordinateGridMixin.prototype.xAxisLabel;
 /** @type {!dc.IBiGetSet<string, number, T>} */
dc.CoordinateGridMixin.prototype.yAxisLabel;
 /** @type {!dc.IGetSet<!dc.Scale<number>, T>} */
dc.CoordinateGridMixin.prototype.y;
 /** @type {!dc.IGetSet<!d3.svg.Axis, T>} */
dc.CoordinateGridMixin.prototype.yAxis;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.elasticY;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.renderHorizontalGridLines;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.renderVerticalGridLines;
 /** @type {!dc.IGetSet<number, T>} */
dc.CoordinateGridMixin.prototype.yAxisPadding;
 /** @type {!dc.IGetSet<function(?): ?, T>} */
dc.CoordinateGridMixin.prototype.round;
 /** @type {!dc.IGetSet<number, T>} */
dc.CoordinateGridMixin.prototype.clipPadding;
 /** @type {!dc.IGetSet<boolean, T>} */
dc.CoordinateGridMixin.prototype.brushOn;

/**
 * @return {!d3.Selection<?>}
 */
dc.CoordinateGridMixin.prototype.chartBodyG = function() {};

/**
 * @return {number}
 */
dc.CoordinateGridMixin.prototype.xUnitCount = function() {};

/**
 * @return {boolean}
 */
dc.CoordinateGridMixin.prototype.isOrdinal = function() {};

/**
 * @return {?}
 */
dc.CoordinateGridMixin.prototype.xAxisMin = function() {};

/**
 * @return {?}
 */
dc.CoordinateGridMixin.prototype.xAxisMax = function() {};

/**
 * @return {?}
 */
dc.CoordinateGridMixin.prototype.yAxisMin = function() {};

/**
 * @return {?}
 */
dc.CoordinateGridMixin.prototype.yAxisMax = function() {};

/**
 * @param {!Array<?>=} range
 * @return {void}
 */
dc.CoordinateGridMixin.prototype.focus = function(range) {};
/**
 * @record
 * @struct
 */
dc.StackMixin = function() {};
 /** @type {!dc.IGetSet<boolean, T>} */
dc.StackMixin.prototype.hidableStacks;
 /** @type {!dc.IGetSet<!d3.layout.Stack<!Array<?>, ?>, T>} */
dc.StackMixin.prototype.stackLayout;

/**
 * @param {?} group
 * @param {string=} name
 * @param {!dc.Accessor<?, ?>=} accessor
 * @return {void}
 */
dc.StackMixin.prototype.stack = function(group, name, accessor) {};

/**
 * @param {string} name
 * @return {void}
 */
dc.StackMixin.prototype.hideStack = function(name) {};

/**
 * @param {string} name
 * @return {void}
 */
dc.StackMixin.prototype.showStack = function(name) {};
/**
 * @record
 * @struct
 */
dc.CapMixin = function() {};
 /** @type {!dc.IGetSet<number, T>} */
dc.CapMixin.prototype.cap;
 /** @type {!dc.IGetSet<string, T>} */
dc.CapMixin.prototype.othersLabel;
 /** @type {!dc.IGetSet<function(!Array<?>): !Array<?>, T>} */
dc.CapMixin.prototype.othersGrouper;
/**
 * @extends {dc.ColorMixin}
 * @record
 * @struct
 */
dc.BubbleMixin = function() {};
 /** @type {!dc.IGetSet<!dc.Scale<number>, T>} */
dc.BubbleMixin.prototype.r;
 /** @type {!dc.IGetSet<!dc.Accessor<?, number>, T>} */
dc.BubbleMixin.prototype.radiusValueAccessor;
 /** @type {!dc.IGetSet<number, T>} */
dc.BubbleMixin.prototype.minRadiusWithLabel;
 /** @type {!dc.IGetSet<number, T>} */
dc.BubbleMixin.prototype.maxBubbleRelativeSize;
/**
 * @extends {dc.CapMixin}
 * @extends {dc.ColorMixin}
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.PieChart = function() {};
 /** @type {!dc.IGetSet<number, !dc.PieChart>} */
dc.PieChart.prototype.slicesCap;
 /** @type {!dc.IGetSet<number, !dc.PieChart>} */
dc.PieChart.prototype.innerRadius;
 /** @type {!dc.IGetSet<number, !dc.PieChart>} */
dc.PieChart.prototype.radius;
 /** @type {!dc.IGetSet<number, !dc.PieChart>} */
dc.PieChart.prototype.cx;
 /** @type {!dc.IGetSet<number, !dc.PieChart>} */
dc.PieChart.prototype.cy;
 /** @type {!dc.IGetSet<number, !dc.PieChart>} */
dc.PieChart.prototype.minAngleForLabel;
/**
 * @extends {dc.StackMixin}
 * @extends {dc.CoordinateGridMixin}
 * @record
 * @struct
 */
dc.BarChart = function() {};
 /** @type {!dc.IGetSet<boolean, !dc.BarChart>} */
dc.BarChart.prototype.centerBar;
 /** @type {!dc.IGetSet<number, !dc.BarChart>} */
dc.BarChart.prototype.barPadding;
 /** @type {!dc.IGetSet<number, !dc.BarChart>} */
dc.BarChart.prototype.outerPadding;
 /** @type {!dc.IGetSet<number, !dc.BarChart>} */
dc.BarChart.prototype.gap;
 /** @type {!dc.IGetSet<boolean, !dc.BarChart>} */
dc.BarChart.prototype.alwaysUseRounding;
/**
 * @record
 * @struct
 */
dc.RenderDataPointOptions = function() {};
 /** @type {number} */
dc.RenderDataPointOptions.prototype.fillOpacity;
 /** @type {number} */
dc.RenderDataPointOptions.prototype.strokeOpacity;
 /** @type {number} */
dc.RenderDataPointOptions.prototype.radius;
/**
 * @extends {dc.StackMixin}
 * @extends {dc.CoordinateGridMixin}
 * @record
 * @struct
 */
dc.LineChart = function() {};
 /** @type {!dc.IGetSet<string, !dc.LineChart>} */
dc.LineChart.prototype.interpolate;
 /** @type {!dc.IGetSet<number, !dc.LineChart>} */
dc.LineChart.prototype.tension;
 /** @type {!dc.IGetSet<!dc.Accessor<?, boolean>, !dc.LineChart>} */
dc.LineChart.prototype.defined;
 /** @type {!dc.IGetSet<!Array<number>, !dc.LineChart>} */
dc.LineChart.prototype.dashStyle;
 /** @type {!dc.IGetSet<boolean, !dc.LineChart>} */
dc.LineChart.prototype.renderArea;
 /** @type {!dc.IGetSet<number, !dc.LineChart>} */
dc.LineChart.prototype.dotRadius;
 /** @type {!dc.IGetSet<?, !dc.LineChart>} */
dc.LineChart.prototype.renderDataPoints;
/**
 * @record
 * @struct
 */
dc.DataCountWidgetHTML = function() {};
 /** @type {string} */
dc.DataCountWidgetHTML.prototype.all;
 /** @type {string} */
dc.DataCountWidgetHTML.prototype.some;
/**
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.DataCountWidget = function() {};
 /** @type {!dc.IGetSet<!dc.DataCountWidgetHTML, !dc.DataCountWidget>} */
dc.DataCountWidget.prototype.html;
 /** @type {!dc.IGetSet<!dc.Accessor<number, string>, !dc.DataCountWidget>} */
dc.DataCountWidget.prototype.formatNumber;
/**
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.DataTableWidget = function() {};
 /** @type {!dc.IGetSet<number, !dc.DataTableWidget>} */
dc.DataTableWidget.prototype.size;
 /** @type {!dc.IGetSet<boolean, !dc.DataTableWidget>} */
dc.DataTableWidget.prototype.showGroups;
 /** @type {!dc.IGetSet<!Array<(string|!dc.Accessor<?, ?>|!dc.Columns)>, !dc.DataTableWidget>} */
dc.DataTableWidget.prototype.columns;
 /** @type {!dc.IGetSet<!dc.Accessor<?, ?>, !dc.DataTableWidget>} */
dc.DataTableWidget.prototype.sortBy;
 /** @type {!dc.IGetSet<function(?, ?): number, !dc.DataTableWidget>} */
dc.DataTableWidget.prototype.order;
/**
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.DataGridWidget = function() {};
 /** @type {!dc.IGetSet<number, !dc.DataTableWidget>} */
dc.DataGridWidget.prototype.size;
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, !dc.DataTableWidget>} */
dc.DataGridWidget.prototype.html;
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, !dc.DataTableWidget>} */
dc.DataGridWidget.prototype.htmlGroup;
 /** @type {!dc.IGetSet<!dc.Accessor<?, ?>, !dc.DataTableWidget>} */
dc.DataGridWidget.prototype.sortBy;
 /** @type {!dc.IGetSet<function(?, ?): number, !dc.DataTableWidget>} */
dc.DataGridWidget.prototype.order;
/**
 * @extends {dc.BubbleMixin}
 * @extends {dc.CoordinateGridMixin}
 * @record
 * @struct
 */
dc.BubbleChart = function() {};
 /** @type {!dc.IGetSet<boolean, !dc.BubbleChart>} */
dc.BubbleChart.prototype.elasticRadius;
/**
 * @extends {dc.CoordinateGridMixin}
 * @record
 * @struct
 */
dc.ICompositeChart = function() {};
 /** @type {!dc.IGetSet<boolean, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.useRightAxisGridLines;
 /** @type {!dc.IGetSet<?, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.childOptions;
 /** @type {!dc.IGetSet<string, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.rightYAxisLabel;
 /** @type {!dc.IGetSet<!Array<!dc.BaseMixin<?>>, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.compose;
 /** @type {!dc.IGetSet<boolean, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.shareColors;
 /** @type {!dc.IGetSet<boolean, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.shareTitle;
 /** @type {!dc.IGetSet<function(?): ?, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.rightY;
 /** @type {!dc.IGetSet<!d3.svg.Axis, !dc.ICompositeChart>} */
dc.ICompositeChart.prototype.rightYAxis;

/**
 * @return {!Array<!dc.BaseMixin<?>>}
 */
dc.ICompositeChart.prototype.children = function() {};
/**
 * @extends {dc.ICompositeChart}
 * @record
 * @struct
 */
dc.CompositeChart = function() {};
/**
 * @extends {dc.ICompositeChart}
 * @record
 * @struct
 */
dc.SeriesChart = function() {};
 /** @type {!dc.IGetSet<function(?): !dc.BaseMixin<?>, !dc.SeriesChart>} */
dc.SeriesChart.prototype.chart;
 /** @type {!dc.IGetSet<!dc.Accessor<?, ?>, !dc.SeriesChart>} */
dc.SeriesChart.prototype.seriesAccessor;
 /** @type {!dc.IGetSet<function(?, ?): number, !dc.SeriesChart>} */
dc.SeriesChart.prototype.seriesSort;
 /** @type {!dc.IGetSet<function(?, ?): number, !dc.SeriesChart>} */
dc.SeriesChart.prototype.valueSort;
/**
 * @record
 * @struct
 */
dc.GeoChoroplethLayer = function() {};
 /** @type {string} */
dc.GeoChoroplethLayer.prototype.name;
 /** @type {!dc.Accessor<?, ?>} */
dc.GeoChoroplethLayer.prototype.keyAccessor;
 /** @type {?} */
dc.GeoChoroplethLayer.prototype.data;
/**
 * @extends {dc.ColorMixin}
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.GeoChoroplethChart = function() {};
 /** @type {!dc.IGetSet<!d3.geo.Projection, !dc.GeoChoroplethChart>} */
dc.GeoChoroplethChart.prototype.projection;

/**
 * @param {?} json
 * @param {string} name
 * @param {!dc.Accessor<?, ?>} keyAccessor
 * @return {void}
 */
dc.GeoChoroplethChart.prototype.overlayGeoJson = function(json, name, keyAccessor) {};

/**
 * @return {!Array<!dc.GeoChoroplethLayer>}
 */
dc.GeoChoroplethChart.prototype.geoJsons = function() {};

/**
 * @return {!d3.geo.Path}
 */
dc.GeoChoroplethChart.prototype.geoPath = function() {};

/**
 * @param {string} name
 * @return {void}
 */
dc.GeoChoroplethChart.prototype.removeGeoJson = function(name) {};
/**
 * @extends {dc.BubbleMixin}
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.BubbleOverlayChart = function() {};

/**
 * @param {string} name
 * @param {number} x
 * @param {number} y
 * @return {void}
 */
dc.BubbleOverlayChart.prototype.point = function(name, x, y) {};
/**
 * @extends {dc.CapMixin}
 * @extends {dc.MarginMixin}
 * @extends {dc.ColorMixin}
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.RowChart = function() {};
 /** @type {!dc.IGetSet<!dc.Scale<number>, !dc.RowChart>} */
dc.RowChart.prototype.x;
 /** @type {!dc.IGetSet<boolean, !dc.RowChart>} */
dc.RowChart.prototype.renderTitleLabel;
 /** @type {!dc.IGetSet<!d3.svg.Axis, !dc.RowChart>} */
dc.RowChart.prototype.xAxis;
 /** @type {!dc.IGetSet<number, !dc.RowChart>} */
dc.RowChart.prototype.fixedBarHeight;
 /** @type {!dc.IGetSet<number, !dc.RowChart>} */
dc.RowChart.prototype.gap;
 /** @type {!dc.IGetSet<boolean, !dc.RowChart>} */
dc.RowChart.prototype.elasticX;
 /** @type {!dc.IGetSet<number, !dc.RowChart>} */
dc.RowChart.prototype.labelOffsetX;
 /** @type {!dc.IGetSet<number, !dc.RowChart>} */
dc.RowChart.prototype.labelOffsetY;
 /** @type {!dc.IGetSet<number, !dc.RowChart>} */
dc.RowChart.prototype.titleLabelOffsetX;
/**
 * @extends {dc.CoordinateGridMixin}
 * @record
 * @struct
 */
dc.ScatterPlot = function() {};
 /** @type {!dc.IGetSet<!dc.Accessor<?, boolean>, !dc.ScatterPlot>} */
dc.ScatterPlot.prototype.existenceAccessor;
 /** @type {!dc.IGetSet<!d3.svg.Symbol<?>, !dc.ScatterPlot>} */
dc.ScatterPlot.prototype.symbol;
 /** @type {!dc.IGetSet<number, !dc.ScatterPlot>} */
dc.ScatterPlot.prototype.symbolSize;
 /** @type {!dc.IGetSet<number, !dc.ScatterPlot>} */
dc.ScatterPlot.prototype.highlightedSize;
 /** @type {!dc.IGetSet<number, !dc.ScatterPlot>} */
dc.ScatterPlot.prototype.hiddenSize;
/**
 * @record
 * @struct
 */
dc.NumberDisplayWidgetHTML = function() {};
 /** @type {string} */
dc.NumberDisplayWidgetHTML.prototype.one;
 /** @type {string} */
dc.NumberDisplayWidgetHTML.prototype.some;
 /** @type {string} */
dc.NumberDisplayWidgetHTML.prototype.none;
/**
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.NumberDisplayWidget = function() {};
 /** @type {!dc.IGetSet<!dc.NumberDisplayWidgetHTML, !dc.NumberDisplayWidget>} */
dc.NumberDisplayWidget.prototype.html;
 /** @type {!dc.IGetSet<!dc.Accessor<number, string>, !dc.NumberDisplayWidget>} */
dc.NumberDisplayWidget.prototype.formatNumber;

/**
 * @return {string}
 */
dc.NumberDisplayWidget.prototype.value = function() {};
/**
 * @extends {dc.ColorMixin}
 * @extends {dc.MarginMixin}
 * @extends {dc.BaseMixin}
 * @record
 * @struct
 */
dc.HeatMap = function() {};
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, !dc.HeatMap>} */
dc.HeatMap.prototype.colsLabel;
 /** @type {!dc.IGetSet<!dc.Accessor<?, string>, !dc.HeatMap>} */
dc.HeatMap.prototype.rowsLabel;
 /** @type {!dc.IGetSet<!Array<?>, !dc.HeatMap>} */
dc.HeatMap.prototype.rows;
 /** @type {!dc.IGetSet<!Array<?>, !dc.HeatMap>} */
dc.HeatMap.prototype.cols;
 /** @type {!dc.IGetSet<function(?): void, !dc.HeatMap>} */
dc.HeatMap.prototype.boxOnClick;
 /** @type {!dc.IGetSet<function(?): void, !dc.HeatMap>} */
dc.HeatMap.prototype.xAxisOnClick;
 /** @type {!dc.IGetSet<function(?): void, !dc.HeatMap>} */
dc.HeatMap.prototype.yAxisOnClick;
/**
 * @extends {dc.CoordinateGridMixin}
 * @record
 * @struct
 */
dc.BoxPlot = function() {};
 /** @type {!dc.IGetSet<number, !dc.BoxPlot>} */
dc.BoxPlot.prototype.boxPadding;
 /** @type {!dc.IGetSet<number, !dc.BoxPlot>} */
dc.BoxPlot.prototype.outerPadding;
 /** @type {!dc.IGetSet<number, !dc.BoxPlot>} */
dc.BoxPlot.prototype.boxWidth;
 /** @type {!dc.IGetSet<!dc.Accessor<number, string>, !dc.BoxPlot>} */
dc.BoxPlot.prototype.tickFormat;
/**
 * @record
 * @struct
 */
dc.ChartRegistry = function() {};

/**
 * @param {!dc.BaseMixin<?>} chart
 * @return {boolean}
 */
dc.ChartRegistry.prototype.has = function(chart) {};

/**
 * @param {!dc.BaseMixin<?>} chart
 * @param {string=} group
 * @return {void}
 */
dc.ChartRegistry.prototype.register = function(chart, group) {};

/**
 * @param {!dc.BaseMixin<?>} chart
 * @param {string=} group
 * @return {void}
 */
dc.ChartRegistry.prototype.deregister = function(chart, group) {};

/**
 * @param {string=} group
 * @return {void}
 */
dc.ChartRegistry.prototype.clear = function(group) {};

/**
 * @param {string=} group
 * @return {!Array<!dc.BaseMixin<?>>}
 */
dc.ChartRegistry.prototype.list = function(group) {};
/**
 * @record
 * @struct
 */
dc.Base = function() {};
 /** @type {!dc.ChartRegistry} */
dc.Base.prototype.chartRegistry;
 /** @type {boolean} */
dc.Base.prototype.disableTransitions;
 /** @type {!dc.Units} */
dc.Base.prototype.units;
 /** @type {!dc.Events} */
dc.Base.prototype.events;
 /** @type {!dc.Errors} */
dc.Base.prototype.errors;
 /** @type {!dc.Logger} */
dc.Base.prototype.logger;
 /** @type {!dc.Printers} */
dc.Base.prototype.printers;
 /** @type {!dc.Round} */
dc.Base.prototype.round;
 /** @type {!dc.Utils} */
dc.Base.prototype.utils;

/**
 * @param {!dc.BaseMixin<?>} chart
 * @param {string=} group
 * @return {void}
 */
dc.Base.prototype.registerChart = function(chart, group) {};

/**
 * @param {!dc.BaseMixin<?>} chart
 * @param {string=} group
 * @return {void}
 */
dc.Base.prototype.deregisterChart = function(chart, group) {};

/**
 * @param {!dc.BaseMixin<?>} chart
 * @return {boolean}
 */
dc.Base.prototype.hasChart = function(chart) {};

/**
 * @param {string=} group
 * @return {void}
 */
dc.Base.prototype.deregisterAllCharts = function(group) {};

/**
 * @param {string=} group
 * @return {void}
 */
dc.Base.prototype.filterAll = function(group) {};

/**
 * @param {string=} group
 * @return {void}
 */
dc.Base.prototype.refocusAll = function(group) {};

/**
 * @param {string=} group
 * @return {void}
 */
dc.Base.prototype.renderAll = function(group) {};

/**
 * @param {string=} group
 * @return {void}
 */
dc.Base.prototype.redrawAll = function(group) {};

/**
 * @param {!d3.Selection<?>} selections
 * @param {number} duration
 * @param {function(!d3.Selection<?>): void} callback
 * @return {void}
 */
dc.Base.prototype.transition = function(selections, duration, callback) {};

/**
 * @param {?} object
 * @return {boolean}
 */
dc.Base.prototype.instanceOfChart = function(object) {};

/**
 * @param {?} object
 * @param {string} fnName
 * @param {!Function} newFn
 * @return {void}
 */
dc.Base.prototype.override = function(object, fnName, newFn) {};

/**
 * @param {string} n
 * @param {!dc.Accessor<?, ?>=} f
 * @return {!dc.Accessor<?, ?>}
 */
dc.Base.prototype.pluck = function(n, f) {};

/**
 * @return {!dc.Legend}
 */
dc.Base.prototype.legend = function() {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.PieChart}
 */
dc.Base.prototype.pieChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.BarChart}
 */
dc.Base.prototype.barChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.LineChart}
 */
dc.Base.prototype.lineChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.DataCountWidget}
 */
dc.Base.prototype.dataCount = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.DataTableWidget}
 */
dc.Base.prototype.dataTable = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.DataGridWidget}
 */
dc.Base.prototype.dataGrid = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.BubbleChart}
 */
dc.Base.prototype.bubbleChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.CompositeChart}
 */
dc.Base.prototype.compositeChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.SeriesChart}
 */
dc.Base.prototype.seriesChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.GeoChoroplethChart}
 */
dc.Base.prototype.geoChoroplethChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.BubbleOverlayChart}
 */
dc.Base.prototype.bubbleOverlayChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.RowChart}
 */
dc.Base.prototype.rowChart = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.ScatterPlot}
 */
dc.Base.prototype.scatterPlot = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.NumberDisplayWidget}
 */
dc.Base.prototype.numberDisplay = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.HeatMap}
 */
dc.Base.prototype.heatMap = function(parent, chartGroup) {};

/**
 * @param {string} parent
 * @param {string=} chartGroup
 * @return {!dc.BoxPlot}
 */
dc.Base.prototype.boxPlot = function(parent, chartGroup) {};
