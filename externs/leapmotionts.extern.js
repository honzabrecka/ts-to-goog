/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/leapmotionts/index.d.ts:

/**
 * @constructor
 * @struct
 */
function EventDispatcher() {}
 /** @type {?} */
EventDispatcher.prototype._listeners;

/**
 * @param {string} type
 * @param {!Function} listener
 * @return {boolean}
 */
EventDispatcher.prototype.hasEventListener = function(type, listener) {};

/**
 * @param {string} typeStr
 * @param {!Function} listenerFunc
 * @return {void}
 */
EventDispatcher.prototype.addEventListener = function(typeStr, listenerFunc) {};

/**
 * @param {string} typeStr
 * @param {!Function} listenerFunc
 * @return {void}
 */
EventDispatcher.prototype.removeEventListener = function(typeStr, listenerFunc) {};

/**
 * @param {!LeapEvent} evt
 * @return {void}
 */
EventDispatcher.prototype.dispatchEvent = function(evt) {};
/**
 * @record
 * @struct
 */
function Listener() {}

/**
 * @param {!Controller} controller
 * @return {void}
 */
Listener.prototype.onConnect = function(controller) {};

/**
 * @param {!Controller} controller
 * @return {void}
 */
Listener.prototype.onDisconnect = function(controller) {};

/**
 * @param {!Controller} controller
 * @return {void}
 */
Listener.prototype.onExit = function(controller) {};

/**
 * @param {!Controller} controller
 * @param {!Frame} frame
 * @return {void}
 */
Listener.prototype.onFrame = function(controller, frame) {};

/**
 * @param {!Controller} controller
 * @return {void}
 */
Listener.prototype.onInit = function(controller) {};

/**
 * @constructor
 * @struct
 */
function DefaultListener() {}

/**
 * @param {!Controller} controller
 * @return {void}
 */
DefaultListener.prototype.onConnect = function(controller) {};

/**
 * @param {!Controller} controller
 * @return {void}
 */
DefaultListener.prototype.onDisconnect = function(controller) {};

/**
 * @param {!Controller} controller
 * @return {void}
 */
DefaultListener.prototype.onExit = function(controller) {};

/**
 * @param {!Controller} controller
 * @param {!Frame} frame
 * @return {void}
 */
DefaultListener.prototype.onFrame = function(controller, frame) {};

/**
 * @param {!Controller} controller
 * @return {void}
 */
DefaultListener.prototype.onInit = function(controller) {};

/**
 * @constructor
 * @struct
 * @param {string} type
 * @param {?} targetListener
 * @param {!Frame=} frame
 */
function LeapEvent(type, targetListener, frame) {}
 /** @type {string} */
LeapEvent.LEAPMOTION_INIT;
 /** @type {string} */
LeapEvent.LEAPMOTION_CONNECTED;
 /** @type {string} */
LeapEvent.LEAPMOTION_DISCONNECTED;
 /** @type {string} */
LeapEvent.LEAPMOTION_EXIT;
 /** @type {string} */
LeapEvent.LEAPMOTION_FRAME;
 /** @type {?} */
LeapEvent.prototype._type;
 /** @type {?} */
LeapEvent.prototype._target;
 /** @type {!Frame} */
LeapEvent.prototype.frame;

/**
 * @return {?}
 */
LeapEvent.prototype.getTarget = function() {};

/**
 * @return {string}
 */
LeapEvent.prototype.getType = function() {};

/**
 * @constructor
 * @struct
 */
function LeapUtil() {}
 /** @type {number} */
LeapUtil.PI;
 /** @type {number} */
LeapUtil.DEG_TO_RAD;
 /** @type {number} */
LeapUtil.RAD_TO_DEG;
 /** @type {number} */
LeapUtil.TWO_PI;
 /** @type {number} */
LeapUtil.HALF_PI;
 /** @type {number} */
LeapUtil.EPSILON;

/**
 * @param {number} radians
 * @return {number}
 */
LeapUtil.toDegrees = function(radians) {};

/**
 * @param {number} value
 * @return {boolean}
 */
LeapUtil.isNearZero = function(value) {};

/**
 * @param {!Vector3} inVector
 * @return {boolean}
 */
LeapUtil.vectorIsNearZero = function(inVector) {};

/**
 * @param {!Matrix} mtxTransform
 * @return {!Matrix}
 */
LeapUtil.extractRotation = function(mtxTransform) {};

/**
 * @param {!Matrix} mtxRot
 * @return {!Matrix}
 */
LeapUtil.rotationInverse = function(mtxRot) {};

/**
 * @param {!Matrix} mtxTransform
 * @return {!Matrix}
 */
LeapUtil.rigidInverse = function(mtxTransform) {};

/**
 * @param {!Vector3} vLHS
 * @param {!Vector3} vRHS
 * @return {!Vector3}
 */
LeapUtil.componentWiseMin = function(vLHS, vRHS) {};

/**
 * @param {!Vector3} vLHS
 * @param {!Vector3} vRHS
 * @return {!Vector3}
 */
LeapUtil.componentWiseMax = function(vLHS, vRHS) {};

/**
 * @param {!Vector3} vLHS
 * @param {!Vector3} vRHS
 * @return {!Vector3}
 */
LeapUtil.componentWiseScale = function(vLHS, vRHS) {};

/**
 * @param {!Vector3} inVector
 * @return {!Vector3}
 */
LeapUtil.componentWiseReciprocal = function(inVector) {};

/**
 * @param {!Vector3} inVector
 * @return {number}
 */
LeapUtil.minComponent = function(inVector) {};

/**
 * @param {!Vector3} inVector
 * @return {number}
 */
LeapUtil.maxComponent = function(inVector) {};

/**
 * @param {!Vector3} inVector
 * @return {number}
 */
LeapUtil.heading = function(inVector) {};

/**
 * @param {!Vector3} inVector
 * @return {number}
 */
LeapUtil.elevation = function(inVector) {};

/**
 * @param {!Vector3} vSpherical
 * @return {!Vector3}
 */
LeapUtil.normalizeSpherical = function(vSpherical) {};

/**
 * @param {!Vector3} vCartesian
 * @return {!Vector3}
 */
LeapUtil.cartesianToSpherical = function(vCartesian) {};

/**
 * @param {!Vector3} vSpherical
 * @return {!Vector3}
 */
LeapUtil.sphericalToCartesian = function(vSpherical) {};

/**
 * @param {number} inVal
 * @param {number} minVal
 * @param {number} maxVal
 * @return {number}
 */
LeapUtil.clamp = function(inVal, minVal, maxVal) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number} coefficient
 * @return {number}
 */
LeapUtil.lerp = function(a, b, coefficient) {};

/**
 * @param {!Vector3} vec1
 * @param {!Vector3} vec2
 * @param {number} coefficient
 * @return {!Vector3}
 */
LeapUtil.lerpVector = function(vec1, vec2, coefficient) {};

/**
 * @constructor
 * @struct
 * @param {string=} host
 */
function Controller(host) {}
 /** @type {?} */
Controller.prototype.listener;
 /** @type {!Array<!Frame>} */
Controller.prototype.frameHistory;
 /** @type {?} */
Controller.prototype.latestFrame;
 /** @type {!WebSocket} */
Controller.prototype.connection;
 /** @type {boolean} */
Controller.prototype._isConnected;
 /** @type {boolean} */
Controller.prototype._isGesturesEnabled;

/**
 * @param {?} frame
 * @param {?} id
 * @return {?}
 */
Controller.getHandByID = function(frame, id) {};

/**
 * @param {?} frame
 * @param {?} id
 * @return {?}
 */
Controller.getPointableByID = function(frame, id) {};

/**
 * @param {number=} history
 * @return {!Frame}
 */
Controller.prototype.frame = function(history) {};

/**
 * @param {?} listener
 * @return {void}
 */
Controller.prototype.setListener = function(listener) {};

/**
 * @param {number} type
 * @param {boolean=} enable
 * @return {void}
 */
Controller.prototype.enableGesture = function(type, enable) {};

/**
 * @param {number} type
 * @return {boolean}
 */
Controller.prototype.isGestureEnabled = function(type) {};

/**
 * @return {boolean}
 */
Controller.prototype.isConnected = function() {};

/**
 * @constructor
 * @struct
 */
function Pointable() {}
 /** @type {!Vector3} */
Pointable.prototype.direction;
 /** @type {!Frame} */
Pointable.prototype.frame;
 /** @type {!Hand} */
Pointable.prototype.hand;
 /** @type {number} */
Pointable.prototype.id;
 /** @type {number} */
Pointable.prototype.length;
 /** @type {number} */
Pointable.prototype.width;
 /** @type {!Vector3} */
Pointable.prototype.tipPosition;
 /** @type {!Vector3} */
Pointable.prototype.tipVelocity;
 /** @type {boolean} */
Pointable.prototype.isFinger;
 /** @type {boolean} */
Pointable.prototype.isTool;

/**
 * @return {boolean}
 */
Pointable.prototype.isValid = function() {};

/**
 * @param {!Pointable} other
 * @return {boolean}
 */
Pointable.prototype.isEqualTo = function(other) {};

/**
 * @return {!Pointable}
 */
Pointable.invalid = function() {};

/**
 * @return {string}
 */
Pointable.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 */
function Gesture() {}
 /** @type {number} */
Gesture.STATE_INVALID;
 /** @type {number} */
Gesture.STATE_START;
 /** @type {number} */
Gesture.STATE_UPDATE;
 /** @type {number} */
Gesture.STATE_STOP;
 /** @type {number} */
Gesture.TYPE_INVALID;
 /** @type {number} */
Gesture.TYPE_SWIPE;
 /** @type {number} */
Gesture.TYPE_CIRCLE;
 /** @type {number} */
Gesture.TYPE_SCREEN_TAP;
 /** @type {number} */
Gesture.TYPE_KEY_TAP;
 /** @type {number} */
Gesture.prototype.duration;
 /** @type {number} */
Gesture.prototype.durationSeconds;
 /** @type {!Frame} */
Gesture.prototype.frame;
 /** @type {!Array<!Hand>} */
Gesture.prototype.hands;
 /** @type {number} */
Gesture.prototype.id;
 /** @type {!Array<!Pointable>} */
Gesture.prototype.pointables;
 /** @type {number} */
Gesture.prototype.state;
 /** @type {number} */
Gesture.prototype.type;

/**
 * @param {!Gesture} other
 * @return {boolean}
 */
Gesture.prototype.isEqualTo = function(other) {};

/**
 * @return {boolean}
 */
Gesture.prototype.isValid = function() {};

/**
 * @return {!Gesture}
 */
Gesture.invalid = function() {};

/**
 * @return {string}
 */
Gesture.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 */
function Finger() {}

/**
 * @return {!Finger}
 */
Finger.invalid = function() {};

/**
 * @constructor
 * @struct
 */
function Tool() {}

/**
 * @return {!Tool}
 */
Tool.invalid = function() {};

/**
 * @constructor
 * @struct
 */
function Hand() {}
 /** @type {!Vector3} */
Hand.prototype.direction;
 /** @type {!Array<!Finger>} */
Hand.prototype.fingers;
 /** @type {!Frame} */
Hand.prototype.frame;
 /** @type {number} */
Hand.prototype.id;
 /** @type {!Vector3} */
Hand.prototype.palmNormal;
 /** @type {!Vector3} */
Hand.prototype.palmPosition;
 /** @type {!Vector3} */
Hand.prototype.palmVelocity;
 /** @type {!Array<!Pointable>} */
Hand.prototype.pointables;
 /** @type {!Vector3} */
Hand.prototype.sphereCenter;
 /** @type {number} */
Hand.prototype.sphereRadius;
 /** @type {!Array<!Tool>} */
Hand.prototype.tools;
 /** @type {!Matrix} */
Hand.prototype.rotation;
 /** @type {number} */
Hand.prototype.scaleFactorNumber;
 /** @type {!Vector3} */
Hand.prototype.translationVector;

/**
 * @return {boolean}
 */
Hand.prototype.isValid = function() {};

/**
 * @param {!Hand} other
 * @return {boolean}
 */
Hand.prototype.isEqualTo = function(other) {};

/**
 * @param {number} id
 * @return {!Finger}
 */
Hand.prototype.finger = function(id) {};

/**
 * @param {number} id
 * @return {!Tool}
 */
Hand.prototype.tool = function(id) {};

/**
 * @param {number} id
 * @return {!Pointable}
 */
Hand.prototype.pointable = function(id) {};

/**
 * @param {!Frame} sinceFrame
 * @return {!Vector3}
 */
Hand.prototype.rotationAxis = function(sinceFrame) {};

/**
 * @param {!Frame} sinceFrame
 * @param {!Vector3=} axis
 * @return {number}
 */
Hand.prototype.rotationAngle = function(sinceFrame, axis) {};

/**
 * @param {!Frame} sinceFrame
 * @return {!Matrix}
 */
Hand.prototype.rotationMatrix = function(sinceFrame) {};

/**
 * @param {!Frame} sinceFrame
 * @return {number}
 */
Hand.prototype.scaleFactor = function(sinceFrame) {};

/**
 * @param {!Frame} sinceFrame
 * @return {!Vector3}
 */
Hand.prototype.translation = function(sinceFrame) {};

/**
 * @return {!Hand}
 */
Hand.invalid = function() {};

/**
 * @constructor
 * @struct
 */
function Frame() {}
 /** @type {!Array<!Finger>} */
Frame.prototype.fingers;
 /** @type {!Array<!Hand>} */
Frame.prototype.hands;
 /** @type {!Array<!Pointable>} */
Frame.prototype.pointables;
 /** @type {!Array<!Gesture>} */
Frame.prototype._gestures;
 /** @type {number} */
Frame.prototype.id;
 /** @type {number} */
Frame.prototype.timestamp;
 /** @type {!Array<!Tool>} */
Frame.prototype.tools;
 /** @type {!Matrix} */
Frame.prototype.rotation;
 /** @type {number} */
Frame.prototype.scaleFactorNumber;
 /** @type {!Vector3} */
Frame.prototype.translationVector;
 /** @type {!Controller} */
Frame.prototype.controller;

/**
 * @param {number} id
 * @return {!Hand}
 */
Frame.prototype.hand = function(id) {};

/**
 * @param {number} id
 * @return {!Finger}
 */
Frame.prototype.finger = function(id) {};

/**
 * @param {number} id
 * @return {!Tool}
 */
Frame.prototype.tool = function(id) {};

/**
 * @param {number} id
 * @return {!Pointable}
 */
Frame.prototype.pointable = function(id) {};

/**
 * @param {number} id
 * @return {!Gesture}
 */
Frame.prototype.gesture = function(id) {};

/**
 * @param {!Frame=} sinceFrame
 * @return {!Array<!Gesture>}
 */
Frame.prototype.gestures = function(sinceFrame) {};

/**
 * @param {!Frame} sinceFrame
 * @return {!Vector3}
 */
Frame.prototype.rotationAxis = function(sinceFrame) {};

/**
 * @param {!Frame} sinceFrame
 * @param {!Vector3=} axis
 * @return {number}
 */
Frame.prototype.rotationAngle = function(sinceFrame, axis) {};

/**
 * @param {!Frame} sinceFrame
 * @return {!Matrix}
 */
Frame.prototype.rotationMatrix = function(sinceFrame) {};

/**
 * @param {!Frame} sinceFrame
 * @return {number}
 */
Frame.prototype.scaleFactor = function(sinceFrame) {};

/**
 * @param {!Frame} sinceFrame
 * @return {!Vector3}
 */
Frame.prototype.translation = function(sinceFrame) {};

/**
 * @param {!Frame} other
 * @return {boolean}
 */
Frame.prototype.isEqualTo = function(other) {};

/**
 * @return {boolean}
 */
Frame.prototype.isValid = function() {};

/**
 * @return {!Frame}
 */
Frame.invalid = function() {};

/**
 * @constructor
 * @struct
 * @param {!Vector3} x
 * @param {!Vector3} y
 * @param {!Vector3} z
 * @param {!Vector3=} _origin
 */
function Matrix(x, y, z, _origin) {}
 /** @type {!Vector3} */
Matrix.prototype.origin;
 /** @type {!Vector3} */
Matrix.prototype.xBasis;
 /** @type {!Vector3} */
Matrix.prototype.yBasis;
 /** @type {!Vector3} */
Matrix.prototype.zBasis;

/**
 * @param {!Vector3} _axis
 * @param {number} angleRadians
 * @return {void}
 */
Matrix.prototype.setRotation = function(_axis, angleRadians) {};

/**
 * @param {!Vector3} inVector
 * @return {!Vector3}
 */
Matrix.prototype.transformPoint = function(inVector) {};

/**
 * @param {!Vector3} inVector
 * @return {!Vector3}
 */
Matrix.prototype.transformDirection = function(inVector) {};

/**
 * @return {!Matrix}
 */
Matrix.prototype.rigidInverse = function() {};

/**
 * @param {!Matrix} other
 * @return {!Matrix}
 */
Matrix.prototype.multiply = function(other) {};

/**
 * @param {!Matrix} other
 * @return {!Matrix}
 */
Matrix.prototype.multiplyAssign = function(other) {};

/**
 * @param {!Matrix} other
 * @return {boolean}
 */
Matrix.prototype.isEqualTo = function(other) {};

/**
 * @return {!Matrix}
 */
Matrix.identity = function() {};

/**
 * @return {string}
 */
Matrix.prototype.toString = function() {};

/**
 * @constructor
 * @struct
 */
function CircleGesture() {}
 /** @type {number} */
CircleGesture.classType;
 /** @type {!Vector3} */
CircleGesture.prototype.center;
 /** @type {!Vector3} */
CircleGesture.prototype.normal;
 /** @type {!Pointable} */
CircleGesture.prototype.pointable;
 /** @type {number} */
CircleGesture.prototype.progress;
 /** @type {number} */
CircleGesture.prototype.radius;

/**
 * @constructor
 * @struct
 */
function KeyTapGesture() {}
 /** @type {number} */
KeyTapGesture.classType;
 /** @type {!Vector3} */
KeyTapGesture.prototype.direction;
 /** @type {!Pointable} */
KeyTapGesture.prototype.pointable;
 /** @type {!Vector3} */
KeyTapGesture.prototype.position;
 /** @type {number} */
KeyTapGesture.prototype.progress;

/**
 * @constructor
 * @struct
 */
function ScreenTapGesture() {}
 /** @type {number} */
ScreenTapGesture.classType;
 /** @type {!Vector3} */
ScreenTapGesture.prototype.direction;
 /** @type {!Pointable} */
ScreenTapGesture.prototype.pointable;
 /** @type {!Vector3} */
ScreenTapGesture.prototype.position;
 /** @type {number} */
ScreenTapGesture.prototype.progress;

/**
 * @constructor
 * @struct
 */
function SwipeGesture() {}
 /** @type {number} */
SwipeGesture.classType;
 /** @type {!Vector3} */
SwipeGesture.prototype.direction;
 /** @type {!Pointable} */
SwipeGesture.prototype.pointable;
 /** @type {!Vector3} */
SwipeGesture.prototype.position;
 /** @type {number} */
SwipeGesture.prototype.speed;
 /** @type {!Vector3} */
SwipeGesture.prototype.startPosition;

/**
 * @constructor
 * @struct
 * @param {number} x
 * @param {number} y
 * @param {number} z
 */
function Vector3(x, y, z) {}
 /** @type {number} */
Vector3.prototype.x;
 /** @type {number} */
Vector3.prototype.y;
 /** @type {number} */
Vector3.prototype.z;
 /** @type {number} */
Vector3.prototype.pitch;
 /** @type {number} */
Vector3.prototype.yaw;
 /** @type {number} */
Vector3.prototype.roll;

/**
 * @return {!Vector3}
 */
Vector3.prototype.opposite = function() {};

/**
 * @param {!Vector3} other
 * @return {!Vector3}
 */
Vector3.prototype.plus = function(other) {};

/**
 * @param {!Vector3} other
 * @return {!Vector3}
 */
Vector3.prototype.plusAssign = function(other) {};

/**
 * @param {!Vector3} other
 * @return {!Vector3}
 */
Vector3.prototype.minus = function(other) {};

/**
 * @param {!Vector3} other
 * @return {!Vector3}
 */
Vector3.prototype.minusAssign = function(other) {};

/**
 * @param {number} scalar
 * @return {!Vector3}
 */
Vector3.prototype.multiply = function(scalar) {};

/**
 * @param {number} scalar
 * @return {!Vector3}
 */
Vector3.prototype.multiplyAssign = function(scalar) {};

/**
 * @param {number} scalar
 * @return {!Vector3}
 */
Vector3.prototype.divide = function(scalar) {};

/**
 * @param {number} scalar
 * @return {!Vector3}
 */
Vector3.prototype.divideAssign = function(scalar) {};

/**
 * @param {!Vector3} other
 * @return {boolean}
 */
Vector3.prototype.isEqualTo = function(other) {};

/**
 * @param {!Vector3} other
 * @return {number}
 */
Vector3.prototype.angleTo = function(other) {};

/**
 * @param {!Vector3} other
 * @return {!Vector3}
 */
Vector3.prototype.cross = function(other) {};

/**
 * @param {!Vector3} other
 * @return {number}
 */
Vector3.prototype.distanceTo = function(other) {};

/**
 * @param {!Vector3} other
 * @return {number}
 */
Vector3.prototype.dot = function(other) {};

/**
 * @return {boolean}
 */
Vector3.prototype.isValid = function() {};

/**
 * @return {!Vector3}
 */
Vector3.invalid = function() {};

/**
 * @return {number}
 */
Vector3.prototype.magnitude = function() {};

/**
 * @return {number}
 */
Vector3.prototype.magnitudeSquared = function() {};

/**
 * @return {!Vector3}
 */
Vector3.prototype.normalized = function() {};

/**
 * @return {!Vector3}
 */
Vector3.zero = function() {};

/**
 * @return {!Vector3}
 */
Vector3.xAxis = function() {};

/**
 * @return {!Vector3}
 */
Vector3.yAxis = function() {};

/**
 * @return {!Vector3}
 */
Vector3.zAxis = function() {};

/**
 * @return {!Vector3}
 */
Vector3.left = function() {};

/**
 * @return {!Vector3}
 */
Vector3.right = function() {};

/**
 * @return {!Vector3}
 */
Vector3.down = function() {};

/**
 * @return {!Vector3}
 */
Vector3.up = function() {};

/**
 * @return {!Vector3}
 */
Vector3.forward = function() {};

/**
 * @return {!Vector3}
 */
Vector3.backward = function() {};

/**
 * @return {string}
 */
Vector3.prototype.toString = function() {};
