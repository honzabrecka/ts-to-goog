/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.validation/index.d.ts:
/** @const */
var JQueryValidation = {};
/**
 * @record
 * @struct
 */
JQueryValidation.RulesDictionary = function() {};

/* TODO: IndexSignature: JQueryValidation */

/** @typedef {function(!HTMLElement, !JQueryEventObject): void} */
JQueryValidation.ValidatePredicate;

/** @typedef {(boolean|function(!HTMLElement, !JQueryEventObject): void)} */
JQueryValidation.ShouldValidatePredicate;
/**
 * @record
 * @struct
 */
JQueryValidation.ValidationOptions = function() {};
 /** @type {boolean} */
JQueryValidation.ValidationOptions.prototype.debug;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.errorClass;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.errorContainer;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.errorElement;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.errorLabelContainer;
 /** @type {boolean} */
JQueryValidation.ValidationOptions.prototype.focusCleanup;
 /** @type {boolean} */
JQueryValidation.ValidationOptions.prototype.focusInvalid;
 /** @type {!Object<string,string>} */
JQueryValidation.ValidationOptions.prototype.groups;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.ignore;
 /** @type {boolean} */
JQueryValidation.ValidationOptions.prototype.ignoreTitle;
 /** @type {!Object} */
JQueryValidation.ValidationOptions.prototype.messages;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.meta;
 /** @type {(boolean|function(!HTMLElement, !JQueryEventObject): void)} */
JQueryValidation.ValidationOptions.prototype.onclick;
 /** @type {function(!HTMLElement, !JQueryEventObject): void} */
JQueryValidation.ValidationOptions.prototype.onfocusin;
 /** @type {(boolean|function(!HTMLElement, !JQueryEventObject): void)} */
JQueryValidation.ValidationOptions.prototype.onfocusout;
 /** @type {(boolean|function(!HTMLElement, !JQueryEventObject): void)} */
JQueryValidation.ValidationOptions.prototype.onkeyup;
 /** @type {boolean} */
JQueryValidation.ValidationOptions.prototype.onsubmit;
 /** @type {!JQueryValidation.RulesDictionary} */
JQueryValidation.ValidationOptions.prototype.rules;
 /** @type {(string|function(?<!HTMLElement>, !HTMLElement): void)} */
JQueryValidation.ValidationOptions.prototype.success;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.validClass;
 /** @type {string} */
JQueryValidation.ValidationOptions.prototype.wrapper;

/**
 * Customize placement of created error labels. First argument: The created error label as a jQuery object. Second argument: The invalid element as a jQuery object.
 * 
 * default: Places the error label after the invalid element
 * @param {?<!HTMLElement>} error
 * @param {?<!HTMLElement>} element
 * @return {void}
 */
JQueryValidation.ValidationOptions.prototype.errorPlacement = function(error, element) {};

/**
 * How to highlight invalid fields. Override to decide which fields and how to highlight.
 * 
 * default: Adds errorClass (see the option) to the element
 * @param {!HTMLElement} element
 * @param {string} errorClass
 * @param {string} validClass
 * @return {void}
 */
JQueryValidation.ValidationOptions.prototype.highlight = function(element, errorClass, validClass) {};

/**
 * Callback for custom code when an invalid form is submitted. Called with an event object as the first argument, and the validator
 * as the second.
 * @param {!JQueryEventObject} event
 * @param {!JQueryValidation.Validator} validator
 * @return {void}
 */
JQueryValidation.ValidationOptions.prototype.invalidHandler = function(event, validator) {};

/**
 * A custom message display handler. Gets the map of errors as the first argument and an array of errors as the second,
 * called in the context of the validator object. The arguments contain only those elements currently validated, which can
 * be a single element when doing validation onblur/keyup. You can trigger (in addition to your own messages) the default
 * behaviour by calling this.defaultShowErrors().
 * @param {!JQueryValidation.ErrorDictionary} errorMap
 * @param {!Array<!JQueryValidation.ErrorListItem>} errorList
 * @return {void}
 */
JQueryValidation.ValidationOptions.prototype.showErrors = function(errorMap, errorList) {};

/**
 * Callback for handling the actual submit when the form is valid. Gets the form and the event object. Replaces the default submit.
 * The right place to submit a form via Ajax after it is validated.
 * @param {!HTMLFormElement} form
 * @param {!JQueryEventObject=} event
 * @return {void}
 */
JQueryValidation.ValidationOptions.prototype.submitHandler = function(form, event) {};

/**
 * Called to revert changes made by option highlight, same arguments as highlight.
 * 
 * default: Removes the errorClass
 * @param {!HTMLElement} element
 * @param {string} errorClass
 * @param {string} validClass
 * @return {void}
 */
JQueryValidation.ValidationOptions.prototype.unhighlight = function(element, errorClass, validClass) {};
/**
 * @record
 * @struct
 */
JQueryValidation.ErrorDictionary = function() {};

/* TODO: IndexSignature: JQueryValidation */
/**
 * @record
 * @struct
 */
JQueryValidation.ErrorListItem = function() {};
 /** @type {string} */
JQueryValidation.ErrorListItem.prototype.message;
 /** @type {!HTMLElement} */
JQueryValidation.ErrorListItem.prototype.element;
/**
 * @record
 * @struct
 */
JQueryValidation.ValidatorStatic = function() {};
 /** @type {!Object<string,string>} */
JQueryValidation.ValidatorStatic.prototype.messages;
 /** @type {!Object<string,!Function>} */
JQueryValidation.ValidatorStatic.prototype.methods;

/**
 * Add a compound class method - useful to refactor common combinations of rules into a single class.
 * 
 * Add a compound class method - useful to refactor common combinations of rules into a single class.
 * 
 * @param {string|!JQueryValidation.RulesDictionary} name_or_rules The name of the class rule to add / A map of className-rules pairs
 * @param {!JQueryValidation.RulesDictionary=} rules The compound rules
 * @return {void}
 */
JQueryValidation.ValidatorStatic.prototype.addClassRules = function(name_or_rules, rules) {};

/**
 * Add a custom validation method. It must consist of a name (must be a legal javascript identifier), a javascript based function and a default string message or a message generating function.
 * 
 * @param {string} name The name of the method used to identify it and referencing it; this must be a valid JavaScript identifier
 * @param {function(?, !HTMLElement, ?): boolean} method The actual method implementation, returning true if an element is valid. First argument: Current value. Second argument: Validated element. Third argument: Parameters.
 * @param {(string|function(?, !HTMLElement): string)=} message a default string message or a Message generator. First argument: Parameters. Second argument: Validated element.
 * @return {void}
 */
JQueryValidation.ValidatorStatic.prototype.addMethod = function(name, method, message) {};

/**
 * Replaces {n} placeholders with arguments.
 * 
 * @param {string} template The string to format.
 * @param {...?} args
 * @return {function(!Array<?>): string|string}
 */
JQueryValidation.ValidatorStatic.prototype.format = function(template, args) {};

/**
 * Modify default settings for validation.
 * 
 * @param {!JQueryValidation.ValidationOptions} defaults
 * @return {void}
 */
JQueryValidation.ValidatorStatic.prototype.setDefaults = function(defaults) {};
/**
 * @record
 * @struct
 */
JQueryValidation.Validator = function() {};
 /** @type {!JQueryValidation.ValidationOptions} */
JQueryValidation.Validator.prototype.settings;
 /** @type {!JQueryValidation.ErrorDictionary} */
JQueryValidation.Validator.prototype.errorMap;
 /** @type {!Array<!JQueryValidation.ErrorListItem>} */
JQueryValidation.Validator.prototype.errorList;

/**
 * @param {(string|?<!HTMLElement>)} element
 * @return {boolean}
 */
JQueryValidation.Validator.prototype.element = function(element) {};

/**
 * @return {boolean}
 */
JQueryValidation.Validator.prototype.checkForm = function() {};

/**
 * Validates the form, returns true if it is valid, false otherwise.
 * @return {boolean}
 */
JQueryValidation.Validator.prototype.form = function() {};

/**
 * @param {!Element} element
 * @return {?}
 */
JQueryValidation.Validator.prototype.elementValue = function(element) {};

/**
 * @return {!Array<!HTMLElement>}
 */
JQueryValidation.Validator.prototype.invalidElements = function() {};

/**
 * Returns the number of invalid fields.
 * @return {number}
 */
JQueryValidation.Validator.prototype.numberOfInvalids = function() {};

/**
 * Resets the controlled form.
 * @return {void}
 */
JQueryValidation.Validator.prototype.resetForm = function() {};

/**
 * Show the specified messages.
 * 
 * @param {?} errors One or more key/value pairs of input names and messages.
 * @return {void}
 */
JQueryValidation.Validator.prototype.showErrors = function(errors) {};

/**
 * @return {void}
 */
JQueryValidation.Validator.prototype.hideErrors = function() {};

/**
 * @return {boolean}
 */
JQueryValidation.Validator.prototype.valid = function() {};

/**
 * @return {!Array<!HTMLElement>}
 */
JQueryValidation.Validator.prototype.validElements = function() {};

/**
 * @return {number}
 */
JQueryValidation.Validator.prototype.size = function() {};

/**
 * @return {void}
 */
JQueryValidation.Validator.prototype.focusInvalid = function() {};

/**
 * Remove the specified attributes from the first matched element and return them.
 * 
 * @param {string} attributes A space-separated list of attribute names to remove.
 * @return {?}
 */
JQuery.prototype.removeAttrs = function(attributes) {};

/**
 * Adds the specified rules and returns all rules for the first matched element. Requires that the parent form is validated, that is, $( "form" ).validate() is called first.
 * 
 * Removes the specified rules and returns all rules for the first matched element.
 * Returns the validation rules for teh first selected element.
 * @param {string=} command "remove" or "add" / "remove"
 * @param {!JQueryValidation.RulesDictionary|string=} rules The rules to add. Accepts the same format as the rules-option of the validate-method. / The space-seperated names of rules to remove and return. If left unspecified, removes and returns all rules. Manipulates only rules specified via rules-option or via rules("add").
 * @return {?}
 */
JQuery.prototype.rules = function(command, rules) {};

/**
 * Checks whether the selected form is valid or whether all selected elements are valid.
 * @return {boolean}
 */
JQuery.prototype.valid = function() {};

/**
 * Validates the selected form.
 * 
 * @param {!JQueryValidation.ValidationOptions=} options options for validation
 * @return {!JQueryValidation.Validator}
 */
JQuery.prototype.validate = function(options) {};
 /** @type {!JQueryValidation.ValidatorStatic} */
JQueryStatic.prototype.validator;

/**
 * Replaces {n} placeholders with arguments.
 * 
 * @param {string} template The string to format.
 * @param {...string} tsickle_arguments
 * @return {string}
 */
JQueryStatic.prototype.format = function(template, tsickle_arguments) {};
