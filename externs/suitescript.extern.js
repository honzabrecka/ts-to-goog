/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/suitescript/index.d.ts:
/** @const */
var nlobjRecord = {};
/** @const */
nlobjRecord.prototype = {};
/**
 * @record
 * @struct
 */
nlobjRecord.prototype.GetSubListRet = function() {};
 /** @type {{addButton: !Object, setLabel: ?, setHelpText: ?, setDisplayType: ?, setLineItemValue: ?, setLineItemMatrixValue: ?, setLineItemValues: ?, getLineItemCount: (string|number), addField: ?, setUniqueField: ?, addRefreshButton: ?, addMarkAllButtons: ?}} */
nlobjRecord.prototype.GetSubListRet.prototype.prototype;
/** @const */
nlobjRecord.prototype.GetSubListRet.prototype = {};
/**
 * @record
 * @struct
 */
nlobjRecord.prototype.GetSubListRet.prototype.AddButtonRet = function() {};
 /** @type {{setLabel: ?, setDisabled: ?}} */
nlobjRecord.prototype.GetSubListRet.prototype.AddButtonRet.prototype.prototype;
/**
 * @record
 * @struct
 */
nlobjRecord.prototype.GetFieldRet = function() {};
 /** @type {{getName: ?, getLabel: ?, getType: ?, isHidden: ?, isMandatory: ?, isDisabled: ?, setLabel: ?, setAlias: ?, setDefaultValue: ?, setDisabled: ?, setMandatory: ?, setMaxLength: ?, setDisplayType: ?, setBreakType: ?, setLayoutType: ?, setLinkText: ?, setDisplaySize: ?, setPadding: ?, setHelpText: ?, addSelectOption: ?}} */
nlobjRecord.prototype.GetFieldRet.prototype.prototype;
/** @const */
var nlobjPortlet = {};
/** @const */
nlobjPortlet.prototype = {};
/**
 * @record
 * @struct
 */
nlobjPortlet.prototype.AddEditColumn0 = function() {};
 /** @type {{setLabel: ?, setURL: ?, addParamToURL: ?}} */
nlobjPortlet.prototype.AddEditColumn0.prototype.prototype;
/** @const */
var nlobjForm = {};
/** @const */
nlobjForm.prototype = {};
/**
 * @record
 * @struct
 */
nlobjForm.prototype.AddTabRet = function() {};
 /** @type {{setLabel: ?, setHelpText: ?}} */
nlobjForm.prototype.AddTabRet.prototype.prototype;
/** @const */
var nlobjAssistant = {};
/** @const */
nlobjAssistant.prototype = {};
/**
 * @record
 * @struct
 */
nlobjAssistant.prototype.SetCurrentStep0 = function() {};
 /** @type {{setLabel: ?, setHelpText: ?, getStepNumber: ?, getFieldValue: ?, getFieldValues: !Array<string>, getLineItemCount: (string|number), getLineItemValue: string, getAllFields: !Array<string>, getAllLineItems: ?, getAllLineItemFields: ?}} */
nlobjAssistant.prototype.SetCurrentStep0.prototype.prototype;
/**
 * @record
 * @struct
 */
nlobjForm.prototype.AddFieldGroupRet = function() {};
 /** @type {{setLabel: ?, setCollapsible: ?, setSingleColumn: ?, setShowBorder: ?}} */
nlobjForm.prototype.AddFieldGroupRet.prototype.prototype;
/**
 * @record
 * @struct
 */
nlobjForm.prototype.AddButtonRet = function() {};
 /** @type {{setLabel: ?, setDisabled: ?}} */
nlobjForm.prototype.AddButtonRet.prototype.prototype;

/**
 * Return a new record using values from an existing record.
 * \@governance 10 units for transactions, 2 for custom records, 4 for all other records
 * 
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {?} id
 * @param {?=} initializeValues
 * @return {!nlobjRecord}
 */
function nlapiCopyRecord(type, id, initializeValues) {}

/**
 * @param {string} type
 * @param {string} fldnam
 * @param {boolean} val
 * @return {void}
 */
function nlapiDisableLineItemField(type, fldnam, val) {}

/**
 * @param {string} fldnam
 * @param {?} val
 * @return {void}
 */
function nlapiDisableField(fldnam, val) {}

/**
 * @param {string} fldnam
 * @param {?} val
 * @return {void}
 */
function nlapiLoadSearch(fldnam, val) {}

/**
 * @param {string} type
 * @param {(!nlobjSearchFilter|!Array<!nlobjSearchFilter>)} filters
 * @param {(!nlobjSearchColumn|!Array<!nlobjSearchColumn>)} columns
 * @return {!nlobjSearch}
 */
function nlapiCreateSearch(type, filters, columns) {}

/**
 * Load an existing record from the system.
 * \@governance 10 units for transactions, 2 for custom records, 4 for all other records
 * 
 * 
 * \@exception {SSS_INVALID_RECORD_TYPE}
 * \@exception {SSS_TYPE_ARG_REQD}
 * \@exception {SSS_INVALID_INTERNAL_ID}
 * \@exception {SSS_ID_ARG_REQD}
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {?} id
 * @param {?=} initializeValues
 * @return {!nlobjRecord}
 */
function nlapiLoadRecord(type, id, initializeValues) {}

/**
 * Instantiate a new nlobjRecord object containing all the default field data for that record type.
 * \@governance 10 units for transactions, 2 for custom records, 4 for all other records
 * 
 * 
 * \@exception {SSS_INVALID_RECORD_TYPE}
 * \@exception {SSS_TYPE_ARG_REQD}
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {?=} initializeValues
 * @return {!nlobjRecord}
 */
function nlapiCreateRecord(type, initializeValues) {}

/**
 * Submit a record to the system for creation or update.
 * \@governance 20 units for transactions, 4 for custom records, 8 for all other records
 * 
 * 
 * \@exception {SSS_INVALID_RECORD_OBJ}
 * \@exception {SSS_RECORD_OBJ_REQD}
 * \@exception {SSS_INVALID_SOURCE_ARG}
 * 
 * \@since 2007.0
 * @param {?} record
 * @param {boolean=} doSourcing
 * @param {boolean=} ignoreMandatoryFields
 * @return {?}
 */
function nlapiSubmitRecord(record, doSourcing, ignoreMandatoryFields) {}

/**
 * Delete a record from the system.
 * \@governance 20 units for transactions, 4 for custom records, 8 for all other records
 * 
 * 
 * \@exception {SSS_INVALID_RECORD_TYPE}
 * \@exception {SSS_TYPE_ARG_REQD}
 * \@exception {SSS_INVALID_INTERNAL_ID}
 * \@exception {SSS_ID_ARG_REQD}
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {?} id
 * @return {void}
 */
function nlapiDeleteRecord(type, id) {}

/**
 * Perform a record search using an existing search or filters and columns.
 * \@governance 10 units
 * \@restriction returns the first 1000 rows in the search
 * 
 * 
 * \@exception {SSS_INVALID_RECORD_TYPE}
 * \@exception {SSS_TYPE_ARG_REQD}
 * \@exception {SSS_INVALID_SRCH_ID}
 * \@exception {SSS_INVALID_SRCH_FILTER}
 * \@exception {SSS_INVALID_SRCH_FILTER_JOIN}
 * \@exception {SSS_INVALID_SRCH_OPERATOR}
 * \@exception {SSS_INVALID_SRCH_COL_NAME}
 * \@exception {SSS_INVALID_SRCH_COL_JOIN}
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {?} id
 * @param {?} filters
 * @param {?} columns
 * @return {!Array<!nlobjSearchResult>}
 */
function nlapiSearchRecord(type, id, filters, columns) {}

/**
 * Perform a global record search across the system.
 * \@governance 10 units
 * \@restriction returns the first 1000 rows in the search
 * 
 * 
 * \@since 2008.1
 * @param {string} keywords
 * @return {!Array<!nlobjSearchResult>}
 */
function nlapiSearchGlobal(keywords) {}

/**
 * Perform a duplicate record search using Duplicate Detection criteria.
 * \@governance 10 units
 * \@restriction returns the first 1000 rows in the search
 * 
 * 
 * \@since 2008.1
 * @param {string} type
 * @param {?} fields
 * @param {?=} id
 * @return {!Array<!nlobjSearchResult>}
 */
function nlapiSearchDuplicate(type, fields, id) {}

/**
 * Create a new record using values from an existing record of a different type.
 * \@governance 10 units for transactions, 2 for custom records, 4 for all other records
 * 
 * 
 * \@exception {SSS_INVALID_URL_CATEGORY}
 * \@exception {SSS_CATEGORY_ARG_REQD}
 * \@exception {SSS_INVALID_TASK_ID}
 * \@exception {SSS_TASK_ID_REQD}
 * \@exception {SSS_INVALID_INTERNAL_ID}
 * \@exception {SSS_INVALID_EDITMODE_ARG}
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {?} id
 * @param {string} transformType
 * @param {?=} transformValues
 * @return {!nlobjRecord}
 */
function nlapiTransformRecord(type, id, transformType, transformValues) {}

/**
 * void a transaction based on type and id .
 * \@governance 10 units for transactions
 * 
 *                   otherwise, it is the input record id
 * 
 * \@since 2014.1
 * @param {string} type
 * @param {string} id
 * @return {string}
 */
function nlapiVoidTransaction(type, id) {}

/**
 * Fetch the value of one or more fields on a record. This API uses search to look up the fields and is much
 * faster than loading the record in order to get the field.
 * \@governance 10 units for transactions, 2 for custom records, 4 for all other records
 * 
 * 
 * \@since 2008.1
 * @param {string} type
 * @param {number} id
 * @param {string|!Array<string>} fields
 * @param {boolean=} text
 * @return {string|?}
 */
function nlapiLookupField(type, id, fields, text) {}

/**
 * Submit the values of a field or set of fields for an existing record.
 * \@governance 10 units for transactions, 2 for custom records, 4 for all other records
 * \@restriction only supported for records and fields where DLE (Direct List Editing) is supported
 * 
 * 
 * \@since 2008.1
 * @param {string} type
 * @param {?} id
 * @param {?} fields
 * @param {?} values
 * @param {boolean=} doSourcing
 * @return {void}
 */
function nlapiSubmitField(type, id, fields, values, doSourcing) {}

/**
 * Attach a single record to another with optional properties.
 * \@governance 10 units
 * 
 * 
 * \@since 2008.2
 * @param {string} type1
 * @param {?} id1
 * @param {string} type2
 * @param {?} id2
 * @param {?=} properties
 * @return {void}
 */
function nlapiAttachRecord(type1, id1, type2, id2, properties) {}

/**
 * Detach a single record from another with optional properties.
 * \@governance 10 units
 * 
 * 
 * \@since 2008.2
 * @param {string} type1
 * @param {?} id1
 * @param {string} type2
 * @param {?} id2
 * @param {?=} properties
 * @return {void}
 */
function nlapiDetachRecord(type1, id1, type2, id2, properties) {}

/**
 * Resolve a URL to a resource or object in the system.
 * 
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {string} subtype
 * @param {string=} id
 * @param {string=} pagemode
 * @return {string}
 */
function nlapiResolveURL(type, subtype, id, pagemode) {}

/**
 * Redirect the user to a page. Only valid in the UI on Suitelets and User Events. In Client scripts this will initialize the redirect URL used upon submit.
 * 
 * 
 * \@since 2007.0
 * @param {string} type
 * @param {string} identifier
 * @param {(string|number)=} id
 * @param {boolean=} editmode
 * @param {?=} parameters
 * @return {void}
 */
function nlapiSetRedirectURL(type, identifier, id, editmode, parameters) {}

/**
 * Request a URL to an external or internal resource.
 * \@restriction NetSuite maintains a white list of CAs that are allowed for https requests. Please see the online documentation for the complete list.
 * \@governance 10 units
 * 
 * 
 * \@exception {SSS_UNKNOWN_HOST}
 * \@exception {SSS_INVALID_HOST_CERT}
 * \@exception {SSS_REQUEST_TIME_EXCEEDED}
 * 
 * \@since 2007.0
 * @param {string} url
 * @param {?=} postdata
 * @param {?=} headers
 * @param {?=} callback
 * @param {?=} method
 * @return {?}
 */
function nlapiRequestURL(url, postdata, headers, callback, method) {}

/**
 * Return context information about the current user/script.
 * 
 * 
 * \@since 2007.0
 * @return {?}
 */
function nlapiGetContext() {}

/**
 * Return the internal ID for the currently logged in user. Returns -4 when called from online forms or "Available without Login" Suitelets.
 * 
 * 
 * \@since 2005.0
 * @return {?}
 */
function nlapiGetUser() {}

/**
 * Return the internal ID for the current user's role. Returns 31 (Online Form User) when called from online forms or "Available without Login" Suitelets.
 * 
 * 
 * \@since 2005.0
 * @return {?}
 */
function nlapiGetRole() {}

/**
 * Return the internal ID for the current user's department.
 * 
 * 
 * \@since 2005.0
 * @return {?}
 */
function nlapiGetDepartment() {}

/**
 * Return the internal ID for the current user's location.
 * 
 * 
 * \@since 2005.0
 * @return {?}
 */
function nlapiGetLocation() {}

/**
 * Return the internal ID for the current user's subsidiary.
 * 
 * 
 * \@since 2008.1
 * @return {?}
 */
function nlapiGetSubsidiary() {}

/**
 * Return the recordtype corresponding to the current page or userevent script.
 * 
 * 
 * \@since 2007.0
 * @return {string}
 */
function nlapiGetRecordType() {}

/**
 * Return the internal ID corresponding to the current page or userevent script.
 * 
 *  \@return {int}
 * 
 * \@since 2007.0
 * @return {?}
 */
function nlapiGetRecordId() {}

/**
 * Send out an email and associate it with records in the system.
 * Supported base types are entity for entities, transaction for transactions, activity for activities and cases, record|recordtype for custom records
 * \@governance 10 units
 * \@restriction all outbound emails subject to email Anti-SPAM policies
 * 
 * 
 * \@since 2007.0
 * @param {number} author
 * @param {(string|number)} recipient
 * @param {string} subject
 * @param {(string|!Array<!nlobjFile>)} body
 * @param {(string|!Array<string>)=} cc
 * @param {(string|!Array<string>)=} bcc
 * @param {?=} records
 * @param {(!nlobjFile|!Array<!nlobjFile>)=} attachments
 * @param {boolean=} notifySenderOnBounce
 * @param {boolean=} internalOnly
 * @param {string=} replyTo
 * @return {void}
 */
function nlapiSendEmail(author, recipient, subject, body, cc, bcc, records, attachments, notifySenderOnBounce, internalOnly, replyTo) {}

/**
 * Sends a single on-demand campaign email to a specified recipient and returns a campaign response ID to track the email.
 * \@governance 10 units
 * \@restriction works in conjunction with the Lead Nurturing (campaigndrip) sublist only
 * 
 * 
 * \@since 2010.1
 * @param {?} campaigneventid
 * @param {?} recipientid
 * @return {?}
 */
function nlapiSendCampaignEmail(campaigneventid, recipientid) {}

/**
 * Send out a fax and associate it with records in the system. This requires fax preferences to be configured.
 * Supported base types are entity for entities, transaction for transactions, activity for activities and cases, record|recordtype for custom records
 * \@governance 10 units
 * 
 * 
 * \@since 2008.2
 * @param {?} from
 * @param {?} to
 * @param {string} subject
 * @param {string} body
 * @param {?} records
 * @param {?} files
 * @return {?}
 */
function nlapiSendFax(from, to, subject, body, records, files) {}

/**
 * Return field definition for a field.
 * 
 * 
 * \@since 2009.1
 * @param {string} fldnam
 * @return {?}
 */
function nlapiGetField(fldnam) {}

/**
 * Return field definition for a matrix field.
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} column
 * @return {?}
 */
function nlapiGetMatrixField(type, fldnam, column) {}

/**
 * Return field definition for a sublist field.
 * 
 * 
 * \@since 2009.1
 * @param {string} type
 * @param {string} fldnam
 * @param {?=} linenum
 * @return {?}
 */
function nlapiGetLineItemField(type, fldnam, linenum) {}

/**
 * Return an nlobjField containing sublist field metadata.
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @param {?} column
 * @return {?}
 */
function nlapiGetLineItemMatrixField(type, fldnam, linenum, column) {}

/**
 * Return the value of a field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2005.0
 * @param {string} fldnam
 * @return {string}
 */
function nlapiGetFieldValue(fldnam) {}

/**
 * Set the value of a field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2005.0
 * @param {string} fldnam
 * @param {string} value
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {?}
 */
function nlapiSetFieldValue(fldnam, value, firefieldchanged, synchronous) {}

/**
 * Return the display value of a select field's current selection on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2005.0
 * @param {string} fldnam
 * @return {string}
 */
function nlapiGetFieldText(fldnam) {}

/**
 * Set the value of a field on the current record on a page using it's label.
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2005.0
 * @param {string} fldnam
 * @param {string} txt
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {?}
 */
function nlapiSetFieldText(fldnam, txt, firefieldchanged, synchronous) {}

/**
 * Return the values of a multiselect field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2005.0
 * @param {string} fldnam
 * @return {void}
 */
function nlapiGetFieldValues(fldnam) {}

/**
 * Set the values of a multiselect field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2005.0
 * @param {string} fldnam
 * @param {?} values
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {?}
 */
function nlapiSetFieldValues(fldnam, values, firefieldchanged, synchronous) {}

/**
 * Return the values (via display text) of a multiselect field on the current record.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2009.1
 * @param {string} fldnam
 * @return {void}
 */
function nlapiGetFieldTexts(fldnam) {}

/**
 * Set the values (via display text) of a multiselect field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2009.1
 * @param {string} fldnam
 * @param {?} texts
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {?}
 */
function nlapiSetFieldTexts(fldnam, texts, firefieldchanged, synchronous) {}

/**
 * Get the value of a matrix header field
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} column
 * @return {string}
 */
function nlapiGetMatrixValue(type, fldnam, column) {}

/**
 * Set the value of a matrix header field
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} column
 * @param {string} value
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {?}
 */
function nlapiSetMatrixValue(type, fldnam, column, value, firefieldchanged, synchronous) {}

/**
 * Get the current value of a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} column
 * @return {string}
 */
function nlapiGetCurrentLineItemMatrixValue(type, fldnam, column) {}

/**
 * Set the current value of a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@restriction synchronous arg is only supported in Client SuiteScript
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} column
 * @param {string} value
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {?}
 */
function nlapiSetCurrentLineItemMatrixValue(type, fldnam, column, value, firefieldchanged, synchronous) {}

/**
 * Return the value of a sublist matrix field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @param {?} column
 * @return {void}
 */
function nlapiGetLineItemMatrixValue(type, fldnam, linenum, column) {}

/**
 * Return the value of a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @return {string}
 */
function nlapiGetLineItemValue(type, fldnam, linenum) {}

/**
 * Return the value of a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2013.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @param {string} timezone
 * @return {string}
 */
function nlapiGetLineItemDateTimeValue(type, fldnam, linenum, timezone) {}

/**
 * Set the value of a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {void}
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @param {(string|number)} value
 * @return {void}
 */
function nlapiSetLineItemValue(type, fldnam, linenum, value) {}

/**
 * Set the value of a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {void}
 * 
 * \@since 2013.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @param {?} value
 * @param {string} timezone
 * @return {void}
 */
function nlapiSetLineItemDateTimeValue(type, fldnam, linenum, value, timezone) {}

/**
 * Return the label of a select field's current selection for a particular line.
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @return {string}
 */
function nlapiGetLineItemText(type, fldnam, linenum) {}

/**
 * Return the 1st line number that a sublist field value appears in
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {string} val
 * @return {?}
 */
function nlapiFindLineItemValue(type, fldnam, val) {}

/**
 * Return the 1st line number that a matrix field value appears in
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} column
 * @param {string} val
 * @return {?}
 */
function nlapiFindLineItemMatrixValue(type, fldnam, column, val) {}

/**
 * Return the number of columns for a matrix field
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @return {?}
 */
function nlapiGetMatrixCount(type, fldnam) {}

/**
 * Return the number of sublists in a sublist on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2005.0
 * @param {string} type
 * @return {(string|number)}
 */
function nlapiGetLineItemCount(type) {}

/**
 * Insert and select a new line into the sublist on a page or userevent.
 * 
 * \@return{void} 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {?=} line
 * @return {void}
 */
function nlapiInsertLineItem(type, line) {}

/**
 * Remove the currently selected line from the sublist on a page or userevent.
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {?=} line
 * @return {?}
 */
function nlapiRemoveLineItem(type, line) {}

/**
 * Set the value of a field on the currently selected line.
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {string} fldnam
 * @param {(string|number)} value
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {void}
 */
function nlapiSetCurrentLineItemValue(type, fldnam, value, firefieldchanged, synchronous) {}

/**
 * Set the value of a field on the currently selected line.
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2013.2
 * @param {string} type
 * @param {string} fldnam
 * @param {string} value
 * @param {string} timezone
 * @return {?}
 */
function nlapiSetCurrentLineItemDateTimeValue(type, fldnam, value, timezone) {}

/**
 * Set the value of a field on the currently selected line using it's label.
 * \@restriction synchronous arg is only supported in client SuiteScript
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {string} fldnam
 * @param {string} txt
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {?}
 */
function nlapiSetCurrentLineItemText(type, fldnam, txt, firefieldchanged, synchronous) {}

/**
 * Return the value of a field on the currently selected line.
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {string} fldnam
 * @return {string}
 */
function nlapiGetCurrentLineItemValue(type, fldnam) {}

/**
 * Return the value of a field on the currently selected line.
 * 
 * 
 * \@since 2013.2
 * @param {string} type
 * @param {string} fldnam
 * @param {string} timezone
 * @return {string}
 */
function nlapiGetCurrentLineItemDateTimeValue(type, fldnam, timezone) {}

/**
 * Return the label of a select field's current selection on the currently selected line.
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {string} fldnam
 * @return {string}
 */
function nlapiGetCurrentLineItemText(type, fldnam) {}

/**
 * Return the line number for the currently selected line.
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @return {?}
 */
function nlapiGetCurrentLineItemIndex(type) {}

/**
 * Disable a sublist field.
 * \@restriction Only supported on sublists of type inlineeditor, editor and list (current field only)
 * 
 * 
 * \@since 2009.1
 * @param {string} type
 * @param {string} fldnam
 * @param {boolean} disable
 * @param {?} linenum
 * @return {?}
 */
function nlapiSetLineItemDisabled(type, fldnam, disable, linenum) {}

/**
 * Return field mandatoriness.
 * 
 * 
 * \@since 2009.1
 * @param {string} fldnam
 * @return {boolean}
 */
function nlapiGetFieldMandatory(fldnam) {}

/**
 * Return sublist field mandatoriness.
 * \@restriction Only supported on sublists of type inlineeditor or editor (current field only)
 * 
 * 
 * \@since 2009.1
 * @param {string} type
 * @param {string} fldnam
 * @return {boolean}
 */
function nlapiGetLineItemMandatory(type, fldnam) {}

/**
 * Make a field mandatory.
 * 
 * 
 * \@since 2009.1
 * @param {string} fldnam
 * @param {boolean} mandatory
 * @return {?}
 */
function nlapiSetFieldMandatory(fldnam, mandatory) {}

/**
 * Make a sublist field mandatory.
 * \@restriction Only supported on sublists of type inlineeditor or editor (current field only)
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {boolean} mandatory
 * @return {?}
 */
function nlapiSetLineItemMandatory(type, fldnam, mandatory) {}

/**
 * Select an existing line in a sublist.
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @param {?} linenum
 * @return {?}
 */
function nlapiSelectLineItem(type, linenum) {}

/**
 * Save changes made on the currently selected line to the sublist.
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @return {?}
 */
function nlapiCommitLineItem(type) {}

/**
 * Cancel any changes made on the currently selected line.
 * \@restriction Only supported for sublists of type inlineeditor and editor
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @return {?}
 */
function nlapiCancelLineItem(type) {}

/**
 * Select a new line in a sublist.
 * \@restriction Only supported for sublists of type inlineeditor and editor
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @return {?}
 */
function nlapiSelectNewLineItem(type) {}

/**
 * Refresh the sublist table.
 * \@restriction Only supported for sublists of type inlineeditor, editor, and staticlist
 * \@restriction Client SuiteScript only.
 * 
 * \@return{void} 
 * 
 * \@since 2005.0
 * @param {string} type
 * @return {void}
 */
function nlapiRefreshLineItems(type) {}

/**
 * Adds a select option to a scripted select or multiselect field.
 * \@restriction Client SuiteScript only
 * 
 * 
 * \@since 2008.2
 * @param {string} fldnam
 * @param {string} value
 * @param {string} text
 * @param {boolean=} selected
 * @return {?}
 */
function nlapiInsertSelectOption(fldnam, value, text, selected) {}

/**
 * Removes a select option (or all if value is null) from a scripted select or multiselect field.
 * \@restriction Client SuiteScript only
 * 
 * 
 * \@since 2008.2
 * @param {string} fldnam
 * @param {string} value
 * @return {?}
 */
function nlapiRemoveSelectOption(fldnam, value) {}

/**
 * Adds a select option to a scripted select or multiselect sublist field.
 * \@restriction Client SuiteScript only
 * 
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {string} fldnam
 * @param {string} value
 * @param {string} text
 * @param {boolean=} selected
 * @return {?}
 */
function nlapiInsertLineItemOption(type, fldnam, value, text, selected) {}

/**
 * Removes a select option (or all if value is null) from a scripted select or multiselect sublist field.
 * \@restriction Client SuiteScript only
 * 
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {string} fldnam
 * @param {string} value
 * @return {?}
 */
function nlapiRemoveLineItemOption(type, fldnam, value) {}

/**
 * Returns true if any changes have been made to a sublist.
 * \@restriction Client SuiteScript only
 * 
 * 
 * \@since 2005.0
 * @param {string} type
 * @return {boolean}
 */
function nlapiIsLineItemChanged(type) {}

/**
 * Return an record object containing the data being submitted to the system for the currenr record.
 * \@restriction User Event scripts only
 * 
 * 
 * \@since 2008.1
 * @return {?}
 */
function nlapiGetNewRecord() {}

/**
 * Return an record object containing the current record's data prior to the write operation.
 * \@restriction beforeSubmit|afterSubmit User Event scripts only
 * 
 * 
 * \@since 2008.1
 * @return {?}
 */
function nlapiGetOldRecord() {}

/**
 * Create an nlobjError object that can be used to abort script execution and configure error notification
 * 
 * 
 * \@since 2008.2
 * @param {string} code
 * @param {string} details
 * @param {boolean=} suppressEmail
 * @return {?}
 */
function nlapiCreateError(code, details, suppressEmail) {}

/**
 * Return a new entry form page.
 * \@restriction Suitelets only
 * 
 * 
 * \@since 2008.2
 * @param {string} title
 * @param {boolean=} hideHeader
 * @return {!nlobjForm}
 */
function nlapiCreateForm(title, hideHeader) {}

/**
 * Return a new list page.
 * \@restriction Suitelets only
 * 
 * 
 * \@since 2008.2
 * @param {string} title
 * @param {boolean=} hideHeader
 * @return {?}
 */
function nlapiCreateList(title, hideHeader) {}

/**
 * Return a new assistant page.
 * \@restriction Suitelets only
 * 
 * 
 * \@since 2009.2
 * @param {string} title
 * @param {boolean=} hideHeader
 * @return {?}
 */
function nlapiCreateAssistant(title, hideHeader) {}

/**
 * Load a file from the file cabinet (via its internal ID or path).
 * \@governance 10 units
 * \@restriction Server SuiteScript only
 * 
 * 
 * \@since 2008.2
 * @param {?} id
 * @return {?}
 */
function nlapiLoadFile(id) {}

/**
 * Add/update a file in the file cabinet.
 * \@governance 20 units
 * \@restriction Server SuiteScript only
 * 
 * 
 * \@since 2009.1
 * @param {!nlobjFile} file
 * @return {?}
 */
function nlapiSubmitFile(file) {}

/**
 * Delete a file from the file cabinet.
 * \@governance 20 units
 * \@restriction Server SuiteScript only
 * 
 * 
 * \@since 2009.1
 * @param {?} id
 * @return {?}
 */
function nlapiDeleteFile(id) {}

/**
 * Instantiate a file object (specifying the name, type, and contents which are base-64 encoded for binary types.)
 * \@restriction Server SuiteScript only
 * 
 * 
 * \@since 2009.1
 * @param {string} name
 * @param {string} type
 * @param {string} contents
 * @return {!nlobjFile}
 */
function nlapiCreateFile(name, type, contents) {}

/**
 * Perform a mail merge operation using any template and up to 2 records and returns an nlobjFile with the results.
 * \@restriction only supported for record types that are available in mail merge: transactions, entities, custom records, and cases
 * \@restriction Server SuiteScript only
 * \@governance 10 units
 * 
 * 
 * \@since 2008.2
 * @param {?} id
 * @param {string} baseType
 * @param {?} baseId
 * @param {string=} altType
 * @param {?=} altId
 * @param {?=} fields
 * @return {?}
 */
function nlapiMergeRecord(id, baseType, baseId, altType, altId, fields) {}

/**
 * Print a record (transaction) gievn its type, id, and output format.
 * \@restriction Server SuiteScript only
 * \@governance 10 units
 * 
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {?} id
 * @param {string=} format
 * @param {?=} properties
 * @return {?}
 */
function nlapiPrintRecord(type, id, format, properties) {}

/**
 * Generate a PDF from XML using the BFO report writer (see http://big.faceless.org/products/report/).
 * \@restriction Server SuiteScript only
 * \@governance 10 units
 * 
 * 
 * \@since 2009.1
 * @param {string} input
 * @return {?}
 */
function nlapiXMLToPDF(input) {}

/**
 * Create a template renderer used to generate various outputs based on a template.
 * \@restriction Server SuiteScript only
 * \@governance 10 units
 * 
 * @return {?}
 */
function nlapiCreateTemplateRenderer() {}

/**
 * Create an email merger used to assemble subject and body text of an email from a given
 * FreeMarker template and a set of associated records.
 * \@restriction Server SuiteScript only
 * 
 * 
 * \@since 2015.1
 * @param {?} id
 * @return {?}
 */
function nlapiCreateEmailMerger(id) {}

/**
 * Create an entry in the script execution log (note that execution log entries are automatically purged after 30 days).
 * 
 * 
 * \@since 2008.1
 * @param {string} type
 * @param {string} title
 * @param {string=} details
 * @return {?}
 */
function nlapiLogExecution(type, title, details) {}

/**
 * Queue a scheduled script for immediate execution and return the status QUEUED if successfull.
 * \@restriction Server SuiteScript only
 * \@governance 20 units
 * 
 * 
 * \@since 2008.1
 * @param {string} script
 * @param {string} deployment
 * @param {?=} parameters
 * @return {string}
 */
function nlapiScheduleScript(script, deployment, parameters) {}

/**
 * Return a URL with a generated OAuth token.
 * \@restriction Suitelets and Portlets only
 * \@governance 20 units
 * 
 * 
 * \@since 2009.2
 * @param {string} ssoAppKey
 * @return {string}
 */
function nlapiOutboundSSO(ssoAppKey) {}

/**
 * Loads a configuration record
 * \@restriction Server SuiteScript only
 * \@governance 10 units
 * 
 * 
 * \@since 2009.2
 * @param {string} type
 * @return {?}
 */
function nlapiLoadConfiguration(type) {}

/**
 * Commits all changes to a configuration record.
 * \@restriction Server SuiteScript only
 * \@governance 10 units
 * 
 * \@since 2009.2
 * @param {?} setup
 * @return {void} (void)
 * 
 */
function nlapiSubmitConfiguration(setup) {}

/**
 * Convert a String into a Date object.
 * 
 * 
 * \@since 2005.0
 * @param {string} str
 * @param {string=} format
 * @return {!Date}
 */
function nlapiStringToDate(str, format) {}

/**
 * Convert a Date object into a String
 * 
 * 
 * \@since 2005.0
 * @param {!Date} d
 * @param {string=} formattype
 * @return {string}
 */
function nlapiDateToString(d, formattype) {}

/**
 * Add days to a Date object and returns a new Date
 * 
 * 
 * \@since 2008.1
 * @param {?} d
 * @param {?} days
 * @return {?}
 */
function nlapiAddDays(d, days) {}

/**
 * Add months to a Date object and returns a new Date.
 * 
 * 
 * \@since 2008.1
 * @param {?} d
 * @param {?} months
 * @return {?}
 */
function nlapiAddMonths(d, months) {}

/**
 * Format a number for data entry into a currency field.
 * 
 * 
 * \@since 2008.1
 * @param {string} str
 * @return {string}
 */
function nlapiFormatCurrency(str) {}

/**
 * Encrypt a String using a SHA-1 hash function
 * 
 * 
 * \@since 2009.2
 * @param {string} s
 * @param {string} algotithm
 * @param {string=} key
 * @return {string}
 */
function nlapiEncrypt(s, algotithm, key) {}

/**
 * Escape a String for use in an XML document.
 * 
 * 
 * \@since 2008.1
 * @param {string} text
 * @return {string}
 */
function nlapiEscapeXML(text) {}

/**
 * Convert a String into an XML document. Note that in Server SuiteScript XML is supported natively by the JS runtime using the e4x standard (http://en.wikipedia.org/wiki/E4X)
 * This makes scripting XML simpler and more efficient
 * 
 * 
 * \@since 2008.1
 * @param {string} str
 * @return {?}
 */
function nlapiStringToXML(str) {}

/**
 * Convert an XML document into a String.  Note that in Server SuiteScript XML is supported natively by the JS runtime using the e4x standard (http://en.wikipedia.org/wiki/E4X)
 * This makes scripting XML data simpler and more efficient
 * 
 * 
 * \@since 2008.1
 * @param {?} xml
 * @return {string}
 */
function nlapiXMLToString(xml) {}

/**
 * Validate that a given XML document conforms to a given XML schema. XML Schema Definition (XSD) is the expected schema format.
 * 
 *                 provide the Internal Id of File Cabinet folder containing these sub-schemas as the schemaFolderId argument
 * @throws {nlobjError} error containsing validation failure message(s) - limited to first 10
 * 
 * \@since 2014.1
 * @param {?} xmlDocument
 * @param {?} schemaDocument
 * @param {string} schemaFolderId
 * @return {void}
 */
function nlapiValidateXML(xmlDocument, schemaDocument, schemaFolderId) {}

/**
 * select a value from an XML node using XPath. Supports custom namespaces (nodes in default namespace can be referenced using "nlapi" as the prefix)
 * 
 * 
 * \@since 2008.2
 * @param {?} node
 * @param {string} xpath
 * @return {string}
 */
function nlapiSelectValue(node, xpath) {}

/**
 * @return {void}
 */
function nlapiYieldScript() {}

/**
 * Select an array of values from an XML node using XPath. Supports custom namespaces (nodes in default namespace can be referenced using "nlapi" as the prefix)
 * 
 * 
 * \@since 2008.1
 * @param {?} node
 * @param {string} xpath
 * @return {void}
 */
function nlapiSelectValues(node, xpath) {}

/**
 * Select a node from an XML node using XPath. Supports custom namespaces (nodes in default namespace can be referenced using "nlapi" as the prefix)
 * 
 * 
 * \@since 2008.1
 * @param {?} node
 * @param {string} xpath
 * @return {?}
 */
function nlapiSelectNode(node, xpath) {}

/**
 * Select an array of nodes from an XML node using XPath. Supports custom namespaces (nodes in default namespace can be referenced using "nlapi" as the prefix)
 * 
 * 
 * \@since 2008.1
 * @param {?} node
 * @param {string} xpath
 * @return {?}
 */
function nlapiSelectNodes(node, xpath) {}

/**
 * Calculate exchange rate between two currencies as of today or an optional effective date.
 * \@governance 10 units
 * 
 * 
 * \@since 2009.1
 * @param {?} fromCurrency
 * @param {?} toCurrency
 * @param {string=} date
 * @return {?}
 */
function nlapiExchangeRate(fromCurrency, toCurrency, date) {}

/**
 * Initiates a workflow on-demand and returns the workflow instance ID for the workflow-record combination.
 * \@governance 20 units
 * 
 * 
 * \@since 2010.1
 * @param {string} recordtype
 * @param {?} id
 * @param {?} workflowid
 * @return {?}
 */
function nlapiInitiateWorkflow(recordtype, id, workflowid) {}

/**
 * Initiates a workflow on-demand and returns the workflow instance ID for the workflow-record combination.
 * \@governance 20 units
 * 
 * 
 * \@since 2014.2
 * @param {?} recordType
 * @param {?} id
 * @param {?} workflowId
 * @param {?} parameters
 * @return {string}
 */
function nlapiInitiateWorkflowAsync(recordType, id, workflowId, parameters) {}

/**
 * Triggers a workflow on a record.
 * \@governance 20 units
 * 
 * 
 * \@since 2010.1
 * @param {string} recordtype
 * @param {?} id
 * @param {?} workflowid
 * @param {?} actionid
 * @param {?} stateid
 * @return {?}
 */
function nlapiTriggerWorkflow(recordtype, id, workflowid, actionid, stateid) {}

/**
 * Create a subrecord on a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {nlobjSubrecord}
 * 
 * \@since 2011.2
 * @param {string} type
 * @param {string} fldnam
 * @return {void}
 */
function nlapiCreateCurrentLineSubrecord(type, fldnam) {}

/**
 * edit a subrecord on a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {nlobjSubrecord}
 * 
 * \@since 2011.2
 * @param {string} type
 * @param {string} fldnam
 * @return {void}
 */
function nlapiEditCurrentLineItemSubrecord(type, fldnam) {}

/**
 * remove a subrecord on a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {void}
 * 
 * \@since 2011.2
 * @param {string} type
 * @param {string} fldnam
 * @return {void}
 */
function nlapiRemoveCurrentLineItemSubrecord(type, fldnam) {}

/**
 * view a subrecord on a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {nlobjSubrecord}
 * 
 * \@since 2011.2
 * @param {string} type
 * @param {string} fldnam
 * @return {void}
 */
function nlapiViewCurrentLineItemSubrecord(type, fldnam) {}

/**
 * view a subrecord on a sublist field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {nlobjSubrecord}
 * 
 * \@since 2011.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @return {void}
 */
function nlapiViewLineItemSubrecord(type, fldnam, linenum) {}

/**
 * get a cache object.
 * 
 * \@since 2013.2
 * @param {string} name
 * @return {?}
 */
function nlapiGetCache(name) {}

/**
 * create a subrecord on body field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {nlobjSubrecord}
 * 
 * \@since 2011.2
 * @param {string} fldnam
 * @return {void}
 */
function createSubrecord(fldnam) {}

/**
 * edit a subrecord on body field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {nlobjSubrecord}
 * 
 * \@since 2011.2
 * @param {string} fldnam
 * @return {void}
 */
function editSubrecord(fldnam) {}

/**
 * remove a subrecord on body field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {void}
 * 
 * \@since 2011.2
 * @param {string} fldnam
 * @return {void}
 */
function removeSubrecord(fldnam) {}

/**
 * view a subrecord on body field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * \@retun {nlobjSubrecord}
 * 
 * \@since 2011.2
 * @param {string} fldnam
 * @return {void}
 */
function viewSubrecord(fldnam) {}
/**
 * @record
 * @struct
 */
function nlobjSearch() {}
/**
 * @record
 * @struct
 */
function StandardLine() {}

/**
 * @return {number}
 */
StandardLine.prototype.getEntityId = function() {};

/**
 * @return {number}
 */
StandardLine.prototype.getId = function() {};

/**
 * @return {number}
 */
StandardLine.prototype.getSubsidiaryId = function() {};

/**
 * @return {string}
 */
StandardLine.prototype.getTaxableAmount = function() {};

/**
 * @return {string}
 */
StandardLine.prototype.getTaxAmount = function() {};

/**
 * @return {number}
 */
StandardLine.prototype.getTaxItemId = function() {};

/**
 * @return {string}
 */
StandardLine.prototype.getTaxType = function() {};

/**
 * @return {boolean}
 */
StandardLine.prototype.isPosting = function() {};

/**
 * @return {boolean}
 */
StandardLine.prototype.isTaxable = function() {};
/**
 * @record
 * @struct
 */
function StandardLines() {}

/**
 * @return {number}
 */
StandardLines.prototype.getCount = function() {};

/**
 * @param {number} index
 * @return {!StandardLine}
 */
StandardLines.prototype.getLine = function(index) {};
/**
 * @record
 * @struct
 */
function CustomLine() {}

/**
 * @return {boolean}
 */
CustomLine.prototype.isBookSpecific = function() {};

/**
 * @param {boolean} bookSpecific
 * @return {void}
 */
CustomLine.prototype.setBookSpecific = function(bookSpecific) {};

/**
 * @param {number} accountId
 * @return {void}
 */
CustomLine.prototype.setAccountId = function(accountId) {};

/**
 * @param {number} classId
 * @return {void}
 */
CustomLine.prototype.setClassId = function(classId) {};

/**
 * @param {string} credit
 * @return {void}
 */
CustomLine.prototype.setCreditAmount = function(credit) {};

/**
 * @param {string} debit
 * @return {void}
 */
CustomLine.prototype.setDebitAmount = function(debit) {};

/**
 * @param {number} departmentId
 * @return {void}
 */
CustomLine.prototype.setDepartmentId = function(departmentId) {};

/**
 * @param {number} locationId
 * @return {void}
 */
CustomLine.prototype.setLocationId = function(locationId) {};

/**
 * @param {string} memo
 * @return {void}
 */
CustomLine.prototype.setMemo = function(memo) {};
/**
 * @record
 * @struct
 */
function CustomLines() {}

/**
 * @return {!CustomLine}
 */
CustomLines.prototype.addNewLine = function() {};

/**
 * @return {number}
 */
CustomLines.prototype.getCount = function() {};

/**
 * @param {number} index
 * @return {!CustomLine}
 */
CustomLines.prototype.getLine = function(index) {};
/**
 * @record
 * @struct
 */
function AccountingBook() {}

/**
 * @return {number}
 */
AccountingBook.prototype.getId = function() {};

/**
 * @return {boolean}
 */
AccountingBook.prototype.isPrimary = function() {};

/* TODO: ConstructSignature:  */

/**
 * Return the internalId of the record or NULL for new records.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @return {(string|number)}
 */
nlobjRecord.prototype.getId = function() {};

/**
 * Return the recordType corresponding to this record.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @return {string}
 */
nlobjRecord.prototype.getRecordType = function() {};

/**
 * Return field metadata for field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.1
 * @param {string} fldnam
 * @return {function(): void}
 */
nlobjRecord.prototype.getField = function(fldnam) {};

/**
 * Return sublist metadata for sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} type
 * @return {function(): void}
 */
nlobjRecord.prototype.getSubList = function(type) {};

/**
 * Return field metadata for field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} column
 * @return {function(): void}
 */
nlobjRecord.prototype.getMatrixField = function(type, fldnam, column) {};

/**
 * Return metadata for sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?=} linenum
 * @return {function(): void}
 */
nlobjRecord.prototype.getLineItemField = function(type, fldnam, linenum) {};

/**
 * Return metadata for sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} fldnam
 * @param {?} linenum
 * @param {?} column
 * @return {function(): void}
 */
nlobjRecord.prototype.getLineItemMatrixField = function(type, fldnam, linenum, column) {};

/**
 * Set the value of a field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @param {string} name
 * @param {(string|number)} value
 * @return {?}
 */
nlobjRecord.prototype.setFieldValue = function(name, value) {};

/**
 * Set the values of a multi-select field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @param {string} name
 * @param {?} values
 * @return {void}
 */
nlobjRecord.prototype.setFieldValues = function(name, values) {};

/**
 * Return the value of a field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @param {string} name
 * @return {string}
 */
nlobjRecord.prototype.getFieldValue = function(name) {};

/**
 * Return the selected values of a multi-select field as an Array.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @param {string} name
 * @return {!Array<string>}
 */
nlobjRecord.prototype.getFieldValues = function(name) {};

/**
 * Set the value (via display value) of a select field.
 * \@restriction only supported for select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} text
 * @return {?}
 */
nlobjRecord.prototype.setFieldText = function(name, text) {};

/**
 * Set the values (via display values) of a multi-select field.
 * \@restriction only supported for multi-select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {?} texts
 * @return {?}
 */
nlobjRecord.prototype.setFieldTexts = function(name, texts) {};

/**
 * Return the display value for a select field.
 * \@restriction only supported for select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {string}
 */
nlobjRecord.prototype.getFieldText = function(name) {};

/**
 * Return the selected display values of a multi-select field as an Array.
 * \@restriction only supported for multi-select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {void}
 */
nlobjRecord.prototype.getFieldTexts = function(name) {};

/**
 * Get the value of a matrix header field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} name
 * @param {?} column
 * @return {string}
 */
nlobjRecord.prototype.getMatrixValue = function(type, name, column) {};

/**
 * Set the value of a matrix header field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} type
 * @param {string} name
 * @param {?} column
 * @param {string} value
 * @return {?}
 */
nlobjRecord.prototype.setMatrixValue = function(type, name, column, value) {};

/**
 * Return an Array of all field names on the record.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @return {!Array<string>}
 */
nlobjRecord.prototype.getAllFields = function() {};

/**
 * Return an Array of all field names on a record for a particular sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.2
 * @param {string} group
 * @return {void}
 */
nlobjRecord.prototype.getAllLineItemFields = function(group) {};

/**
 * Set the value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @param {string} group
 * @param {string} name
 * @param {?} line
 * @param {string} value
 * @return {void}
 */
nlobjRecord.prototype.setLineItemValue = function(group, name, line, value) {};

/**
 * Set the value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2013.2
 * @param {string} group
 * @param {string} name
 * @param {?} line
 * @param {?} value
 * @param {string} timezone
 * @return {void}
 */
nlobjRecord.prototype.setLineItemDateTimeValue = function(group, name, line, value, timezone) {};

/**
 * Return the value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.1
 * @param {string} group
 * @param {string} name
 * @param {?} line
 * @return {string}
 */
nlobjRecord.prototype.getLineItemValue = function(group, name, line) {};

/**
 * Return the value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2013.2
 * @param {string} group
 * @param {string} name
 * @param {?} line
 * @param {string} timezone
 * @return {void}
 */
nlobjRecord.prototype.getLineItemDateTimeValue = function(group, name, line, timezone) {};

/**
 * Return the text value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2008.2
 * @param {string} group
 * @param {string} name
 * @param {?} line
 * @return {string}
 */
nlobjRecord.prototype.getLineItemText = function(group, name, line) {};

/**
 * Set the current value of a sublist field.
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} name
 * @param {(string|number)} value
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {void}
 */
nlobjRecord.prototype.setCurrentLineItemValue = function(group, name, value, firefieldchanged, synchronous) {};

/**
 * @param {string} group
 * @param {string} name
 * @param {(string|number)} value
 * @param {boolean=} firefieldchanged
 * @param {boolean=} synchronous
 * @return {void}
 */
nlobjRecord.prototype.setCurrentLineItemText = function(group, name, value, firefieldchanged, synchronous) {};

/**
 * Set the current value of a sublist field.
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2013.2
 * @param {string} group
 * @param {string} name
 * @param {string} value
 * @param {string} timezone
 * @return {?}
 */
nlobjRecord.prototype.setCurrentLineItemDateTimeValue = function(group, name, value, timezone) {};

/**
 * Return the current value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} name
 * @return {string}
 */
nlobjRecord.prototype.getCurrentLineItemValue = function(group, name) {};

/**
 * Return the current value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2013.2
 * @param {string} group
 * @param {string} name
 * @param {string} timezone
 * @return {string}
 */
nlobjRecord.prototype.getCurrentLineItemDateTimeValue = function(group, name, timezone) {};

/**
 * Return the current display value of a sublist field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} name
 * @return {string}
 */
nlobjRecord.prototype.getCurrentLineItemText = function(group, name) {};

/**
 * Set the current value of a sublist matrix field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} name
 * @param {?} column
 * @param {string} value
 * @return {?}
 */
nlobjRecord.prototype.setCurrentLineItemMatrixValue = function(group, name, column, value) {};

/**
 * Return the current value of a sublist matrix field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} name
 * @param {?} column
 * @return {string}
 */
nlobjRecord.prototype.getCurrentLineItemMatrixValue = function(group, name, column) {};

/**
 * Return the number of columns for a matrix field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} name
 * @return {?}
 */
nlobjRecord.prototype.getMatrixCount = function(group, name) {};

/**
 * Return the number of lines in a sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @return {(string|number)}
 */
nlobjRecord.prototype.getLineItemCount = function(group) {};

/**
 * Return line number for 1st occurence of field value in a sublist column.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} fldnam
 * @param {string} value
 * @return {?}
 */
nlobjRecord.prototype.findLineItemValue = function(group, fldnam, value) {};

/**
 * Return line number for 1st occurence of field value in a sublist column.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} fldnam
 * @param {?} column
 * @param {string} value
 * @return {?}
 */
nlobjRecord.prototype.findLineItemMatrixValue = function(group, fldnam, column, value) {};

/**
 * Insert a new line into a sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {?=} line
 * @return {void}
 */
nlobjRecord.prototype.insertLineItem = function(group, line) {};

/**
 * Remove an existing line from a sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {?=} line
 * @return {void}
 */
nlobjRecord.prototype.removeLineItem = function(group, line) {};

/**
 * Insert and select a new line in a sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @return {?}
 */
nlobjRecord.prototype.selectNewLineItem = function(group) {};

/**
 * Select an existing line in a sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {?} line
 * @return {?}
 */
nlobjRecord.prototype.selectLineItem = function(group, line) {};

/**
 * Commit the current line in a sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 2009.2
 * @param {string} group
 * @return {?}
 */
nlobjRecord.prototype.commitLineItem = function(group) {};

/**
 * set the value of a field.
 * 
 * 
 * \@method
 * \@memberOf nlobjRecord
 * 
 * \@since 20013.2
 * @param {string} name
 * @param {string} value
 * @param {string} timezone
 * @return {?}
 */
nlobjRecord.prototype.setDateTimeValue = function(name, value, timezone) {};

/**
 * Return the value of a field on the current record on a page.
 * \@restriction supported in client and user event scripts only.
 * 
 * \@since 2013.2
 * @param {string} fldnam
 * @param {string} timezone
 * @return {string}
 */
nlobjRecord.prototype.getDateTimeValue = function(fldnam, timezone) {};
/**
 * @record
 * @struct
 */
function nlobjConfiguration() {}

/* TODO: ConstructSignature:  */

/**
 * return the type corresponding to this setup record.
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjConfiguration.prototype.getType = function() {};

/**
 * return field metadata for field.
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} fldnam
 * @return {function(): void}
 */
nlobjConfiguration.prototype.getField = function(fldnam) {};

/**
 * set the value of a field.
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {string} value
 * @return {?}
 */
nlobjConfiguration.prototype.setFieldValue = function(name, value) {};

/**
 * Set the values of a multi-select field.
 * \@restriction only supported for multi-select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {?} value
 * @return {?}
 */
nlobjConfiguration.prototype.setFieldValues = function(name, value) {};

/**
 * return the value of a field.
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {string}
 */
nlobjConfiguration.prototype.getFieldValue = function(name) {};

/**
 * return the selected values of a multi-select field as an Array.
 * \@restriction only supported for multi-select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {!Array<string>}
 */
nlobjConfiguration.prototype.getFieldValues = function(name) {};

/**
 * set the value (via display value) of a field.
 * \@restriction only supported for select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {string} text
 * @return {?}
 */
nlobjConfiguration.prototype.setFieldText = function(name, text) {};

/**
 * set the values (via display values) of a multi-select field.
 * \@restriction only supported for multi-select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {?} texts
 * @return {?}
 */
nlobjConfiguration.prototype.setFieldTexts = function(name, texts) {};

/**
 * return the text value of a field.
 * \@restriction only supported for select fields
 * 
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {string}
 */
nlobjConfiguration.prototype.getFieldText = function(name) {};

/**
 * return the selected text values of a multi-select field as an Array.
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {void}
 */
nlobjConfiguration.prototype.getFieldTexts = function(name) {};

/**
 * return an Array of all field names on the record.
 * 
 * \@method
 * \@memberOf nlobjConfiguration
 * 
 * \@since 2009.2
 * @return {!Array<string>}
 */
nlobjConfiguration.prototype.getAllFields = function() {};
/**
 * @record
 * @struct
 */
function nlobjFile() {}

/* TODO: ConstructSignature:  */

/**
 * Return the name of the file.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {string}
 */
nlobjFile.prototype.getName = function() {};

/**
 * Sets the name of a file.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @param {string} name
 * @return {?}
 */
nlobjFile.prototype.setName = function(name) {};

/**
 * return the internal ID of the folder that this file is in.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {?}
 */
nlobjFile.prototype.getFolder = function() {};

/**
 * sets the internal ID of the folder that this file is in.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @param {?} folder
 * @return {?}
 */
nlobjFile.prototype.setFolder = function(folder) {};

/**
 * sets the character encoding for the file.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2010.2
 * @param {string} encoding
 * @return {?}
 */
nlobjFile.prototype.setEncoding = function(encoding) {};

/**
 * return true if the file is "Available without Login".
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {boolean}
 */
nlobjFile.prototype.isOnline = function() {};

/**
 * sets the file's "Available without Login" status.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @param {boolean} online
 * @return {?}
 */
nlobjFile.prototype.setIsOnline = function(online) {};

/**
 * return true if the file is inactive.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {boolean}
 */
nlobjFile.prototype.isInactive = function() {};

/**
 * sets the file's inactive status.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @param {boolean} inactive
 * @return {?}
 */
nlobjFile.prototype.setIsInactive = function(inactive) {};

/**
 * return the file description.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {string}
 */
nlobjFile.prototype.getDescription = function() {};

/**
 * sets the file's description.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @param {string} descr
 * @return {?}
 */
nlobjFile.prototype.setDescription = function(descr) {};

/**
 * Return the id of the file (if stored in the FC).
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {?}
 */
nlobjFile.prototype.getId = function() {};

/**
 * Return the size of the file in bytes.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {?}
 */
nlobjFile.prototype.getSize = function() {};

/**
 * Return the URL of the file (if stored in the FC).
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {string}
 */
nlobjFile.prototype.getURL = function() {};

/**
 * Return the type of the file.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {string}
 */
nlobjFile.prototype.getType = function() {};

/**
 * Return the value (base64 encoded for binary types) of the file.
 * 
 * \@method
 * \@memberOf nlobjFile
 * 
 * \@since 2009.1
 * @return {string}
 */
nlobjFile.prototype.getValue = function() {};
/**
 * @record
 * @struct
 */
function nlobjSearchFilter() {}

/* TODO: ConstructSignature:  */

/**
 * Return the name of this search filter.
 * 
 * \@method
 * \@memberOf nlobjSearchFilter
 * 
 * \@since 2007.0
 * @return {string}
 */
nlobjSearchFilter.prototype.getName = function() {};

/**
 * Return the join id for this search filter.
 * 
 * \@method
 * \@memberOf nlobjSearchFilter
 * 
 * \@since 2008.1
 * @return {string}
 */
nlobjSearchFilter.prototype.getJoin = function() {};

/**
 * Return the filter operator used.
 * 
 * \@method
 * \@memberOf nlobjSearchFilter
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjSearchFilter.prototype.getOperator = function() {};
/**
 * @record
 * @struct
 */
function nlobjSearchColumn() {}

/* TODO: ConstructSignature:  */

/**
 * return the name of this search column.
 * 
 * \@method
 * \@memberOf nlobjSearchColumn
 * \@since 2008.1
 * @return {string}
 */
nlobjSearchColumn.prototype.getName = function() {};

/**
 * return the join id for this search column.
 * 
 * \@method
 * \@memberOf nlobjSearchColumn
 * \@since 2008.1
 * @return {string}
 */
nlobjSearchColumn.prototype.getJoin = function() {};

/**
 * return the label of this search column.
 * 
 * \@method
 * \@memberOf nlobjSearchColumn
 * 
 * \@since 2009.1
 * @return {string}
 */
nlobjSearchColumn.prototype.getLabel = function() {};

/**
 * return the summary type (avg,group,sum,count) of this search column.
 * 
 * \@method
 * \@memberOf nlobjSearchColumn
 * \@since 2008.1
 * @return {string}
 */
nlobjSearchColumn.prototype.getSummary = function() {};

/**
 * return formula for this search column.
 * 
 * \@method
 * \@memberOf nlobjSearchColumn
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjSearchColumn.prototype.getFormula = function() {};

/**
 * return nlobjSearchColumn sorted in either ascending or descending order.
 * 
 * \@method
 * \@memberOf nlobjSearchColumn
 * 
 * \@since 2010.1
 * @param {?} order
 * @return {function(string, string, string): void}
 */
nlobjSearchColumn.prototype.setSort = function(order) {};

/**
 * @param {string} label
 * @return {!nlobjSearchColumn}
 */
nlobjSearchColumn.prototype.setLabel = function(label) {};
/**
 * @record
 * @struct
 */
function nlobjSearchResult() {}

/* TODO: ConstructSignature:  */

/**
 * return the internalId for the record returned in this row.
 * \@method
 * \@memberOf nlobjSearchResult
 * @return {?}
 */
nlobjSearchResult.prototype.getId = function() {};

/**
 * return the recordtype for the record returned in this row.
 * \@method
 * \@memberOf nlobjSearchResult
 * @return {string}
 */
nlobjSearchResult.prototype.getRecordType = function() {};

/**
 * return the value for a return column specified by name, join ID, and summary type.
 * 
 * \@method
 * \@memberOf nlobjSearchResult
 * 
 * \@since 2008.1
 * @param {string} name
 * @param {string} join
 * @param {string} summary
 * @return {string}
 */
nlobjSearchResult.prototype.getValue = function(name, join, summary) {};

/**
 * return the text value of this return column if it's a select field.
 * 
 * \@method
 * \@memberOf nlobjSearchResult
 * 
 * \@since 2008.1
 * @param {string} name
 * @param {string} join
 * @param {string} summary
 * @return {string}
 */
nlobjSearchResult.prototype.getText = function(name, join, summary) {};

/**
 * return an array of all nlobjSearchColumn objects returned in this search.
 * 
 * \@method
 * \@memberOf nlobjSearchResult
 * 
 * \@since 2009.2
 * @return {void}
 */
nlobjSearchResult.prototype.getAllColumns = function() {};
/**
 * @record
 * @struct
 */
function nlobjContext() {}

/* TODO: ConstructSignature:  */

/**
 * return the name of the current user.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {string}
 */
nlobjContext.prototype.getName = function() {};

/**
 * return the internalId of the current user.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {string}
 */
nlobjContext.prototype.getUser = function() {};

/**
 * return the internalId of the current user's role.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {string}
 */
nlobjContext.prototype.getRole = function() {};

/**
 * return the script ID of the current user's role.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjContext.prototype.getRoleId = function() {};

/**
 * return the internalId of the current user's center type.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjContext.prototype.getRoleCenter = function() {};

/**
 * return the email address of the current user.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {string}
 */
nlobjContext.prototype.getEmail = function() {};

/**
 * return the internal ID of the contact logged in on behalf of a customer, vendor, or partner. It returns -1 for non-contact logins
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.1
 * @return {?}
 */
nlobjContext.prototype.getContact = function() {};

/**
 * return the account ID of the current user.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {string}
 */
nlobjContext.prototype.getCompany = function() {};

/**
 * return the internalId of the current user's department.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {?}
 */
nlobjContext.prototype.getDepartment = function() {};

/**
 * return the internalId of the current user's location.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {?}
 */
nlobjContext.prototype.getLocation = function() {};

/**
 * return the internalId of the current user's subsidiary.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {?}
 */
nlobjContext.prototype.getSubsidiary = function() {};

/**
 * return the execution context for this script: webServices|csvImport|client|userInterface|scheduledScript|portlet|suitelet|debugger|custommassupdate
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {string}
 */
nlobjContext.prototype.getExecutionContext = function() {};

/**
 * return the amount of usage units remaining for this script.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2007.0
 * @return {?}
 */
nlobjContext.prototype.getRemainingUsage = function() {};

/**
 * return true if feature is enabled, false otherwise
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {boolean}
 */
nlobjContext.prototype.getFeature = function(name) {};

/**
 * return current user's permission level (0-4) for this permission
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {?}
 */
nlobjContext.prototype.getPermission = function(name) {};

/**
 * return system or script preference selection for current user
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {string}
 */
nlobjContext.prototype.getPreference = function(name) {};

/**
 * return value of session object set by script
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {string}
 */
nlobjContext.prototype.getSessionObject = function(name) {};

/**
 * set the value of a session object using a key.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {string} value
 * @return {?}
 */
nlobjContext.prototype.setSessionObject = function(name, value) {};

/**
 * return an array containing the names of all keys used to set session objects
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @return {void}
 */
nlobjContext.prototype.getAllSessionObjects = function() {};

/**
 * return the NetSuite version for the current account
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjContext.prototype.getVersion = function() {};

/**
 * return the environment that the script is executing in: SANDBOX, PRODUCTION, BETA, INTERNAL
 * \@since 2008.2
 * @return {string}
 */
nlobjContext.prototype.getEnvironment = function() {};

/**
 * return the logging level for the current script execution. Not supported in CLIENT scripts
 * \@since 2008.2
 * @return {void}
 */
nlobjContext.prototype.getLogLevel = function() {};

/**
 * return the script ID for the current script
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjContext.prototype.getScriptId = function() {};

/**
 * return the deployment ID for the current script
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjContext.prototype.getDeploymentId = function() {};

/**
 * return the % complete specified for the current scheduled script execution
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @return {?}
 */
nlobjContext.prototype.getPercentComplete = function() {};

/**
 * set the % complete for the current scheduled script execution
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2009.2
 * @param {?} pct
 * @return {?}
 */
nlobjContext.prototype.setPercentComplete = function(pct) {};

/**
 * return a system/script setting. Types are SCRIPT, SESSION, FEATURE, PERMISSION
 * 
 * \@since 2007.0
 * @deprecated
 * @param {string} type
 * @param {string} name
 * @return {void}
 */
nlobjContext.prototype.getSetting = function(type, name) {};

/**
 * set a system/script setting. Only supported type is SESSION
 * 
 * \@since 2007.0
 * @deprecated
 * @param {string} type
 * @param {string} name
 * @param {string} value
 * @return {void}
 */
nlobjContext.prototype.setSetting = function(type, name, value) {};

/**
 * return an Object containing name/value pairs of color groups to their corresponding RGB hex color based on the currenly logged in user's color them preferences.
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2010.1
 * @return {?}
 */
nlobjContext.prototype.getColorPreferences = function() {};

/**
 * return the runtime version of SuiteScript, could be 1.0 or 2.0
 * 
 * \@method
 * \@memberOf nlobjContext
 * 
 * \@since 2014.1
 * @return {?}
 */
nlobjContext.prototype.getRuntimeVersion = function() {};
/**
 * @record
 * @struct
 */
function nlobjError() {}

/* TODO: ConstructSignature:  */

/**
 * return the error db ID for this error (if it was an unhandled unexpected error).
 * 
 * \@method
 * \@memberOf nlobjError
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjError.prototype.getId = function() {};

/**
 * return the error code for this system or user-defined error.
 * 
 * \@method
 * \@memberOf nlobjError
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjError.prototype.getCode = function() {};

/**
 * return the error description for this error.
 * 
 * \@method
 * \@memberOf nlobjError
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjError.prototype.getDetails = function() {};

/**
 * return a stacktrace containing the location of the error.
 * 
 * \@method
 * \@memberOf nlobjError
 * 
 * \@since 2008.2
 * @return {void}
 */
nlobjError.prototype.getStackTrace = function() {};

/**
 * return the userevent script name where this error was thrown.
 * 
 * \@method
 * \@memberOf nlobjError
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjError.prototype.getUserEvent = function() {};

/**
 * return the internalid of the record if this error was thrown in an aftersubmit script.
 * 
 * \@method
 * \@memberOf nlobjError
 * 
 * \@since 2008.2
 * @return {?}
 */
nlobjError.prototype.getInternalId = function() {};
/**
 * @record
 * @struct
 */
function nlobjServerResponse() {}

/* TODO: ConstructSignature:  */

/**
 * return the Content-Type header in response
 * 
 * \@method
 * \@memberOf nlobjServerResponse
 * 
 * \@since 2008.1
 * @return {string}
 */
nlobjServerResponse.prototype.getContentType = function() {};

/**
 * return the value of a header returned.
 * 
 * \@method
 * \@memberOf nlobjServerResponse
 * 
 * \@since 2008.1
 * @param {string} name
 * @return {string}
 */
nlobjServerResponse.prototype.getHeader = function(name) {};

/**
 * return all the values of a header returned.
 * 
 * \@method
 * \@memberOf nlobjServerResponse
 * 
 * \@since 2008.1
 * @param {string} name
 * @return {void}
 */
nlobjServerResponse.prototype.getHeaders = function(name) {};

/**
 * return an Array of all headers returned.
 * 
 * \@method
 * \@memberOf nlobjServerResponse
 * 
 * \@since 2008.1
 * @return {void}
 */
nlobjServerResponse.prototype.getAllHeaders = function() {};

/**
 * return the response code returned.
 * 
 * \@method
 * \@memberOf nlobjServerResponse
 * 
 * \@since 2008.1
 * @return {string}
 */
nlobjServerResponse.prototype.getCode = function() {};

/**
 * return the response body returned.
 * 
 * \@method
 * \@memberOf nlobjServerResponse
 * 
 * \@since 2008.1
 * @return {?}
 */
nlobjServerResponse.prototype.getBody = function() {};

/**
 * return the nlobjError thrown via a client call to nlapiRequestURL.
 * 
 * \@method
 * \@memberOf nlobjServerResponse
 * 
 * \@since 2008.1
 * @return {function(): void}
 */
nlobjServerResponse.prototype.getError = function() {};
/**
 * @record
 * @struct
 */
function nlobjResponse() {}

/* TODO: ConstructSignature:  */

/**
 * @return {?}
 */
nlobjResponse.prototype.getBody = function() {};

/**
 * add a value for a response header.
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} value
 * @return {?}
 */
nlobjResponse.prototype.addHeader = function(name, value) {};

/**
 * set the value of a response header.
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} value
 * @return {?}
 */
nlobjResponse.prototype.setHeader = function(name, value) {};

/**
 * return the value of a response header.
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @return {string}
 */
nlobjResponse.prototype.getHeader = function() {};

/**
 * return an Array of all response header values for a header
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {void}
 */
nlobjResponse.prototype.getHeaders = function(name) {};

/**
 * return an Array of all response headers
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @return {?}
 */
nlobjResponse.prototype.getAllHeaders = function() {};

/**
 * suppress caching for this response.
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2009.1
 * @return {?}
 */
nlobjResponse.prototype.sendNoCache = function() {};

/**
 * sets the content type for the response (and an optional filename for binary output).
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {string=} name
 * @param {string=} disposition
 * @return {void}
 */
nlobjResponse.prototype.setContentType = function(type, name, disposition) {};

/**
 * sets the redirect URL for the response. all URLs must be internal unless the Suitelet is being executed in an "Available without Login" context
 *  at which point it can use type "external" to specify an external url via the subtype arg
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {string} subtype
 * @param {(string|number)=} id
 * @param {boolean=} pagemode
 * @param {?=} parameters
 * @return {?}
 */
nlobjResponse.prototype.sendRedirect = function(type, subtype, id, pagemode, parameters) {};

/**
 * write information (text/xml/html) to the response.
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {string} output
 * @return {?}
 */
nlobjResponse.prototype.write = function(output) {};

/**
 * write line information (text/xml/html) to the response.
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {string} output
 * @return {?}
 */
nlobjResponse.prototype.writeLine = function(output) {};

/**
 * write a UI object page.
 * 
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2008.2
 * @param {?} pageobject
 * @return {?}
 */
nlobjResponse.prototype.writePage = function(pageobject) {};

/**
 * sets the character encoding for the response.
 * \@method
 * \@memberOf nlobjResponse
 * 
 * \@since 2012.2
 * @param {string} encoding
 * @return {?}
 */
nlobjResponse.prototype.setEncoding = function(encoding) {};

/**
 * @return {string}
 */
nlobjResponse.prototype.getCode = function() {};
/**
 * @record
 * @struct
 */
function nlobjRequest() {}

/* TODO: ConstructSignature:  */

/**
 * return the value of a request parameter.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {string}
 */
nlobjRequest.prototype.getParameter = function(name) {};

/**
 * return the values of a request parameter as an Array.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {void}
 */
nlobjRequest.prototype.getParameterValues = function(name) {};

/**
 * return an Object containing all the request parameters and their values.
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2008.2
 * @return {?}
 */
nlobjRequest.prototype.getAllParameters = function() {};

/**
 * return the value of a sublist value.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2008.2
 * @param {string} group
 * @param {string} name
 * @param {?} line
 * @return {string}
 */
nlobjRequest.prototype.getLineItemValue = function(group, name, line) {};

/**
 * return the number of lines in a sublist.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2008.2
 * @param {string} group
 * @return {(string|number)}
 */
nlobjRequest.prototype.getLineItemCount = function(group) {};

/**
 * return the value of a request header.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {string}
 */
nlobjRequest.prototype.getHeader = function(name) {};

/**
 * return an Object containing all the request headers and their values.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2008.2
 * @return {?}
 */
nlobjRequest.prototype.getAllHeaders = function() {};

/**
 * return the value of an uploaded file.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2009.1
 * @param {string} name
 * @return {!nlobjFile}
 */
nlobjRequest.prototype.getFile = function(name) {};

/**
 * return an Object containing field names to file objects for all uploaded files.
 * 
 * \@method
 * \@memberOf nlobjRequest
 * 
 * \@since 2009.1
 * @return {?}
 */
nlobjRequest.prototype.getAllFiles = function() {};

/**
 * return the body of the POST request
 * 
 * \@method
 * \@memberOf nlobjRequest
 * \@since 2008.1
 * @return {?}
 */
nlobjRequest.prototype.getBody = function() {};

/**
 * return the URL of the request
 * 
 * \@method
 * \@memberOf nlobjRequest
 * \@since 2008.1
 * @return {string}
 */
nlobjRequest.prototype.getURL = function() {};

/**
 * return the METHOD of the request
 * 
 * \@method
 * \@memberOf nlobjRequest
 * \@since 2008.1
 * @return {string}
 */
nlobjRequest.prototype.getMethod = function() {};

/* TODO: ConstructSignature:  */

/**
 * set the portlet title.
 * 
 * \@since 2008.2
 * @param {string} title
 * @return {void}
 */
nlobjPortlet.prototype.setTitle = function(title) {};

/**
 * set the entire contents of the HTML portlet (will be placed inside a <TD>...</TD>).
 * 
 * \@since 2008.2
 * @param {string} html
 * @return {void}
 */
nlobjPortlet.prototype.setHtml = function(html) {};

/**
 * add a column (nlobjColumn) to this LIST portlet and return it.
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} type
 * @param {string} label
 * @param {string=} align
 * @return {void}
 */
nlobjPortlet.prototype.addColumn = function(name, type, label, align) {};

/**
 * add an Edit column (nlobjColumn) to the left of the column specified (supported on LIST portlets only).
 * 
 * 
 * \@since 2008.2
 * @param {function(): void} column
 * @param {boolean} showView
 * @param {string=} showHref
 * @return {function(): void}
 */
nlobjPortlet.prototype.addEditColumn = function(column, showView, showHref) {};

/**
 * add a row (nlobjSearchResult or Array of name-value pairs) to this LIST portlet.
 * 
 * \@since 2008.2
 * @param {?} row
 * @return {void}
 */
nlobjPortlet.prototype.addRow = function(row) {};

/**
 * add multiple rows (Array of nlobjSearchResults or name-value pair Arrays) to this LIST portlet.
 * 
 * \@since 2008.2
 * @param {?} rows
 * @return {void}
 */
nlobjPortlet.prototype.addRows = function(rows) {};

/**
 * add a field (nlobjField) to this FORM portlet and return it.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} type
 * @param {string=} label
 * @param {?=} source
 * @return {function(): void}
 */
nlobjPortlet.prototype.addField = function(name, type, label, source) {};

/**
 * add a FORM submit button to this FORM portlet.
 * 
 * \@since 2008.2
 * @param {string} url
 * @param {string=} label
 * @return {void}
 */
nlobjPortlet.prototype.setSubmitButton = function(url, label) {};

/**
 * add a line (containing text or simple HTML) with optional indenting and URL to this LINKS portlet.
 * 
 * \@since 2008.2
 * @param {string} text
 * @param {string=} url
 * @param {?=} indent
 * @return {void}
 */
nlobjPortlet.prototype.addLine = function(text, url, indent) {};
/**
 * @record
 * @struct
 */
function nlobjList() {}

/* TODO: ConstructSignature:  */

/**
 * set the page title.
 * 
 * \@since 2008.2
 * @param {string} title
 * @return {void}
 */
nlobjList.prototype.setTitle = function(title) {};

/**
 * set the global style for this list: grid|report|plain|normal.
 * 
 * \@since 2008.2
 * @param {string} style
 * @return {void}
 */
nlobjList.prototype.setStyle = function(style) {};

/**
 * set the Client SuiteScript used for this page.
 * 
 * \@since 2008.2
 * @param {?} script
 * @return {void}
 */
nlobjList.prototype.setScript = function(script) {};

/**
 * add a column (nlobjColumn) to this list and return it.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} type
 * @param {string} label
 * @param {string=} align
 * @return {function(): void}
 */
nlobjList.prototype.addColumn = function(name, type, label, align) {};

/**
 * add an Edit column (nlobjColumn) to the left of the column specified.
 * 
 * 
 * \@since 2008.2
 * @param {function(): void} column
 * @param {boolean} showView
 * @param {string=} showHref
 * @return {function(): void}
 */
nlobjList.prototype.addEditColumn = function(column, showView, showHref) {};

/**
 * add a row (Array of name-value pairs or nlobjSearchResult) to this portlet.
 * 
 * \@since 2008.2
 * @param {?} row
 * @return {void}
 */
nlobjList.prototype.addRow = function(row) {};

/**
 * add multiple rows (Array of nlobjSearchResults or name-value pair Arrays) to this portlet.
 * 
 * \@since 2008.2
 * @param {?} rows
 * @return {void}
 */
nlobjList.prototype.addRows = function(rows) {};

/**
 * add a button (nlobjButton) to the footer of this page.
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} label
 * @param {string} script
 * @return {void}
 */
nlobjList.prototype.addButton = function(name, label, script) {};

/**
 * add a navigation cross-link to the page.
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {string} title
 * @param {string} url
 * @return {void}
 */
nlobjList.prototype.addPageLink = function(type, title, url) {};

/* TODO: ConstructSignature:  */

/**
 * set the page title.
 * 
 * \@since 2008.2
 * @param {string} title
 * @return {void}
 */
nlobjForm.prototype.setTitle = function(title) {};

/**
 * set additional title Html. INTERNAL ONLY
 * 
 * \@since 2008.2
 * @param {?} html
 * @return {void}
 */
nlobjForm.prototype.addTitleHtml = function(html) {};

/**
 * set the Client Script definition used for this page.
 * 
 * \@since 2008.2
 * @param {?} script
 * @return {void}
 */
nlobjForm.prototype.setScript = function(script) {};

/**
 * set the values for all the fields on this form.
 * 
 * \@since 2008.2
 * @param {?} values
 * @return {void}
 */
nlobjForm.prototype.setFieldValues = function(values) {};

/**
 * add a navigation cross-link to the page.
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {string} title
 * @param {string} url
 * @return {void}
 */
nlobjForm.prototype.addPageLink = function(type, title, url) {};

/**
 * add a button to this form.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} label
 * @param {string=} script
 * @return {!nlobjButton}
 */
nlobjForm.prototype.addButton = function(name, label, script) {};

/**
 * get a button from this form by name.
 * 
 * \@method
 * \@memberOf nlobjForm
 * 
 * \@since 2009.2                                                                           add
 * @param {string} name
 * @return {!nlobjButton}
 */
nlobjForm.prototype.getButton = function(name) {};

/**
 * add a reset button to this form.
 * 
 * 
 * \@since 2008.2
 * @param {string=} label
 * @return {!nlobjButton}
 */
nlobjForm.prototype.addResetButton = function(label) {};

/**
 * add a submit button to this form.
 * 
 * 
 * \@since 2008.2
 * @param {string=} label
 * @return {!nlobjButton}
 */
nlobjForm.prototype.addSubmitButton = function(label) {};

/**
 * add a tab (nlobjTab) to this form and return it.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} label
 * @return {!nlobjTab}
 */
nlobjForm.prototype.addTab = function(name, label) {};

/**
 * add a field (nlobjField) to this form and return it.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} type
 * @param {string=} label
 * @param {?=} sourceOrRadio
 * @param {string=} tab
 * @return {!nlobjField}
 */
nlobjForm.prototype.addField = function(name, type, label, sourceOrRadio, tab) {};

/**
 *
 * @param {string} name
 * @param {string} label
 * @param {string=} website
 * @param {string=} scriptId
 * @param {string=} value
 * @param {boolean=} entityMatch
 * @param {string=} tab
 * @return {!nlobjField}
 */
nlobjForm.prototype.addCredentialField = function(name, label, website, scriptId, value, entityMatch, tab) {};

/**
 * add a subtab (nlobjTab) to this form and return it.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} label
 * @param {string=} tab
 * @return {!nlobjTab}
 */
nlobjForm.prototype.addSubTab = function(name, label, tab) {};

/**
 * add a sublist (nlobjSubList) to this form and return it.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} type
 * @param {string} label
 * @param {string=} tab
 * @return {!nlobjSubList}
 */
nlobjForm.prototype.addSubList = function(name, type, label, tab) {};

/**
 * insert a tab (nlobjTab) before another tab (name).
 * 
 * 
 * \@since 2008.2
 * @param {function(): void} tab
 * @param {string} nexttab
 * @return {!nlobjTab}
 */
nlobjForm.prototype.insertTab = function(tab, nexttab) {};

/**
 * insert a field (nlobjField) before another field (name).
 * 
 * 
 * \@since 2008.2
 * @param {function(): void} field
 * @param {string} nextfld
 * @return {!nlobjField}
 */
nlobjForm.prototype.insertField = function(field, nextfld) {};

/**
 * insert a subtab (nlobjTab) before another subtab or sublist (name).
 * 
 * 
 * \@since 2008.2
 * @param {function(): void} subtab
 * @param {string} nextsubtab
 * @return {!nlobjTab}
 */
nlobjForm.prototype.insertSubTab = function(subtab, nextsubtab) {};

/**
 * insert a sublist (nlobjSubList) before another subtab or sublist (name).
 * 
 * 
 * \@since 2008.2
 * @param {function(): void} sublist
 * @param {string} nextsublist
 * @return {!nlobjSubList}
 */
nlobjForm.prototype.insertSubList = function(sublist, nextsublist) {};

/**
 * return a tab (nlobjTab) on this form.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {!nlobjTab}
 */
nlobjForm.prototype.getTab = function(name) {};

/**
 * return a field (nlobjField) on this form.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string=} radio
 * @return {!nlobjField}
 */
nlobjForm.prototype.getField = function(name, radio) {};

/**
 * return a subtab (nlobjTab) on this form.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {!nlobjTab}
 */
nlobjForm.prototype.getSubTab = function(name) {};

/**
 * return a sublist (nlobjSubList) on this form.
 * 
 * 
 * \@since 2008.2
 * @param {string} name
 * @return {!nlobjSubList}
 */
nlobjForm.prototype.getSubList = function(name) {};

/**
 * add a field group to the form.
 * \@method
 * \@memberOf nlobjForm
 * 
 * \@since 2011.1
 * @param {string} name
 * @param {string} label
 * @param {?} tab 
 * 
 * @return {!nlobjFieldGroup}
 */
nlobjForm.prototype.addFieldGroup = function(name, label, tab) {};

/**
 * get a list of all tabs.
 * \@method
 * \@memberOf nlobjForm
 * 
 * \@since 2012.2
 * @return {!Array<!nlobjTab>} an array with names of all tabs
 * 
 */
nlobjForm.prototype.getTabs = function() {};

/* TODO: ConstructSignature:  */

/**
 * set the page title.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} title
 * @return {?}
 */
nlobjAssistant.prototype.setTitle = function(title) {};

/**
 * set the script ID for Client Script used for this form.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {?} script
 * @return {?}
 */
nlobjAssistant.prototype.setScript = function(script) {};

/**
 * set the splash screen used for this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} title
 * @param {string} text1
 * @param {string=} text2
 * @return {?}
 */
nlobjAssistant.prototype.setSplash = function(title, text1, text2) {};

/**
 * show/hide shortcut link. Always hidden on external pages
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {boolean} show
 * @return {?}
 */
nlobjAssistant.prototype.setShortcut = function(show) {};

/**
 * set the values for all the fields on this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {?} values
 * @return {?}
 */
nlobjAssistant.prototype.setFieldValues = function(values) {};

/**
 * if ordered, steps are show on left and must be completed sequentially, otherwise steps are shown on top and can be done in any order
 *                            will be allowed to navigate across steps/pages in any order they choose.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {boolean} ordered
 * @return {?}
 */
nlobjAssistant.prototype.setOrdered = function(ordered) {};

/**
 * if numbered, step numbers are displayed next to the step's label in the navigation area
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {boolean} numbered
 * @return {?}
 */
nlobjAssistant.prototype.setNumbered = function(numbered) {};

/**
 * return true if all the steps have been completed.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {boolean}
 */
nlobjAssistant.prototype.isFinished = function() {};

/**
 * mark assistant page as completed and optionally set the rich text to display on completed page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} html
 * @return {?}
 */
nlobjAssistant.prototype.setFinished = function(html) {};

/**
 * return true if the assistant has an error message to display for the current step.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {boolean}
 */
nlobjAssistant.prototype.hasError = function() {};

/**
 * set the error message for the currrent step.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} html
 * @return {?}
 */
nlobjAssistant.prototype.setError = function(html) {};

/**
 * mark a step as current. It will be highlighted accordingly when the page is displayed
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {function(): void} step
 * @return {?}
 */
nlobjAssistant.prototype.setCurrentStep = function(step) {};

/**
 * add a step to the assistant.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {string} label
 * @return {function(): void}
 */
nlobjAssistant.prototype.addStep = function(name, label) {};

/**
 * add a field to this page and return it.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {string} type
 * @param {string=} label
 * @param {?=} source
 * @param {string=} group
 * @return {function(): void}
 */
nlobjAssistant.prototype.addField = function(name, type, label, source, group) {};

/**
 * add a sublist to this page and return it. For now only sublists of type inlineeditor are supported
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {string} type
 * @param {string} label
 * @return {function(): void}
 */
nlobjAssistant.prototype.addSubList = function(name, type, label) {};

/**
 * add a field group to the page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @param {string} label
 * @return {function(): void}
 */
nlobjAssistant.prototype.addFieldGroup = function(name, label) {};

/**
 * return an assistant step on this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {function(): void}
 */
nlobjAssistant.prototype.getStep = function(name) {};

/**
 * return a field on this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {function(): void}
 */
nlobjAssistant.prototype.getField = function(name) {};

/**
 * return a sublist on this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {function(): void}
 */
nlobjAssistant.prototype.getSubList = function(name) {};

/**
 * return a field group on this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {function(): void}
 */
nlobjAssistant.prototype.getFieldGroup = function(name) {};

/**
 * return an array of all the assistant steps for this assistant.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {void}
 */
nlobjAssistant.prototype.getAllSteps = function() {};

/**
 * return an array of the names of all fields on this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {!Array<string>}
 */
nlobjAssistant.prototype.getAllFields = function() {};

/**
 *  return an array of the names of all sublists on this page .
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {void}
 */
nlobjAssistant.prototype.getAllSubLists = function() {};

/**
 * return an array of the names of all field groups on this page.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {void}
 */
nlobjAssistant.prototype.getAllFieldGroups = function() {};

/**
 * return the last submitted action by the user: next|back|cancel|finish|jump
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjAssistant.prototype.getLastAction = function() {};

/**
 * return step from which the last submitted action came from
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {function(): void}
 */
nlobjAssistant.prototype.getLastStep = function() {};

/**
 * return the next logical step corresponding to the user's last submitted action. You should only call this after
 * you have successfully captured all the information from the last step and are ready to move on to the next step. You
 * would use the return value to set the current step prior to continuing.
 * 
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {function(): void}
 */
nlobjAssistant.prototype.getNextStep = function() {};

/**
 * return current step set via nlobjAssistant.setCurrentStep(step)
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {function(): void}
 */
nlobjAssistant.prototype.getCurrentStep = function() {};

/**
 * return the total number of steps in the assistant
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @return {?}
 */
nlobjAssistant.prototype.getStepCount = function() {};

/**
 * redirect the user following a user submit operation. Use this to automatically redirect the user to the next logical step.
 * 
 * \@method
 * \@memberOf nlobjAssistant
 * 
 * \@since 2009.2
 * @param {function(): void} response
 * @return {?}
 */
nlobjAssistant.prototype.sendRedirect = function(response) {};
/**
 * @record
 * @struct
 */
function nlobjField() {}

/* TODO: ConstructSignature:  */

/**
 *  return field name.
 *  \@return {string}
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjField.prototype.getName = function() {};

/**
 * return field label.
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjField.prototype.getLabel = function() {};

/**
 * return field type.
 *  \@return {string}
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjField.prototype.getType = function() {};

/**
 * return true if field is hidden.
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @return {boolean}
 */
nlobjField.prototype.isHidden = function() {};

/**
 * return true if field is mandatory.
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @return {boolean}
 */
nlobjField.prototype.isMandatory = function() {};

/**
 * return true if field is disabled.
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @return {boolean}
 */
nlobjField.prototype.isDisabled = function() {};

/**
 * set the label for this field.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {string} label
 * @return {function(): void}
 */
nlobjField.prototype.setLabel = function(label) {};

/**
 * set the alias used to set the value for this field. Defaults to field name.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {string} alias
 * @return {function(): void}
 */
nlobjField.prototype.setAlias = function(alias) {};

/**
 * set the default value for this field.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {string} value
 * @return {function(): void}
 */
nlobjField.prototype.setDefaultValue = function(value) {};

/**
 * Disable field via field metadata.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @param {boolean} disabled
 * @return {function(): void}
 */
nlobjField.prototype.setDisabled = function(disabled) {};

/**
 * make this field mandatory.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {boolean} mandatory
 * @return {function(): void}
 */
nlobjField.prototype.setMandatory = function(mandatory) {};

/**
 * set the maxlength for this field (only valid for certain field types).
 *  This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {?} maxlength
 * @return {function(): void}
 */
nlobjField.prototype.setMaxLength = function(maxlength) {};

/**
 * set the display type for this field.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {string} type
 * @return {function(): void}
 */
nlobjField.prototype.setDisplayType = function(type) {};

/**
 * set the break type (startcol|startrow|none) for this field. startrow is only used for fields with a layout type of outside
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @param {string} breaktype
 * @return {function(): void}
 */
nlobjField.prototype.setBreakType = function(breaktype) {};

/**
 * set the layout type and optionally the break type.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {string} type
 * @param {string=} breaktype
 * @return {function(): void}
 */
nlobjField.prototype.setLayoutType = function(type, breaktype) {};

/**
 * set the text that gets displayed in lieu of the field value for URL fields.
 * 
 * 
 * \@since 2008.2
 * @param {string} text
 * @return {function(): void}
 */
nlobjField.prototype.setLinkText = function(text) {};

/**
 * set the width and height for this field.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {?} width
 * @param {?} height
 * @return {function(): void}
 */
nlobjField.prototype.setDisplaySize = function(width, height) {};

/**
 * set the amount of emppty vertical space (rows) between this field and the previous field.
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@since 2008.2
 * @param {?} padding
 * @return {function(): void}
 */
nlobjField.prototype.setPadding = function(padding) {};

/**
 * set help text for this field. If inline is set on assistant pages, help is displayed inline below field
 * This method is only supported on scripted fields via the UI Object API
 * 
 * 
 * \@method
 * \@memberOf nlobjField
 * 
 * \@since 2009.2
 * @param {string} help
 * @param {string=} inline
 * @return {function(): void}
 */
nlobjField.prototype.setHelpText = function(help, inline) {};

/**
 * add a select option to this field (valid for select/multiselect fields).
 * This method is only supported on scripted fields via the UI Object API
 * 
 * \@since 2008.2
 * @param {string} value
 * @param {string} text
 * @param {boolean=} selected
 * @return {void}
 */
nlobjField.prototype.addSelectOption = function(value, text, selected) {};
/**
 * @record
 * @struct
 */
function nlobjSubList() {}

/* TODO: ConstructSignature:  */

/**
 * set the label for this sublist.
 * This method is only supported on sublists via the UI Object API
 * 
 * \@since 2008.2
 * @param {string} label
 * @return {void}
 */
nlobjSubList.prototype.setLabel = function(label) {};

/**
 * set helper text for this sublist.
 * This method is only supported on sublists via the UI Object API
 * 
 * \@since 2008.2
 * @param {string} help
 * @return {void}
 */
nlobjSubList.prototype.setHelpText = function(help) {};

/**
 * set the displaytype for this sublist: hidden|normal.
 * This method is only supported on scripted or staticlist sublists via the UI Object API
 * 
 * \@since 2008.2
 * @param {string} type
 * @return {void}
 */
nlobjSubList.prototype.setDisplayType = function(type) {};

/**
 * set the value of a cell in this sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjSubList
 * 
 * \@since 2008.2
 * @param {string} field
 * @param {?} line
 * @param {string} value
 * @return {void}
 */
nlobjSubList.prototype.setLineItemValue = function(field, line, value) {};

/**
 * set the value of a matrix cell in this sublist.
 * 
 * \@method
 * \@memberOf nlobjSubList
 * 
 * \@since 2009.2
 * @param {string} field
 * @param {?} line
 * @param {?} column
 * @param {string} value
 * @return {?}
 */
nlobjSubList.prototype.setLineItemMatrixValue = function(field, line, column, value) {};

/**
 * set values for multiple lines (Array of nlobjSearchResults or name-value pair Arrays) in this sublist.
 * Note that this method is only supported on scripted sublists via the UI Object API
 * 
 * \@since 2008.2
 * @param {?} values
 * @return {void}
 */
nlobjSubList.prototype.setLineItemValues = function(values) {};

/**
 * Return the number of lines in a sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjSubList
 * \@since 2010.1
 * @param {string} group
 * @return {(string|number)}
 */
nlobjSubList.prototype.getLineItemCount = function(group) {};

/**
 * add a field (column) to this sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjSubList
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} type
 * @param {string} label
 * @param {?} source
 * @return {function(): void}
 */
nlobjSubList.prototype.addField = function(name, type, label, source) {};

/**
 * designate a field on sublist that must be unique across all lines (only supported on sublists of type inlineeditor, editor).
 * 
 * \@method
 * \@memberOf nlobjSubList
 * 
 * \@since 2009.2
 * @param {string} fldnam
 * @return {function(): void}
 */
nlobjSubList.prototype.setUniqueField = function(fldnam) {};

/**
 * add a button to this sublist.
 * 
 * 
 * \@method
 * \@memberOf nlobjSubList
 * 
 * \@since 2008.2
 * @param {string} name
 * @param {string} label
 * @param {string} script
 * @return {function(): void}
 */
nlobjSubList.prototype.addButton = function(name, label, script) {};

/**
 * add "Refresh" button to sublists of type "staticlist" to support manual refreshing of the sublist (without entire page reloads) if it's contents are very volatile
 * 
 * \@method
 * \@memberOf nlobjSubList
 * 
 * \@since 2009.2
 * @return {function(): void}
 */
nlobjSubList.prototype.addRefreshButton = function() {};

/**
 * add "Mark All" and "Unmark All" buttons to this sublist of type "list".
 * 
 * \@method
 * \@memberOf nlobjSubList
 * 
 * \@since 2008.2
 * @return {void}
 */
nlobjSubList.prototype.addMarkAllButtons = function() {};
/**
 * @record
 * @struct
 */
function nlobjColumn() {}

/* TODO: ConstructSignature:  */

/**
 * set the header name for this column.
 * 
 * 
 * \@method
 * \@memberOf nlobjColumn
 * 
 * \@since 2008.2
 * @param {string} label
 * @return {void}
 */
nlobjColumn.prototype.setLabel = function(label) {};

/**
 * set the base URL (optionally defined per row) for this column.
 * 
 * 
 * \@method
 * \@memberOf nlobjColumn
 * 
 * \@since 2008.2
 * @param {string} value
 * @param {boolean} perRow
 * @return {void}
 */
nlobjColumn.prototype.setURL = function(value, perRow) {};

/**
 * add a URL parameter (optionally defined per row) to this column's URL.
 * 
 * 
 * \@method
 * \@memberOf nlobjColumn
 * 
 * \@since 2008.2
 * @param {string} param
 * @param {string} value
 * @param {boolean=} perRow
 * @return {void}
 */
nlobjColumn.prototype.addParamToURL = function(param, value, perRow) {};
/**
 * @record
 * @struct
 */
function nlobjTab() {}

/* TODO: ConstructSignature:  */

/**
 * set the label for this tab or subtab.
 * 
 * 
 * \@since 2008.2
 * @param {string} label
 * @return {function(): void}
 */
nlobjTab.prototype.setLabel = function(label) {};

/**
 * set helper text for this tab or subtab.
 * 
 * 
 * \@since 2008.2
 * @param {string} help
 * @return {function(): void}
 */
nlobjTab.prototype.setHelpText = function(help) {};
/**
 * @record
 * @struct
 */
function nlobjAssistantStep() {}

/* TODO: ConstructSignature:  */

/**
 * set the label for this assistant step.
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @param {string} label
 * @return {?}
 */
nlobjAssistantStep.prototype.setLabel = function(label) {};

/**
 * set helper text for this assistant step.
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @param {string} help
 * @return {function(): void}
 */
nlobjAssistantStep.prototype.setHelpText = function(help) {};

/**
 * return the index of this step in the assistant page (1-based)
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @return {?}
 */
nlobjAssistantStep.prototype.getStepNumber = function() {};

/**
 * return the value of a field entered by the user during this step.
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {string}
 */
nlobjAssistantStep.prototype.getFieldValue = function(name) {};

/**
 * return the selected values of a multi-select field as an Array entered by the user during this step.
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @param {string} name
 * @return {!Array<string>}
 */
nlobjAssistantStep.prototype.getFieldValues = function(name) {};

/**
 * return the number of lines previously entered by the user in this step (or -1 if the sublist does not exist).
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @param {string} group
 * @return {?}
 */
nlobjAssistantStep.prototype.getLineItemCount = function(group) {};

/**
 * return the value of a sublist field entered by the user during this step.
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @param {string} group
 * @param {string} name
 * @param {?} line
 * @return {string}
 */
nlobjAssistantStep.prototype.getLineItemValue = function(group, name, line) {};

/**
 * return an array of the names of all fields entered by the user during this step.
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @return {!Array<string>}
 */
nlobjAssistantStep.prototype.getAllFields = function() {};

/**
 * return an array of the names of all sublists entered by the user during this step.
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @return {void}
 */
nlobjAssistantStep.prototype.getAllLineItems = function() {};

/**
 * return an array of the names of all sublist fields entered by the user during this step
 * 
 * \@method
 * \@memberOf nlobjAssistantStep
 * 
 * \@since 2009.2
 * @param {string} group
 * @return {void}
 */
nlobjAssistantStep.prototype.getAllLineItemFields = function(group) {};
/**
 * @record
 * @struct
 */
function nlobjFieldGroup() {}

/* TODO: ConstructSignature:  */

/**
 * set the label for this field group.
 * 
 * \@method
 * \@memberOf nlobjFieldGroup
 * 
 * \@since 2009.2
 * @param {string} label
 * @return {function(): void}
 */
nlobjFieldGroup.prototype.setLabel = function(label) {};

/**
 * set collapsibility property for this field group.
 * 
 * 
 * \@method
 * \@memberOf nlobjFieldGroup
 * 
 * \@since 2009.2
 * @param {boolean} collapsible
 * @param {boolean=} defaultcollapsed
 * @return {function(): void}
 */
nlobjFieldGroup.prototype.setCollapsible = function(collapsible, defaultcollapsed) {};

/**
 * set singleColumn property for this field group.
 * 
 * 
 * \@method
 * \@memberOf nlobjFieldGroup
 * 
 * \@since 2011.1
 * @param {boolean} singleColumn
 * @return {function(): void}
 */
nlobjFieldGroup.prototype.setSingleColumn = function(singleColumn) {};

/**
 * set showBorder property for this field group.
 * 
 * 
 * \@method
 * \@memberOf nlobjFieldGroup
 * 
 * \@since 2011.1
 * @param {boolean} showBorder
 * @return {function(): void}
 */
nlobjFieldGroup.prototype.setShowBorder = function(showBorder) {};
/**
 * @record
 * @struct
 */
function nlobjButton() {}

/* TODO: ConstructSignature:  */

/**
 * set the label for this button.
 * 
 * \@method
 * \@memberOf nlobjButton
 * 
 * \@since 2008.2
 * @param {string} label
 * @return {!nlobjButton}
 */
nlobjButton.prototype.setLabel = function(label) {};

/**
 * disable or enable button.
 * 
 * \@method
 * \@memberOf nlobjButton
 * 
 * \@since 2008.2
 * @param {boolean} disabled
 * @return {!nlobjButton}
 */
nlobjButton.prototype.setDisabled = function(disabled) {};

/**
 * @param {boolean} visible
 * @return {!nlobjButton}
 */
nlobjButton.prototype.setVisible = function(visible) {};
/**
 * @record
 * @struct
 */
function nlobjSelectOption() {}

/* TODO: ConstructSignature:  */

/**
 * return internal ID for select option
 * 
 * \@method
 * \@memberOf nlobjSelectOption
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjSelectOption.prototype.getId = function() {};

/**
 * return display value for select option.
 * 
 * \@method
 * \@memberOf nlobjSelectOption
 * 
 * \@since 2009.2
 * @return {string}
 */
nlobjSelectOption.prototype.getText = function() {};

/**
 * \@since 2012.2
 * @return {void} nlobjLogin
 * 
 */
function nlapiGetLogin() {}

/**
 *
 * \@since 2013.1
 * @param {?} jobType
 * @return {?}
 */
function nlapiGetJobManager(jobType) {}
