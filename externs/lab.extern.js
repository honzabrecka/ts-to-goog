/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/lab/index.d.ts:

/**
 * The test script.
 * @param {?=} options
 * @return {?}
 */
function script(options) {}
 /** @type {?} */
var assertions;
/**
 * @record
 * @struct
 */
function Lab() {}

/**
 * Organise tests into an experiment
 * Organise tests into an experiment with options
 * @param {string} desc
 * @param {?} cb_or_options
 * @param {?=} cb
 * @return {void}
 */
Lab.prototype.experiment = function(desc, cb_or_options, cb) {};

/**
 * Create a test suite
 * Create a test suite with options
 * @param {string} desc
 * @param {?} cb_or_options
 * @param {?=} cb
 * @return {void}
 */
Lab.prototype.describe = function(desc, cb_or_options, cb) {};

/**
 * Create a test suite
 * Create a test suite with options
 * @param {string} desc
 * @param {?} cb_or_options
 * @param {?=} cb
 * @return {void}
 */
Lab.prototype.suite = function(desc, cb_or_options, cb) {};

/**
 * The test spec
 * The test spec using a promise
 * The test spec with options
 * The test spec using a promise with options
 * @param {string} desc
 * @param {?} cb_or_promise_or_options
 * @param {?=} cb_or_promise
 * @return {void}
 */
Lab.prototype.test = function(desc, cb_or_promise_or_options, cb_or_promise) {};

/**
 * The test spec
 * The test spec using a promise
 * The test spec with options
 * The test spec using a promise with options
 * @param {string} desc
 * @param {?} cb_or_promise_or_options
 * @param {?=} cb_or_promise
 * @return {void}
 */
Lab.prototype.it = function(desc, cb_or_promise_or_options, cb_or_promise) {};

/**
 * Perform async actions before the test suite
 * Perform async actions before the test suite using a promise
 * Perform async actions before the test suite with options
 * Perform async actions before the test suite with otions, using a promise
 * @param {?} cb_or_promise_or_options
 * @param {?=} cb_or_promise
 * @return {void}
 */
Lab.prototype.before = function(cb_or_promise_or_options, cb_or_promise) {};

/**
 * Perform async actions before each test
 * Perform async actions before each test using a promise
 * Perform async actions before each test with options
 * Perform async actions before each test with options, using a promise
 * @param {?} cb_or_promise_or_options
 * @param {?=} cb_or_promise
 * @return {void}
 */
Lab.prototype.beforeEach = function(cb_or_promise_or_options, cb_or_promise) {};

/**
 * Perform async actions after the test suite
 * Perform async actions after the test suite using a promise
 * Perform async actions after the test suite with options
 * Perform async actions after the test suite with options, using a promise
 * @param {?} cb_or_promise_or_options
 * @param {?=} cb_or_promise
 * @return {void}
 */
Lab.prototype.after = function(cb_or_promise_or_options, cb_or_promise) {};

/**
 * Perform async actions after each test
 * Perform async actions after each test using a promise
 * Perform async actions after each test with options
 * Perform async actions after each test with options, using a promise
 * @param {?} cb_or_promise_or_options
 * @param {?=} cb_or_promise
 * @return {void}
 */
Lab.prototype.afterEach = function(cb_or_promise_or_options, cb_or_promise) {};
/**
 * @record
 * @struct
 */
function ExperimentAlt() {}
 /** @type {?} */
ExperimentAlt.prototype.experiment;
 /** @type {?} */
ExperimentAlt.prototype.suite;
 /** @type {?} */
ExperimentAlt.prototype.describe;
/**
 * @record
 * @struct
 */
function TestAlt() {}
 /** @type {?} */
TestAlt.prototype.test;
 /** @type {?} */
TestAlt.prototype.it;
/**
 * @record
 * @struct
 */
function SkipOnlyExperiment() {}
 /** @type {?} */
SkipOnlyExperiment.prototype.skip;
 /** @type {?} */
SkipOnlyExperiment.prototype.only;
/**
 * @record
 * @struct
 */
function SkipOnlyTest() {}
 /** @type {?} */
SkipOnlyTest.prototype.skip;
 /** @type {?} */
SkipOnlyTest.prototype.only;
/**
 * @record
 * @struct
 */
function ScriptOptions() {}
 /** @type {boolean} */
ScriptOptions.prototype.schedule;
 /** @type {?} */
ScriptOptions.prototype.cli;
/**
 * @record
 * @struct
 */
function ExperimentOptions() {}
 /** @type {number} */
ExperimentOptions.prototype.timeout;
 /** @type {boolean} */
ExperimentOptions.prototype.parallel;
 /** @type {boolean} */
ExperimentOptions.prototype.skip;
 /** @type {boolean} */
ExperimentOptions.prototype.only;
/**
 * @extends {ExperimentOptions}
 * @record
 * @struct
 */
function TestOptions() {}
 /** @type {number} */
TestOptions.prototype.plan;
/**
 * @record
 * @struct
 */
function AsyncOptions() {}
 /** @type {number} */
AsyncOptions.prototype.timeout;
/**
 * @record
 * @struct
 */
function DoneNote() {}
 /** @type {?} */
DoneNote.prototype.note;

/** @typedef {?} */
var EmptyCallback;

/** @typedef {?} */
var DoneFunction;

/** @typedef {?} */
var CleanupFunction;

/** @typedef {?} */
var TestCallback;

/** @typedef {?} */
var TestPromise;

/** @typedef {?} */
var AsyncCallback;

/** @typedef {?} */
var AsyncPromise;

/** @typedef {?} */
var ExperimentArgs;

/** @typedef {?} */
var ExperimentWithOptionsArgs;

/** @typedef {?} */
var TestArgs;

/** @typedef {?} */
var TestWithOptionsArgs;
