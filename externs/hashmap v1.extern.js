/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hashmap v1/index.d.ts:
/**
 * @constructor
 * @struct
 */
function HashMap() {}

/**
 * Return value from hashmap.
 * 
 * @param {KeyType} key Key.
 * @return {ValueType} Value stored under given key.
 */
HashMap.prototype.get = function(key) {};

/**
 * Store value in hashmap.
 * 
 * @param {KeyType} key Key.
 * @param {ValueType} value Value.
 * @return {void}
 */
HashMap.prototype.set = function(key, value) {};

/**
 * Checks if given key exists in hashmap.
 * 
 * @param {KeyType} key Key.
 * @return {boolean} Whether given key exists in hashmap.
 */
HashMap.prototype.has = function(key) {};

/**
 * Removes given key from hashmap.
 * 
 * @param {KeyType} key Key.
 * @return {void}
 */
HashMap.prototype.remove = function(key) {};

/**
 * Returns all contained keys.
 * 
 * @return {!Array<KeyType>} List of keys.
 */
HashMap.prototype.keys = function() {};

/**
 * Returns all container values.
 * 
 * @return {!Array<ValueType>} List of values.
 */
HashMap.prototype.values = function() {};

/**
 * Returns size of hashmap (number of entries).
 * 
 * @return {number} Number of entries in hashmap.
 */
HashMap.prototype.count = function() {};

/**
 * Clears hashmap.
 * @return {void}
 */
HashMap.prototype.clear = function() {};

/**
 * Iterates over hashmap.
 * 
 * @param {function(ValueType, KeyType): void} callback Function to be invoked for every hashmap entry.
 * @return {void}
 */
HashMap.prototype.forEach = function(callback) {};
