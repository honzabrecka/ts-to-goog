/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/milkcocoa/index.d.ts:
/** @const */
var milkcocoa = {};

/**
 * @constructor
 * @struct
 * @param {string} host
 * @param {!Function=} callback
 */
milkcocoa.MilkCocoa = function(host, callback) {};

/**
 * @param {string} path
 * @return {!milkcocoa.DataStore}
 */
milkcocoa.MilkCocoa.prototype.dataStore = function(path) {};

/**
 * @param {string} email
 * @param {string} password
 * @param {!Object=} options
 * @param {function(milkcocoa.MilkCocoa.Error.AddAccount, !milkcocoa.User): void=} callback
 * @return {void}
 */
milkcocoa.MilkCocoa.prototype.addAccount = function(email, password, options, callback) {};

/**
 * @param {string} email
 * @param {string} password
 * @param {function(milkcocoa.MilkCocoa.Error.Login, !milkcocoa.User): void} callback
 * @return {void}
 */
milkcocoa.MilkCocoa.prototype.login = function(email, password, callback) {};

/**
 * @param {function(string): void=} callback
 * @return {void}
 */
milkcocoa.MilkCocoa.prototype.logout = function(callback) {};

/**
 * @param {function(milkcocoa.MilkCocoa.Error.GetCurrentUser, {id: string}): void} callback
 * @return {void}
 */
milkcocoa.MilkCocoa.prototype.getCurrentUser = function(callback) {};
/** @const */
milkcocoa.MilkCocoa.Error = {};

/** @const */
milkcocoa.MilkCocoa.Error.AddAccount = {};
/** @const {number} */
milkcocoa.MilkCocoa.Error.AddAccount.FormatError;
/** @const {number} */
milkcocoa.MilkCocoa.Error.AddAccount.AlreadyExist;

/** @const */
milkcocoa.MilkCocoa.Error.Login = {};
/** @const {number} */
milkcocoa.MilkCocoa.Error.Login.FormatError;
/** @const {number} */
milkcocoa.MilkCocoa.Error.Login.LoginError;
/** @const {number} */
milkcocoa.MilkCocoa.Error.Login.EmailNotVerificated;

/** @const */
milkcocoa.MilkCocoa.Error.GetCurrentUser = {};
/** @const {number} */
milkcocoa.MilkCocoa.Error.GetCurrentUser.NotLoggedIn;
/**
 * @record
 * @struct
 */
milkcocoa.DataStore = function() {};

/**
 * @param {!Object} object
 * @param {function(!milkcocoa.DataStoreCallbackData): void=} callback
 * @return {void}
 */
milkcocoa.DataStore.prototype.push = function(object, callback) {};

/**
 * @param {string} id
 * @param {!Object} data
 * @return {void}
 */
milkcocoa.DataStore.prototype.set = function(id, data) {};

/**
 * @param {string} id
 * @return {void}
 */
milkcocoa.DataStore.prototype.remove = function(id) {};

/**
 * @param {!Object} object
 * @return {void}
 */
milkcocoa.DataStore.prototype.send = function(object) {};

/**
 * @param {string} event
 * @param {function(!milkcocoa.DataStoreCallbackData): void} callback
 * @return {void}
 */
milkcocoa.DataStore.prototype.on = function(event, callback) {};

/**
 * @param {string} event
 * @return {void}
 */
milkcocoa.DataStore.prototype.off = function(event) {};

/**
 * @param {string} id
 * @param {function(!Object): void} callback
 * @return {void}
 */
milkcocoa.DataStore.prototype.get = function(id, callback) {};

/**
 * @param {!Object=} condition
 * @return {!milkcocoa.Query}
 */
milkcocoa.DataStore.prototype.query = function(condition) {};

/**
 * @param {string} path
 * @return {!milkcocoa.DataStore}
 */
milkcocoa.DataStore.prototype.child = function(path) {};

/**
 * @return {!milkcocoa.DataStore}
 */
milkcocoa.DataStore.prototype.parent = function() {};

/**
 * @return {!milkcocoa.DataStore}
 */
milkcocoa.DataStore.prototype.root = function() {};
/**
 * @record
 * @struct
 */
milkcocoa.DataStoreCallbackData = function() {};
 /** @type {string} */
milkcocoa.DataStoreCallbackData.prototype.err;
 /** @type {string} */
milkcocoa.DataStoreCallbackData.prototype.path;
 /** @type {string} */
milkcocoa.DataStoreCallbackData.prototype.id;
 /** @type {?} */
milkcocoa.DataStoreCallbackData.prototype.value;
/**
 * @record
 * @struct
 */
milkcocoa.Query = function() {};

/**
 * @param {function(?): void} callback
 * @return {void}
 */
milkcocoa.Query.prototype.done = function(callback) {};

/**
 * @param {number} number
 * @return {!milkcocoa.Query}
 */
milkcocoa.Query.prototype.limit = function(number) {};

/**
 * @param {number} index
 * @return {!milkcocoa.Query}
 */
milkcocoa.Query.prototype.skip = function(index) {};

/**
 * @param {string} mode
 * @return {!milkcocoa.Query}
 */
milkcocoa.Query.prototype.sort = function(mode) {};
/**
 * @record
 * @struct
 */
milkcocoa.User = function() {};
 /** @type {string} */
milkcocoa.User.prototype.id;
 /** @type {string} */
milkcocoa.User.prototype.email;
 /** @type {!Object} */
milkcocoa.User.prototype.option;

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */
