/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova/index.d.ts:
/**
 * @record
 * @struct
 */
function Cordova() {}
 /** @type {string} */
Cordova.prototype.platformId;
 /** @type {string} */
Cordova.prototype.version;
 /** @type {!CordovaPlugins} */
Cordova.prototype.plugins;

/**
 * Invokes native functionality by specifying corresponding service name, action and optional parameters.
 * @param {function(?): ?} success A success callback function.
 * @param {function(?): ?} fail An error callback function.
 * @param {string} service The service name to call on the native side (corresponds to a native class).
 * @param {string} action The action name to call on the native side (generally corresponds to the native class method).
 * @param {!Array<?>=} args An array of arguments to pass into the native environment.
 * @return {void}
 */
Cordova.prototype.exec = function(success, fail, service, action, args) {};

/**
 * Defines custom logic as a Cordova module. Other modules can later access it using module name provided.
 * @param {string} moduleName
 * @param {function(?, ?, ?): ?} factory
 * @return {void}
 */
Cordova.prototype.define = function(moduleName, factory) {};

/**
 * Access a Cordova module by name.
 * @param {string} moduleName
 * @return {?}
 */
Cordova.prototype.require = function(moduleName) {};
/**
 * @record
 * @struct
 */
function CordovaPlugins() {}

/**
 * @param {string} type
 * @param {function(!Event): ?} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
Document.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * @param {string} type
 * @param {function(!Event): ?} listener
 * @param {boolean=} useCapture
 * @return {void}
 */
Document.prototype.removeEventListener = function(type, listener, useCapture) {};
 /** @type {!Cordova} */
Window.prototype.cordova;
/**
 * @record
 * @struct
 */
function ArgsCheck() {}
 /** @type {boolean} */
ArgsCheck.prototype.enableChecks;

/**
 * @param {string} argsSpec
 * @param {string} functionName
 * @param {!Array<?>} args
 * @param {?=} callee
 * @return {void}
 */
ArgsCheck.prototype.checkArgs = function(argsSpec, functionName, args, callee) {};

/**
 * @param {?=} value
 * @param {?=} defaultValue
 * @return {?}
 */
ArgsCheck.prototype.getValue = function(value, defaultValue) {};
/**
 * @record
 * @struct
 */
function UrlUtil() {}

/**
 * @param {string} url
 * @return {string}
 */
UrlUtil.prototype.makeAbsolute = function(url) {};
 /** @type {!Cordova} */
var cordova;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "cordova"
/** @const */
tsickle_declare_module.cordova = {};

/* TODO: ExportAssignment in tsickle_declare_module.cordova */
