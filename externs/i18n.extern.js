/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/i18n/index.d.ts:
/** @const */
var i18n = {};
/**
 * @record
 * @struct
 */
i18n.ConfigurationOptions = function() {};
 /** @type {!Array<string>} */
i18n.ConfigurationOptions.prototype.locales;
 /** @type {!Object<string,string>} */
i18n.ConfigurationOptions.prototype.fallbacks;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.defaultLocale;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.cookie;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.queryParameter;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.directory;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.directoryPermissions;
 /** @type {boolean} */
i18n.ConfigurationOptions.prototype.autoReload;
 /** @type {boolean} */
i18n.ConfigurationOptions.prototype.updateFiles;
 /** @type {boolean} */
i18n.ConfigurationOptions.prototype.syncFiles;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.indent;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.extension;
 /** @type {string} */
i18n.ConfigurationOptions.prototype.prefix;
 /** @type {boolean} */
i18n.ConfigurationOptions.prototype.objectNotation;
 /** @type {function(string): void} */
i18n.ConfigurationOptions.prototype.logDebugFn;
 /** @type {function(string): void} */
i18n.ConfigurationOptions.prototype.logWarnFn;
 /** @type {function(string): void} */
i18n.ConfigurationOptions.prototype.logErrorFn;
 /** @type {?} */
i18n.ConfigurationOptions.prototype.register;
 /** @type {!Object<string,string>} */
i18n.ConfigurationOptions.prototype.api;
 /** @type {boolean} */
i18n.ConfigurationOptions.prototype.preserveLegacyCase;
/**
 * @record
 * @struct
 */
i18n.TranslateOptions = function() {};
 /** @type {string} */
i18n.TranslateOptions.prototype.phrase;
 /** @type {string} */
i18n.TranslateOptions.prototype.locale;
/**
 * @record
 * @struct
 */
i18n.PluralOptions = function() {};
 /** @type {string} */
i18n.PluralOptions.prototype.singular;
 /** @type {string} */
i18n.PluralOptions.prototype.plural;
 /** @type {number} */
i18n.PluralOptions.prototype.count;
 /** @type {string} */
i18n.PluralOptions.prototype.locale;
/**
 * @record
 * @struct
 */
i18n.Replacements = function() {};

/* TODO: IndexSignature: i18n */
/**
 * @record
 * @struct
 */
i18n.LocaleCatalog = function() {};

/* TODO: IndexSignature: i18n */
/**
 * @record
 * @struct
 */
i18n.GlobalCatalog = function() {};

/* TODO: IndexSignature: i18n */
/**
 * @record
 * @struct
 */
i18n.HashedList = function() {};

/* TODO: IndexSignature: i18n */

/**
 * Configure current i18n instance
 * @param {!i18n.ConfigurationOptions} options
 * @return {void}
 */
i18n.configure = function(options) {};

/**
 * Initialize i18n middleware for express
 * @param {!Express.Request} request
 * @param {!Express.Response} response
 * @param {function(): void=} next
 * @return {void}
 */
i18n.init = function(request, response, next) {};

/**
 * Translate the given phrase using locale configuration
 * Translate the given phrase using locale configuration
 * @param {(string|!i18n.TranslateOptions)} phraseOrOptions
 * @param {...string|!i18n.Replacements} replace_or_replacements
 * @return {string}
 */
i18n.__ = function(phraseOrOptions, replace_or_replacements) {};

/**
 * Translate with plural condition the given phrase and count using locale configuration
 * Translate with plural condition the given phrase and count using locale configuration
 * @param {!i18n.PluralOptions|string} options_or_singular
 * @param {number|string=} count_or_plural
 * @param {(string|number)=} count
 * @return {string}
 */
i18n.__n = function(options_or_singular, count_or_plural, count) {};

/**
 * Translate the given phrase using locale configuration and MessageFormat
 * Translate the given phrase using locale configuration and MessageFormat
 * @param {(string|!i18n.TranslateOptions)} phraseOrOptions
 * @param {...?|!i18n.Replacements} replace_or_replacements
 * @return {string}
 */
i18n.__mf = function(phraseOrOptions, replace_or_replacements) {};

/**
 * Returns a list of translations for a given phrase in each language.
 * @param {string} phrase
 * @return {!Array<string>}
 */
i18n.__l = function(phrase) {};

/**
 * Returns a hashed list of translations for a given phrase in each language.
 * @param {string} phrase
 * @return {!Array<!i18n.HashedList>}
 */
i18n.__h = function(phrase) {};

/**
 * Change the current active locale
 * @param {string|(!Express.Request|!Express.Response)|?} locale_or_requestOrResponse_or_objects
 * @param {string=} locale
 * @param {boolean=} inheritance
 * @return {void}
 */
i18n.setLocale = function(locale_or_requestOrResponse_or_objects, locale, inheritance) {};

/**
 * Get the current active locale for specified request
 * @param {!Express.Request=} request
 * @return {string}
 */
i18n.getLocale = function(request) {};

/**
 * Get a list with all configured locales
 * @return {!Array<string>}
 */
i18n.getLocales = function() {};

/**
 * Get the current global catalog
 * Get the catalog for the given locale
 * Get the current active locale catalog for specified request
 * @param {string|!Express.Request=} locale_or_request
 * @param {string=} locale
 * @return {!i18n.GlobalCatalog|!i18n.LocaleCatalog}
 */
i18n.getCatalog = function(locale_or_request, locale) {};

/**
 * Override the current request locale by using the query param (?locale=en)
 * @param {!Express.Request=} request
 * @return {void}
 */
i18n.overrideLocaleFromQuery = function(request) {};
 /** @type {string} */
i18n.version;
/**
 * @record
 * @struct
 */
function i18nAPI() {}
 /** @type {string} */
i18nAPI.prototype.locale;

/**
 * Translate the given phrase using locale configuration
 * Translate the given phrase using locale configuration
 * @param {(string|!i18n.TranslateOptions)} phraseOrOptions
 * @param {...string|!i18n.Replacements} replace_or_replacements
 * @return {string}
 */
i18nAPI.prototype.__ = function(phraseOrOptions, replace_or_replacements) {};

/**
 * Translate with plural condition the given phrase and count using locale configuration
 * Translate with plural condition the given phrase and count using locale configuration
 * @param {!i18n.PluralOptions|string} options_or_singular
 * @param {number|string=} count_or_plural
 * @param {(string|number)=} count
 * @return {string}
 */
i18nAPI.prototype.__n = function(options_or_singular, count_or_plural, count) {};

/**
 * Translate the given phrase using locale configuration and MessageFormat
 * Translate the given phrase using locale configuration and MessageFormat
 * @param {(string|!i18n.TranslateOptions)} phraseOrOptions
 * @param {...?|!i18n.Replacements} replace_or_replacements
 * @return {string}
 */
i18nAPI.prototype.__mf = function(phraseOrOptions, replace_or_replacements) {};

/**
 * Returns a list of translations for a given phrase in each language.
 * @param {string} phrase
 * @return {!Array<string>}
 */
i18nAPI.prototype.__l = function(phrase) {};

/**
 * Returns a hashed list of translations for a given phrase in each language.
 * @param {string} phrase
 * @return {!Array<!i18n.HashedList>}
 */
i18nAPI.prototype.__h = function(phrase) {};

/**
 * Get the current active locale
 * @return {string}
 */
i18nAPI.prototype.getLocale = function() {};

/**
 * Change the current active locale
 * @param {string} locale
 * @return {void}
 */
i18nAPI.prototype.setLocale = function(locale) {};

/**
 * Get the current global catalog
 * Get the catalog for the given locale
 * @param {string=} locale
 * @return {!i18n.GlobalCatalog|!i18n.LocaleCatalog}
 */
i18nAPI.prototype.getCatalog = function(locale) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "i18n"
/** @const */
tsickle_declare_module.i__n = {};

/* TODO: ExportAssignment in tsickle_declare_module.i__n */
/** @const */
var Express = {};
/**
 * @extends {i18nAPI}
 * @record
 * @struct
 */
Express.Request = function() {};
 /** @type {!Array<string>} */
Express.Request.prototype.languages;
 /** @type {!Array<string>} */
Express.Request.prototype.regions;
 /** @type {string} */
Express.Request.prototype.language;
 /** @type {string} */
Express.Request.prototype.region;
/**
 * @extends {i18nAPI}
 * @record
 * @struct
 */
Express.Response = function() {};
 /** @type {!i18nAPI} */
Express.Response.prototype.locals;
