/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-toasty/index.d.ts:
/** @const */
var toasty = {};
/**
 * @record
 * @struct
 */
toasty.IToastyService = function() {};

/* TODO: CallSignature: toasty */

/* TODO: CallSignature: toasty */

/**
 * Create a default toast with the given options.
 * Create a default "quick toast" with the given title.
 * @param {!toasty.IToastyConfig|(string|number)} options_or_title
 * @return {void}
 */
toasty.IToastyService.prototype.default = function(options_or_title) {};

/**
 * Create an info toast with the given options.
 * Create an info "quick toast" with the given title.
 * @param {!toasty.IToastyConfig|(string|number)} options_or_title
 * @return {void}
 */
toasty.IToastyService.prototype.info = function(options_or_title) {};

/**
 * Create a wait toast with the given options.
 * Create a wait "quick toast" with the given title.
 * @param {!toasty.IToastyConfig|(string|number)} options_or_title
 * @return {void}
 */
toasty.IToastyService.prototype.wait = function(options_or_title) {};

/**
 * Create a success toast with the given options.
 * Create a success "quick toast" with the given title.
 * @param {!toasty.IToastyConfig|(string|number)} options_or_title
 * @return {void}
 */
toasty.IToastyService.prototype.success = function(options_or_title) {};

/**
 * Create an error toast with the given options.
 * Create an error "quick toast" with the given title.
 * @param {!toasty.IToastyConfig|(string|number)} options_or_title
 * @return {void}
 */
toasty.IToastyService.prototype.error = function(options_or_title) {};

/**
 * Create a warning toast with the given options.
 * Create a warning "quick toast" with the given title.
 * @param {!toasty.IToastyConfig|(string|number)} options_or_title
 * @return {void}
 */
toasty.IToastyService.prototype.warning = function(options_or_title) {};

/**
 * Clear toast(s).
 * @param {number=} id Optional ID to clear a specific toast.
 * @return {void}
 */
toasty.IToastyService.prototype.clear = function(id) {};

/**
 * Get the global config.
 * @return {!toasty.IGlobalConfig}
 */
toasty.IToastyService.prototype.getGlobalConfig = function() {};
/**
 * @record
 * @struct
 */
toasty.IToastyConfig = function() {};
 /** @type {string} */
toasty.IToastyConfig.prototype.title;
 /** @type {string} */
toasty.IToastyConfig.prototype.msg;
 /** @type {boolean} */
toasty.IToastyConfig.prototype.showClose;
 /** @type {boolean} */
toasty.IToastyConfig.prototype.clickToClose;
 /** @type {number} */
toasty.IToastyConfig.prototype.timeout;
 /** @type {boolean} */
toasty.IToastyConfig.prototype.sound;
 /** @type {boolean} */
toasty.IToastyConfig.prototype.html;
 /** @type {boolean} */
toasty.IToastyConfig.prototype.shake;
 /** @type {string} */
toasty.IToastyConfig.prototype.theme;
 /** @type {string} */
toasty.IToastyConfig.prototype.type;
 /** @type {!Function} */
toasty.IToastyConfig.prototype.onAdd;
 /** @type {!Function} */
toasty.IToastyConfig.prototype.onRemove;
 /** @type {!Function} */
toasty.IToastyConfig.prototype.onClick;
/**
 * @record
 * @struct
 */
toasty.IGlobalConfig = function() {};
 /** @type {number} */
toasty.IGlobalConfig.prototype.limit;
 /** @type {string} */
toasty.IGlobalConfig.prototype.title;
 /** @type {string} */
toasty.IGlobalConfig.prototype.msg;
 /** @type {boolean} */
toasty.IGlobalConfig.prototype.showClose;
 /** @type {boolean} */
toasty.IGlobalConfig.prototype.clickToClose;
 /** @type {string} */
toasty.IGlobalConfig.prototype.position;
 /** @type {(number|boolean)} */
toasty.IGlobalConfig.prototype.timeout;
 /** @type {boolean} */
toasty.IGlobalConfig.prototype.sound;
 /** @type {boolean} */
toasty.IGlobalConfig.prototype.html;
 /** @type {boolean} */
toasty.IGlobalConfig.prototype.shake;
 /** @type {string} */
toasty.IGlobalConfig.prototype.theme;
/**
 * @record
 * @struct
 */
toasty.IToastyConfigProvider = function() {};

/**
 * @param {!toasty.IGlobalConfig} override
 * @return {void}
 */
toasty.IToastyConfigProvider.prototype.setConfig = function(override) {};

/**
 * @return {!toasty.IGlobalConfig}
 */
toasty.IToastyConfigProvider.prototype.$get = function() {};
