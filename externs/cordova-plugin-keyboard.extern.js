/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-keyboard/index.d.ts:
/**
 * @record
 * @struct
 */
function Keyboard() {}
 /** @type {boolean} */
Keyboard.prototype.isVisible;
 /** @type {boolean} */
Keyboard.prototype.automaticScrollToTopOnHiding;

/**
 * Shrink the WebView when the keyboard comes up.
 * 
 * Set to true to shrink the WebView when the keyboard comes up.
 * The WebView shrinks instead of the viewport shrinking and the page scrollable.
 * This applies to apps that position their elements relative to the bottom of the WebView.
 * This is the default behaviour on Android, and makes a lot of sense when building apps as opposed to webpages.
 * 
 * Example:
 * <code>
 * Keyboard.shrinkView(true);
 * Keyboard.shrinkView(false);
 * </code>
 * 
 * @param {boolean} shrink
 * @return {void}
 */
Keyboard.prototype.shrinkView = function(shrink) {};

/**
 * Hide the keyboard toolbar.
 * 
 * Set to true to hide the additional toolbar that is on top of the keyboard.
 * This toolbar features the Prev, Next, and Done buttons.
 * 
 * Example:
 * <code>
 * Keyboard.hideFormAccessoryBar(true);
 * Keyboard.hideFormAccessoryBar(false);
 * </code>
 * 
 * @param {boolean} hide
 * @return {void}
 */
Keyboard.prototype.hideFormAccessoryBar = function(hide) {};

/**
 * Disable scrolling when the the WebView is shrunk.
 * 
 * Set to true to disable scrolling when the WebView is shrunk.
 * 
 * Example:
 * <code>
 * Keyboard.disableScrollingInShrinkView(true);
 * Keyboard.disableScrollingInShrinkView(false);
 * </code>
 * 
 * @param {boolean} disable
 * @return {void}
 */
Keyboard.prototype.disableScrollingInShrinkView = function(disable) {};

/**
 * If defined, this function is fired when keyboard fully shown.
 * 
 * Attach handler to this event to be able to receive notification when keyboard is shown.
 * 
 * Example:
 * <code>
 * Keyboard.onshow = function () {
 *     // Describe your logic which will be run each time keyboard is shown.
 * }
 * </code>
 * 
 * @return {void}
 */
Keyboard.prototype.onshow = function() {};

/**
 * If defined, this function is fired when keyboard fully closed.
 * 
 * Attach handler to this event to be able to receive notification when keyboard is closed.
 * 
 * Example:
 * <code>
 * Keyboard.onhide = function () {
 *     // Describe your logic which will be run each time keyboard is closed.
 * }
 * </code>
 * 
 * @return {void}
 */
Keyboard.prototype.onhide = function() {};

/**
 * If defined, this function is fired before keyboard will be shown.
 * 
 * Attach handler to this event to be able to receive notification when keyboard is about to be shown on the screen.
 * 
 * Example:
 * <code>
 * Keyboard.onshowing = function () {
 *     // Describe your logic which will be run each time when keyboard is about to be shown.
 * }
 * </code>
 * 
 * @return {void}
 */
Keyboard.prototype.onshowing = function() {};

/**
 * If defined, this function is fired when keyboard is about to be closed.
 * 
 * Attach handler to this event to be able to receive notification when keyboard is about to be closed.
 * 
 * Example:
 * <code>
 * Keyboard.onhiding = function () {
 *     // Describe your logic which will be run each time when keyboard is about to be closed.
 * }
 * </code>
 * 
 * @return {void}
 */
Keyboard.prototype.onhiding = function() {};
 /** @type {?} */
var Keyboard;
