/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/datejs/index.d.ts:
/**
 * @record
 * @struct
 */
function IDateJSLiteral() {}
 /** @type {number} */
IDateJSLiteral.prototype.milliseconds;
 /** @type {number} */
IDateJSLiteral.prototype.seconds;
 /** @type {number} */
IDateJSLiteral.prototype.minutes;
 /** @type {number} */
IDateJSLiteral.prototype.hours;
 /** @type {number} */
IDateJSLiteral.prototype.days;
 /** @type {number} */
IDateJSLiteral.prototype.months;
 /** @type {number} */
IDateJSLiteral.prototype.years;

/**
 * Gets a date that is set to the current date. The time is set to the start of the day (00:00 or 12:00 AM)
 * @return {!Date}
 */
DateConstructor.prototype.today = function() {};

/**
 * Compares the first date to the second date and returns an number indication of their relative values. -1 = this is lessthan date. 0 = values are equal. 1 = this is greaterthan date.
 * @param {!Date} date1
 * @param {!Date} date2
 * @return {number}
 */
DateConstructor.prototype.compare = function(date1, date2) {};

/**
 * Compares the first Date object to the second Date object and returns true if they are equal.
 * @param {!Date} date1
 * @param {!Date=} date2
 * @return {boolean}
 */
DateConstructor.prototype.equals = function(date1, date2) {};

/**
 * Gets the day number (0-6) if given a culture-specific string which is a valid full or abbreviated day name.
 * @param {string} dayName
 * @return {number}
 */
DateConstructor.prototype.getDayNumberFromName = function(dayName) {};

/**
 * Gets the month number (0-11) if given a culture-specific string which is a valid full or abbreviated month name.
 * @param {string} monthName
 * @return {number}
 */
DateConstructor.prototype.getMonthNumberFromName = function(monthName) {};

/**
 * Returns true if the given year is a leap year, false otherwise.
 * @param {number} year
 * @return {boolean}
 */
DateConstructor.prototype.isLeapYear = function(year) {};

/**
 * Gets the number of days in the month, given a year and month value. Automatically corrects for leap year.
 * @param {number} year
 * @param {number} month
 * @return {number}
 */
DateConstructor.prototype.getDaysInMonth = function(year, month) {};

/**
 * Returns a culture-specific timezone abbreviation based on a given offset and a boolean indicating whether daylight savings time is in effect.
 * @param {number} timezoneOffset
 * @param {boolean} isDayLightSavingsTime
 * @return {string}
 */
DateConstructor.prototype.getTimezoneAbbreviation = function(timezoneOffset, isDayLightSavingsTime) {};

/**
 * Gets the timezone offset if given a culture-specific string which is a valid full or abbreviated timezone name and a boolean indicating whether daylight savings time is in effect.
 * @param {string=} timezoneAbbreviation
 * @param {boolean=} isDayLightSavingsTime
 * @return {number}
 */
DateConstructor.prototype.getTimezoneOffset = function(timezoneAbbreviation, isDayLightSavingsTime) {};

/**
 * Converts the specified string value into its JavaScript Date equivalent using culture-specific format information.
 * @param {string} dateString
 * @return {!Date}
 */
DateConstructor.prototype.parse = function(dateString) {};

/**
 * Converts the specified string value into its JavaScript Date equivalent using the specified format. The format of the string value must match one of the supplied formats exactly.
 * Converts the specified string value into its JavaScript Date equivalent using the specified formats (array). The format of the string value must match one of the supplied formats exactly.
 * @param {string} dateString
 * @param {string|!Array<string>} formatString_or_formatArray
 * @return {!Date}
 */
DateConstructor.prototype.parseExact = function(dateString, formatString_or_formatArray) {};

/**
 * Validates the number is within an acceptable range for the days in a month [0-MaxDaysInMonth].
 * @param {number} day
 * @param {number} fullYear
 * @param {number} monthNumber
 * @return {boolean}
 */
DateConstructor.prototype.validateDay = function(day, fullYear, monthNumber) {};

/**
 * Validates the number is within an acceptable range for hours[0 - 23].Returns true if within range, otherwise false.
 * @param {number} hour
 * @return {boolean}
 */
DateConstructor.prototype.validateHour = function(hour) {};

/**
 * Validates the number is within an acceptable range for milliseconds[0 - 999].Returns true if within range, otherwise false.
 * @param {number} milliseconds
 * @return {boolean}
 */
DateConstructor.prototype.validateMillisecond = function(milliseconds) {};

/**
 * Validates the number is within an acceptable range for minutes[0 - 59].Returns true if within range, otherwise false.
 * @param {number} minutes
 * @return {boolean}
 */
DateConstructor.prototype.validateMinute = function(minutes) {};

/**
 * Validates the number is within an acceptable range for months[0 - 11].
 * @param {number} month
 * @return {boolean}
 */
DateConstructor.prototype.validateMonth = function(month) {};

/**
 * Validates the number is within an acceptable range for seconds[0 - 59].Returns true if within range, otherwise false.
 * @param {number} second
 * @return {boolean}
 */
DateConstructor.prototype.validateSecond = function(second) {};

/**
 * Validates the number is within an acceptable range for years[0 - 9999].
 * @param {number} year
 * @return {boolean}
 */
DateConstructor.prototype.validateYear = function(year) {};

/**
 * Adds(or subtracts) to the value of the year, month, day, hour, minute, second, millisecond of the date instance using given configuration object. Positive and Negative values allowed.
 * @param {!IDateJSLiteral=} config
 * @return {!Date}
 */
Date.prototype.add = function(config) {};

/**
 * Adds the specified number of milliseconds to this instance.
 * @param {number} milliseconds
 * @return {!Date}
 */
Date.prototype.addMilliseconds = function(milliseconds) {};

/**
 * Adds the specified number of seconds to this instance given the number of seconds to add.The number can be positive or negative.
 * @param {number} seconds
 * @return {!Date}
 */
Date.prototype.addSeconds = function(seconds) {};

/**
 * Adds the specified number of minutes to this instance given the number of minutes to add.The number can be positive or negative.
 * @param {number} minutes
 * @return {!Date}
 */
Date.prototype.addMinutes = function(minutes) {};

/**
 * Adds the specified number of hours to this instance given the number of hours to add.The number can be positive or negative.
 * @param {number} hours
 * @return {!Date}
 */
Date.prototype.addHours = function(hours) {};

/**
 * Adds the specified number of days to this instance.The number can be positive or negative.
 * @param {number} days
 * @return {!Date}
 */
Date.prototype.addDays = function(days) {};

/**
 * Adds the specified number of weeks to this instance given the number of weeks to add.The number can be positive or negative.
 * @param {number} weeks
 * @return {!Date}
 */
Date.prototype.addWeeks = function(weeks) {};

/**
 * Adds the specified number of months to this instance given the number of months to add.The number can be positive or negative.
 * @param {number} months
 * @return {!Date}
 */
Date.prototype.addMonths = function(months) {};

/**
 * Adds the specified number of years to this instance given the number of years to add.The number can be positive or negative.
 * @param {number} years
 * @return {!Date}
 */
Date.prototype.addYears = function(years) {};

/**
 * Resets the time of this Date object to 12:00 AM(00:00), which is the start of the day.
 * @return {!Date}
 */
Date.prototype.clearTime = function() {};

/**
 * Resets the time of this Date object to the current time('now').
 * @return {!Date}
 */
Date.prototype.setTimeToNow = function() {};

/**
 * Returns a new Date object that is an exact date and time copy of the original instance.
 * @return {!Date}
 */
Date.prototype.clone = function() {};

/**
 * Determines if this instance is between a range of two dates or equal to either the start or end dates.
 * @param {!Date} startDate
 * @param {!Date} endDate
 * @return {boolean}
 */
Date.prototype.between = function(startDate, endDate) {};

/**
 * Compares this instance to a Date object and returns an number indication of their relative values. -1 = this is lessthan date. 0 = values are equal. 1 = this is greaterthan date.
 * @param {!Date} date
 * @return {number}
 */
Date.prototype.compareTo = function(date) {};

/**
 * Compares this instance to another Date object and returns true if they are equal, otherwise false.
 * @param {!Date} date
 * @return {boolean}
 */
Date.prototype.equals = function(date) {};

/**
 * Determines if this date occurs after the date to compare to.
 * @param {!Date} date
 * @return {boolean}
 */
Date.prototype.isAfter = function(date) {};

/**
 * Determines if this date occurs before the date to compare to.
 * @param {!Date} date
 * @return {boolean}
 */
Date.prototype.isBefore = function(date) {};

/**
 * Determines if the current Date instance occurs on the same Date as the supplied 'date'.
 * @param {!Date} date
 * @return {boolean}
 */
Date.prototype.isToday = function(date) {};

/**
 * Returns the number of milliseconds between this date and date.
 * @param {!Date} date
 * @return {number}
 */
Date.prototype.getElapsed = function(date) {};

/**
 * Get the Ordinal day (numeric day number) of the year, adjusted for leap year. Returns 1 through 365 (366 in leap years)
 * @return {number}
 */
Date.prototype.getOrdinalNumber = function() {};

/**
 * Get the timezone abbreviation of the current date.
 * @return {string}
 */
Date.prototype.getTimezone = function() {};

/**
 * Get the offset from UTC of the current date. Returns the 4-character offset string prefixed with + or - (e.g. "-0500").
 * @return {string}
 */
Date.prototype.getUTCOffset = function() {};

/**
 * Get the week number. Week one (1) is the week which contains the first Thursday of the year. Monday is considered the first day of the week.
 * @return {number}
 */
Date.prototype.getWeek = function() {};

/**
 * Get the ISO 8601 week number. Week one ("01") is the week which contains the first Thursday of the year. Monday is considered the first day of the week.
 * @return {string}
 */
Date.prototype.getISOWeek = function() {};

/**
 * Moves the date to Monday of the week set. Week one (1) is the week which contains the first Thursday of the year.
 * @param {number} week
 * @return {!Date}
 */
Date.prototype.setWeek = function(week) {};

/**
 * Indicates whether Daylight Saving Time is observed in the current time zone.
 * @return {boolean}
 */
Date.prototype.hasDaylightSavingTime = function() {};

/**
 * Indicates whether this Date instance is within the Daylight Saving Time range for the current time zone.
 * @return {boolean}
 */
Date.prototype.isDaylightSavingTime = function() {};

/**
 * Move to the next or previous dayOfWeek. Whether to move into the future (+1) or past(-1) is controlled by the optional direction parameter.
 * @param {number} dayOfWeek
 * @param {number} direction
 * @return {!Date}
 */
Date.prototype.moveToDayOfWeek = function(dayOfWeek, direction) {};

/**
 * Moves the date to the first day of the month.
 * @return {!Date}
 */
Date.prototype.moveToFirstDayOfMonth = function() {};

/**
 * Moves the date to the last day of the month.
 * @return {!Date}
 */
Date.prototype.moveToLastDayOfMonth = function() {};

/**
 * Move to the next or previous month.Whether to move into the future(+1) or past(-1) is controlled by the optional direction parameter.
 * @param {number} month
 * @param {number} direction
 * @return {!Date}
 */
Date.prototype.moveToMonth = function(month, direction) {};

/**
 * Moves the date to the next nth occurrence of the dayOfWeek starting from the beginning of the month. The number (-1) is a magic number and will return the last occurrence of the dayOfWeek in the month.
 * @param {number} dayOfWeek
 * @param {number} occurrence
 * @return {!Date}
 */
Date.prototype.moveToNthOccurrence = function(dayOfWeek, occurrence) {};

/**
 * Set the value of year, month, day, hour, minute, second, millisecond of date instance using given configuration object.
 * @param {!IDateJSLiteral} config
 * @return {!Date}
 */
Date.prototype.set = function(config) {};

/**
 * Set the timezone for the current date using a culture - specific timezone abbreviation("PST").Note that in most JavaScript implementations, this will appear to change the time since the timezone is always based on the locale.
 * @param {string} timezoneAbbreviation
 * @return {!Date}
 */
Date.prototype.setTimezone = function(timezoneAbbreviation) {};

/**
 * Set the timezone for the current date using an offset(-0700).Note that in most JavaScript implementations, this will appear to change the time since the timezone is always based on the locale.
 * @param {number} timezoneOffset
 * @return {!Date}
 */
Date.prototype.setTimezoneOffset = function(timezoneOffset) {};

/**
 * Converts the current date instance into a string with an ISO 8601 format.The date is converted to it's UTC value. As per the ISO 8601 specification, the string will be wrapped with double quotation marks (").
 * @return {string}
 */
Date.prototype.toISOString = function() {};

/**
 * Converts the value of the current Date object to its equivalent string representation.Use format argument to specify format(optional).See FormatSpecifiers for more info.
 * @param {string=} format
 * @return {string}
 */
Date.prototype.toString = function(format) {};
/**
 * @record
 * @struct
 */
function IDateJS() {}
/**
 * @extends {DateConstructor}
 * @record
 * @struct
 */
function IDateJSStatic() {}
