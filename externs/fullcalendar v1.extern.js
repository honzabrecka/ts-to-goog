/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fullcalendar v1/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var FullCalendar = {};
/**
 * @record
 * @struct
 */
FullCalendar.Calendar = function() {};
 /** @type {string} */
FullCalendar.Calendar.prototype.version;

/**
 * Formats a Date object into a string.
 * @param {!Date} date
 * @param {string} format
 * @param {!FullCalendar.Options=} options
 * @return {string}
 */
FullCalendar.Calendar.prototype.formatDate = function(date, format, options) {};

/**
 * Formats a date range (two Date objects) into a string.
 * @param {!Date} date1
 * @param {!Date} date2
 * @param {string} format
 * @param {!FullCalendar.Options=} options
 * @return {string}
 */
FullCalendar.Calendar.prototype.formatDates = function(date1, date2, format, options) {};

/**
 * Parses a string into a Date object.
 * @param {string} dateString
 * @param {boolean=} ignoreTimezone
 * @return {!Date}
 */
FullCalendar.Calendar.prototype.parseDate = function(dateString, ignoreTimezone) {};

/**
 * Parses an ISO8601 string into a Date object.
 * @param {string} dateString
 * @param {boolean=} ignoreTimezone
 * @return {!Date}
 */
FullCalendar.Calendar.prototype.parseISO8601 = function(dateString, ignoreTimezone) {};
/**
 * @record
 * @struct
 */
FullCalendar.BusinessHours = function() {};
 /** @type {!moment.Duration} */
FullCalendar.BusinessHours.prototype.start;
 /** @type {!moment.Duration} */
FullCalendar.BusinessHours.prototype.end;
 /** @type {!Array<number>} */
FullCalendar.BusinessHours.prototype.dow;
/**
 * @record
 * @struct
 */
FullCalendar.Timespan = function() {};
 /** @type {!moment.Moment} */
FullCalendar.Timespan.prototype.start;
 /** @type {!moment.Moment} */
FullCalendar.Timespan.prototype.end;
/**
 * @extends {FullCalendar.AgendaOptions}
 * @extends {FullCalendar.EventDraggingResizingOptions}
 * @extends {FullCalendar.DroppingExternalElementsOptions}
 * @extends {FullCalendar.SelectionOptions}
 * @record
 * @struct
 */
FullCalendar.Options = function() {};
 /** @type {{left: string, center: string, right: string}} */
FullCalendar.Options.prototype.header;
 /** @type {boolean} */
FullCalendar.Options.prototype.theme;
 /** @type {{prev: string, next: string}} */
FullCalendar.Options.prototype.buttonIcons;
 /** @type {number} */
FullCalendar.Options.prototype.firstDay;
 /** @type {boolean} */
FullCalendar.Options.prototype.isRTL;
 /** @type {boolean} */
FullCalendar.Options.prototype.weekends;
 /** @type {!Array<number>} */
FullCalendar.Options.prototype.hiddenDays;
 /** @type {string} */
FullCalendar.Options.prototype.weekMode;
 /** @type {boolean} */
FullCalendar.Options.prototype.weekNumbers;
 /** @type {?} */
FullCalendar.Options.prototype.weekNumberCalculation;
 /** @type {(boolean|!FullCalendar.BusinessHours)} */
FullCalendar.Options.prototype.businessHours;
 /** @type {number} */
FullCalendar.Options.prototype.height;
 /** @type {number} */
FullCalendar.Options.prototype.contentHeight;
 /** @type {number} */
FullCalendar.Options.prototype.aspectRatio;
 /** @type {boolean} */
FullCalendar.Options.prototype.handleWindowResize;
 /** @type {(string|boolean)} */
FullCalendar.Options.prototype.timezone;
 /** @type {(string|!Date|!moment.Moment|function(): !moment.Moment)} */
FullCalendar.Options.prototype.now;
 /** @type {string} */
FullCalendar.Options.prototype.defaultView;
 /** @type {(string|!Date|!moment.Moment)} */
FullCalendar.Options.prototype.defaultDate;
 /** @type {number} */
FullCalendar.Options.prototype.year;
 /** @type {number} */
FullCalendar.Options.prototype.month;
 /** @type {number} */
FullCalendar.Options.prototype.date;
 /** @type {?} */
FullCalendar.Options.prototype.timeFormat;
 /** @type {?} */
FullCalendar.Options.prototype.columnFormat;
 /** @type {?} */
FullCalendar.Options.prototype.titleFormat;
 /** @type {!FullCalendar.ButtonTextObject} */
FullCalendar.Options.prototype.buttonText;
 /** @type {!Array<string>} */
FullCalendar.Options.prototype.monthNames;
 /** @type {!Array<string>} */
FullCalendar.Options.prototype.monthNamesShort;
 /** @type {!Array<string>} */
FullCalendar.Options.prototype.dayNames;
 /** @type {!Array<string>} */
FullCalendar.Options.prototype.dayNamesShort;
 /** @type {string} */
FullCalendar.Options.prototype.weekNumberTitle;
 /** @type {?} */
FullCalendar.Options.prototype.events;
 /** @type {!Array<?>} */
FullCalendar.Options.prototype.eventSources;
 /** @type {boolean} */
FullCalendar.Options.prototype.allDayDefault;
 /** @type {boolean} */
FullCalendar.Options.prototype.ignoreTimezone;
 /** @type {string} */
FullCalendar.Options.prototype.startParam;
 /** @type {string} */
FullCalendar.Options.prototype.endParam;
 /** @type {boolean} */
FullCalendar.Options.prototype.lazyFetching;
 /** @type {string} */
FullCalendar.Options.prototype.eventColor;
 /** @type {string} */
FullCalendar.Options.prototype.eventBackgroundColor;
 /** @type {string} */
FullCalendar.Options.prototype.eventBorderColor;
 /** @type {string} */
FullCalendar.Options.prototype.eventTextColor;

/**
 * @param {!FullCalendar.ViewObject} view
 * @param {?<!HTMLElement>} element
 * @return {void}
 */
FullCalendar.Options.prototype.viewRender = function(view, element) {};

/**
 * @param {!FullCalendar.ViewObject} view
 * @param {?<!HTMLElement>} element
 * @return {void}
 */
FullCalendar.Options.prototype.viewDestroy = function(view, element) {};

/**
 * @param {!Date} date
 * @param {!HTMLTableDataCellElement} cell
 * @return {void}
 */
FullCalendar.Options.prototype.dayRender = function(date, cell) {};

/**
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.windowResize = function(view) {};

/**
 * @param {!Date} date
 * @param {boolean} allDay
 * @param {!MouseEvent} jsEvent
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.dayClick = function(date, allDay, jsEvent, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!MouseEvent} jsEvent
 * @param {!FullCalendar.ViewObject} view
 * @return {?}
 */
FullCalendar.Options.prototype.eventClick = function(event, jsEvent, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!MouseEvent} jsEvent
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.eventMouseover = function(event, jsEvent, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!MouseEvent} jsEvent
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.eventMouseout = function(event, jsEvent, view) {};

/**
 * @param {?} eventData
 * @return {!FullCalendar.EventObject}
 */
FullCalendar.Options.prototype.eventDataTransform = function(eventData) {};

/**
 * @param {boolean} isLoading
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.loading = function(isLoading, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!HTMLDivElement} element
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.eventRender = function(event, element, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!HTMLDivElement} element
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.eventAfterRender = function(event, element, view) {};

/**
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.eventAfterAllRender = function(view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {?<!HTMLElement>} element
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.Options.prototype.eventDestroy = function(event, element, view) {};
/**
 * @record
 * @struct
 */
FullCalendar.ViewOptionHash = function() {};
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.month;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.week;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.day;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.agenda;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.agendaDay;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.agendaWeek;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.basic;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.basicDay;
 /** @type {?} */
FullCalendar.ViewOptionHash.prototype.basicWeek;

/* TODO: PropertySignature: FullCalendar.'' */
/**
 * @record
 * @struct
 */
FullCalendar.AgendaOptions = function() {};
 /** @type {boolean} */
FullCalendar.AgendaOptions.prototype.allDaySlot;
 /** @type {string} */
FullCalendar.AgendaOptions.prototype.allDayText;
 /** @type {!moment.Duration} */
FullCalendar.AgendaOptions.prototype.slotDuration;
 /** @type {string} */
FullCalendar.AgendaOptions.prototype.slotLabelFormat;
 /** @type {!moment.Duration} */
FullCalendar.AgendaOptions.prototype.slotLabelInterval;
 /** @type {!moment.Duration} */
FullCalendar.AgendaOptions.prototype.snapDuration;
 /** @type {!moment.Duration} */
FullCalendar.AgendaOptions.prototype.scrollTime;
 /** @type {!moment.Duration} */
FullCalendar.AgendaOptions.prototype.minTime;
 /** @type {!moment.Duration} */
FullCalendar.AgendaOptions.prototype.maxTime;
 /** @type {boolean} */
FullCalendar.AgendaOptions.prototype.slotEventOverlap;
/**
 * @record
 * @struct
 */
FullCalendar.EventDraggingResizingOptions = function() {};
 /** @type {boolean} */
FullCalendar.EventDraggingResizingOptions.prototype.editable;
 /** @type {boolean} */
FullCalendar.EventDraggingResizingOptions.prototype.eventStartEditable;
 /** @type {boolean} */
FullCalendar.EventDraggingResizingOptions.prototype.eventDurationEditable;
 /** @type {number} */
FullCalendar.EventDraggingResizingOptions.prototype.dragRevertDuration;
 /** @type {number} */
FullCalendar.EventDraggingResizingOptions.prototype.dragOpacity;
 /** @type {boolean} */
FullCalendar.EventDraggingResizingOptions.prototype.dragScroll;
 /** @type {(boolean|function(!FullCalendar.EventObject, !FullCalendar.EventObject): boolean)} */
FullCalendar.EventDraggingResizingOptions.prototype.eventOverlap;
 /** @type {(!FullCalendar.BusinessHours|!FullCalendar.Timespan)} */
FullCalendar.EventDraggingResizingOptions.prototype.eventConstraint;

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!MouseEvent} jsEvent
 * @param {?} ui
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.EventDraggingResizingOptions.prototype.eventDragStart = function(event, jsEvent, ui, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!MouseEvent} jsEvent
 * @param {?} ui
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.EventDraggingResizingOptions.prototype.eventDragStop = function(event, jsEvent, ui, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!moment.Duration} delta
 * @param {!Function} revertFunc
 * @param {!Event} jsEvent
 * @param {?} ui
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.EventDraggingResizingOptions.prototype.eventDrop = function(event, delta, revertFunc, jsEvent, ui, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!MouseEvent} jsEvent
 * @param {?} ui
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.EventDraggingResizingOptions.prototype.eventResizeStart = function(event, jsEvent, ui, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!MouseEvent} jsEvent
 * @param {?} ui
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.EventDraggingResizingOptions.prototype.eventResizeStop = function(event, jsEvent, ui, view) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @param {!moment.Duration} delta
 * @param {!Function} revertFunc
 * @param {!Event} jsEvent
 * @param {?} ui
 * @param {!FullCalendar.ViewObject} view
 * @return {void}
 */
FullCalendar.EventDraggingResizingOptions.prototype.eventResize = function(event, delta, revertFunc, jsEvent, ui, view) {};
/**
 * @record
 * @struct
 */
FullCalendar.SelectionOptions = function() {};
 /** @type {boolean} */
FullCalendar.SelectionOptions.prototype.selectable;
 /** @type {(boolean|function(!moment.Moment, !moment.Moment): !HTMLElement)} */
FullCalendar.SelectionOptions.prototype.selectHelper;
 /** @type {boolean} */
FullCalendar.SelectionOptions.prototype.unselectAuto;
 /** @type {string} */
FullCalendar.SelectionOptions.prototype.unselectCancel;
 /** @type {(boolean|function(!FullCalendar.EventObject): boolean)} */
FullCalendar.SelectionOptions.prototype.selectOverlap;
 /** @type {(!FullCalendar.BusinessHours|!FullCalendar.Timespan)} */
FullCalendar.SelectionOptions.prototype.selectConstraint;

/**
 * @param {!moment.Moment} start
 * @param {!moment.Moment} end
 * @param {!MouseEvent} jsEvent
 * @param {!FullCalendar.ViewObject} view
 * @param {?=} resource
 * @return {void}
 */
FullCalendar.SelectionOptions.prototype.select = function(start, end, jsEvent, view, resource) {};

/**
 * @param {!FullCalendar.ViewObject} view
 * @param {!Event} jsEvent
 * @return {void}
 */
FullCalendar.SelectionOptions.prototype.unselect = function(view, jsEvent) {};
/**
 * @record
 * @struct
 */
FullCalendar.DroppingExternalElementsOptions = function() {};
 /** @type {boolean} */
FullCalendar.DroppingExternalElementsOptions.prototype.droppable;
 /** @type {(string|function(?): boolean)} */
FullCalendar.DroppingExternalElementsOptions.prototype.dropAccept;

/**
 * @param {!moment.Moment} date
 * @param {!MouseEvent} jsEvent
 * @param {?} ui
 * @return {void}
 */
FullCalendar.DroppingExternalElementsOptions.prototype.drop = function(date, jsEvent, ui) {};

/**
 * @param {!FullCalendar.EventObject} event
 * @return {void}
 */
FullCalendar.DroppingExternalElementsOptions.prototype.eventReceive = function(event) {};
/**
 * @record
 * @struct
 */
FullCalendar.ButtonTextObject = function() {};
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.prev;
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.next;
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.prevYear;
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.nextYear;
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.today;
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.month;
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.week;
 /** @type {string} */
FullCalendar.ButtonTextObject.prototype.day;
/**
 * @extends {FullCalendar.Timespan}
 * @record
 * @struct
 */
FullCalendar.EventObject = function() {};
 /** @type {?} */
FullCalendar.EventObject.prototype.id;
 /** @type {string} */
FullCalendar.EventObject.prototype.title;
 /** @type {boolean} */
FullCalendar.EventObject.prototype.allDay;
 /** @type {string} */
FullCalendar.EventObject.prototype.url;
 /** @type {?} */
FullCalendar.EventObject.prototype.className;
 /** @type {boolean} */
FullCalendar.EventObject.prototype.editable;
 /** @type {!FullCalendar.EventSource} */
FullCalendar.EventObject.prototype.source;
 /** @type {string} */
FullCalendar.EventObject.prototype.color;
 /** @type {string} */
FullCalendar.EventObject.prototype.backgroundColor;
 /** @type {string} */
FullCalendar.EventObject.prototype.borderColor;
 /** @type {string} */
FullCalendar.EventObject.prototype.textColor;
 /** @type {string} */
FullCalendar.EventObject.prototype.rendering;
/**
 * @extends {FullCalendar.Timespan}
 * @record
 * @struct
 */
FullCalendar.ViewObject = function() {};
 /** @type {string} */
FullCalendar.ViewObject.prototype.name;
 /** @type {string} */
FullCalendar.ViewObject.prototype.title;
 /** @type {!moment.Moment} */
FullCalendar.ViewObject.prototype.intervalStart;
 /** @type {!moment.Moment} */
FullCalendar.ViewObject.prototype.intervalEnd;
/**
 * @extends {JQueryAjaxSettings}
 * @record
 * @struct
 */
FullCalendar.EventSource = function() {};
 /** @type {?} */
FullCalendar.EventSource.prototype.events;
 /** @type {string} */
FullCalendar.EventSource.prototype.color;
 /** @type {string} */
FullCalendar.EventSource.prototype.backgroundColor;
 /** @type {string} */
FullCalendar.EventSource.prototype.borderColor;
 /** @type {string} */
FullCalendar.EventSource.prototype.textColor;
 /** @type {?} */
FullCalendar.EventSource.prototype.className;
 /** @type {boolean} */
FullCalendar.EventSource.prototype.editable;
 /** @type {boolean} */
FullCalendar.EventSource.prototype.allDayDefault;
 /** @type {boolean} */
FullCalendar.EventSource.prototype.ignoreTimezone;
 /** @type {?} */
FullCalendar.EventSource.prototype.eventTransform;
 /** @type {string} */
FullCalendar.EventSource.prototype.startParam;
 /** @type {string} */
FullCalendar.EventSource.prototype.endParam;

/**
 * Get/Set option value
 * Immediately forces the calendar to render and/or readjusts its size.
 * Restores the element to the state before FullCalendar was initialized.
 * Returns the View Object for the current view.
 * Immediately switches to a different view.
 * Moves the calendar one step back (either by a month, week, or day).
 * Moves the calendar one step forward (either by a month, week, or day).
 * Moves the calendar back one year.
 * Moves the calendar forward one year.
 * Moves the calendar to the current date.
 * Moves the calendar to an arbitrary year/month/date.
 * Moves the calendar to an arbitrary date.
 * Moves the calendar forward/backward an arbitrary amount of time.
 * Returns a Date object for the current date of the calendar.
 * A method for programmatically selecting a period of time.
 * A method for programmatically clearing the current selection.
 * Reports changes to an event and renders them on the calendar.
 * Retrieves events that FullCalendar has in memory.
 * Retrieves events that FullCalendar has in memory.
 * Removes events from the calendar.
 * Removes events from the calendar.
 * Refetches events from all sources and rerenders them on the screen.
 * Dynamically adds an event source.
 * Dynamically removes an event source.
 * Renders a new event on the calendar.
 * Rerenders all events on the calendar.
 * Create calendar object
 * Generic method function
 * @param {string|!FullCalendar.Options} method_or_options
 * @param {string|number|(string|!Date)|!Date|!FullCalendar.EventObject|?|function(!FullCalendar.EventObject): boolean=} option_or_viewName_or_year_or_date_or_startDate_or_event_or_idOrfilter_or_source_or_arg1
 * @param {?|number|!Date|boolean=} value_or_month_or_endDate_or_stick_or_arg2
 * @param {number|boolean|?=} date_or_allDay_or_arg3
 * @return {void|!FullCalendar.ViewObject|!Date|!Array<!FullCalendar.EventObject>|?<!HTMLElement>}
 */
JQuery.prototype.fullCalendar = function(method_or_options, option_or_viewName_or_year_or_date_or_startDate_or_event_or_idOrfilter_or_source_or_arg1, value_or_month_or_endDate_or_stick_or_arg2, date_or_allDay_or_arg3) {};
 /** @type {!FullCalendar.Calendar} */
JQueryStatic.prototype.fullCalendar;
