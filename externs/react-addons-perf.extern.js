/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/react-addons-perf/index.d.ts:

/* TODO: ExportAssignment in  */
/**
 * @record
 * @struct
 */
function ComponentPerfContext() {}
 /** @type {string} */
ComponentPerfContext.prototype.current;
 /** @type {string} */
ComponentPerfContext.prototype.owner;
/**
 * @record
 * @struct
 */
function NumericPerfContext() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function Measurements() {}
 /** @type {?} */
Measurements.prototype.exclusive;
 /** @type {?} */
Measurements.prototype.inclusive;
 /** @type {?} */
Measurements.prototype.render;
 /** @type {?} */
Measurements.prototype.counts;
 /** @type {?} */
Measurements.prototype.writes;
 /** @type {?} */
Measurements.prototype.displayNames;
 /** @type {number} */
Measurements.prototype.totalTime;
/** @const */
var Perf = {};

/**
 * @return {void}
 */
Perf.start = function() {};

/**
 * @return {void}
 */
Perf.stop = function() {};

/**
 * @param {!Array<?>=} measurements
 * @return {void}
 */
Perf.printInclusive = function(measurements) {};

/**
 * @param {!Array<?>=} measurements
 * @return {void}
 */
Perf.printExclusive = function(measurements) {};

/**
 * @param {!Array<?>=} measurements
 * @return {void}
 */
Perf.printWasted = function(measurements) {};

/**
 * @param {!Array<?>=} measurements
 * @return {void}
 */
Perf.printOperations = function(measurements) {};

/**
 * @return {!Array<?>}
 */
Perf.getLastMeasurements = function() {};

/**
 * @param {!Array<?>=} measurements
 * @return {?}
 */
Perf.getExclusive = function(measurements) {};

/**
 * @param {!Array<?>=} measurements
 * @return {?}
 */
Perf.getInclusive = function(measurements) {};

/**
 * @param {!Array<?>=} measurements
 * @return {?}
 */
Perf.getWasted = function(measurements) {};

/**
 * @param {!Array<?>=} measurements
 * @return {?}
 */
Perf.getOperations = function(measurements) {};

/**
 * @param {!Array<?>=} measurements
 * @return {void}
 */
Perf.printDOM = function(measurements) {};
