/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/scalike/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var scalike = {};
/**
 * @record
 * @struct
 */
scalike.Either = function() {};
 /** @type {(A|B)} */
scalike.Either.prototype.value;
 /** @type {boolean} */
scalike.Either.prototype.isLeft;
 /** @type {boolean} */
scalike.Either.prototype.isRight;

/**
 * @return {!scalike.LeftProjection<A, B>}
 */
scalike.Either.prototype.left = function() {};

/**
 * @return {!scalike.RightProjection<A, B>}
 */
scalike.Either.prototype.right = function() {};

/**
 * @template X
 * @param {function(A): X} fa
 * @param {function(B): X} fb
 * @return {X}
 */
scalike.Either.prototype.fold = function(fa, fb) {};

/**
 * @return {!scalike.Either<B, A>}
 */
scalike.Either.prototype.swap = function() {};

/**
 * @template A, B
 * @param {B} b
 * @return {!scalike.Either<A, B>}
 */
scalike.Right = function(b) {};

/**
 * @template A, B
 * @param {A} a
 * @return {!scalike.Either<A, B>}
 */
scalike.Left = function(a) {};

/**
 * @constructor
 * @struct
 * @param {!scalike.Either<A, B>} self
 */
scalike.LeftProjection = function(self) {};
 /** @type {?} */
scalike.LeftProjection.prototype.self;

/**
 * @return {string}
 */
scalike.LeftProjection.prototype.toString = function() {};

/**
 * @return {A}
 */
scalike.LeftProjection.prototype.get = function() {};

/**
 * @param {function(A): void} f
 * @return {void}
 */
scalike.LeftProjection.prototype.foreach = function(f) {};

/**
 * @template X
 * @param {X} x
 * @return {A}
 */
scalike.LeftProjection.prototype.getOrElse = function(x) {};

/**
 * @param {function(A): boolean} f
 * @return {boolean}
 */
scalike.LeftProjection.prototype.forall = function(f) {};

/**
 * @param {function(A): boolean} f
 * @return {boolean}
 */
scalike.LeftProjection.prototype.exists = function(f) {};

/**
 * @param {function(A): boolean} f
 * @return {?<!scalike.Either<A, B>>}
 */
scalike.LeftProjection.prototype.filter = function(f) {};

/**
 * @template X
 * @param {function(A): X} f
 * @return {!scalike.Either<(A|X), B>}
 */
scalike.LeftProjection.prototype.map = function(f) {};

/**
 * @template X
 * @param {function(A): !scalike.Either<X, B>} f
 * @return {!scalike.Either<(A|X), B>}
 */
scalike.LeftProjection.prototype.flatMap = function(f) {};

/**
 * @return {?<A>}
 */
scalike.LeftProjection.prototype.toOptional = function() {};

/**
 * @constructor
 * @struct
 * @param {!scalike.Either<A, B>} self
 */
scalike.RightProjection = function(self) {};
 /** @type {?} */
scalike.RightProjection.prototype.self;

/**
 * @return {string}
 */
scalike.RightProjection.prototype.toString = function() {};

/**
 * @return {B}
 */
scalike.RightProjection.prototype.get = function() {};

/**
 * @param {function(B): void} f
 * @return {void}
 */
scalike.RightProjection.prototype.foreach = function(f) {};

/**
 * @template X
 * @param {X} x
 * @return {B}
 */
scalike.RightProjection.prototype.getOrElse = function(x) {};

/**
 * @param {function(B): boolean} f
 * @return {boolean}
 */
scalike.RightProjection.prototype.forall = function(f) {};

/**
 * @param {function(B): boolean} f
 * @return {boolean}
 */
scalike.RightProjection.prototype.exists = function(f) {};

/**
 * @param {function(B): boolean} f
 * @return {?<!scalike.Either<A, B>>}
 */
scalike.RightProjection.prototype.filter = function(f) {};

/**
 * @template X
 * @param {function(B): X} f
 * @return {!scalike.Either<A, (B|X)>}
 */
scalike.RightProjection.prototype.map = function(f) {};

/**
 * @template X
 * @param {function(B): !scalike.Either<A, X>} f
 * @return {!scalike.Either<A, (B|X)>}
 */
scalike.RightProjection.prototype.flatMap = function(f) {};

/**
 * @return {?<B>}
 */
scalike.RightProjection.prototype.toOptional = function() {};
/**
 * @record
 * @struct
 */
scalike.Optional = function() {};
 /** @type {boolean} */
scalike.Optional.prototype.isEmpty;
 /** @type {boolean} */
scalike.Optional.prototype.nonEmpty;

/**
 * @return {A}
 */
scalike.Optional.prototype.get = function() {};

/**
 * @template B
 * @param {B} a
 * @return {A}
 */
scalike.Optional.prototype.getOrElse = function(a) {};

/**
 * @template B
 * @param {function(A): B} f
 * @return {?<B>}
 */
scalike.Optional.prototype.map = function(f) {};

/**
 * @template B
 * @param {B} ifEmpty
 * @param {function(A): B} f
 * @return {B}
 */
scalike.Optional.prototype.fold = function(ifEmpty, f) {};

/**
 * @return {?}
 */
scalike.Optional.prototype.flatten = function() {};

/**
 * @param {function(A): boolean} f
 * @return {?}
 */
scalike.Optional.prototype.filter = function(f) {};

/**
 * @template B
 * @param {B} b
 * @return {boolean}
 */
scalike.Optional.prototype.contains = function(b) {};

/**
 * @param {function(A): boolean} f
 * @return {boolean}
 */
scalike.Optional.prototype.exists = function(f) {};

/**
 * @param {function(A): boolean} f
 * @return {boolean}
 */
scalike.Optional.prototype.forall = function(f) {};

/**
 * @template B
 * @param {function(A): ?<B>} f
 * @return {?<B>}
 */
scalike.Optional.prototype.flatMap = function(f) {};

/**
 * @param {function(A): void} f
 * @return {void}
 */
scalike.Optional.prototype.foreach = function(f) {};

/**
 * @template B
 * @param {?<B>} ob
 * @return {?}
 */
scalike.Optional.prototype.orElse = function(ob) {};

/**
 * @template B, C
 * @param {?<B>} ob
 * @param {function(A, B): C} f
 * @return {?<C>}
 */
scalike.Optional.prototype.apply1 = function(ob, f) {};

/**
 * @template B, C, D
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {function(A, B, C): D} f
 * @return {?<D>}
 */
scalike.Optional.prototype.apply2 = function(ob, oc, f) {};

/**
 * @template B
 * @param {?<B>} ob
 * @return {!scalike.OptionalBuilder1<A, B>}
 */
scalike.Optional.prototype.chain = function(ob) {};
 /** @type {?<?>} */
scalike.None;

/**
 * @template A
 * @param {A} a
 * @return {?<A>}
 */
scalike.Optional = function(a) {};

/**
 * @template A
 * @param {A} a
 * @return {?<A>}
 */
scalike.Some = function(a) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 */
scalike.OptionalBuilder1 = function(oa, ob) {};
 /** @type {?} */
scalike.OptionalBuilder1.prototype.oa;
 /** @type {?} */
scalike.OptionalBuilder1.prototype.ob;

/**
 * @template C
 * @param {function(A, B): C} f
 * @return {?<C>}
 */
scalike.OptionalBuilder1.prototype.run = function(f) {};

/**
 * @template C
 * @param {?<C>} oc
 * @return {!scalike.OptionalBuilder2<A, B, C>}
 */
scalike.OptionalBuilder1.prototype.chain = function(oc) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 */
scalike.OptionalBuilder2 = function(oa, ob, oc) {};
 /** @type {?} */
scalike.OptionalBuilder2.prototype.oa;
 /** @type {?} */
scalike.OptionalBuilder2.prototype.ob;
 /** @type {?} */
scalike.OptionalBuilder2.prototype.oc;

/**
 * @template D
 * @param {function(A, B, C): D} f
 * @return {?<D>}
 */
scalike.OptionalBuilder2.prototype.run = function(f) {};

/**
 * @template D
 * @param {?<D>} od
 * @return {!scalike.OptionalBuilder3<A, B, C, D>}
 */
scalike.OptionalBuilder2.prototype.chain = function(od) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 */
scalike.OptionalBuilder3 = function(oa, ob, oc, od) {};
 /** @type {?} */
scalike.OptionalBuilder3.prototype.oa;
 /** @type {?} */
scalike.OptionalBuilder3.prototype.ob;
 /** @type {?} */
scalike.OptionalBuilder3.prototype.oc;
 /** @type {?} */
scalike.OptionalBuilder3.prototype.od;

/**
 * @template E
 * @param {function(A, B, C, D): E} f
 * @return {?<E>}
 */
scalike.OptionalBuilder3.prototype.run = function(f) {};

/**
 * @template E
 * @param {?<E>} oe
 * @return {!scalike.OptionalBuilder4<A, B, C, D, E>}
 */
scalike.OptionalBuilder3.prototype.chain = function(oe) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 * @param {?<E>} oe
 */
scalike.OptionalBuilder4 = function(oa, ob, oc, od, oe) {};
 /** @type {?} */
scalike.OptionalBuilder4.prototype.oa;
 /** @type {?} */
scalike.OptionalBuilder4.prototype.ob;
 /** @type {?} */
scalike.OptionalBuilder4.prototype.oc;
 /** @type {?} */
scalike.OptionalBuilder4.prototype.od;
 /** @type {?} */
scalike.OptionalBuilder4.prototype.oe;

/**
 * @template F
 * @param {function(A, B, C, D, E): F} f
 * @return {?<F>}
 */
scalike.OptionalBuilder4.prototype.run = function(f) {};

/**
 * @template F
 * @param {?<F>} of
 * @return {!scalike.OptionalBuilder5<A, B, C, D, E, F>}
 */
scalike.OptionalBuilder4.prototype.chain = function(of) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 * @param {?<E>} oe
 * @param {?<F>} of
 */
scalike.OptionalBuilder5 = function(oa, ob, oc, od, oe, of) {};
 /** @type {?} */
scalike.OptionalBuilder5.prototype.oa;
 /** @type {?} */
scalike.OptionalBuilder5.prototype.ob;
 /** @type {?} */
scalike.OptionalBuilder5.prototype.oc;
 /** @type {?} */
scalike.OptionalBuilder5.prototype.od;
 /** @type {?} */
scalike.OptionalBuilder5.prototype.oe;
 /** @type {?} */
scalike.OptionalBuilder5.prototype.of;

/**
 * @template G
 * @param {function(A, B, C, D, E, F): G} f
 * @return {?<G>}
 */
scalike.OptionalBuilder5.prototype.run = function(f) {};
/**
 * @record
 * @struct
 */
scalike.Try = function() {};
 /** @type {boolean} */
scalike.Try.prototype.isSuccess;
 /** @type {boolean} */
scalike.Try.prototype.isFailure;

/**
 * @return {A}
 */
scalike.Try.prototype.get = function() {};

/**
 * @return {!Error}
 */
scalike.Try.prototype.getError = function() {};

/**
 * @template B
 * @param {function(!Error): B} fe
 * @param {function(A): B} ff
 * @return {B}
 */
scalike.Try.prototype.fold = function(fe, ff) {};

/**
 * @template B
 * @param {B} a
 * @return {A}
 */
scalike.Try.prototype.getOrElse = function(a) {};

/**
 * @template B
 * @param {?<B>} a
 * @return {?}
 */
scalike.Try.prototype.orElse = function(a) {};

/**
 * @template B
 * @param {function(A): void} f
 * @return {void}
 */
scalike.Try.prototype.foreach = function(f) {};

/**
 * @template B
 * @param {function(A): ?<B>} f
 * @return {?<B>}
 */
scalike.Try.prototype.flatMap = function(f) {};

/**
 * @template B
 * @param {function(A): B} f
 * @return {?<B>}
 */
scalike.Try.prototype.map = function(f) {};

/**
 * @param {function(A): boolean} f
 * @return {?}
 */
scalike.Try.prototype.filter = function(f) {};

/**
 * @return {?<A>}
 */
scalike.Try.prototype.toOptional = function() {};

/**
 * @return {?}
 */
scalike.Try.prototype.failed = function() {};

/**
 * @template B
 * @param {function(A): ?<B>} fs
 * @param {function(!Error): ?<B>} ff
 * @return {?<B>}
 */
scalike.Try.prototype.transform = function(fs, ff) {};

/**
 * @template B
 * @param {function(!Error): ?<?<B>>} f
 * @return {?}
 */
scalike.Try.prototype.recover = function(f) {};

/**
 * @template B, C
 * @param {?<B>} ob
 * @param {function(A, B): C} f
 * @return {?<C>}
 */
scalike.Try.prototype.apply1 = function(ob, f) {};

/**
 * @template B, C, D
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {function(A, B, C): D} f
 * @return {?<D>}
 */
scalike.Try.prototype.apply2 = function(ob, oc, f) {};

/**
 * @template B
 * @param {?<B>} ob
 * @return {!scalike.TryBuilder1<A, B>}
 */
scalike.Try.prototype.chain = function(ob) {};

/**
 * @template A
 * @param {function(): A} f
 * @return {?<A>}
 */
scalike.Try = function(f) {};

/**
 * @template A
 * @param {A} a
 * @return {?<A>}
 */
scalike.Success = function(a) {};

/**
 * @template A
 * @param {!Error} e
 * @return {?<A>}
 */
scalike.Failure = function(e) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 */
scalike.TryBuilder1 = function(oa, ob) {};
 /** @type {?} */
scalike.TryBuilder1.prototype.oa;
 /** @type {?} */
scalike.TryBuilder1.prototype.ob;

/**
 * @template C
 * @param {function(A, B): C} f
 * @return {?<C>}
 */
scalike.TryBuilder1.prototype.run = function(f) {};

/**
 * @template C
 * @param {?<C>} oc
 * @return {!scalike.TryBuilder2<A, B, C>}
 */
scalike.TryBuilder1.prototype.chain = function(oc) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 */
scalike.TryBuilder2 = function(oa, ob, oc) {};
 /** @type {?} */
scalike.TryBuilder2.prototype.oa;
 /** @type {?} */
scalike.TryBuilder2.prototype.ob;
 /** @type {?} */
scalike.TryBuilder2.prototype.oc;

/**
 * @template D
 * @param {function(A, B, C): D} f
 * @return {?<D>}
 */
scalike.TryBuilder2.prototype.run = function(f) {};

/**
 * @template D
 * @param {?<D>} od
 * @return {!scalike.TryBuilder3<A, B, C, D>}
 */
scalike.TryBuilder2.prototype.chain = function(od) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 */
scalike.TryBuilder3 = function(oa, ob, oc, od) {};
 /** @type {?} */
scalike.TryBuilder3.prototype.oa;
 /** @type {?} */
scalike.TryBuilder3.prototype.ob;
 /** @type {?} */
scalike.TryBuilder3.prototype.oc;
 /** @type {?} */
scalike.TryBuilder3.prototype.od;

/**
 * @template E
 * @param {function(A, B, C, D): E} f
 * @return {?<E>}
 */
scalike.TryBuilder3.prototype.run = function(f) {};

/**
 * @template E
 * @param {?<E>} oe
 * @return {!scalike.TryBuilder4<A, B, C, D, E>}
 */
scalike.TryBuilder3.prototype.chain = function(oe) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 * @param {?<E>} oe
 */
scalike.TryBuilder4 = function(oa, ob, oc, od, oe) {};
 /** @type {?} */
scalike.TryBuilder4.prototype.oa;
 /** @type {?} */
scalike.TryBuilder4.prototype.ob;
 /** @type {?} */
scalike.TryBuilder4.prototype.oc;
 /** @type {?} */
scalike.TryBuilder4.prototype.od;
 /** @type {?} */
scalike.TryBuilder4.prototype.oe;

/**
 * @template F
 * @param {function(A, B, C, D, E): F} f
 * @return {?<F>}
 */
scalike.TryBuilder4.prototype.run = function(f) {};

/**
 * @template F
 * @param {?<F>} of
 * @return {!scalike.TryBuilder5<A, B, C, D, E, F>}
 */
scalike.TryBuilder4.prototype.chain = function(of) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 * @param {?<E>} oe
 * @param {?<F>} of
 */
scalike.TryBuilder5 = function(oa, ob, oc, od, oe, of) {};
 /** @type {?} */
scalike.TryBuilder5.prototype.oa;
 /** @type {?} */
scalike.TryBuilder5.prototype.ob;
 /** @type {?} */
scalike.TryBuilder5.prototype.oc;
 /** @type {?} */
scalike.TryBuilder5.prototype.od;
 /** @type {?} */
scalike.TryBuilder5.prototype.oe;
 /** @type {?} */
scalike.TryBuilder5.prototype.of;

/**
 * @template G
 * @param {function(A, B, C, D, E, F): G} f
 * @return {?<G>}
 */
scalike.TryBuilder5.prototype.run = function(f) {};
/**
 * @record
 * @struct
 */
scalike.Future = function() {};

/**
 * @return {!Promise<A>}
 */
scalike.Future.prototype.getPromise = function() {};

/**
 * @template B
 * @param {function(?<A>): B} f
 * @return {void}
 */
scalike.Future.prototype.onComplete = function(f) {};

/**
 * @return {boolean}
 */
scalike.Future.prototype.isCompleted = function() {};

/**
 * @return {?<?<A>>}
 */
scalike.Future.prototype.value = function() {};

/**
 * @return {?<!Error>}
 */
scalike.Future.prototype.failed = function() {};

/**
 * @template B
 * @param {function(A): B} f
 * @return {void}
 */
scalike.Future.prototype.foreach = function(f) {};

/**
 * @template B
 * @param {function(?<A>): ?<B>} f
 * @return {?<B>}
 */
scalike.Future.prototype.transform = function(f) {};

/**
 * @template B
 * @param {function(A): B} fs
 * @param {function(!Error): !Error} ff
 * @return {?<B>}
 */
scalike.Future.prototype.transform1 = function(fs, ff) {};

/**
 * @template B
 * @param {function(?<A>): ?<B>} f
 * @return {?<B>}
 */
scalike.Future.prototype.transformWith = function(f) {};

/**
 * @template B
 * @param {function(A): B} f
 * @return {?<B>}
 */
scalike.Future.prototype.map = function(f) {};

/**
 * @template B
 * @param {function(A): ?<B>} f
 * @return {?<B>}
 */
scalike.Future.prototype.flatMap = function(f) {};

/**
 * @param {function(A): boolean} f
 * @return {?}
 */
scalike.Future.prototype.filter = function(f) {};

/**
 * @template B
 * @param {function(!Error): ?<B>} f
 * @return {?}
 */
scalike.Future.prototype.recover = function(f) {};

/**
 * @template B
 * @param {function(!Error): ?<?<B>>} f
 * @return {?}
 */
scalike.Future.prototype.recoverWith = function(f) {};

/**
 * @template B
 * @param {?<B>} fu
 * @return {?<!Array<?>>}
 */
scalike.Future.prototype.zip = function(fu) {};

/**
 * @template B, C
 * @param {?<B>} fu
 * @param {function(A, B): C} f
 * @return {?<C>}
 */
scalike.Future.prototype.zipWith = function(fu, f) {};

/**
 * @template B
 * @param {?<B>} fu
 * @return {?}
 */
scalike.Future.prototype.fallbackTo = function(fu) {};

/**
 * @template B
 * @param {function(?<A>): B} f
 * @return {?}
 */
scalike.Future.prototype.andThen = function(f) {};

/**
 * @template B, C
 * @param {?<B>} ob
 * @param {function(A, B): C} f
 * @return {?<C>}
 */
scalike.Future.prototype.apply1 = function(ob, f) {};

/**
 * @template B, C, D
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {function(A, B, C): D} f
 * @return {?<D>}
 */
scalike.Future.prototype.apply2 = function(ob, oc, f) {};

/**
 * @template B
 * @param {?<B>} ob
 * @return {!scalike.FutureBuilder1<A, B>}
 */
scalike.Future.prototype.chain = function(ob) {};

/**
 * @template A
 * @param {(!Promise<A>|function(): A)} f
 * @return {?<A>}
 */
scalike.Future = function(f) {};

/**
 * @template A
 * @param {!Promise<A>} p
 * @return {?<A>}
 */
scalike.Future.fromPromise = function(p) {};

/**
 * @return {?<void>}
 */
scalike.Future.unit = function() {};

/**
 * @template A
 * @param {!Error} e
 * @return {?<A>}
 */
scalike.Future.failed = function(e) {};

/**
 * @template A
 * @param {A} a
 * @return {?<A>}
 */
scalike.Future.successful = function(a) {};

/**
 * @template A
 * @param {?<A>} t
 * @return {?<A>}
 */
scalike.Future.fromTry = function(t) {};

/**
 * @template A
 * @param {!Array<?<A>>} fus
 * @return {?<!Array<A>>}
 */
scalike.Future.sequence = function(fus) {};

/**
 * @template A
 * @param {!Array<?<A>>} fus
 * @return {?<A>}
 */
scalike.Future.firstCompletedOf = function(fus) {};

/**
 * @template A
 * @param {!Array<?<A>>} fus
 * @param {function(A): boolean} f
 * @return {?<?<A>>}
 */
scalike.Future.find = function(fus, f) {};

/**
 * @template A, B
 * @param {!Array<?<A>>} fu
 * @param {B} zero
 * @param {function(B, A): B} f
 * @return {?<B>}
 */
scalike.Future.foldLeft = function(fu, zero, f) {};

/**
 * @template A, B
 * @param {!Array<?<A>>} fu
 * @param {function(B, A): B} f
 * @return {?<B>}
 */
scalike.Future.reduceLeft = function(fu, f) {};

/**
 * @template A, B
 * @param {!Array<A>} fu
 * @param {function(A): ?<B>} f
 * @return {?<!Array<B>>}
 */
scalike.Future.traverse = function(fu, f) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 */
scalike.FutureBuilder1 = function(oa, ob) {};
 /** @type {?} */
scalike.FutureBuilder1.prototype.oa;
 /** @type {?} */
scalike.FutureBuilder1.prototype.ob;

/**
 * @template C
 * @param {function(A, B): C} f
 * @return {?<C>}
 */
scalike.FutureBuilder1.prototype.run = function(f) {};

/**
 * @template C
 * @param {?<C>} oc
 * @return {!scalike.FutureBuilder2<A, B, C>}
 */
scalike.FutureBuilder1.prototype.chain = function(oc) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 */
scalike.FutureBuilder2 = function(oa, ob, oc) {};
 /** @type {?} */
scalike.FutureBuilder2.prototype.oa;
 /** @type {?} */
scalike.FutureBuilder2.prototype.ob;
 /** @type {?} */
scalike.FutureBuilder2.prototype.oc;

/**
 * @template D
 * @param {function(A, B, C): D} f
 * @return {?<D>}
 */
scalike.FutureBuilder2.prototype.run = function(f) {};

/**
 * @template D
 * @param {?<D>} od
 * @return {!scalike.FutureBuilder3<A, B, C, D>}
 */
scalike.FutureBuilder2.prototype.chain = function(od) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 */
scalike.FutureBuilder3 = function(oa, ob, oc, od) {};
 /** @type {?} */
scalike.FutureBuilder3.prototype.oa;
 /** @type {?} */
scalike.FutureBuilder3.prototype.ob;
 /** @type {?} */
scalike.FutureBuilder3.prototype.oc;
 /** @type {?} */
scalike.FutureBuilder3.prototype.od;

/**
 * @template E
 * @param {function(A, B, C, D): E} f
 * @return {?<E>}
 */
scalike.FutureBuilder3.prototype.run = function(f) {};

/**
 * @template E
 * @param {?<E>} oe
 * @return {!scalike.FutureBuilder4<A, B, C, D, E>}
 */
scalike.FutureBuilder3.prototype.chain = function(oe) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 * @param {?<E>} oe
 */
scalike.FutureBuilder4 = function(oa, ob, oc, od, oe) {};
 /** @type {?} */
scalike.FutureBuilder4.prototype.oa;
 /** @type {?} */
scalike.FutureBuilder4.prototype.ob;
 /** @type {?} */
scalike.FutureBuilder4.prototype.oc;
 /** @type {?} */
scalike.FutureBuilder4.prototype.od;
 /** @type {?} */
scalike.FutureBuilder4.prototype.oe;

/**
 * @template F
 * @param {function(A, B, C, D, E): F} f
 * @return {?<F>}
 */
scalike.FutureBuilder4.prototype.run = function(f) {};

/**
 * @template F
 * @param {?<F>} of
 * @return {!scalike.FutureBuilder5<A, B, C, D, E, F>}
 */
scalike.FutureBuilder4.prototype.chain = function(of) {};

/**
 * @constructor
 * @struct
 * @param {?<A>} oa
 * @param {?<B>} ob
 * @param {?<C>} oc
 * @param {?<D>} od
 * @param {?<E>} oe
 * @param {?<F>} of
 */
scalike.FutureBuilder5 = function(oa, ob, oc, od, oe, of) {};
 /** @type {?} */
scalike.FutureBuilder5.prototype.oa;
 /** @type {?} */
scalike.FutureBuilder5.prototype.ob;
 /** @type {?} */
scalike.FutureBuilder5.prototype.oc;
 /** @type {?} */
scalike.FutureBuilder5.prototype.od;
 /** @type {?} */
scalike.FutureBuilder5.prototype.oe;
 /** @type {?} */
scalike.FutureBuilder5.prototype.of;

/**
 * @template G
 * @param {function(A, B, C, D, E, F): G} f
 * @return {?<G>}
 */
scalike.FutureBuilder5.prototype.run = function(f) {};
