/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/resemblejs/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */

/**
 * Retrieve basic analysis for a single image (add compareTo to compare with another).
 * @param {(string|!ImageData)} image
 * @return {!Resemble.ResembleAnalysis}
 */
function Resemble(image) {}

/**
 * Set the resemblance image output style
 * @param {!Resemble.OutputSettings} settings
 * @return {function((string|!ImageData)): !Resemble.ResembleAnalysis}
 */
Resemble.outputSettings = function(settings) {};
/**
 * @record
 * @struct
 */
Resemble.OutputSettings = function() {};
 /** @type {{red: number, green: number, blue: number}} */
Resemble.OutputSettings.prototype.errorColor;
 /** @type {string} */
Resemble.OutputSettings.prototype.errorType;
 /** @type {number} */
Resemble.OutputSettings.prototype.transparency;
 /** @type {number} */
Resemble.OutputSettings.prototype.largeImageThreshold;
/**
 * @record
 * @struct
 */
Resemble.ResembleAnalysis = function() {};

/**
 * Run the analysis on this image and get the result
 * @param {function(!Resemble.ResembleAnalysisResult): void} callback
 * @return {void}
 */
Resemble.ResembleAnalysis.prototype.onComplete = function(callback) {};

/**
 * Compare this image to another image, to get resemblance data
 * @param {(string|!ImageData)} fileData
 * @return {!Resemble.ResembleComparison}
 */
Resemble.ResembleAnalysis.prototype.compareTo = function(fileData) {};
/**
 * @record
 * @struct
 */
Resemble.ResembleAnalysisResult = function() {};
 /** @type {number} */
Resemble.ResembleAnalysisResult.prototype.red;
 /** @type {number} */
Resemble.ResembleAnalysisResult.prototype.green;
 /** @type {number} */
Resemble.ResembleAnalysisResult.prototype.blue;
 /** @type {number} */
Resemble.ResembleAnalysisResult.prototype.brightness;
/**
 * @record
 * @struct
 */
Resemble.ResembleComparison = function() {};

/**
 * Run the analysis and get the comparison result
 * @param {function(!Resemble.ResembleComparisonResult): void} callback
 * @return {void}
 */
Resemble.ResembleComparison.prototype.onComplete = function(callback) {};

/**
 * @return {!Resemble.ResembleComparison}
 */
Resemble.ResembleComparison.prototype.ignoreNothing = function() {};

/**
 * @return {!Resemble.ResembleComparison}
 */
Resemble.ResembleComparison.prototype.ignoreAntialiasing = function() {};

/**
 * @return {!Resemble.ResembleComparison}
 */
Resemble.ResembleComparison.prototype.ignoreColors = function() {};

/**
 * @return {!Resemble.ResembleComparison}
 */
Resemble.ResembleComparison.prototype.repaint = function() {};
/**
 * @record
 * @struct
 */
Resemble.ResembleComparisonResult = function() {};
 /** @type {boolean} */
Resemble.ResembleComparisonResult.prototype.isSameDimensions;
 /** @type {{width: number, height: number}} */
Resemble.ResembleComparisonResult.prototype.dimensionDifference;
 /** @type {number} */
Resemble.ResembleComparisonResult.prototype.misMatchPercentage;
 /** @type {{top: number, left: number, bottom: number, right: number}} */
Resemble.ResembleComparisonResult.prototype.diffBounds;
 /** @type {number} */
Resemble.ResembleComparisonResult.prototype.analysisTime;

/**
 * Get a data URL for the comparison image
 * @return {string}
 */
Resemble.ResembleComparisonResult.prototype.getImageDataUrl = function() {};
