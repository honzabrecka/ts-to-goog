/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sinon-chai/index.d.ts:

/* TODO: ImportDeclaration in  */
 /** @type {!Chai.Assertion} */
Chai.LanguageChains.prototype.always;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.called;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.calledOnce;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.calledTwice;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.calledThrice;
 /** @type {!Chai.Assertion} */
Chai.Assertion.prototype.calledWithNew;

/**
 * @param {number} count The number of recorded calls.
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.callCount = function(count) {};

/**
 * Returns true if the spy was called before anotherSpy.
 * @param {!Sinon.SinonSpy} anotherSpy
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.calledBefore = function(anotherSpy) {};

/**
 * Returns true if the spy was called after anotherSpy.
 * @param {!Sinon.SinonSpy} anotherSpy
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.calledAfter = function(anotherSpy) {};

/**
 * Returns true if context was this for this call.
 * @param {?} context
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.calledOn = function(context) {};

/**
 * Returns true if call received provided arguments (and possibly others).
 * @param {...?} args
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.calledWith = function(args) {};

/**
 * Returns true if call received provided arguments and no others.
 * @param {...?} args
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.calledWithExactly = function(args) {};

/**
 * Returns true if call received matching arguments (and possibly others).
 * This behaves the same as spyCall.calledWith(sinon.match(arg1), sinon.match(arg2), ...).
 * @param {...?} args
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.calledWithMatch = function(args) {};

/**
 * Returns true if spy returned the provided value at least once. Uses
 * deep comparison for objects and arrays. Use spy.returned(sinon.match.same(obj))
 * for strict comparison (see matchers).
 * @param {?} obj
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.returned = function(obj) {};

/**
 * Returns true if spy threw the provided exception object at least once.
 * @param {(string|!Error|!ErrorConstructor)=} obj
 * @return {!Chai.Assertion}
 */
Chai.Assertion.prototype.thrown = function(obj) {};

/**
 * @param {?} chai
 * @param {?} utils
 * @return {void}
 */
function sinonChai(chai, utils) {}

/* TODO: ExportAssignment in  */
