/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/electron-packager/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * This will:
 * - Find or download the correct release of Electron
 * - Use that version of electron to create a app in <out>/<appname>-<platform>-<arch>
 * 
 * You should be able to launch the app on the platform you built for. If not, check your settings and try again.
 * 
 * @param {!electronPackager.Options} opts - Options to configure packaging.
 * @param {function(!Error, (string|!Array<string>)): void} callback - Callback which is called when packaging is done or an error occured.
 * @return {void}
 */
function electronPackager(opts, callback) {}

/** @typedef {function(!Error, (string|!Array<string>)): void} */
electronPackager.finalCallback;

/** @typedef {function(string): boolean} */
electronPackager.ignoreFunction;

/** @typedef {function(string, string, string, string, function(): void): void} */
electronPackager.onCompleteFn;

/** @typedef {string} */
electronPackager.arch;

/** @typedef {string} */
electronPackager.packageManager;

/** @typedef {string} */
electronPackager.platform;
/**
 * @record
 * @struct
 */
electronPackager.AsarOptions = function() {};
 /** @type {string} */
electronPackager.AsarOptions.prototype.ordering;
 /** @type {string} */
electronPackager.AsarOptions.prototype.unpack;
 /** @type {string} */
electronPackager.AsarOptions.prototype.unpackDir;
/**
 * @record
 * @struct
 */
electronPackager.ElectronDownloadOptions = function() {};
 /** @type {string} */
electronPackager.ElectronDownloadOptions.prototype.cache;
 /** @type {string} */
electronPackager.ElectronDownloadOptions.prototype.mirror;
 /** @type {boolean} */
electronPackager.ElectronDownloadOptions.prototype.quiet;
 /** @type {boolean} */
electronPackager.ElectronDownloadOptions.prototype.strictSSL;
/**
 * @record
 * @struct
 */
electronPackager.ElectronOsXSignOptions = function() {};
 /** @type {string} */
electronPackager.ElectronOsXSignOptions.prototype.identity;
 /** @type {string} */
electronPackager.ElectronOsXSignOptions.prototype.entitlements;

/* TODO: PropertySignature: electronPackager."entitlements-inherit" */
/**
 * @record
 * @struct
 */
electronPackager.Win32Metadata = function() {};
 /** @type {string} */
electronPackager.Win32Metadata.prototype.CompanyName;
 /** @type {string} */
electronPackager.Win32Metadata.prototype.FileDescription;
 /** @type {string} */
electronPackager.Win32Metadata.prototype.OriginalFilename;
 /** @type {string} */
electronPackager.Win32Metadata.prototype.ProductName;
 /** @type {string} */
electronPackager.Win32Metadata.prototype.InternalName;

/* TODO: PropertySignature: electronPackager."requested-execution-level" */

/* TODO: PropertySignature: electronPackager."application-manifest" */
/**
 * @record
 * @struct
 */
electronPackager.Options = function() {};
 /** @type {string} */
electronPackager.Options.prototype.dir;
 /** @type {!Array<function(string, string, string, string, function(): void): void>} */
electronPackager.Options.prototype.afterCopy;
 /** @type {!Array<function(string, string, string, string, function(): void): void>} */
electronPackager.Options.prototype.afterExtract;
 /** @type {!Array<function(string, string, string, string, function(): void): void>} */
electronPackager.Options.prototype.afterPrune;
 /** @type {boolean} */
electronPackager.Options.prototype.all;
 /** @type {string} */
electronPackager.Options.prototype.appCopyright;
 /** @type {string} */
electronPackager.Options.prototype.appVersion;
 /** @type {string} */
electronPackager.Options.prototype.arch;
 /** @type {(boolean|!electronPackager.AsarOptions)} */
electronPackager.Options.prototype.asar;
 /** @type {string} */
electronPackager.Options.prototype.buildVersion;
 /** @type {boolean} */
electronPackager.Options.prototype.derefSymlinks;
 /** @type {!electronPackager.ElectronDownloadOptions} */
electronPackager.Options.prototype.download;
 /** @type {string} */
electronPackager.Options.prototype.electronVersion;
 /** @type {(string|!Array<string>)} */
electronPackager.Options.prototype.extraResource;
 /** @type {string} */
electronPackager.Options.prototype.icon;
 /** @type {(!RegExp|function(string): boolean|!Array<!RegExp>)} */
electronPackager.Options.prototype.ignore;
 /** @type {string} */
electronPackager.Options.prototype.name;
 /** @type {string} */
electronPackager.Options.prototype.out;
 /** @type {boolean} */
electronPackager.Options.prototype.overwrite;
 /** @type {string} */
electronPackager.Options.prototype.packageManager;
 /** @type {string} */
electronPackager.Options.prototype.platform;
 /** @type {boolean} */
electronPackager.Options.prototype.prune;
 /** @type {boolean} */
electronPackager.Options.prototype.quiet;
 /** @type {(string|boolean)} */
electronPackager.Options.prototype.tmpdir;
 /** @type {string} */
electronPackager.Options.prototype.appBundleId;
 /** @type {string} */
electronPackager.Options.prototype.appCategoryType;
 /** @type {(string|!Object<string,?>)} */
electronPackager.Options.prototype.extendInfo;
 /** @type {string} */
electronPackager.Options.prototype.helperBundleId;
 /** @type {(boolean|!electronPackager.ElectronOsXSignOptions)} */
electronPackager.Options.prototype.osxSign;
 /** @type {!Array<string>} */
electronPackager.Options.prototype.protocol;
 /** @type {!Array<string>} */
electronPackager.Options.prototype.protocolName;
 /** @type {!electronPackager.Win32Metadata} */
electronPackager.Options.prototype.win32metadata;
