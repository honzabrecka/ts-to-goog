/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/knockout.es5/index.d.ts:
 /** @type {!KnockoutEs5} */
KnockoutStatic.prototype.es5;

/**
 * @template T
 * @param {T} obj
 * @param {!Array<string>=} propertyNames
 * @return {T}
 */
KnockoutStatic.prototype.track = function(obj, propertyNames) {};

/**
 * @param {?} obj
 * @param {!Array<string>=} propertyNames
 * @return {void}
 */
KnockoutStatic.prototype.untrack = function(obj, propertyNames) {};

/**
 * @template T
 * @param {T} obj
 * @param {string} propertyName
 * @param {!Function|!KnockoutDefinePropertyOptions} evaluator_or_options
 * @return {T}
 */
KnockoutStatic.prototype.defineProperty = function(obj, propertyName, evaluator_or_options) {};

/**
 * @param {?} obj
 * @param {string} propertyName
 * @return {!KnockoutObservable<?>}
 */
KnockoutStatic.prototype.getObservable = function(obj, propertyName) {};

/**
 * @param {?} obj
 * @param {string} propertyName
 * @return {void}
 */
KnockoutStatic.prototype.valueHasMutated = function(obj, propertyName) {};
/**
 * @record
 * @struct
 */
function KnockoutEs5() {}

/**
 * @template T
 * @param {T} obj
 * @param {boolean=} createIfNotDefined
 * @return {T}
 */
KnockoutEs5.prototype.getAllObservablesForObject = function(obj, createIfNotDefined) {};

/**
 * @template T
 * @param {!KnockoutStatic} ko
 * @param {!KnockoutObservable<T>} observable
 * @return {void}
 */
KnockoutEs5.prototype.notifyWhenPresentOrFutureArrayValuesMutate = function(ko, observable) {};

/**
 * @template T
 * @param {T} obj
 * @param {string} propertyName
 * @return {boolean}
 */
KnockoutEs5.prototype.isTracked = function(obj, propertyName) {};
/**
 * @record
 * @struct
 */
function KnockoutDefinePropertyOptions() {}

/**
 * @return {?}
 */
KnockoutDefinePropertyOptions.prototype.get = function() {};

/**
 * @param {?} value
 * @return {void}
 */
KnockoutDefinePropertyOptions.prototype.set = function(value) {};

/**
 * @param {T} item
 * @return {!Array}
 */
Array.prototype.remove = function(item) {};

/**
 * @param {!Array=} items
 * @return {!Array}
 */
Array.prototype.removeAll = function(items) {};

/**
 * @param {T} item
 * @return {void}
 */
Array.prototype.destroy = function(item) {};

/**
 * @param {!Array=} items
 * @return {void}
 */
Array.prototype.destroyAll = function(items) {};
