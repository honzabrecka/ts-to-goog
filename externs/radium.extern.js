/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/radium/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportAssignment in  */

/**
 * @template TElement
 * @param {TElement|!Radium.RadiumConfig} component_or_config
 * @return {TElement|function(?): ?}
 */
function Radium(component_or_config) {}
/**
 * @record
 * @struct
 */
Radium.StyleRules = function() {};

/* TODO: IndexSignature: Radium */
/**
 * @record
 * @struct
 */
Radium.StyleProps = function() {};
 /** @type {(!React.CSSProperties|!Radium.StyleRules)} */
Radium.StyleProps.prototype.rules;
 /** @type {string} */
Radium.StyleProps.prototype.scopeSelector;
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
Radium.Style = function() {};
/**
 * @extends {React.HTMLProps}
 * @record
 * @struct
 */
Radium.StyleRootProps = function() {};
 /** @type {!Radium.RadiumConfig} */
Radium.StyleRootProps.prototype.radiumConfig;
/**
 * @extends {React.Component}
 * @constructor
 * @struct
 */
Radium.StyleRoot = function() {};
/**
 * @record
 * @struct
 */
Radium.RadiumConfig = function() {};
 /** @type {function(string): !MediaQueryList} */
Radium.RadiumConfig.prototype.matchMedia;
 /** @type {string} */
Radium.RadiumConfig.prototype.userAgent;
 /** @type {!Array<?>} */
Radium.RadiumConfig.prototype.plugins;

/**
 * Query Radium's knowledge of the browser state for a given element key.
 * This is particularly useful if you would like to set styles for one element when another element is in a particular state,
 * e.g. show a message when a button is hovered.
 * 
 * Note that the target element specified by elementKey must have the state you'd like to check defined in
 * its style object so that Radium knows to add the handlers. It can be empty, e.g. ':hover': {}.
 * @param {?} state you'll usually pass this.state, but sometimes you may want to pass a previous state, like in shouldComponentUpdate, componentWillUpdate, and componentDidUpdate
 * @param {(string|void)} elementKey if you used multiple elements, pass the same key="" or ref="". If you only have one element, you can leave it blank ('main' will be inferred)
 * @param {string} value one of the following: :active, :focus, and :hover
 * @return {boolean}
 */
Radium.getState = function(state, elementKey, value) {};

/**
 * Create a keyframes animation for use in an inline style.
 * @param {!Radium.StyleRules} keyframes
 * @param {string=} name
 * @return {!Object}
 */
Radium.keyframes = function(keyframes, name) {};
/**
 * @record
 * @struct
 */
Radium.RadiumTestMode = function() {};

/**
 * Clears the global Radium state, currently only the cache of media query listeners.
 * @return {void}
 */
Radium.RadiumTestMode.prototype.clearState = function() {};

/**
 * Enables "test mode", which doesn’t throw or warn as much. Currently it just doesn’t throw when using addCSS without StyleRoot.
 * @return {void}
 */
Radium.RadiumTestMode.prototype.enable = function() {};

/**
 * Disables "test mode"
 * @return {void}
 */
Radium.RadiumTestMode.prototype.disable = function() {};
 /** @type {!Radium.RadiumTestMode} */
Radium.TestMode;
