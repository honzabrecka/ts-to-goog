/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fm-websync/index.d.ts:
/** @const */
var fm = {};
/** @const */
fm.websync = {};
/**
 * @record
 * @struct
 */
fm.websync.initializeConfig = function() {};
 /** @type {boolean} */
fm.websync.initializeConfig.prototype.autoDisconnect;
 /** @type {number} */
fm.websync.initializeConfig.prototype.backoffInterval;
 /** @type {string} */
fm.websync.initializeConfig.prototype.clientFrameUrl;
 /** @type {string} */
fm.websync.initializeConfig.prototype.key;
 /** @type {boolean} */
fm.websync.initializeConfig.prototype.quiet;
 /** @type {string} */
fm.websync.initializeConfig.prototype.requestUrl;
 /** @type {number} */
fm.websync.initializeConfig.prototype.retries;
 /** @type {?} */
fm.websync.initializeConfig.prototype.stream;
 /** @type {number} */
fm.websync.initializeConfig.prototype.timeout;
 /** @type {string} */
fm.websync.initializeConfig.prototype.token;
 /** @type {?} */
fm.websync.initializeConfig.prototype.urls;

/**
 * The callback to invoke after onSuccess or onFailure. See initializeCompleteArgs for callback argument details.
 * @param {!fm.websync.baseArgs} args
 * @return {void}
 */
fm.websync.initializeConfig.prototype.onComplete = function(args) {};

/**
 * The callback to invoke if the initialize fails. Defaults to an alert of the error. See initializeFailureArgs for callback argument details.
 * @param {!fm.websync.initializeFailureArgs} args
 * @return {void}
 */
fm.websync.initializeConfig.prototype.onFailure = function(args) {};

/**
 * The callback to invoke if the initialize succeeds. See initializeSuccessArgs for callback argument details.
 * @param {!fm.websync.baseArgs} args
 * @return {void}
 */
fm.websync.initializeConfig.prototype.onSuccess = function(args) {};
/**
 * @record
 * @struct
 */
fm.websync.baseArgs = function() {};

/* TODO: IndexSignature: fm.websync */
/**
 * @record
 * @struct
 */
fm.websync.baseRequestConfig = function() {};
 /** @type {?} */
fm.websync.baseRequestConfig.prototype.meta;
 /** @type {string} */
fm.websync.baseRequestConfig.prototype.requestUrl;
 /** @type {boolean} */
fm.websync.baseRequestConfig.prototype.suppressErrors;
 /** @type {boolean} */
fm.websync.baseRequestConfig.prototype.sync;
/**
 * @extends {fm.websync.baseRequestConfig}
 * @record
 * @struct
 */
fm.websync.connectConfig = function() {};
 /** @type {boolean} */
fm.websync.connectConfig.prototype.stayConnected;

/**
 * The callback to invoke after onSuccess or onFailure. See connectCompleteArgs for callback argument details.
 * @param {!fm.websync.connectCompleteArgs} args
 * @return {void}
 */
fm.websync.connectConfig.prototype.onComplete = function(args) {};

/**
 * The callback to invoke if the connect fails. Defaults to an alert of the error. See connectFailureArgs for callback argument details.
 * @param {!fm.websync.connectFailureArgs} args
 * @return {void}
 */
fm.websync.connectConfig.prototype.onFailure = function(args) {};

/**
 * The callback to invoke if the streaming connection fails. See streamFailureArgs for callback argument details.
 * This method will be invoked if (a) the connection was lost, automatic retries succeeded, but the client had idled on the server (and so needs to reconnect),
 * or (b) the connection was lost and automatic retries failed. In the former case, willReconnect is true, and in the latter case, willReconnect is false.
 * See client for more details on these two scenarios.
 * If willReconnect is true, the client will automatically reconnect. If the reconnect succeeds, the callback specified by onSuccess will be invoked with isReconnect set to true.
 * If the reconnect fails, the callback specified by onFailure will be invoked with isReconnect set to false.
 * With the exception of UI updates, invocations of this callback with willReconnect set to true can be ignored.
 * @param {!fm.websync.streamFailureArgs} args
 * @return {void}
 */
fm.websync.connectConfig.prototype.onStreamFailure = function(args) {};

/**
 * The callback to invoke if the connect succeeds. See connectSuccessArgs for callback argument details.
 * @param {!fm.websync.connectSuccessArgs} args
 * @return {void}
 */
fm.websync.connectConfig.prototype.onSuccess = function(args) {};

/**
 * The callback to invoke when a message is received on a channel that has no local callback specified to handle it. See receiveArgs for callback argument details.
 * This can occur if (a) a client is manually subscribed to a channel by the server or (b) a client subscribed to a channel and then manually removed the local callback using client.
 * @param {!fm.websync.receiveArgs} args
 * @return {void}
 */
fm.websync.connectConfig.prototype.onUnhandledReceive = function(args) {};
/**
 * @extends {fm.websync.baseRequestConfig}
 * @record
 * @struct
 */
fm.websync.subscribeConfig = function() {};
 /** @type {string} */
fm.websync.subscribeConfig.prototype.channel;
 /** @type {!Array<string>} */
fm.websync.subscribeConfig.prototype.channels;

/**
 * The callback to invoke after onSuccess or onFailure. See subscribeCompleteArgs for callback argument details.
 * @param {!fm.websync.subscribeCompleteArgs} args
 * @return {void}
 */
fm.websync.subscribeConfig.prototype.onComplete = function(args) {};

/**
 * (OptionalThe callback to invoke if the subscribe fails. See subscribeFailureArgs for callback argument details.
 * @param {!fm.websync.subscribeFailureArgs} args
 * @return {void}
 */
fm.websync.subscribeConfig.prototype.onFailure = function(args) {};

/**
 * The callback to invoke when data is received on the channel(s). See receiveArgs for callback argument details.
 * @param {!fm.websync.receiveArgs} args
 * @return {void}
 */
fm.websync.subscribeConfig.prototype.onReceive = function(args) {};

/**
 * Subscribers extension. The callback to invoke when a subscribers change notification is received (i.e. when a client subscribes to or unsubscribes from the channel(s)).
 * The current subscribe request will trigger this callback. See subscribersChangeArgs for callback argument details.
 * @param {!fm.websync.subscribersChangeArgs} args
 * @return {void}
 */
fm.websync.subscribeConfig.prototype.onSubscribersChange = function(args) {};

/**
 * The callback to invoke if the subscribe succeeds. See subscribeSuccessArgs for callback argument details.
 * @param {!fm.websync.subscribeSuccessArgs} args
 * @return {void}
 */
fm.websync.subscribeConfig.prototype.onSuccess = function(args) {};
/**
 * @extends {fm.websync.baseArgs}
 * @record
 * @struct
 */
fm.websync.initializeFailureArgs = function() {};
 /** @type {string} */
fm.websync.initializeFailureArgs.prototype.error;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.subscribeSuccessArgs = function() {};
 /** @type {string} */
fm.websync.subscribeSuccessArgs.prototype.channel;
 /** @type {!Array<string>} */
fm.websync.subscribeSuccessArgs.prototype.channels;
 /** @type {boolean} */
fm.websync.subscribeSuccessArgs.prototype.isResubscribe;
 /** @type {!Array<!fm.websync.subscribedClient>} */
fm.websync.subscribeSuccessArgs.prototype.subscribedClients;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.subscribeCompleteArgs = function() {};
 /** @type {boolean} */
fm.websync.subscribeCompleteArgs.prototype.isResubscribe;
/**
 * @extends {fm.websync.baseFailureArgs}
 * @record
 * @struct
 */
fm.websync.subscribeFailureArgs = function() {};
 /** @type {boolean} */
fm.websync.subscribeFailureArgs.prototype.isResubscribe;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.baseFailureArgs = function() {};
 /** @type {string} */
fm.websync.baseFailureArgs.prototype.error;
/**
 * @extends {fm.websync.baseArgs}
 * @record
 * @struct
 */
fm.websync.baseResponseArgs = function() {};
 /** @type {!fm.websync.client} */
fm.websync.baseResponseArgs.prototype.client;
 /** @type {string} */
fm.websync.baseResponseArgs.prototype.clientId;
 /** @type {?} */
fm.websync.baseResponseArgs.prototype.meta;
 /** @type {!Date} */
fm.websync.baseResponseArgs.prototype.timestamp;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.connectSuccessArgs = function() {};
 /** @type {boolean} */
fm.websync.connectSuccessArgs.prototype.isReconnect;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.connectFailureArgs = function() {};
 /** @type {string} */
fm.websync.connectFailureArgs.prototype.error;
 /** @type {boolean} */
fm.websync.connectFailureArgs.prototype.isReconnect;
 /** @type {boolean} */
fm.websync.connectFailureArgs.prototype.reconnect;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.streamFailureArgs = function() {};
 /** @type {string} */
fm.websync.streamFailureArgs.prototype.error;
 /** @type {boolean} */
fm.websync.streamFailureArgs.prototype.willReconnect;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.connectCompleteArgs = function() {};
 /** @type {boolean} */
fm.websync.connectCompleteArgs.prototype.isReconnect;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.receiveArgs = function() {};
 /** @type {string} */
fm.websync.receiveArgs.prototype.channel;
 /** @type {?} */
fm.websync.receiveArgs.prototype.data;
 /** @type {!fm.websync.publishingClient} */
fm.websync.receiveArgs.prototype.publishingClient;
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.subscribersChangeArgs = function() {};
 /** @type {!fm.websync.subscribersChange} */
fm.websync.subscribersChangeArgs.prototype.change;
 /** @type {string} */
fm.websync.subscribersChangeArgs.prototype.channel;
/**
 * @record
 * @struct
 */
fm.websync.publishingClient = function() {};
 /** @type {?} */
fm.websync.publishingClient.prototype.boundRecords;
 /** @type {string} */
fm.websync.publishingClient.prototype.id;
/**
 * @record
 * @struct
 */
fm.websync.subscribersChange = function() {};
 /** @type {!Array<!fm.websync.subscribedClient>} */
fm.websync.subscribersChange.prototype.clients;
 /** @type {string} */
fm.websync.subscribersChange.prototype.type;
/**
 * @record
 * @struct
 */
fm.websync.subscribedClient = function() {};
 /** @type {?} */
fm.websync.subscribedClient.prototype.boundRecords;
 /** @type {string} */
fm.websync.subscribedClient.prototype.id;
/**
 * @extends {fm.websync.baseRequestConfig}
 * @record
 * @struct
 */
fm.websync.disconnectConfig = function() {};

/**
 * The callback to invoke after onSuccess or onFailure. See disconnectCompleteArgs for callback argument details.
 * @param {!fm.websync.baseResponseArgs} args
 * @return {void}
 */
fm.websync.disconnectConfig.prototype.onComplete = function(args) {};

/**
 * The callback to invoke if the disconnect fails. See disconnectFailureArgs for callback argument details.
 * @param {!fm.websync.baseFailureArgs} args
 * @return {void}
 */
fm.websync.disconnectConfig.prototype.onFailure = function(args) {};

/**
 * The callback to invoke if the disconnect succeeds. See disconnectSuccessArgs for callback argument details.
 * @param {!fm.websync.baseResponseArgs} args
 * @return {void}
 */
fm.websync.disconnectConfig.prototype.onSuccess = function(args) {};
/**
 * @extends {fm.websync.baseResponseArgs}
 * @record
 * @struct
 */
fm.websync.unsubscribeSuccessArgs = function() {};
 /** @type {string} */
fm.websync.unsubscribeSuccessArgs.prototype.channel;
 /** @type {!Array<string>} */
fm.websync.unsubscribeSuccessArgs.prototype.channels;
/**
 * @extends {fm.websync.baseRequestConfig}
 * @record
 * @struct
 */
fm.websync.unsubscribeConfig = function() {};
 /** @type {string} */
fm.websync.unsubscribeConfig.prototype.channel;
 /** @type {!Array<string>} */
fm.websync.unsubscribeConfig.prototype.channels;

/**
 * The callback to invoke after onSuccess or onFailure. See unsubscribeCompleteArgs for callback argument details.
 * @param {!fm.websync.baseResponseArgs} args
 * @return {void}
 */
fm.websync.unsubscribeConfig.prototype.onComplete = function(args) {};

/**
 * The callback to invoke if the unsubscribe fails. See unsubscribeFailureArgs for callback argument details.
 * @param {!fm.websync.baseFailureArgs} args
 * @return {void}
 */
fm.websync.unsubscribeConfig.prototype.onFailure = function(args) {};

/**
 * The callback to invoke if the unsubscribe succeeds. See unsubscribeSuccessArgs for callback argument details.
 * @param {!fm.websync.unsubscribeSuccessArgs} args
 * @return {void}
 */
fm.websync.unsubscribeConfig.prototype.onSuccess = function(args) {};
/**
 * @constructor
 * @struct
 */
fm.websync.client = function() {};

/**
 * Sets up and maintains a streaming connection to the server.
 * While this method will typically run asychronously, the WebSync client is designed to be used without (much) consideration for its asynchronous nature.
 * To that end, any calls to methods that require an active connection, like bind, subscribe and publish, will be queued automatically and executed once this
 * method has completed successfully.
 * 
 * @param {!fm.websync.connectConfig} config
 * @return {!fm.websync.client}
 */
fm.websync.client.prototype.connect = function(config) {};

/**
 *
 * @param {!fm.websync.disconnectConfig} config Takes down a streaming connection to the server and unsubscribes the client.
 * After the disconnect completes successfully, any further calls to methods that require an active connection, like bind, subscribe and publish, will be queued
 * automatically and executed only if/when the client reconnects.
 * @return {!fm.websync.client}
 */
fm.websync.client.prototype.disconnect = function(config) {};

/**
 * Initializes the client according to the specified configuration.
 * This method must always be called first. While is always executes synchronously, callbacks are allowed for the purposes of method chaining.
 * @param {!fm.websync.initializeConfig} config
 * @return {!fm.websync.client}
 */
fm.websync.client.initialize = function(config) {};

/**
 * Reconnects after a stream failure using either the most recent connectConfig or the one specified.
 * This method should only be called from the callback specified by onSreamFailure and only if the args.willReconnect flag is set to false.
 * Otherwise, the client will reconnect automatically.
 * @param {!fm.websync.connectConfig=} config
 * @return {!fm.websync.client}
 */
fm.websync.client.prototype.reconnect = function(config) {};

/**
 * Subscribes the client to receive messages on one or more channels.
 * When the subscribe completes successfully, the callback specified by onSuccess will be invoked, passing in the subscribed channel(s),
 * including any modifications made on the server.
 * @param {!fm.websync.subscribeConfig} config
 * @return {!fm.websync.client}
 */
fm.websync.client.prototype.subscribe = function(config) {};

/**
 * Unsubscribes the client from receiving messages on one or more channels.
 * When the unsubscribe completes successfully, the callback specified by onSuccess will be invoked, passing in the unsubscribed channel(s),
 * including any modifications made on the server.
 * @param {!fm.websync.unsubscribeConfig} config
 * @return {!fm.websync.client}
 */
fm.websync.client.prototype.unsubscribe = function(config) {};
