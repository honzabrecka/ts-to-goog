/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/dymo-label-framework/index.d.ts:
/** @const */
var dymo = {};
/** @const */
dymo.label = {};
/** @const */
dymo.label.framework = {};

/** @const */
dymo.label.framework.AddressBarcodePosition = {};
/** @const {number} */
dymo.label.framework.AddressBarcodePosition.AboveAddress;
/** @const {number} */
dymo.label.framework.AddressBarcodePosition.BelowAddress;
/** @const {number} */
dymo.label.framework.AddressBarcodePosition.Suppress;

/** @const */
dymo.label.framework.FlowDirection = {};
/** @const {number} */
dymo.label.framework.FlowDirection.LeftToRight;
/** @const {number} */
dymo.label.framework.FlowDirection.RightToLeft;

/** @const */
dymo.label.framework.LabelWriterPrintQuality = {};
/** @const {number} */
dymo.label.framework.LabelWriterPrintQuality.Text;
/** @const {number} */
dymo.label.framework.LabelWriterPrintQuality.BarcodeAndGraphics;
/** @const {number} */
dymo.label.framework.LabelWriterPrintQuality.Auto;

/** @const */
dymo.label.framework.PrintJobStatus = {};
/** @const {number} */
dymo.label.framework.PrintJobStatus.Error;
/** @const {number} */
dymo.label.framework.PrintJobStatus.Finished;
/** @const {number} */
dymo.label.framework.PrintJobStatus.InQueue;
/** @const {number} */
dymo.label.framework.PrintJobStatus.InvalidJobId;
/** @const {number} */
dymo.label.framework.PrintJobStatus.NotSpooled;
/** @const {number} */
dymo.label.framework.PrintJobStatus.PaperOut;
/** @const {number} */
dymo.label.framework.PrintJobStatus.PrinterBusy;
/** @const {number} */
dymo.label.framework.PrintJobStatus.Printing;
/** @const {number} */
dymo.label.framework.PrintJobStatus.ProcessingError;
/** @const {number} */
dymo.label.framework.PrintJobStatus.Unknown;

/** @const */
dymo.label.framework.TapeAlignment = {};
/** @const {number} */
dymo.label.framework.TapeAlignment.Center;
/** @const {number} */
dymo.label.framework.TapeAlignment.Left;
/** @const {number} */
dymo.label.framework.TapeAlignment.Right;

/** @const */
dymo.label.framework.TapeCutMode = {};
/** @const {number} */
dymo.label.framework.TapeCutMode.AutoCut;
/** @const {number} */
dymo.label.framework.TapeCutMode.ChainMarks;

/** @const */
dymo.label.framework.TwinTurboRoll = {};
/** @const {number} */
dymo.label.framework.TwinTurboRoll.Left;
/** @const {number} */
dymo.label.framework.TwinTurboRoll.Right;
/** @const {number} */
dymo.label.framework.TwinTurboRoll.Auto;
 /** @type {string} */
dymo.label.framework.VERSION;

/**
 * Checks that the browser enviroment is suitable for the Framework.
 * @return {{isBrowserSupported: boolean, isFrameworkInstalled: boolean, errorDetails: string}}
 */
dymo.label.framework.checkEnvironment = function() {};
/**
 * @record
 * @struct
 */
dymo.label.framework.Color = function() {};
 /** @type {number} */
dymo.label.framework.Color.prototype.alpha;
 /** @type {number} */
dymo.label.framework.Color.prototype.red;
 /** @type {number} */
dymo.label.framework.Color.prototype.green;
 /** @type {number} */
dymo.label.framework.Color.prototype.blue;
/**
 * @record
 * @struct
 */
dymo.label.framework.CreateLabelRenderParamsXmlParams = function() {};
 /** @type {!dymo.label.framework.Color} */
dymo.label.framework.CreateLabelRenderParamsXmlParams.prototype.labelColor;
 /** @type {!dymo.label.framework.Color} */
dymo.label.framework.CreateLabelRenderParamsXmlParams.prototype.shadowColor;
 /** @type {number} */
dymo.label.framework.CreateLabelRenderParamsXmlParams.prototype.shadowDepth;
 /** @type {dymo.label.framework.FlowDirection} */
dymo.label.framework.CreateLabelRenderParamsXmlParams.prototype.flowDirection;
 /** @type {boolean} */
dymo.label.framework.CreateLabelRenderParamsXmlParams.prototype.pngUseDisplayResolution;

/**
 * Creates an XML string suitable to pass to the dymo.label.framework.renderLabel function
 * as renderParamsXml parameter. Returns an XML string.
 * 
 * @param {!dymo.label.framework.CreateLabelRenderParamsXmlParams} params A JavaScript object with the following properties
 *   (not all properties must be defined; if a property is not defined, a default value is used)
 * @return {string}
 */
dymo.label.framework.createLabelRenderParamsXml = function(params) {};
/**
 * @record
 * @struct
 */
dymo.label.framework.CreateLabelWriterPrintParamsXmlParams = function() {};
 /** @type {number} */
dymo.label.framework.CreateLabelWriterPrintParamsXmlParams.prototype.copies;
 /** @type {string} */
dymo.label.framework.CreateLabelWriterPrintParamsXmlParams.prototype.jobTitle;
 /** @type {dymo.label.framework.FlowDirection} */
dymo.label.framework.CreateLabelWriterPrintParamsXmlParams.prototype.flowDirection;
 /** @type {dymo.label.framework.LabelWriterPrintQuality} */
dymo.label.framework.CreateLabelWriterPrintParamsXmlParams.prototype.printQuality;
 /** @type {dymo.label.framework.TwinTurboRoll} */
dymo.label.framework.CreateLabelWriterPrintParamsXmlParams.prototype.twinTurboRoll;

/**
 * Creates an XML string suitable to to pass to the dymo.label.framework.printLabel function
 * as printParamsXml parameter. Created print parameters are for printing to LabelWriter printers.
 * Returns an XML string.
 * 
 * @param {!dymo.label.framework.CreateLabelWriterPrintParamsXmlParams} params A JavaScript object with the following properties
 *   (not all properties must be defined; if a property is not defined, a default value is used)
 * @return {string}
 */
dymo.label.framework.createLabelWriterPrintParamsXml = function(params) {};
/**
 * @record
 * @struct
 */
dymo.label.framework.CreateTapePrintParamsXmlParams = function() {};
 /** @type {number} */
dymo.label.framework.CreateTapePrintParamsXmlParams.prototype.copies;
 /** @type {string} */
dymo.label.framework.CreateTapePrintParamsXmlParams.prototype.jobTitle;
 /** @type {dymo.label.framework.FlowDirection} */
dymo.label.framework.CreateTapePrintParamsXmlParams.prototype.flowDirection;
 /** @type {dymo.label.framework.TapeAlignment} */
dymo.label.framework.CreateTapePrintParamsXmlParams.prototype.alignment;
 /** @type {dymo.label.framework.TapeCutMode} */
dymo.label.framework.CreateTapePrintParamsXmlParams.prototype.cutMode;

/**
 * Creates an XML string suitable to pass to the dymo.label.framework.printLabel function as printParamsXml parameter. Created print parameters are for printing to Tape printers.
 * Returns an XML string.
 * 
 * @param {!dymo.label.framework.CreateTapePrintParamsXmlParams} params A JavaScript object with the following properties
 *   (not all properties must be defined; if a property is not defined, a default value is used)
 * @return {string}
 */
dymo.label.framework.createTapePrintParamsXml = function(params) {};
/**
 * @record
 * @struct
 */
dymo.label.framework.PrinterInfo = function() {};
 /** @type {boolean} */
dymo.label.framework.PrinterInfo.prototype.isAutoCutSupported;
 /** @type {boolean} */
dymo.label.framework.PrinterInfo.prototype.isConnected;
 /** @type {boolean} */
dymo.label.framework.PrinterInfo.prototype.isLocal;
 /** @type {boolean} */
dymo.label.framework.PrinterInfo.prototype.isTwinTurbo;
 /** @type {string} */
dymo.label.framework.PrinterInfo.prototype.modelName;
 /** @type {string} */
dymo.label.framework.PrinterInfo.prototype.name;
 /** @type {string} */
dymo.label.framework.PrinterInfo.prototype.printerType;

/**
 * Gets a list of all printers supported by the DYMO Label Framework.
 * Results are returned in an array-like object.
 * Each item is of the type dymo.label.framework.PrinterInfo.
 * In addition, items can be accessed by printer name.
 * @return {!Array<!dymo.label.framework.PrinterInfo>}
 */
dymo.label.framework.getPrinters = function() {};

/**
 * Convenience method (overload of getPrinters) to get a list of all printers of type "LabelWriterPrinter".
 * @return {!Array<!dymo.label.framework.PrinterInfo>}
 */
dymo.label.framework.getLabelWriterPrinters = function() {};

/**
 * Convenience method (overload of getPrinters) to get a list of all printers of type "TapePrinter".
 * @return {!Array<!dymo.label.framework.PrinterInfo>}
 */
dymo.label.framework.getTapePrinters = function() {};

/**
 * Loads an image from a URL or file and returns it as a base64-encoded PNG stream.
 * The loaded image is not necessarily in PNG format.
 * The image can be in any format supported by the Framework (by DYMO Label v.8).
 * The loaded data can be used to set content for an image object on a label.
 * Note: The comments for {\@link openLabelFile} apply to this function as well.
 * 
 * @param {string} imageUri URL or file name to load the image from.
 * 
 * @return {string} A base64-encoded PNG stream.
 */
dymo.label.framework.loadImageAsPngBase64 = function(imageUri) {};
/**
 * @record
 * @struct
 */
dymo.label.framework.PrintJob = function() {};

/**
 * Gets a status of the print job
 * 
 * @param {function(!dymo.label.framework.PrintJobStatusInfo): ?} replyCallback a function called when the status is available
 * @return {void}
 */
dymo.label.framework.PrintJob.prototype.getStatus = function(replyCallback) {};
/**
 * @record
 * @struct
 */
dymo.label.framework.PrintJobStatusInfo = function() {};
 /** @type {string} */
dymo.label.framework.PrintJobStatusInfo.prototype.statusMessage;
 /** @type {dymo.label.framework.PrintJobStatus} */
dymo.label.framework.PrintJobStatusInfo.prototype.status;
/**
 * @record
 * @struct
 */
dymo.label.framework.ILabel = function() {};

/**
 * Gets the Intelligent Mail barcode position for an Address object.
 * 
 * @param {number} addressIndex The zero-based index of the Address object in a 'virtual' array of all Address objects on the label.
 * 
 * @return {dymo.label.framework.AddressBarcodePosition} A string with one of the values defined by the dymo.label.framework.AddressBarcodePosition enumeration.
 */
dymo.label.framework.ILabel.prototype.getAddressBarcodePosition = function(addressIndex) {};

/**
 * Gets the number of Address objects on the label.
 * @return {number}
 */
dymo.label.framework.ILabel.prototype.getAddressObjectCount = function() {};

/**
 * Gets the text content of an Address object.
 * 
 * @param {number} addressIndex The zero-based index of the Address object in a 'virtual' array of all Address objects on the label.
 * 
 * @return {string} The plain text from the Address object.
 */
dymo.label.framework.ILabel.prototype.getAddressText = function(addressIndex) {};

/**
 * Returns the current label as an XML string. The returned XML string can be passed
 * to functions that accept label XML as a parameter, or can be used to direct content
 * manipulations not currently supported by the Framework.
 * @return {string}
 */
dymo.label.framework.ILabel.prototype.getLabelXml = function() {};

/**
 * Gets an array of object reference names on the label. Returns an array of strings.
 * @return {!Array<string>}
 */
dymo.label.framework.ILabel.prototype.getObjectNames = function() {};

/**
 * Gets the 'text' content of an object. The content depends on the object type.
 * * Address and Text objects - Returns the object text without formatting.
 * * Barcode object - Returns the barcode string.
 * * Image - Returns the base64-encoded string on the image's PNG stream (only if image data is embedded with the label and not linked to a URL or file).
 * * Circular Text object - Returns the object text.
 * * Other objects - Returns an empty string.
 * 
 * @param {string} objectName The name of the object.
 * @return {string}
 */
dymo.label.framework.ILabel.prototype.getObjectText = function(objectName) {};

/**
 * Prints the label.
 * 
 * @param {string} printerName The name of the printer to print to. A list of printers can be obtained using dymo.label.framework.getPrinters.
 * @param {string} printParamsXml The print parameters, such as number of copies, print quality, etc. See [PrintParams.xsd]{\@link http://labelwriter.com/software/dls/sdk/PrintParams.xsd}.
 * @param {string} labelSetXml 
 *   The LabelSet to print. LabelSet is used to print multiple labels with the same layout, but with different
 *   data, such as multiple addresses. Use the dymo.label.framework.LabelSetBuilder class to create a LabelSet
 *   or construct XML manually according to [LabelSet.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelSet.xsd}.
 * @return {void}
 */
dymo.label.framework.ILabel.prototype.print = function(printerName, printParamsXml, labelSetXml) {};

/**
 * Prints a label and runs status checking in a loop
 * 
 * @param {string} printerName The name of the printer to print to. A list of printers can be obtained using dymo.label.framework.getPrinters.
 * @param {string} printParamsXml The print parameters, such as number of copies, print quality, etc. See [PrintParams.xsd]{\@link http://labelwriter.com/software/dls/sdk/PrintParams.xsd}.
 * @param {string} labelSetXml The LabelSet to print.
 *   LabelSet is used to print multiple labels with the same layout, but with different data, such as multiple
 *   addresses. Use the dymo.label.framework.LabelSetBuilder class to create a LabelSet or construct XML manually
 *   according to [LabelSet.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelSet.xsd}.
 * @param {function(!dymo.label.framework.PrintJob, !dymo.label.framework.PrintJobStatusInfo): boolean} statusCallback Status callback function called when the service returned status information.
 *   The callback takes two parameters; the first is PrintJob object. It can be used to get the status information on demand,
 *   without using polling. Also, it might be extended in the future to provide more control over the print job, e.g. an ability
 *   to cancel it. The second parameter to the callback is PrintJobStatusInfo class. PrintJobStatusInfo has two properties:
 *   statusMessage that contains a status message string; and status that contains status code. The callback has to return a
 *   boolean value. If true is returned, than pritnAndPollStatus() will poll the service again after the pollInterval passed.
 *   If false is returned, then printAndPollStatus() finishes processing.
 * @param {number} pollInterval Interval in milliseconds to ask the proxy service for the job status information.
 * 
 * @return {!dymo.label.framework.PrintJob} The print job.
 */
dymo.label.framework.ILabel.prototype.printAndPollStatus = function(printerName, printParamsXml, labelSetXml, statusCallback, pollInterval) {};

/**
 * Creates a label raster image that can be used for label previewing.
 * 
 * @param {string} renderParamsXml Rendering parameters, such as shadow depth, label color, etc.
 *   See [LabelRenderParams.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelRenderParams.xsd}.
 * @param {string} printerName The name of the printer that the preview is generated for.
 *   The preview/output can be different for different printers,
 *   especially for tape printers with different print head sizes.
 *   If it is not important what printer the label is printed to,
 *   an empty string can be passed. In this case, the default printer metrics will
 *   be used. The default is LW400 for LabelWriter printers and LW400 DUO Tape for
 *   tape printers.
 * @return {string}
 */
dymo.label.framework.ILabel.prototype.render = function(renderParamsXml, printerName) {};

/**
 * Sets the Intelligent Mail barcode position for an Address object.
 * 
 * @param {number} addressIndex The zero-based index of the Address object in a 'virtual' array of all Address objects on the label.
 * @param {dymo.label.framework.AddressBarcodePosition} barcodePosition The barcode position.
 * 
 * @return {!dymo.label.framework.ILabel} self
 */
dymo.label.framework.ILabel.prototype.setAddressBarcodePosition = function(addressIndex, barcodePosition) {};

/**
 * Sets the text content of an Address object.
 * 
 * @param {number} addressIndex The zero-based index of the Address object in a 'virtual' array of all Address objects on the label.
 * @param {string} text The plain text string that contains the content of the Address object. Note: The current text formatting is retained on a line-by-line basis.
 * 
 * @return {!dymo.label.framework.ILabel} self
 */
dymo.label.framework.ILabel.prototype.setAddressText = function(addressIndex, text) {};

/**
 * Sets the text content for an object. The content and/or text formatting are set differently
 * depending on the object type.
 * 
 * * Address object - The formatting is applied on a line-by-line basis (using list).
 * * Text object - The formatting of the current first character is applied to all text.
 * * Barcode object - The barcode text.
 * * Image object - The base64-encoded string of image's PNG stream.
 * * CircularText object - The object text.
 * * Date and Time and Counter objects - The object's 'Before' text.
 * * Other objects - An empty string.
 * 
 * @param {string} objectName The name of the object.
 * @param {string} text The plain text string for new object content.
 * @return {!dymo.label.framework.ILabel}
 */
dymo.label.framework.ILabel.prototype.setObjectText = function(objectName, text) {};
/**
 * @record
 * @struct
 */
dymo.label.framework.ILabelSetRecord = function() {};

/**
 * Adds image data to the record.
 * 
 * @param {string} objectName The name of the object that the markup is set for.
 * @param {string} base64Image The string containing the base64-encoded PNG image stream.
 * 
 * @return {!dymo.label.framework.ILabelSetRecord} self
 */
dymo.label.framework.ILabelSetRecord.prototype.setBase64Image = function(objectName, base64Image) {};

/**
 * Adds data to the record specified as plain text.
 * 
 * @param {string} objectName The name of the object that the markup is set for.
 * @param {string} text The object text to set.
 * 
 * @return {!dymo.label.framework.ILabelSetRecord} self
 */
dymo.label.framework.ILabelSetRecord.prototype.setText = function(objectName, text) {};

/**
 * Adds data to the record specified as text markup.
 * 
 * @param {string} objectName The name of the object that the markup is set for.
 * @param {string} textMarkup The markup string. See [TextMarkup.xsd]{\@link http://labelwriter.com/software/dls/sdk/TextMarkup.xsd}.
 * 
 * @return {!dymo.label.framework.ILabelSetRecord} self
 */
dymo.label.framework.ILabelSetRecord.prototype.setTextMarkup = function(objectName, textMarkup) {};

/**
 * Loads label content from a file or URL.
 * The following considerations should be taken before using this function:
 * 
 * * The full file name or URL should be specified. The function will not honor relative paths based on document.location.href.
 * * The fileName can be an http:// or file:// URL. On Windows the file name can be a regular file name, for example 'c:\users\desktop\address.label'.
 * * The content of the label will be loaded synchronously. Therefore, if the remote server is down there will be a timeout.
 * * Any local file can be accessed or attempted to be accessed. The function is not limited by any browser restrictions. However, only a valid label file (according to label.xsd schema) can be loaded. This could still be a potential security concern.
 * * The URL is not limited to same-site-origin browser policy. Any URL can be opened.
 * * The proxy settings are the system default settings, these are not necessarily the browser settings.
 * 
 * Use this function only when there is no other way to load label data. In most cases, label data should be loaded using dymo.label.framework.openLabelXml.
 * 
 * @param {string} fileName FileName or URL to load label from.
 * 
 * @return {!dymo.label.framework.ILabel} Returns Label object; provides label manipulation methods.
 */
dymo.label.framework.openLabelFile = function(fileName) {};

/**
 * Loads label content from an XML stream/string.
 * Note: This is the preferred way to load/open label files.
 * Use XMLHttpRequest() or other standard browser methods to get XML string.
 * 
 * @param {string} labelXml The label definition as an XML string.
 * @return {!dymo.label.framework.ILabel} Label object.
 */
dymo.label.framework.openLabelXml = function(labelXml) {};

/**
 * Prints one or more labels.
 * 
 * @param {string} printerName The name of the printer to print to. A list of printers can be obtained using
 *   dymo.label.framework.getPrinters.
 * @param {string} printParamsXml The print parameters, such as number of copies, print quality, etc.
 *   See [PrintParams.xsd]{\@link http://labelwriter.com/software/dls/sdk/PrintParams.xsd}.
 * @param {string} labelXml The label to print.
 * @param {string} labelSetXml The LabelSet to print. LabelSet is used to print multiple labels with the same layout,
 *   but with different data, such as multiple addresses. Use dymo.label.framework.LabelSetBuilder class to
 *   create a LabelSet, or construct XML manualy according to
 *   [LabelSet.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelSet.xsd}.
 * @return {void}
 */
dymo.label.framework.printLabel = function(printerName, printParamsXml, labelXml, labelSetXml) {};

/**
 * Prints a label and returns a print job object
 * 
 * @param {string} printerName The printer to print on. A list of printers can be obtained by getPrinters()
 * @param {string} printParamsXml Printing parameters, like number of copies, print quality, etc. See [PrintParams.xsd]{\@link http://labelwriter.com/software/dls/sdk/PrintParams.xsd}
 * @param {string} labelXml Label to print
 * @param {string} labelSetXml 
 *   LabelSet to print. LabelSet is used to print multiple labels with same layout but different data, e.g. multiple addresses.
 *   Use LabelSetBuilder to create a LabelSet or construct xml manualy according to [LabelSet.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelSet.xsd}.
 * @return {!dymo.label.framework.PrintJob}
 */
dymo.label.framework.printLabel2 = function(printerName, printParamsXml, labelXml, labelSetXml) {};

/**
 * Prints a label and runs status checking in a loop
 * 
 * @param {string} printerName The printer to print on. A list of printers can be obtained by getPrinters()
 * @param {string} printParamsXml Printing parameters, like number of copies, print quality, etc. See [PrintParams.xsd]{\@link http://labelwriter.com/software/dls/sdk/PrintParams.xsd}
 * @param {string} labelXml Label to print
 * @param {string} labelSetXml 
 *   LabelSet to print. LabelSet is used to print multiple labels with same layout but different data, e.g.
 *   multiple addresses.
 *   Use LabelSetBuilder to create a LabelSet or construct xml manually according to
 *   [LabelSet.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelSet.xsd}
 * @param {function(!dymo.label.framework.PrintJob, !dymo.label.framework.PrintJobStatusInfo): boolean} statusCallback 
 *   Function to be called when a print job status is available.
 *   To continue polling the status the function should return true, false otherwise.
 * @param {number} pollInterval Polling interval in milliseconds
 * @return {!dymo.label.framework.PrintJob}
 */
dymo.label.framework.printLabelAndPollStatus = function(printerName, printParamsXml, labelXml, labelSetXml, statusCallback, pollInterval) {};

/**
 * Creates a label raster image that can be used for label previewing.
 * Returns a string that is a base64-encoded PNG stream of the label image.
 * This string can be used as data: url for  element.
 * Note: data: urls are not supported by IE6 and IE7. IE8 supports them with a 32KB limit (so it may not be possible to preview 'large' labels).
 * 
 * @param {string} labelXml Label to preview.
 * @param {string} renderParamsXml The rendering parameters, such as shadow depth, label color, etc. See [LabelRenderParams.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelRenderParams.xsd}.
 * @param {string} printerName The name of the printer that the preview is generated for.
 *   The preview/output can be different for different printers, especially for tape printers
 *   with different print head sizes. If it is not important what printer the label is
 *   printed to, an empty string can be passed. In this case, the default printer metrics
 *   will be used. The default is LW400 for LabelWriter printers and LW400 DUO Tape for tape printers.
 * 
 * @return {string} A base64-encoded PNG stream of the label image.
 */
dymo.label.framework.renderLabel = function(labelXml, renderParamsXml, printerName) {};
/**
 * @record
 * @struct
 */
dymo.label.framework.AddPrinterUriCallback = function() {};

/* TODO: CallSignature: dymo.label.framework */

/**
 * Undocumented, removed, see http://developers.dymo.com/2013/08/14/dymo-sdk-qa/#comment-27119
 * @param {string} printerUri
 * @param {string=} location
 * @param {!dymo.label.framework.AddPrinterUriCallback=} successCallback
 * @param {!dymo.label.framework.AddPrinterUriCallback=} errorCallback
 * @return {void}
 */
dymo.label.framework.addPrinterUri = function(printerUri, location, successCallback, errorCallback) {};

/**
 * Undocumented, removed, see http://developers.dymo.com/2013/08/14/dymo-sdk-qa/#comment-27119
 * @param {string} printerUri
 * @return {void}
 */
dymo.label.framework.removePrinterUri = function(printerUri) {};

/**
 * Undocumented, removed, see http://developers.dymo.com/2013/08/14/dymo-sdk-qa/#comment-27119
 * @return {void}
 */
dymo.label.framework.removeAllPrinterUri = function() {};
/**
 * @constructor
 * @struct
 */
dymo.label.framework.LabelSetBuilder = function() {};

/**
 * Converts record objects to XML format. The XML format schema is defined in [LabelSet.xsd]{\@link http://labelwriter.com/software/dls/sdk/LabelSet.xsd}.
 * Returned XML can be passed to dymo.label.framefork.printLabel as labelSetXml parameter. This function can be used independent of other LabelSetBuilder methods, if records data is generated by other functions.
 * 
 * @param {!Array<!Object>} records The records to convert to XML. Records should be an array-like object of associative-arrays with object names as keys and object text as values.
 * 
 * @return {string} An XML string.
 */
dymo.label.framework.LabelSetBuilder.toXml = function(records) {};

/**
 * Adds a new record to the LabelSet. Returns a record object.
 * @return {!dymo.label.framework.ILabelSetRecord}
 */
dymo.label.framework.LabelSetBuilder.prototype.addRecord = function() {};

/**
 * Get all record objects in this LabelSetBuilder.
 * @return {!Array<!dymo.label.framework.ILabelSetRecord>}
 */
dymo.label.framework.LabelSetBuilder.prototype.getRecords = function() {};

/**
 * Converts the builder's content to an XML string suitable to pass to dymo.label.framefork.printLabel.
 * @return {string}
 */
dymo.label.framework.LabelSetBuilder.prototype.toString = function() {};
