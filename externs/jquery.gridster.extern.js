/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.gridster/index.d.ts:
/**
 * @record
 * @struct
 */
function GridsterDraggable() {}
 /** @type {?} */
GridsterDraggable.prototype.items;
 /** @type {number} */
GridsterDraggable.prototype.distance;
 /** @type {boolean} */
GridsterDraggable.prototype.limit;
 /** @type {number} */
GridsterDraggable.prototype.offset_left;
 /** @type {string} */
GridsterDraggable.prototype.handle;
 /** @type {function(!Event, !GridsterUi): void} */
GridsterDraggable.prototype.drag;
 /** @type {function(!Event, {helper: ?<!HTMLElement>}): void} */
GridsterDraggable.prototype.start;
 /** @type {function(!Event, {helper: ?<!HTMLElement>}): void} */
GridsterDraggable.prototype.stop;
/**
 * @record
 * @struct
 */
function GridsterResizable() {}
 /** @type {boolean} */
GridsterResizable.prototype.enabled;
 /** @type {!Array<string>} */
GridsterResizable.prototype.axes;
 /** @type {string} */
GridsterResizable.prototype.handle_append_to;
 /** @type {string} */
GridsterResizable.prototype.handle_class;
 /** @type {!Array<number>} */
GridsterResizable.prototype.max_size;
 /** @type {!Array<number>} */
GridsterResizable.prototype.min_size;
 /** @type {function(!Event, !GridsterUi, ?<!HTMLElement>): void} */
GridsterResizable.prototype.resize;
 /** @type {function(!Event, {helper: ?<!HTMLElement>}, ?<!HTMLElement>): void} */
GridsterResizable.prototype.start;
 /** @type {function(!Event, {helper: ?<!HTMLElement>}, ?<!HTMLElement>): void} */
GridsterResizable.prototype.stop;
/**
 * @record
 * @struct
 */
function GridsterUi() {}
 /** @type {{left: number, top: number}} */
GridsterUi.prototype.position;
/**
 * @record
 * @struct
 */
function GridsterCollision() {}
 /** @type {function(!GridsterCollisionData): void} */
GridsterCollision.prototype.on_overlap_start;
 /** @type {function(!GridsterCollisionData): void} */
GridsterCollision.prototype.on_overlap_stop;
 /** @type {function(!GridsterCollisionData): void} */
GridsterCollision.prototype.on_overlap;
/**
 * @record
 * @struct
 */
function GridsterCollisionData() {}
 /** @type {number} */
GridsterCollisionData.prototype.area;
 /** @type {!GridsterCoords} */
GridsterCollisionData.prototype.area_coords;
 /** @type {string} */
GridsterCollisionData.prototype.region;
 /** @type {!GridsterCoords} */
GridsterCollisionData.prototype.coords;
 /** @type {!GridsterCoords} */
GridsterCollisionData.prototype.player_coords;
 /** @type {!HTMLElement} */
GridsterCollisionData.prototype.el;
/**
 * @record
 * @struct
 */
function GridsterCoords() {}
 /** @type {number} */
GridsterCoords.prototype.col;
 /** @type {number} */
GridsterCoords.prototype.row;
 /** @type {number} */
GridsterCoords.prototype.size_x;
 /** @type {number} */
GridsterCoords.prototype.size_y;
/**
 * @record
 * @struct
 */
function GridsterOptions() {}
 /** @type {(string|!Array<!HTMLElement>)} */
GridsterOptions.prototype.widget_selector;
 /** @type {!Array<number>} */
GridsterOptions.prototype.widget_margins;
 /** @type {!Array<number>} */
GridsterOptions.prototype.widget_base_dimensions;
 /** @type {number} */
GridsterOptions.prototype.extra_cols;
 /** @type {number} */
GridsterOptions.prototype.extra_rows;
 /** @type {number} */
GridsterOptions.prototype.min_cols;
 /** @type {number} */
GridsterOptions.prototype.max_cols;
 /** @type {number} */
GridsterOptions.prototype.min_rows;
 /** @type {number} */
GridsterOptions.prototype.max_size_x;
 /** @type {boolean} */
GridsterOptions.prototype.autogenerate_sytesheet;
 /** @type {boolean} */
GridsterOptions.prototype.avoid_overlapped_widgets;
 /** @type {function(?<!HTMLElement>, !GridsterCoords): ?} */
GridsterOptions.prototype.serialize_params;
 /** @type {!GridsterCollision} */
GridsterOptions.prototype.collision;
 /** @type {!GridsterDraggable} */
GridsterOptions.prototype.draggable;
 /** @type {string} */
GridsterOptions.prototype.namespace;
 /** @type {boolean} */
GridsterOptions.prototype.autogenerate_stylesheet;
 /** @type {!GridsterResizable} */
GridsterOptions.prototype.resize;

/**
 * Gridster
 * @param {!GridsterOptions=} options An object with all the gridster options you want to overwrite.
 * @return {?<!HTMLElement>} Gridster jQuery instance.
 * 
 */
JQuery.prototype.gridster = function(options) {};
/**
 * @record
 * @struct
 */
function Gridster() {}
 /** @type {!GridsterOptions} */
Gridster.prototype.options;

/**
 * Create a new widget with the given html and add it to the grid.
 * @see add_widget
 * 
 * @see add_widget
 * 
 * @param {string|!HTMLElement|?<!HTMLElement>} html The string representing the HTML of the widget or the HTMLElement.
 * @param {number=} size_x The number of rows the widget occupies horizontally.  Defaults to 1.
 * @param {number=} size_y The number of columns the widget occupies vertically.  Defaults to 1.
 * @param {number=} col The column the widget should start in.
 * @param {number=} row The row the widget should start in.
 * @return {?<!HTMLElement>} Returns the jQuery wrapped HTMLElement representing the widget that was just created.
 * 
 */
Gridster.prototype.add_widget = function(html, size_x, size_y, col, row) {};

/**
 * Get the highest occupied cell.
 * @return {!GridsterCoords} Returns the farthest position {row: number, col: number} occupied in the grid.
 * 
 */
Gridster.prototype.get_highest_occupied_cell = function() {};

/**
 * Change the size of a widget.
 * @param {?<!HTMLElement>} $widget The jQuery wrapped HTMLElement that represents the widget is going to be resized.
 * @param {number=} size_x The number of rows that the widget is going to span.  Defaults to current size_x.
 * @param {number=} size_y The number of columns that the widget is going to span.  Defaults to current size_y.
 * @param {function(number, number): void=} callback Callback function wehn the widget is finished resizing.
 * @return {?<!HTMLElement>} Returns $widget.
 * 
 */
Gridster.prototype.resize_widget = function($widget, size_x, size_y, callback) {};

/**
 * Resize all the widgets in the grid.
 * @param {!GridsterOptions} options The options to use to resize the widgets.
 * @return {!Gridster} Returns the instance of the Gridster class.
 * 
 */
Gridster.prototype.resize_widget_dimensions = function(options) {};

/**
 * Remove a widget from the grid.
 * @see remove_widget
 * 
 * @see remove_widget
 * 
 * @see remove_widget
 * 
 * @param {!HTMLElement|?<!HTMLElement>} el The jQuery wrapped HTMLElement you want to remove.
 * @param {boolean|function(!HTMLElement): void=} silent_or_callback Boolean If true widgets below the removed one will not move up.
 * @param {function(!HTMLElement): void=} callback Callback function executed when the widget is removed.
 * @return {!Gridster} Returns the instance of the Gridster class.
 * 
 */
Gridster.prototype.remove_widget = function(el, silent_or_callback, callback) {};

/**
 * Resize a widget in the grid.
 * @param {number} widget The index of the widget to be resized.
 * @param {!Array<number>} size An array representing the size (x, y) to set on the widget.
 * @return {!Gridster} Returns the instance of the Gridster class.
 * 
 */
Gridster.prototype.set_widget_min_size = function(widget, size) {};

/**
 * Returns a serialized array of the widgets in the grid.
 * @template T
 * @param {!Array<!HTMLElement>=} $widgets The collection of jQuery wrap ed HTMLElements you want to serialize.  If no argument is passed a l widgets will be serialized.
 * @return {!Array<T>} Returns an array of objects with the data specified in the serialized_params option.
 * 
 */
Gridster.prototype.serialize = function($widgets) {};

/**
 * Returns a serialized array of the widgets that have changed their position.
 * @template T
 * @return {!Array<T>} Returns an array of objects with the data specified in the serialized_params option.
 * 
 */
Gridster.prototype.serialize_changed = function() {};

/**
 * Enables dragging.
 * @return {!Gridster} Returns the instance of the Gridster class.
 * 
 */
Gridster.prototype.enable = function() {};

/**
 * Disables dragging.
 * @return {!Gridster} Returns the instance of the Gridster class.
 * 
 */
Gridster.prototype.disable = function() {};
