/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/mithril/index.d.ts:

/**
 * Manually triggers a redraw of mounted components.
 * @return {void}
 */
function redraw() {}

/**
 * Renders a vnode structure into a DOM element.
 * @param {!Element} el
 * @param {(string|number|boolean|!Mithril.Vnode<?, ?>|!Mithril.ChildArray)} vnodes
 * @return {void}
 */
function render(el, vnodes) {}

/**
 * Mounts a component to a DOM element, enabling it to autoredraw on user events.
 * Unmounts a component from a DOM element.
 * @param {!Element} element
 * @param {(!Mithril.Component<?, ?>|function(new: (!Mithril.ClassComponent<?>), !Mithril.CVnode<?>): ?|function(!Mithril.Vnode<?, !Object>): !Mithril.Component<?, ?>)|null} component
 * @return {void}
 */
function mount(element, component) {}

/**
 * Makes an XHR request and returns a promise.
 * Makes an XHR request and returns a promise.
 * @template T
 * @param {?|string} options_or_url
 * @param {!Mithril.RequestOptions<T>=} options
 * @return {!Promise<T>}
 */
function request(options_or_url, options) {}

/**
 * Makes a JSON-P request and returns a promise.
 * Makes a JSON-P request and returns a promise.
 * @template T
 * @param {?|string} options_or_url
 * @param {!Mithril.JsonpOptions=} options
 * @return {!Promise<T>}
 */
function jsonp(options_or_url, options) {}

/**
 * Creates an event handler which takes the value of the specified DOM element property and calls a function with it as the argument.
 * Creates an event handler which takes the value of the specified DOM element property and calls a function with it as the argument.
 * @template T
 * @param {string} name
 * @param {function(?): ?} callback
 * @param {T=} thisArg
 * @return {function(?): void}
 */
function withAttr(name, callback, thisArg) {}
/** @const */
var Mithril = {};
/**
 * @record
 * @struct
 */
Mithril.Lifecycle = function() {};

/* TODO: IndexSignature: Mithril */

/**
 * The oninit hook is called before a vnode is touched by the virtual DOM engine.
 * @this {State}
 * @param {!Mithril.Vnode<Attrs, State>} vnode
 * @return {?}
 */
Mithril.Lifecycle.prototype.oninit = function(vnode) {};

/**
 * The oncreate hook is called after a DOM element is created and attached to the document.
 * @this {State}
 * @param {!Mithril.VnodeDOM<Attrs, State>} vnode
 * @return {?}
 */
Mithril.Lifecycle.prototype.oncreate = function(vnode) {};

/**
 * The onbeforeupdate hook is called before a vnode is diffed in a update.
 * @this {State}
 * @param {!Mithril.VnodeDOM<Attrs, State>} vnode
 * @return {(void|!Promise<?>)}
 */
Mithril.Lifecycle.prototype.onbeforeremove = function(vnode) {};

/**
 * The onupdate hook is called after a DOM element is updated, while attached to the document.
 * @this {State}
 * @param {!Mithril.VnodeDOM<Attrs, State>} vnode
 * @return {?}
 */
Mithril.Lifecycle.prototype.onremove = function(vnode) {};

/**
 * The onbeforeremove hook is called before a DOM element is detached from the document. If a Promise is returned, Mithril only detaches the DOM element after the promise completes.
 * @this {State}
 * @param {!Mithril.Vnode<Attrs, State>} vnode
 * @param {!Mithril.VnodeDOM<Attrs, State>} old
 * @return {(boolean|void)}
 */
Mithril.Lifecycle.prototype.onbeforeupdate = function(vnode, old) {};

/**
 * The onremove hook is called before a DOM element is removed from the document.
 * @this {State}
 * @param {!Mithril.VnodeDOM<Attrs, State>} vnode
 * @return {?}
 */
Mithril.Lifecycle.prototype.onupdate = function(vnode) {};
/**
 * @record
 * @struct
 */
Mithril.Hyperscript = function() {};

/* TODO: CallSignature: Mithril */

/* TODO: CallSignature: Mithril */

/* TODO: CallSignature: Mithril */

/* TODO: CallSignature: Mithril */

/**
 * Creates a fragment virtual element (Vnode).
 * @param {?} attrs
 * @param {(string|number|boolean|!Mithril.ChildArray)} children
 * @return {!Mithril.Vnode<?, ?>}
 */
Mithril.Hyperscript.prototype.fragment = function(attrs, children) {};

/**
 * Turns an HTML string into a virtual element (Vnode). Do not use trust on unsanitized user input.
 * @param {string} html
 * @return {!Mithril.Vnode<?, ?>}
 */
Mithril.Hyperscript.prototype.trust = function(html) {};
/**
 * @record
 * @struct
 */
Mithril.RouteResolver = function() {};

/**
 * The onmatch hook is called when the router needs to find a component to render.
 * @this {RouteResolver}
 * @param {Attrs} args
 * @param {string} requestedPath
 * @return {(void|!Mithril.Component<?, ?>|!Promise<?>)}
 */
Mithril.RouteResolver.prototype.onmatch = function(args, requestedPath) {};

/**
 * The render method is called on every redraw for a matching route.
 * @this {RouteResolver}
 * @param {!Mithril.Vnode<Attrs, State>} vnode
 * @return {(string|number|boolean|!Mithril.Vnode<?, ?>|!Mithril.ChildArray)}
 */
Mithril.RouteResolver.prototype.render = function(vnode) {};
/**
 * @record
 * @struct
 */
Mithril.RouteDefs = function() {};

/* TODO: IndexSignature: Mithril */
/**
 * @record
 * @struct
 */
Mithril.RouteOptions = function() {};
 /** @type {boolean} */
Mithril.RouteOptions.prototype.replace;
 /** @type {?} */
Mithril.RouteOptions.prototype.state;
 /** @type {string} */
Mithril.RouteOptions.prototype.title;
/**
 * @record
 * @struct
 */
Mithril.Route = function() {};

/* TODO: CallSignature: Mithril */

/**
 * Returns the last fully resolved routing path, without the prefix.
 * @return {string}
 */
Mithril.Route.prototype.get = function() {};

/**
 * Redirects to a matching route or to the default route if no matching routes can be found.
 * @param {string} route
 * @param {?=} data
 * @param {!Mithril.RouteOptions=} options
 * @return {void}
 */
Mithril.Route.prototype.set = function(route, data, options) {};

/**
 * Defines a router prefix which is a fragment of the URL that dictates the underlying strategy used by the router.
 * @param {string} urlFragment
 * @return {void}
 */
Mithril.Route.prototype.prefix = function(urlFragment) {};

/**
 * This method is meant to be used in conjunction with an <a> Vnode's oncreate hook.
 * @param {!Mithril.Vnode<?, ?>} vnode
 * @return {function(!Event): ?}
 */
Mithril.Route.prototype.link = function(vnode) {};

/**
 * Returns the named parameter value from the current route.
 * Gets all route parameters.
 * @param {string=} name
 * @return {string|?}
 */
Mithril.Route.prototype.param = function(name) {};
/**
 * @record
 * @struct
 */
Mithril.RequestOptions = function() {};
 /** @type {string} */
Mithril.RequestOptions.prototype.method;
 /** @type {?} */
Mithril.RequestOptions.prototype.data;
 /** @type {boolean} */
Mithril.RequestOptions.prototype.async;
 /** @type {string} */
Mithril.RequestOptions.prototype.user;
 /** @type {string} */
Mithril.RequestOptions.prototype.password;
 /** @type {boolean} */
Mithril.RequestOptions.prototype.withCredentials;
 /** @type {!Object<string,string>} */
Mithril.RequestOptions.prototype.headers;
 /** @type {function(new: (?), ?): ?} */
Mithril.RequestOptions.prototype.type;
 /** @type {boolean} */
Mithril.RequestOptions.prototype.useBody;
 /** @type {boolean} */
Mithril.RequestOptions.prototype.background;

/**
 * Exposes the underlying XMLHttpRequest object for low-level configuration.
 * @param {!XMLHttpRequest} xhr
 * @return {(void|!XMLHttpRequest)}
 */
Mithril.RequestOptions.prototype.config = function(xhr) {};

/**
 * A serialization method to be applied to data. Defaults to JSON.stringify, or if options.data is an instance of FormData, defaults to the identity function.
 * @param {?} data
 * @return {?}
 */
Mithril.RequestOptions.prototype.serialize = function(data) {};

/**
 * A deserialization method to be applied to the response. Defaults to a small wrapper around JSON.parse that returns null for empty responses.
 * @param {string} data
 * @return {T}
 */
Mithril.RequestOptions.prototype.deserialize = function(data) {};

/**
 * A hook to specify how the XMLHttpRequest response should be read. Useful for reading response headers and cookies. Defaults to a function that returns xhr.responseText
 * @param {!XMLHttpRequest} xhr
 * @param {RequestOptions} options
 * @return {T}
 */
Mithril.RequestOptions.prototype.extract = function(xhr, options) {};
/**
 * @record
 * @struct
 */
Mithril.JsonpOptions = function() {};
 /** @type {?} */
Mithril.JsonpOptions.prototype.data;
 /** @type {function(new: (?), ?): ?} */
Mithril.JsonpOptions.prototype.type;
 /** @type {string} */
Mithril.JsonpOptions.prototype.callbackName;
 /** @type {string} */
Mithril.JsonpOptions.prototype.callbackKey;
 /** @type {boolean} */
Mithril.JsonpOptions.prototype.background;
/**
 * @extends {Mithril.Hyperscript}
 * @record
 * @struct
 */
Mithril.Static = function() {};
 /** @type {!Mithril.Route} */
Mithril.Static.prototype.route;
 /** @type {?} */
Mithril.Static.prototype.mount;
 /** @type {?} */
Mithril.Static.prototype.withAttr;
 /** @type {function(!Element, (string|number|boolean|!Mithril.Vnode<?, ?>|!Mithril.ChildArray)): void} */
Mithril.Static.prototype.render;
 /** @type {function(): void} */
Mithril.Static.prototype.redraw;
 /** @type {?} */
Mithril.Static.prototype.request;
 /** @type {?} */
Mithril.Static.prototype.jsonp;
 /** @type {string} */
Mithril.Static.prototype.version;

/**
 * Returns an object with key/value pairs parsed from a string of the form: ?a=1&b=2
 * @param {string} queryString
 * @return {!Object<string,?>}
 */
Mithril.Static.prototype.parseQueryString = function(queryString) {};

/**
 * Turns the key/value pairs of an object into a string of the form: a=1&b=2
 * @param {!Object<string,?>} values
 * @return {string}
 */
Mithril.Static.prototype.buildQueryString = function(values) {};

/** @typedef {(string|number|boolean|!Mithril.Vnode<?, ?>)} */
Mithril.Child;
/**
 * @record
 * @struct
 */
Mithril.ChildArray = function() {};

/** @typedef {(string|number|boolean|!Mithril.Vnode<?, ?>|!Mithril.ChildArray)} */
Mithril.Children;

/** @typedef {(string|number|boolean|!Mithril.ChildArray)} */
Mithril.ChildArrayOrPrimitive;
/**
 * @record
 * @struct
 */
Mithril.Vnode = function() {};
 /** @type {(string|!Mithril.Component<Attrs, State>|function(new: (!Mithril.ClassComponent<Attrs>), !Mithril.CVnode<Attrs>): ?|function(!Mithril.Vnode<Attrs, !Object>): !Mithril.Component<Attrs, ?>)} */
Mithril.Vnode.prototype.tag;
 /** @type {Attrs} */
Mithril.Vnode.prototype.attrs;
 /** @type {State} */
Mithril.Vnode.prototype.state;
 /** @type {(string|number)} */
Mithril.Vnode.prototype.key;
 /** @type {(string|number|boolean|!Mithril.ChildArray)} */
Mithril.Vnode.prototype.children;
 /** @type {(string|number|boolean)} */
Mithril.Vnode.prototype.text;
/**
 * @extends {Mithril.Vnode}
 * @record
 * @struct
 */
Mithril.VnodeDOM = function() {};
 /** @type {!Element} */
Mithril.VnodeDOM.prototype.dom;
 /** @type {number} */
Mithril.VnodeDOM.prototype.domSize;
/**
 * @extends {Mithril.Vnode}
 * @record
 * @struct
 */
Mithril.CVnode = function() {};
/**
 * @extends {Mithril.VnodeDOM}
 * @record
 * @struct
 */
Mithril.CVnodeDOM = function() {};
/**
 * @extends {Mithril.Lifecycle}
 * @record
 * @struct
 */
Mithril.Component = function() {};

/**
 * Creates a view out of virtual elements.
 * @this {State}
 * @param {!Mithril.Vnode<Attrs, State>} vnode
 * @return {(string|number|boolean|void|!Mithril.Vnode<?, ?>|!Mithril.ChildArray)}
 */
Mithril.Component.prototype.view = function(vnode) {};
/**
 * @extends {Mithril.Lifecycle}
 * @record
 * @struct
 */
Mithril.ClassComponent = function() {};

/**
 * The oninit hook is called before a vnode is touched by the virtual DOM engine.
 * @param {!Mithril.Vnode<A, ClassComponent>} vnode
 * @return {?}
 */
Mithril.ClassComponent.prototype.oninit = function(vnode) {};

/**
 * The oncreate hook is called after a DOM element is created and attached to the document.
 * @param {!Mithril.VnodeDOM<A, ClassComponent>} vnode
 * @return {?}
 */
Mithril.ClassComponent.prototype.oncreate = function(vnode) {};

/**
 * The onbeforeupdate hook is called before a vnode is diffed in a update.
 * @param {!Mithril.VnodeDOM<A, ClassComponent>} vnode
 * @return {(void|!Promise<?>)}
 */
Mithril.ClassComponent.prototype.onbeforeremove = function(vnode) {};

/**
 * The onupdate hook is called after a DOM element is updated, while attached to the document.
 * @param {!Mithril.VnodeDOM<A, ClassComponent>} vnode
 * @return {?}
 */
Mithril.ClassComponent.prototype.onremove = function(vnode) {};

/**
 * The onbeforeremove hook is called before a DOM element is detached from the document. If a Promise is returned, Mithril only detaches the DOM element after the promise completes.
 * @param {!Mithril.Vnode<A, ClassComponent>} vnode
 * @param {!Mithril.VnodeDOM<A, ClassComponent>} old
 * @return {(boolean|void)}
 */
Mithril.ClassComponent.prototype.onbeforeupdate = function(vnode, old) {};

/**
 * The onremove hook is called before a DOM element is removed from the document.
 * @param {!Mithril.VnodeDOM<A, ClassComponent>} vnode
 * @return {?}
 */
Mithril.ClassComponent.prototype.onupdate = function(vnode) {};

/**
 * Creates a view out of virtual elements.
 * @param {!Mithril.Vnode<A, ClassComponent>} vnode
 * @return {(string|number|boolean|void|!Mithril.Vnode<?, ?>|!Mithril.ChildArray)}
 */
Mithril.ClassComponent.prototype.view = function(vnode) {};

/** @typedef {function(!Mithril.Vnode<A, !Object>): !Mithril.Component<A, ?>} */
Mithril.FactoryComponent;

/** @typedef {?} */
Mithril.Comp;

/** @typedef {(!Mithril.Component<A, S>|function(new: (!Mithril.ClassComponent<A>), !Mithril.CVnode<A>): ?|function(!Mithril.Vnode<A, !Object>): !Mithril.Component<A, ?>)} */
Mithril.ComponentTypes;
/**
 * @extends {Mithril.Lifecycle}
 * @record
 * @struct
 */
Mithril.Attributes = function() {};
 /** @type {string} */
Mithril.Attributes.prototype.className;
 /** @type {string} */
Mithril.Attributes.prototype.class;
 /** @type {(string|number)} */
Mithril.Attributes.prototype.key;

/* TODO: IndexSignature: Mithril */
 /** @type {!Mithril.Static} */
var Mithril;

/* TODO: ExportAssignment in  */
