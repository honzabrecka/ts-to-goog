/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bcrypt-nodejs/index.d.ts:

/**
 * Generate a salt synchronously
 * @param {number=} rounds Number of rounds to process the data for (default - 10)
 * @return {string} Generated salt
 */
function genSaltSync(rounds) {}

/**
 * Generate a salt asynchronously
 * @param {number} rounds Number of rounds to process the data for (default - 10)
 * @param {function(!Error, string): void} callback Callback with error and resulting salt, to be fired once the salt has been generated
 * @return {void}
 */
function genSalt(rounds, callback) {}

/**
 * Generate a hash synchronously
 * @param {string} data Data to be encrypted
 * @param {string=} salt Salt to be used in encryption (default - new salt generated with 10 rounds)
 * @return {string} Generated hash
 */
function hashSync(data, salt) {}

/**
 * Generate a hash asynchronously
 * Generate a hash asynchronously
 * @param {string} data Data to be encrypted
 * @param {string} salt Salt to be used in encryption
 * @param {function(!Error, string): void|function(): void} callback_or_progressCallback Callback with error and hashed result, to be fired once the data has been encrypted / Callback to be fired multiple times during the hash calculation to signify progress
 * @param {function(!Error, string): void=} callback Callback with error and hashed result, to be fired once the data has been encrypted
 * @return {void}
 */
function hash(data, salt, callback_or_progressCallback, callback) {}

/**
 * Compares data with a hash synchronously
 * @param {string} data Data to be compared
 * @param {string} hash Hash to be compared to
 * @return {boolean} true if matching, false otherwise
 */
function compareSync(data, hash) {}

/**
 * Compares data with a hash asynchronously
 * @param {string} data Data to be compared
 * @param {string} hash Hash to be compared to
 * @param {function(!Error, boolean): void} callback Callback with error and match result, to be fired once the data has been compared
 * @return {void}
 */
function compare(data, hash, callback) {}

/**
 * Get number of rounds used for hash
 * @param {string} hash Hash from which the number of rounds used should be extracted
 * @return {number} number of rounds used to encrypt a given hash
 */
function getRounds(hash) {}
