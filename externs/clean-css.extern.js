/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/clean-css/index.d.ts:
/** @const */
var CleanCSS = {};
/**
 * @record
 * @struct
 */
CleanCSS.Options = function() {};
 /** @type {boolean} */
CleanCSS.Options.prototype.advanced;
 /** @type {boolean} */
CleanCSS.Options.prototype.aggressiveMerging;
 /** @type {boolean} */
CleanCSS.Options.prototype.benchmark;
 /** @type {!Object} */
CleanCSS.Options.prototype.compatibility;
 /** @type {boolean} */
CleanCSS.Options.prototype.debug;
 /** @type {!Object} */
CleanCSS.Options.prototype.inliner;
 /** @type {boolean} */
CleanCSS.Options.prototype.keepBreaks;
 /** @type {(string|number)} */
CleanCSS.Options.prototype.keepSpecialComments;
 /** @type {boolean} */
CleanCSS.Options.prototype.mediaMerging;
 /** @type {boolean} */
CleanCSS.Options.prototype.processImport;
 /** @type {!Array<string>} */
CleanCSS.Options.prototype.processImportFrom;
 /** @type {boolean} */
CleanCSS.Options.prototype.rebase;
 /** @type {string} */
CleanCSS.Options.prototype.relativeTo;
 /** @type {boolean} */
CleanCSS.Options.prototype.restructuring;
 /** @type {string} */
CleanCSS.Options.prototype.root;
 /** @type {number} */
CleanCSS.Options.prototype.roundingPrecision;
 /** @type {boolean} */
CleanCSS.Options.prototype.semanticMerging;
 /** @type {boolean} */
CleanCSS.Options.prototype.shorthandCompacting;
 /** @type {(string|boolean)} */
CleanCSS.Options.prototype.sourceMap;
 /** @type {boolean} */
CleanCSS.Options.prototype.sourceMapInlineSources;
 /** @type {string} */
CleanCSS.Options.prototype.target;
/**
 * @record
 * @struct
 */
CleanCSS.Output = function() {};
 /** @type {string} */
CleanCSS.Output.prototype.styles;
 /** @type {string} */
CleanCSS.Output.prototype.sourceMap;
 /** @type {!Array<string>} */
CleanCSS.Output.prototype.errors;
 /** @type {!Array<string>} */
CleanCSS.Output.prototype.warnings;
 /** @type {{originalSize: number, minifiedSize: number, timeSpent: number, efficiency: number}} */
CleanCSS.Output.prototype.stats;

/**
 * @param {(string|!Object|!Array<string>)} sources
 * @param {function(?, !CleanCSS.Output): void=} callback
 * @return {!CleanCSS.Output}
 */
CleanCSS.prototype.minify = function(sources, callback) {};

/* TODO: ExportAssignment in  */
