/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jbinary/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {!Array<number>|!jDataView|number} data_or_bufferSize
 * @param {!Object=} typeSet
 */
function jBinary(data_or_bufferSize, typeSet) {}

/**
 * @param {?} source
 * @param {function(string, ?): ?=} callback
 * @return {?}
 */
jBinary.loadData = function(source, callback) {};

/**
 * @param {?} source
 * @param {?=} typeSet
 * @param {function(string, ?): ?=} callback
 * @return {?}
 */
jBinary.load = function(source, typeSet, callback) {};

/**
 * @param {?} destination
 * @param {string=} mimeType
 * @param {function(string, ?): ?=} callback
 * @return {?}
 */
jBinary.saveAs = function(destination, mimeType, callback) {};

/**
 * @param {string=} mimeType
 * @return {?}
 */
jBinary.toURI = function(mimeType) {};

/**
 * @param {string} type
 * @param {number=} offset
 * @return {?}
 */
jBinary.prototype.read = function(type, offset) {};

/**
 * @return {?}
 */
jBinary.prototype.readAll = function() {};

/**
 * @param {string} type
 * @param {?} data
 * @param {number=} offset
 * @return {number}
 */
jBinary.prototype.write = function(type, data, offset) {};

/**
 * @param {?} data
 * @return {number}
 */
jBinary.prototype.writeAll = function(data) {};

/**
 * @return {number}
 */
jBinary.prototype.tell = function() {};

/**
 * @param {number} position
 * @param {function(!jBinary, ?): ?=} callback
 * @return {number}
 */
jBinary.prototype.seek = function(position, callback) {};

/**
 * @param {number} count
 * @param {function(!jBinary, ?): ?=} callback
 * @return {number}
 */
jBinary.prototype.skip = function(count, callback) {};

/**
 * @param {number} start
 * @param {number} end
 * @param {boolean=} forceCopy
 * @return {!jBinary}
 */
jBinary.prototype.slice = function(start, end, forceCopy) {};

/**
 * @param {!Object} typeSet
 * @param {boolean=} modifyOriginal
 * @return {!jBinary}
 */
jBinary.prototype.as = function(typeSet, modifyOriginal) {};
