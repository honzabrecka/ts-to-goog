/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jasmine-jquery/index.d.ts:

/**
 * @param {?=} attributes
 * @return {string}
 */
function sandbox(attributes) {}

/**
 * @param {...string} uls
 * @return {string}
 */
function readFixtures(uls) {}

/**
 * @param {...string} uls
 * @return {void}
 */
function preloadFixtures(uls) {}

/**
 * @param {...string} uls
 * @return {void}
 */
function loadFixtures(uls) {}

/**
 * @param {...string} uls
 * @return {void}
 */
function appendLoadFixtures(uls) {}

/**
 * @param {string} html
 * @return {string}
 */
function setFixtures(html) {}

/**
 * @param {string} html
 * @return {void}
 */
function appendSetFixtures(html) {}

/**
 * @param {...string} uls
 * @return {void}
 */
function preloadStyleFixtures(uls) {}

/**
 * @param {...string} uls
 * @return {void}
 */
function loadStyleFixtures(uls) {}

/**
 * @param {...string} uls
 * @return {void}
 */
function appendLoadStyleFixtures(uls) {}

/**
 * @param {string} html
 * @return {void}
 */
function setStyleFixtures(html) {}

/**
 * @param {string} html
 * @return {void}
 */
function appendSetStyleFixtures(html) {}

/**
 * @param {...string} uls
 * @return {!jasmine.JSONFixtures}
 */
function loadJSONFixtures(uls) {}

/**
 * @param {string} url
 * @return {?}
 */
function getJSONFixture(url) {}

/**
 * @param {string} selector
 * @param {string} eventName
 * @return {!jasmine.JQueryEventSpy}
 */
function spyOnEvent(selector, eventName) {}

/**
 * @param {?<!HTMLElement>} selector
 * @param {string} eventName
 * @return {string}
 */
jasmine.spiedEventsKey = function(selector, eventName) {};

/**
 * @return {!jasmine.Fixtures}
 */
jasmine.getFixtures = function() {};

/**
 * @return {!jasmine.StyleFixtures}
 */
jasmine.getStyleFixtures = function() {};

/**
 * @return {!jasmine.JSONFixtures}
 */
jasmine.getJSONFixtures = function() {};
/**
 * @record
 * @struct
 */
jasmine.Fixtures = function() {};
 /** @type {string} */
jasmine.Fixtures.prototype.fixturesPath;
 /** @type {string} */
jasmine.Fixtures.prototype.containerId;

/**
 * @param {string} html
 * @return {string}
 */
jasmine.Fixtures.prototype.set = function(html) {};

/**
 * @param {string} html
 * @return {void}
 */
jasmine.Fixtures.prototype.appendSet = function(html) {};

/**
 * @param {...string} uls
 * @return {void}
 */
jasmine.Fixtures.prototype.preload = function(uls) {};

/**
 * @param {...string} uls
 * @return {void}
 */
jasmine.Fixtures.prototype.load = function(uls) {};

/**
 * @param {...string} uls
 * @return {void}
 */
jasmine.Fixtures.prototype.appendLoad = function(uls) {};

/**
 * @param {...string} uls
 * @return {string}
 */
jasmine.Fixtures.prototype.read = function(uls) {};

/**
 * @return {void}
 */
jasmine.Fixtures.prototype.clearCache = function() {};

/**
 * @return {void}
 */
jasmine.Fixtures.prototype.cleanUp = function() {};

/**
 * @param {?=} attributes
 * @return {string}
 */
jasmine.Fixtures.prototype.sandbox = function(attributes) {};

/**
 * @param {string} html
 * @return {string}
 */
jasmine.Fixtures.prototype.createContainer_ = function(html) {};

/**
 * @param {string} html
 * @return {void}
 */
jasmine.Fixtures.prototype.addToContainer_ = function(html) {};

/**
 * @param {string} url
 * @return {string}
 */
jasmine.Fixtures.prototype.getFixtureHtml_ = function(url) {};

/**
 * @param {string} relativeUrl
 * @return {void}
 */
jasmine.Fixtures.prototype.loadFixtureIntoCache_ = function(relativeUrl) {};

/**
 * @param {string} relativeUrl
 * @return {string}
 */
jasmine.Fixtures.prototype.makeFixtureUrl_ = function(relativeUrl) {};

/**
 * @param {string} methodName
 * @param {?} passedArguments
 * @return {?}
 */
jasmine.Fixtures.prototype.proxyCallTo_ = function(methodName, passedArguments) {};
/**
 * @record
 * @struct
 */
jasmine.StyleFixtures = function() {};
 /** @type {string} */
jasmine.StyleFixtures.prototype.fixturesPath;

/**
 * @param {string} html
 * @return {string}
 */
jasmine.StyleFixtures.prototype.set = function(html) {};

/**
 * @param {string} html
 * @return {void}
 */
jasmine.StyleFixtures.prototype.appendSet = function(html) {};

/**
 * @param {...string} uls
 * @return {void}
 */
jasmine.StyleFixtures.prototype.preload = function(uls) {};

/**
 * @param {...string} uls
 * @return {void}
 */
jasmine.StyleFixtures.prototype.load = function(uls) {};

/**
 * @param {...string} uls
 * @return {void}
 */
jasmine.StyleFixtures.prototype.appendLoad = function(uls) {};

/**
 * @param {...string} uls
 * @return {string}
 */
jasmine.StyleFixtures.prototype.read_ = function(uls) {};

/**
 * @return {void}
 */
jasmine.StyleFixtures.prototype.clearCache = function() {};

/**
 * @return {void}
 */
jasmine.StyleFixtures.prototype.cleanUp = function() {};

/**
 * @param {string} html
 * @return {void}
 */
jasmine.StyleFixtures.prototype.createStyle_ = function(html) {};

/**
 * @param {string} url
 * @return {string}
 */
jasmine.StyleFixtures.prototype.getFixtureHtml_ = function(url) {};

/**
 * @param {string} relativeUrl
 * @return {void}
 */
jasmine.StyleFixtures.prototype.loadFixtureIntoCache_ = function(relativeUrl) {};

/**
 * @param {string} relativeUrl
 * @return {string}
 */
jasmine.StyleFixtures.prototype.makeFixtureUrl_ = function(relativeUrl) {};

/**
 * @param {string} methodName
 * @param {?} passedArguments
 * @return {?}
 */
jasmine.StyleFixtures.prototype.proxyCallTo_ = function(methodName, passedArguments) {};
/**
 * @record
 * @struct
 */
jasmine.JSONFixtures = function() {};
 /** @type {string} */
jasmine.JSONFixtures.prototype.fixturesPath;

/**
 * @param {...string} uls
 * @return {void}
 */
jasmine.JSONFixtures.prototype.load = function(uls) {};

/**
 * @param {...string} uls
 * @return {string}
 */
jasmine.JSONFixtures.prototype.read = function(uls) {};

/**
 * @return {void}
 */
jasmine.JSONFixtures.prototype.clearCache = function() {};

/**
 * @param {string} url
 * @return {?}
 */
jasmine.JSONFixtures.prototype.getFixtureData_ = function(url) {};

/**
 * @param {string} relativeUrl
 * @return {void}
 */
jasmine.JSONFixtures.prototype.loadFixtureIntoCache_ = function(relativeUrl) {};

/**
 * @param {string} methodName
 * @param {?} passedArguments
 * @return {?}
 */
jasmine.JSONFixtures.prototype.proxyCallTo_ = function(methodName, passedArguments) {};

/**
 * Check if DOM element has class.
 * 
 * \@example 
 * // returns true
 * expect($('<div class="some-class"></div>')).toHaveClass("some-class")
 * @param {string} className Name of the class to check.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveClass = function(className) {};

/**
 * Check if DOM element has the given CSS properties.
 * 
 * \@example 
 * // returns true
 * expect($('<div style="display: none; margin: 10px;"></div>')).toHaveCss({display: "none", margin: "10px"})
 * 
 * \@example 
 * // returns true
 * expect($('<div style="display: none; margin: 10px;"></div>')).toHaveCss({margin: "10px"})
 * @param {?} css Object containing the properties (and values) to check.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveCss = function(css) {};

/**
 * Checks if DOM element is visible.
 * Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeVisible = function() {};

/**
 * Check if DOM element is hidden.
 * Elements can be hidden for several reasons:
 * - They have a CSS display value of none ;
 * - They are form elements with type equal to hidden.
 * - Their width and height are explicitly set to 0.
 * - An ancestor element is hidden, so the element is not shown on the page.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeHidden = function() {};

/**
 * Only for tags that have checked attribute
 * 
 * \@example 
 * // returns true
 * expect($('<option selected="selected"></option>')).toBeSelected()
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeSelected = function() {};

/**
 * Only for tags that have checked attribute
 * \@example 
 * // returns true
 * expect($('<input type="checkbox" checked="checked"/>')).toBeChecked()
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeChecked = function() {};

/**
 * Checks for child DOM elements or text
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeEmpty = function() {};

/**
 * Checks if element exists in or out the DOM.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toExist = function() {};

/**
 * Checks if array has the given length.
 * 
 * @param {number} length Expected length
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveLength = function(length) {};

/**
 * Check if DOM element contains an attribute and, optionally, if the value of the attribute is equal to the expected one.
 * 
 * @param {string} attributeName Name of the attribute to check
 * @param {?=} expectedAttributeValue Expected attribute value
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveAttr = function(attributeName, expectedAttributeValue) {};

/**
 * Check if DOM element contains a property and, optionally, if the value of the property is equal to the expected one.
 * 
 * @param {string} propertyName Property name to check
 * @param {?=} expectedPropertyValue Expected property value
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveProp = function(propertyName, expectedPropertyValue) {};

/**
 * Check if DOM element has the given Id
 * 
 * @param {string} id
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveId = function(id) {};

/**
 * Check if DOM element has the specified HTML.
 * 
 * \@example 
 * // returns true
 * expect($('<div><span></span></div>')).toHaveHtml('<span></span>')
 * @param {string} html
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveHtml = function(html) {};

/**
 * Check if DOM element contains the specified HTML.
 * 
 * \@example 
 * // returns true
 * expect($('<div><ul></ul><h1>header</h1></div>')).toContainHtml('<ul></ul>')
 * @param {string} html
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContainHtml = function(html) {};

/**
 * Check if DOM element has the given Text.
 * \@example 
 * // returns true
 * expect($('<div>some text</div>')).toHaveText('some text')
 * @param {string} text Accepts a string or regular expression
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveText = function(text) {};

/**
 * Check if DOM element contains the specified text.
 * 
 * \@example 
 * // returns true
 * expect($('<div><ul></ul><h1>header</h1></div>')).toContainText('header')
 * @param {string} text
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContainText = function(text) {};

/**
 * Check if DOM element has the given value.
 * This can only be applied for element on with jQuery val() can be called.
 * 
 * \@example 
 * // returns true
 * expect($('<input type="text" value="some text"/>')).toHaveValue('some text')
 * @param {string} value
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveValue = function(value) {};

/**
 * Check if DOM element has the given data.
 * This can only be applied for element on with jQuery data(key) can be called.
 * 
 * @param {string} key
 * @param {string} expectedValue
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveData = function(key, expectedValue) {};

/**
 * @param {T} selector
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBe = function(selector) {};

/**
 * Check if DOM element is matched by the given selector.
 * 
 * \@example 
 * // returns true
 * expect($('<div><span class="some-class"></span></div>')).toContain('some-class')
 * @param {?} selector
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContain = function(selector) {};

/**
 * Check if DOM element exists inside the given parent element.
 * 
 * \@example 
 * // returns true
 * expect($('<div><span class="some-class"></span></div>')).toContainElement('span.some-class')
 * @param {string} selector
 * @return {boolean}
 */
jasmine.Matchers.prototype.toContainElement = function(selector) {};

/**
 * Check to see if the set of matched elements matches the given selector
 * 
 * \@example 
 * expect($('<span></span>').addClass('js-something')).toBeMatchedBy('.js-something')
 * 
 * @param {string} selector
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeMatchedBy = function(selector) {};

/**
 * Only for tags that have disabled attribute
 * \@example 
 * // returns true
 * expect('<input type="submit" disabled="disabled"/>').toBeDisabled()
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeDisabled = function() {};

/**
 * Check if DOM element is focused
 * \@example 
 * // returns true
 * expect($('<input type="text" />').focus()).toBeFocused()
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeFocused = function() {};

/**
 * Checks if DOM element handles event.
 * 
 * \@example 
 * // returns true
 * expect($form).toHandle("submit")
 * @param {string} eventName
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHandle = function(eventName) {};

/**
 * Assigns a callback to an event of the DOM element.
 * 
 * \@example 
 * expect($form).toHandleWith("submit", yourSubmitCallback)
 * @param {string} eventName Name of the event to assign the callback to.
 * @param {!JQueryCallback} eventHandler Callback function to be assigned.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHandleWith = function(eventName, eventHandler) {};

/**
 * Checks if event was triggered.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenTriggered = function() {};

/**
 * Checks if the event has been triggered on selector.
 * @param {string} selector Selector that should have triggered the event.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenTriggeredOn = function(selector) {};

/**
 * Checks if the event has been triggered on selector.
 * @param {string} selector Selector that should have triggered the event.
 * @param {...?} args Extra arguments to be passed to jQuery events functions.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenTriggeredOnAndWith = function(selector, args) {};

/**
 * Checks if event propagation has been prevented.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenPrevented = function() {};

/**
 * Checks if event propagation has been prevented on element with selector.
 * 
 * @param {string} selector Selector that should have prevented the event.
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenPreventedOn = function(selector) {};

/**
 * Checks if event propagation has been stopped.
 * 
 * \@example 
 * // returns true
 * var spyEvent = spyOnEvent('#some_element', 'click')
 * $('#some_element').click(function (event){event.stopPropagation();})
 * $('#some_element').click()
 * expect(spyEvent).toHaveBeenStopped()
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenStopped = function() {};

/**
 * Checks if event propagation has been stopped by an element with the given selector.
 * \@example 
 * // returns true
 * $('#some_element').click(function (event){event.stopPropagation();})
 * $('#some_element').click()
 * expect('click').toHaveBeenStoppedOn('#some_element')
 * @param {string} selector Selector of the element that should have stopped the event propagation.
 * 
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveBeenStoppedOn = function(selector) {};

/**
 * Checks to see if the matched element is attached to the DOM.
 * \@example 
 * expect($('#id-name')[0]).toBeInDOM()
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeInDOM = function() {};
/**
 * @record
 * @struct
 */
jasmine.JQueryEventSpy = function() {};
 /** @type {string} */
jasmine.JQueryEventSpy.prototype.selector;
 /** @type {string} */
jasmine.JQueryEventSpy.prototype.eventName;

/**
 * @param {!JQueryEventObject} eventObject
 * @return {?}
 */
jasmine.JQueryEventSpy.prototype.handler = function(eventObject) {};

/**
 * @return {?}
 */
jasmine.JQueryEventSpy.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
jasmine.JasmineJQuery = function() {};
 /** @type {?} */
jasmine.JasmineJQuery.prototype.matchersClass;
 /** @type {!jasmine.JasmineJQueryEvents} */
jasmine.JasmineJQuery.prototype.events;

/**
 * @param {string} html
 * @return {string}
 */
jasmine.JasmineJQuery.prototype.browserTagCaseIndependentHtml = function(html) {};

/**
 * @param {?<!HTMLElement>} element
 * @return {string}
 */
jasmine.JasmineJQuery.prototype.elementToString = function(element) {};
/**
 * @record
 * @struct
 */
jasmine.JasmineJQueryEvents = function() {};

/**
 * @param {string} selector
 * @param {string} eventName
 * @return {!jasmine.JQueryEventSpy}
 */
jasmine.JasmineJQueryEvents.prototype.spyOn = function(selector, eventName) {};

/**
 * @param {string} selector
 * @param {string} eventName
 * @return {?}
 */
jasmine.JasmineJQueryEvents.prototype.args = function(selector, eventName) {};

/**
 * @param {string} selector
 * @param {string} eventName
 * @return {boolean}
 */
jasmine.JasmineJQueryEvents.prototype.wasTriggered = function(selector, eventName) {};

/**
 * @param {string} selector
 * @param {string} eventName
 * @param {?} expectedArgs
 * @param {!jasmine.Env} env
 * @return {boolean}
 */
jasmine.JasmineJQueryEvents.prototype.wasTriggeredWith = function(selector, eventName, expectedArgs, env) {};

/**
 * @param {string} selector
 * @param {string} eventName
 * @return {boolean}
 */
jasmine.JasmineJQueryEvents.prototype.wasPrevented = function(selector, eventName) {};

/**
 * @param {string} selector
 * @param {string} eventName
 * @return {boolean}
 */
jasmine.JasmineJQueryEvents.prototype.wasStopped = function(selector, eventName) {};

/**
 * @return {void}
 */
jasmine.JasmineJQueryEvents.prototype.cleanUp = function() {};
 /** @type {!jasmine.JasmineJQuery} */
jasmine.JQuery;
