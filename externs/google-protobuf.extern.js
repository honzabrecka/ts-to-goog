/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/google-protobuf/index.d.ts:

/** @typedef {(string|!ArrayBuffer|!Uint8Array|!Array<number>)} */
var ByteSource;

/** @typedef {(string|number|boolean)} */
var ScalarFieldType;

/** @typedef {(!Array<(string|number|boolean)>|!Array<!Uint8Array>)} */
var RepeatedFieldType;

/** @typedef {(string|number|boolean|!Uint8Array|!Array<(string|number|boolean)>|!Array<!Uint8Array>)} */
var AnyFieldType;

/** @typedef {(string|number|boolean|!Uint8Array|?)} */
var FieldValue;
/**
 * @record
 * @struct
 */
function FieldValueArray() {}
/**
 * @constructor
 * @struct
 */
function Message() {}
 /** @type {?} */
Message.extensions;
 /** @type {?} */
Message.extensionsBinary;

/**
 * @return {string}
 */
Message.prototype.getJsPbMessageId = function() {};

/**
 * @param {?} msg
 * @param {!Array<?>} data
 * @param {(string|number)} messageId
 * @param {number} suggestedPivot
 * @param {!Array<number>=} repeatedFields
 * @param {!Array<!Array<number>>=} oneofFields
 * @return {void}
 */
Message.initialize = function(msg, data, messageId, suggestedPivot, repeatedFields, oneofFields) {};

/**
 * @template T
 * @param {!Array<?>} field
 * @param {?} toObjectFn
 * @param {boolean=} includeInstance
 * @return {!Array<!Object>}
 */
Message.toObjectList = function(field, toObjectFn, includeInstance) {};

/**
 * @param {?} msg
 * @param {!Object} obj
 * @param {?} extensions
 * @param {?} getExtensionFn
 * @param {boolean=} includeInstance
 * @return {void}
 */
Message.toObjectExtension = function(msg, obj, extensions, getExtensionFn, includeInstance) {};

/**
 * @param {?} proto
 * @param {?} writer
 * @param {?} extensions
 * @param {?} getExtensionFn
 * @return {void}
 */
Message.prototype.serializeBinaryExtensions = function(proto, writer, extensions, getExtensionFn) {};

/**
 * @param {?} proto
 * @param {?} reader
 * @param {?} extensions
 * @param {?} setExtensionFn
 * @return {void}
 */
Message.prototype.readBinaryExtension = function(proto, reader, extensions, setExtensionFn) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @return {(string|number|boolean|!Uint8Array|?)}
 */
Message.getField = function(msg, fieldNumber) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @return {number}
 */
Message.getOptionalFloatingPointField = function(msg, fieldNumber) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @return {!Array<number>}
 */
Message.getRepeatedFloatingPointField = function(msg, fieldNumber) {};

/**
 * @param {!Uint8Array} bytes
 * @return {string}
 */
Message.bytesAsB64 = function(bytes) {};

/**
 * @param {string} str
 * @return {!Uint8Array}
 */
Message.bytesAsU8 = function(str) {};

/**
 * @param {!Array<!Uint8Array>} bytesList
 * @return {!Array<string>}
 */
Message.bytesListAsB64 = function(bytesList) {};

/**
 * @param {!Array<string>} strList
 * @return {!Array<!Uint8Array>}
 */
Message.bytesListAsU8 = function(strList) {};

/**
 * @template T
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {?} defaultValue
 * @return {?}
 */
Message.getFieldWithDefault = function(msg, fieldNumber, defaultValue) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {boolean} noLazyCreate
 * @param {?} valueCtor
 * @return {?}
 */
Message.getMapField = function(msg, fieldNumber, noLazyCreate, valueCtor) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {(string|number|boolean|!Uint8Array|?)} value
 * @return {void}
 */
Message.setField = function(msg, fieldNumber, value) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {?} value
 * @param {number=} index
 * @return {void}
 */
Message.addToRepeatedField = function(msg, fieldNumber, value, index) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {!Array<number>} oneof
 * @param {(string|number|boolean|!Uint8Array|?)} value
 * @return {void}
 */
Message.setOneofField = function(msg, fieldNumber, oneof, value) {};

/**
 * @param {?} msg
 * @param {!Array<number>} oneof
 * @return {number}
 */
Message.computeOneofCase = function(msg, oneof) {};

/**
 * @template T
 * @param {?} msg
 * @param {?} ctor
 * @param {number} fieldNumber
 * @param {number=} required
 * @return {?}
 */
Message.getWrapperField = function(msg, ctor, fieldNumber, required) {};

/**
 * @template T
 * @param {?} msg
 * @param {?} ctor
 * @param {number} fieldNumber
 * @return {!Array<?>}
 */
Message.getRepeatedWrapperField = function(msg, ctor, fieldNumber) {};

/**
 * @template T
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {?=} value
 * @return {void}
 */
Message.setWrapperField = function(msg, fieldNumber, value) {};

/**
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {!Array<number>} oneof
 * @param {?} value
 * @return {void}
 */
Message.setOneofWrapperField = function(msg, fieldNumber, oneof, value) {};

/**
 * @template T
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {!Array<?>=} value
 * @return {void}
 */
Message.setRepeatedWrapperField = function(msg, fieldNumber, value) {};

/**
 * @template T
 * @param {?} msg
 * @param {number} fieldNumber
 * @param {?} value
 * @param {?} ctor
 * @param {number=} index
 * @return {?}
 */
Message.addToRepeatedWrapperField = function(msg, fieldNumber, value, ctor, index) {};

/**
 * @param {!Array<?>} field
 * @param {?} mapKeyGetterFn
 * @param {?=} toObjectFn
 * @param {boolean=} includeInstance
 * @return {void}
 */
Message.toMap = function(field, mapKeyGetterFn, toObjectFn, includeInstance) {};

/**
 * @return {!Array<?>}
 */
Message.prototype.toArray = function() {};

/**
 * @return {string}
 */
Message.prototype.toString = function() {};

/**
 * @template T
 * @param {?} fieldInfo
 * @return {?}
 */
Message.prototype.getExtension = function(fieldInfo) {};

/**
 * @template T
 * @param {?} fieldInfo
 * @param {?} value
 * @return {void}
 */
Message.prototype.setExtension = function(fieldInfo, value) {};

/**
 * @template T
 * @param {?} m1
 * @param {?} m2
 * @return {?}
 */
Message.difference = function(m1, m2) {};

/**
 * @param {?} m1
 * @param {?} m2
 * @return {boolean}
 */
Message.equals = function(m1, m2) {};

/**
 * @param {!Object} extension1
 * @param {!Object} extension2
 * @return {boolean}
 */
Message.compareExtensions = function(extension1, extension2) {};

/**
 * @param {?} field1
 * @param {?} field2
 * @return {boolean}
 */
Message.compareFields = function(field1, field2) {};

/**
 * @return {?}
 */
Message.prototype.cloneMessage = function() {};

/**
 * @return {?}
 */
Message.prototype.clone = function() {};

/**
 * @template T
 * @param {?} msg
 * @return {?}
 */
Message.clone = function(msg) {};

/**
 * @template T
 * @param {?} msg
 * @return {?}
 */
Message.cloneMessage = function(msg) {};

/**
 * @param {?} fromMessage
 * @param {?} toMessage
 * @return {void}
 */
Message.copyInto = function(fromMessage, toMessage) {};

/**
 * @param {number} id
 * @param {?} constructor
 * @return {void}
 */
Message.registerMessageType = function(id, constructor) {};

/**
 * @abstract
 * @return {!Uint8Array}
 */
Message.prototype.serializeBinary = function() {};

/**
 * @abstract
 * @param {boolean=} includeInstance
 * @return {!Object}
 */
Message.prototype.toObject = function(includeInstance) {};

/**
 * @param {!Uint8Array} bytes
 * @return {?}
 */
Message.deserializeBinary = function(bytes) {};

/**
 * @param {?} message
 * @param {?} reader
 * @return {?}
 */
Message.deserializeBinaryFromReader = function(message, reader) {};

/**
 * @param {?} message
 * @param {?} writer
 * @return {void}
 */
Message.serializeBinaryToWriter = function(message, writer) {};

/**
 * @param {boolean} includeInstance
 * @param {?} msg
 * @return {!Object}
 */
Message.toObject = function(includeInstance, msg) {};

/** @typedef {!Array<?>} */
Message.MessageArray;

/** @typedef {?} */
Message.StaticToObject;

/**
 * @constructor
 * @struct
 * @param {number} fieldIndex
 * @param {?} fieldName
 * @param {?} ctor
 * @param {?} toObjectFn
 * @param {number} isRepeated
 */
function ExtensionFieldInfo(fieldIndex, fieldName, ctor, toObjectFn, isRepeated) {}
 /** @type {number} */
ExtensionFieldInfo.prototype.fieldIndex;
 /** @type {number} */
ExtensionFieldInfo.prototype.fieldName;
 /** @type {?} */
ExtensionFieldInfo.prototype.ctor;
 /** @type {?} */
ExtensionFieldInfo.prototype.toObjectFn;
 /** @type {number} */
ExtensionFieldInfo.prototype.isRepeated;

/**
 * @return {boolean}
 */
ExtensionFieldInfo.prototype.isMessageType = function() {};

/**
 * @constructor
 * @struct
 * @param {?} fieldInfo
 * @param {?} binaryReaderFn
 * @param {?} binaryWriterFn
 * @param {?} opt_binaryMessageSerializeFn
 * @param {?} opt_binaryMessageDeserializeFn
 * @param {boolean} opt_isPacked
 */
function ExtensionFieldBinaryInfo(fieldInfo, binaryReaderFn, binaryWriterFn, opt_binaryMessageSerializeFn, opt_binaryMessageDeserializeFn, opt_isPacked) {}
 /** @type {?} */
ExtensionFieldBinaryInfo.prototype.fieldInfo;
 /** @type {?} */
ExtensionFieldBinaryInfo.prototype.binaryReaderFn;
 /** @type {?} */
ExtensionFieldBinaryInfo.prototype.binaryWriterFn;
 /** @type {?} */
ExtensionFieldBinaryInfo.prototype.opt_binaryMessageSerializeFn;
 /** @type {?} */
ExtensionFieldBinaryInfo.prototype.opt_binaryMessageDeserializeFn;
 /** @type {boolean} */
ExtensionFieldBinaryInfo.prototype.opt_isPacked;

/**
 * @constructor
 * @struct
 * @param {!Array<!Array<?>>} arr
 * @param {?=} valueCtor
 */
function Map(arr, valueCtor) {}

/**
 * @return {!Array<!Array<?>>}
 */
Map.prototype.toArray = function() {};

/**
 * @template VO
 * @param {boolean=} includeInstance
 * @param {?=} valueToObject
 * @return {!Array<!Array<?>>}
 */
Map.prototype.toObject = function(includeInstance, valueToObject) {};

/**
 * @template TK, TV
 * @param {!Array<!Array<?>>} entries
 * @param {?} valueCtor
 * @param {?} valueFromObject
 * @return {?}
 */
Map.fromObject = function(entries, valueCtor, valueFromObject) {};

/**
 * @return {number}
 */
Map.prototype.getLength = function() {};

/**
 * @return {void}
 */
Map.prototype.clear = function() {};

/**
 * @param {?} key
 * @return {boolean}
 */
Map.prototype.del = function(key) {};

/**
 * @return {!Array<!Array<?>>}
 */
Map.prototype.getEntryList = function() {};

/**
 * @return {?}
 */
Map.prototype.entries = function() {};

/**
 * @return {?}
 */
Map.prototype.keys = function() {};

/**
 * @param {?} callback
 * @param {!Object=} thisArg
 * @return {void}
 */
Map.prototype.forEach = function(callback, thisArg) {};

/**
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
Map.prototype.set = function(key, value) {};

/**
 * @param {?} key
 * @return {?}
 */
Map.prototype.get = function(key) {};

/**
 * @param {?} key
 * @return {boolean}
 */
Map.prototype.has = function(key) {};
/**
 * @record
 * @struct
 */
Map.Iterator = function() {};

/**
 * @return {?}
 */
Map.Iterator.prototype.next = function() {};
/**
 * @record
 * @struct
 */
Map.IteratorResult = function() {};
 /** @type {boolean} */
Map.IteratorResult.prototype.done;
 /** @type {?} */
Map.IteratorResult.prototype.value;

/** @typedef {?} */
var BinaryReadReader;

/** @typedef {?} */
var BinaryRead;

/** @typedef {?} */
var BinaryWriteCallback;

/** @typedef {?} */
var BinaryWrite;

/**
 * @constructor
 * @struct
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)=} bytes
 * @param {number=} start
 * @param {number=} length
 */
function BinaryReader(bytes, start, length) {}
 /** @type {?} */
BinaryReader.prototype.readMessage;

/**
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)=} bytes
 * @param {number=} start
 * @param {number=} length
 * @return {?}
 */
BinaryReader.alloc = function(bytes, start, length) {};

/**
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)=} bytes
 * @param {number=} start
 * @param {number=} length
 * @return {?}
 */
BinaryReader.prototype.alloc = function(bytes, start, length) {};

/**
 * @return {void}
 */
BinaryReader.prototype.free = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.getFieldCursor = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.getCursor = function() {};

/**
 * @return {!Uint8Array}
 */
BinaryReader.prototype.getBuffer = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.getFieldNumber = function() {};

/**
 * @return {?}
 */
BinaryReader.prototype.getWireType = function() {};

/**
 * @return {boolean}
 */
BinaryReader.prototype.isEndGroup = function() {};

/**
 * @return {boolean}
 */
BinaryReader.prototype.getError = function() {};

/**
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)=} bytes
 * @param {number=} start
 * @param {number=} length
 * @return {void}
 */
BinaryReader.prototype.setBlock = function(bytes, start, length) {};

/**
 * @return {void}
 */
BinaryReader.prototype.reset = function() {};

/**
 * @param {number} count
 * @return {void}
 */
BinaryReader.prototype.advance = function(count) {};

/**
 * @return {boolean}
 */
BinaryReader.prototype.nextField = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.unskipHeader = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.skipMatchingFields = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.skipVarintField = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.skipDelimitedField = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.skipFixed32Field = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.skipFixed64Field = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.skipGroup = function() {};

/**
 * @return {void}
 */
BinaryReader.prototype.skipField = function() {};

/**
 * @param {string} callbackName
 * @param {?} callback
 * @return {void}
 */
BinaryReader.prototype.registerReadCallback = function(callbackName, callback) {};

/**
 * @param {string} callbackName
 * @return {?}
 */
BinaryReader.prototype.runReadCallback = function(callbackName) {};

/**
 * @param {?} fieldType
 * @return {(string|number|boolean|!Uint8Array|!Array<(string|number|boolean)>|!Array<!Uint8Array>)}
 */
BinaryReader.prototype.readAny = function(fieldType) {};

/**
 * @param {number} field
 * @param {?} message
 * @param {?} reader
 * @return {void}
 */
BinaryReader.prototype.readGroup = function(field, message, reader) {};

/**
 * @return {?}
 */
BinaryReader.prototype.getFieldDecoder = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readInt32 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readInt32String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readInt64 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readInt64String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readUint32 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readUint32String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readUint64 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readUint64String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readSint32 = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readSint64 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readSint64String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readFixed32 = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readFixed64 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readFixed64String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readSfixed32 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readSfixed32String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readSfixed64 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readSfixed64String = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readFloat = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readDouble = function() {};

/**
 * @return {boolean}
 */
BinaryReader.prototype.readBool = function() {};

/**
 * @return {number}
 */
BinaryReader.prototype.readEnum = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readString = function() {};

/**
 * @return {!Uint8Array}
 */
BinaryReader.prototype.readBytes = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readVarintHash64 = function() {};

/**
 * @return {string}
 */
BinaryReader.prototype.readFixedHash64 = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedInt32 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedInt32String = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedInt64 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedInt64String = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedUint32 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedUint32String = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedUint64 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedUint64String = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedSint32 = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedSint64 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedSint64String = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedFixed32 = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedFixed64 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedFixed64String = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedSfixed32 = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedSfixed64 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedSfixed64String = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedFloat = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedDouble = function() {};

/**
 * @return {!Array<boolean>}
 */
BinaryReader.prototype.readPackedBool = function() {};

/**
 * @return {!Array<number>}
 */
BinaryReader.prototype.readPackedEnum = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedVarintHash64 = function() {};

/**
 * @return {!Array<string>}
 */
BinaryReader.prototype.readPackedFixedHash64 = function() {};

/**
 * @constructor
 * @struct
 */
function BinaryWriter() {}
 /** @type {?} */
BinaryWriter.prototype.writeMessage;

/**
 * @param {!Uint8Array} bytes
 * @param {number} start
 * @param {number} end
 * @return {void}
 */
BinaryWriter.prototype.writeSerializedMessage = function(bytes, start, end) {};

/**
 * @param {!Uint8Array=} bytes
 * @param {number=} start
 * @param {number=} end
 * @return {void}
 */
BinaryWriter.prototype.maybeWriteSerializedMessage = function(bytes, start, end) {};

/**
 * @return {void}
 */
BinaryWriter.prototype.reset = function() {};

/**
 * @return {!Uint8Array}
 */
BinaryWriter.prototype.getResultBuffer = function() {};

/**
 * @return {string}
 */
BinaryWriter.prototype.getResultBase64String = function() {};

/**
 * @param {number} field
 * @return {void}
 */
BinaryWriter.prototype.beginSubMessage = function(field) {};

/**
 * @param {number} field
 * @return {void}
 */
BinaryWriter.prototype.endSubMessage = function(field) {};

/**
 * @param {?} fieldType
 * @param {number} field
 * @param {(string|number|boolean|!Uint8Array|!Array<(string|number|boolean)>|!Array<!Uint8Array>)} value
 * @return {void}
 */
BinaryWriter.prototype.writeAny = function(fieldType, field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeInt32 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeInt32String = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeInt64 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeInt64String = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeUint32 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeUint32String = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeUint64 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeUint64String = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeSint32 = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeSint64 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeSint64String = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeFixed32 = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeFixed64 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeFixed64String = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeSfixed32 = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeSfixed64 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeSfixed64String = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeFloat = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeDouble = function(field, value) {};

/**
 * @param {number} field
 * @param {boolean=} value
 * @return {void}
 */
BinaryWriter.prototype.writeBool = function(field, value) {};

/**
 * @param {number} field
 * @param {number=} value
 * @return {void}
 */
BinaryWriter.prototype.writeEnum = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeString = function(field, value) {};

/**
 * @param {number} field
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)=} value
 * @return {void}
 */
BinaryWriter.prototype.writeBytes = function(field, value) {};

/**
 * @param {number} field
 * @param {?} value
 * @param {?} writeCallback
 * @return {void}
 */
BinaryWriter.prototype.writeGroup = function(field, value, writeCallback) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeFixedHash64 = function(field, value) {};

/**
 * @param {number} field
 * @param {string=} value
 * @return {void}
 */
BinaryWriter.prototype.writeVarintHash64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedInt32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedInt32String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedInt64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedInt64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedUint32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedUint32String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedUint64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedUint64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedSint32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedSint64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedSint64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedFixed32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedFixed64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedFixed64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedSfixed32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedSfixed64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedSfixed64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedFloat = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedDouble = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<boolean>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedBool = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedEnum = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedString = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<(string|!ArrayBuffer|!Uint8Array|!Array<number>)>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedBytes = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<?>} value
 * @param {?} writerCallback
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedMessage = function(field, value, writerCallback) {};

/**
 * @param {number} field
 * @param {!Array<?>} value
 * @param {?} writerCallback
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedGroup = function(field, value, writerCallback) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedFixedHash64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writeRepeatedVarintHash64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedInt32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedInt32String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedInt64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedInt64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedUint32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedUint32String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedUint64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedUint64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedSint32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedSint64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedSint64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedFixed32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedFixed64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedFixed64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedSfixed32 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedSfixed64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedSfixed64String = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedFloat = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedDouble = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<boolean>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedBool = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<number>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedEnum = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedFixedHash64 = function(field, value) {};

/**
 * @param {number} field
 * @param {!Array<string>=} value
 * @return {void}
 */
BinaryWriter.prototype.writePackedVarintHash64 = function(field, value) {};

/**
 * @constructor
 * @struct
 */
function BinaryEncoder() {}

/**
 * @return {number}
 */
BinaryEncoder.prototype.length = function() {};

/**
 * @return {!Array<number>}
 */
BinaryEncoder.prototype.end = function() {};

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @return {void}
 */
BinaryEncoder.prototype.writeSplitVarint64 = function(lowBits, highBits) {};

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @return {void}
 */
BinaryEncoder.prototype.writeSplitFixed64 = function(lowBits, highBits) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeUnsignedVarint32 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeSignedVarint32 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeUnsignedVarint64 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeSignedVarint64 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeZigzagVarint32 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeZigzagVarint64 = function(value) {};

/**
 * @param {string} value
 * @return {void}
 */
BinaryEncoder.prototype.writeZigzagVarint64String = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeUint8 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeUint16 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeUint32 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeUint64 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeInt8 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeInt16 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeInt32 = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeInt64 = function(value) {};

/**
 * @param {string} value
 * @return {void}
 */
BinaryEncoder.prototype.writeInt64String = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeFloat = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeDouble = function(value) {};

/**
 * @param {boolean} value
 * @return {void}
 */
BinaryEncoder.prototype.writeBool = function(value) {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryEncoder.prototype.writeEnum = function(value) {};

/**
 * @param {!Uint8Array} bytes
 * @return {void}
 */
BinaryEncoder.prototype.writeBytes = function(bytes) {};

/**
 * @param {string} hash
 * @return {void}
 */
BinaryEncoder.prototype.writeVarintHash64 = function(hash) {};

/**
 * @param {string} hash
 * @return {void}
 */
BinaryEncoder.prototype.writeFixedHash64 = function(hash) {};

/**
 * @param {string} value
 * @return {number}
 */
BinaryEncoder.prototype.writeString = function(value) {};

/**
 * @constructor
 * @struct
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)=} bytes
 * @param {number=} start
 * @param {number=} length
 */
function BinaryDecoder(bytes, start, length) {}

/**
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)=} bytes
 * @param {number=} start
 * @param {number=} length
 * @return {?}
 */
BinaryDecoder.alloc = function(bytes, start, length) {};

/**
 * @return {void}
 */
BinaryDecoder.prototype.free = function() {};

/**
 * @return {?}
 */
BinaryDecoder.prototype.clone = function() {};

/**
 * @return {void}
 */
BinaryDecoder.prototype.clear = function() {};

/**
 * @return {!Uint8Array}
 */
BinaryDecoder.prototype.getBuffer = function() {};

/**
 * @param {(string|!ArrayBuffer|!Uint8Array|!Array<number>)} data
 * @param {number=} start
 * @param {number=} length
 * @return {void}
 */
BinaryDecoder.prototype.setBlock = function(data, start, length) {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.getEnd = function() {};

/**
 * @param {number} end
 * @return {void}
 */
BinaryDecoder.prototype.setEnd = function(end) {};

/**
 * @return {void}
 */
BinaryDecoder.prototype.reset = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.getCursor = function() {};

/**
 * @param {number} cursor
 * @return {void}
 */
BinaryDecoder.prototype.setCursor = function(cursor) {};

/**
 * @param {number} count
 * @return {void}
 */
BinaryDecoder.prototype.advance = function(count) {};

/**
 * @return {boolean}
 */
BinaryDecoder.prototype.atEnd = function() {};

/**
 * @return {boolean}
 */
BinaryDecoder.prototype.pastEnd = function() {};

/**
 * @return {boolean}
 */
BinaryDecoder.prototype.getError = function() {};

/**
 * @return {void}
 */
BinaryDecoder.prototype.skipVarint = function() {};

/**
 * @param {number} value
 * @return {void}
 */
BinaryDecoder.prototype.unskipVarint = function(value) {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUnsignedVarint32 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readSignedVarint32 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUnsignedVarint32String = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readSignedVarint32String = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readZigzagVarint32 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUnsignedVarint64 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUnsignedVarint64String = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readSignedVarint64 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readSignedVarint64String = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readZigzagVarint64 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readZigzagVarint64String = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUint8 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUint16 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUint32 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readUint64 = function() {};

/**
 * @return {string}
 */
BinaryDecoder.prototype.readUint64String = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readInt8 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readInt16 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readInt32 = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readInt64 = function() {};

/**
 * @return {string}
 */
BinaryDecoder.prototype.readInt64String = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readFloat = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readDouble = function() {};

/**
 * @return {boolean}
 */
BinaryDecoder.prototype.readBool = function() {};

/**
 * @return {number}
 */
BinaryDecoder.prototype.readEnum = function() {};

/**
 * @param {number} length
 * @return {string}
 */
BinaryDecoder.prototype.readString = function(length) {};

/**
 * @return {string}
 */
BinaryDecoder.prototype.readStringWithLength = function() {};

/**
 * @param {number} length
 * @return {!Uint8Array}
 */
BinaryDecoder.prototype.readBytes = function(length) {};

/**
 * @return {string}
 */
BinaryDecoder.prototype.readVarintHash64 = function() {};

/**
 * @return {string}
 */
BinaryDecoder.prototype.readFixedHash64 = function() {};

/**
 * @constructor
 * @struct
 * @param {?=} decoder
 * @param {?=} next
 * @param {!Array<(string|number|boolean)>=} elements
 */
function BinaryIterator(decoder, next, elements) {}

/**
 * @param {?=} decoder
 * @param {?=} next
 * @param {!Array<(string|number|boolean)>=} elements
 * @return {?}
 */
BinaryIterator.alloc = function(decoder, next, elements) {};

/**
 * @return {void}
 */
BinaryIterator.prototype.free = function() {};

/**
 * @return {void}
 */
BinaryIterator.prototype.clear = function() {};

/**
 * @return {(string|number|boolean)}
 */
BinaryIterator.prototype.get = function() {};

/**
 * @return {boolean}
 */
BinaryIterator.prototype.atEnd = function() {};

/**
 * @return {(string|number|boolean)}
 */
BinaryIterator.prototype.next = function() {};
/** @const */
var BinaryConstants = {};

/** @const */
BinaryConstants.FieldType = {};
/** @const {number} */
BinaryConstants.FieldType.INVALID;
/** @const {number} */
BinaryConstants.FieldType.DOUBLE;
/** @const {number} */
BinaryConstants.FieldType.FLOAT;
/** @const {number} */
BinaryConstants.FieldType.INT64;
/** @const {number} */
BinaryConstants.FieldType.UINT64;
/** @const {number} */
BinaryConstants.FieldType.INT32;
/** @const {number} */
BinaryConstants.FieldType.FIXED64;
/** @const {number} */
BinaryConstants.FieldType.FIXED32;
/** @const {number} */
BinaryConstants.FieldType.BOOL;
/** @const {number} */
BinaryConstants.FieldType.STRING;
/** @const {number} */
BinaryConstants.FieldType.GROUP;
/** @const {number} */
BinaryConstants.FieldType.MESSAGE;
/** @const {number} */
BinaryConstants.FieldType.BYTES;
/** @const {number} */
BinaryConstants.FieldType.UINT32;
/** @const {number} */
BinaryConstants.FieldType.ENUM;
/** @const {number} */
BinaryConstants.FieldType.SFIXED32;
/** @const {number} */
BinaryConstants.FieldType.SFIXED64;
/** @const {number} */
BinaryConstants.FieldType.SINT32;
/** @const {number} */
BinaryConstants.FieldType.SINT64;
/** @const {number} */
BinaryConstants.FieldType.FHASH64;
/** @const {number} */
BinaryConstants.FieldType.VHASH64;

/** @const */
BinaryConstants.WireType = {};
/** @const {number} */
BinaryConstants.WireType.INVALID;
/** @const {number} */
BinaryConstants.WireType.VARINT;
/** @const {number} */
BinaryConstants.WireType.FIXED64;
/** @const {number} */
BinaryConstants.WireType.DELIMITED;
/** @const {number} */
BinaryConstants.WireType.START_GROUP;
/** @const {number} */
BinaryConstants.WireType.END_GROUP;
/** @const {number} */
BinaryConstants.WireType.FIXED32;
 /** @type {?} */
BinaryConstants.FieldTypeToWireType;
 /** @type {number} */
BinaryConstants.INVALID_FIELD_NUMBER;
 /** @type {number} */
BinaryConstants.FLOAT32_EPS;
 /** @type {number} */
BinaryConstants.FLOAT32_MIN;
 /** @type {number} */
BinaryConstants.FLOAT32_MAX;
 /** @type {number} */
BinaryConstants.FLOAT64_EPS;
 /** @type {number} */
BinaryConstants.FLOAT64_MIN;
 /** @type {number} */
BinaryConstants.FLOAT64_MAX;
 /** @type {number} */
BinaryConstants.TWO_TO_20;
 /** @type {number} */
BinaryConstants.TWO_TO_23;
 /** @type {number} */
BinaryConstants.TWO_TO_31;
 /** @type {number} */
BinaryConstants.TWO_TO_32;
 /** @type {number} */
BinaryConstants.TWO_TO_52;
 /** @type {number} */
BinaryConstants.TWO_TO_63;
 /** @type {number} */
BinaryConstants.TWO_TO_64;
 /** @type {string} */
BinaryConstants.ZERO_HASH;
/** @const */
var arith = {};

/**
 * @constructor
 * @struct
 * @param {number} lo
 * @param {number} hi
 */
arith.UInt64 = function(lo, hi) {};
 /** @type {number} */
arith.UInt64.prototype.lo;
 /** @type {number} */
arith.UInt64.prototype.hi;

/**
 * @param {?} other
 * @return {number}
 */
arith.UInt64.prototype.cmp = function(other) {};

/**
 * @return {?}
 */
arith.UInt64.prototype.rightShift = function() {};

/**
 * @return {?}
 */
arith.UInt64.prototype.leftShift = function() {};

/**
 * @return {boolean}
 */
arith.UInt64.prototype.msb = function() {};

/**
 * @return {boolean}
 */
arith.UInt64.prototype.lsb = function() {};

/**
 * @return {boolean}
 */
arith.UInt64.prototype.zero = function() {};

/**
 * @param {?} other
 * @return {?}
 */
arith.UInt64.prototype.add = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
arith.UInt64.prototype.sub = function(other) {};

/**
 * @param {number} a
 * @param {number} b
 * @return {?}
 */
arith.UInt64.mul32x32 = function(a, b) {};

/**
 * @param {number} a
 * @return {?}
 */
arith.UInt64.prototype.mul = function(a) {};

/**
 * @param {number} divisor
 * @return {!Array<?>}
 */
arith.UInt64.prototype.div = function(divisor) {};

/**
 * @return {string}
 */
arith.UInt64.prototype.toString = function() {};

/**
 * @param {string} str
 * @return {?}
 */
arith.UInt64.fromString = function(str) {};

/**
 * @return {?}
 */
arith.UInt64.prototype.clone = function() {};

/**
 * @constructor
 * @struct
 * @param {number} lo
 * @param {number} hi
 */
arith.Int64 = function(lo, hi) {};
 /** @type {number} */
arith.Int64.prototype.lo;
 /** @type {number} */
arith.Int64.prototype.hi;

/**
 * @param {?} other
 * @return {?}
 */
arith.Int64.prototype.add = function(other) {};

/**
 * @param {?} other
 * @return {?}
 */
arith.Int64.prototype.sub = function(other) {};

/**
 * @return {?}
 */
arith.Int64.prototype.clone = function() {};

/**
 * @return {string}
 */
arith.Int64.prototype.toString = function() {};

/**
 * @param {string} str
 * @return {?}
 */
arith.Int64.fromString = function(str) {};
