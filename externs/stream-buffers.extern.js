/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/stream-buffers/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @extends {internal.WritableOptions}
 * @record
 * @struct
 */
function WritableStreamBufferOptions() {}
 /** @type {number} */
WritableStreamBufferOptions.prototype.initialSize;
 /** @type {number} */
WritableStreamBufferOptions.prototype.incrementAmount;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function WritableStreamBuffer(options) {}

/**
 * @return {number}
 */
WritableStreamBuffer.prototype.size = function() {};

/**
 * @return {number}
 */
WritableStreamBuffer.prototype.maxSize = function() {};

/**
 * @param {number=} length
 * @return {?}
 */
WritableStreamBuffer.prototype.getContents = function(length) {};

/**
 * @param {string=} encoding
 * @param {number=} length
 * @return {string}
 */
WritableStreamBuffer.prototype.getContentsAsString = function(encoding, length) {};
/**
 * @extends {internal.ReadableOptions}
 * @record
 * @struct
 */
function ReadableStreamBufferOptions() {}
 /** @type {number} */
ReadableStreamBufferOptions.prototype.frequency;
 /** @type {number} */
ReadableStreamBufferOptions.prototype.chunkSize;
 /** @type {number} */
ReadableStreamBufferOptions.prototype.initialSize;
 /** @type {number} */
ReadableStreamBufferOptions.prototype.incrementAmount;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function ReadableStreamBuffer(options) {}

/**
 * @param {(string|?)} data
 * @param {string=} encoding
 * @return {void}
 */
ReadableStreamBuffer.prototype.put = function(data, encoding) {};

/**
 * @return {void}
 */
ReadableStreamBuffer.prototype.stop = function() {};

/**
 * @return {number}
 */
ReadableStreamBuffer.prototype.size = function() {};

/**
 * @return {number}
 */
ReadableStreamBuffer.prototype.maxSize = function() {};
 /** @type {number} */
var DEFAULT_INITIAL_SIZE;
 /** @type {number} */
var DEFAULT_INCREMENT_AMOUNT;
 /** @type {number} */
var DEFAULT_FREQUENCY;
 /** @type {number} */
var DEFAULT_CHUNK_SIZE;
