/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/hashids/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {string} salt
 * @param {number=} minHashLength
 * @param {string=} alphabet
 */
function Hashids(salt, minHashLength, alphabet) {}
 /** @type {string} */
Hashids.prototype.version;
 /** @type {number} */
Hashids.prototype.minAlphabetLength;
 /** @type {number} */
Hashids.prototype.sepDiv;
 /** @type {number} */
Hashids.prototype.guardDiv;
 /** @type {string} */
Hashids.prototype.errorAlphabetLength;
 /** @type {string} */
Hashids.prototype.errorAlphabetSpace;
 /** @type {!Array<string>} */
Hashids.prototype.alphabet;
 /** @type {string} */
Hashids.prototype.seps;
 /** @type {number} */
Hashids.prototype.minHashLength;
 /** @type {string} */
Hashids.prototype.salt;

/**
 * @param {string} hash
 * @return {!Array<number>}
 */
Hashids.prototype.decode = function(hash) {};

/**
 * @param {...number|!Array<number>} arg_or_args
 * @return {string}
 */
Hashids.prototype.encode = function(arg_or_args) {};

/**
 * @param {string} str
 * @return {string}
 */
Hashids.prototype.encodeHex = function(str) {};

/**
 * @param {string} hash
 * @return {string}
 */
Hashids.prototype.decodeHex = function(hash) {};

/**
 * @param {number} input
 * @param {string} alphabet
 * @return {string}
 */
Hashids.prototype.hash = function(input, alphabet) {};

/**
 * @param {!Array<string>} input
 * @param {string} alphabet
 * @return {number}
 */
Hashids.prototype.unhash = function(input, alphabet) {};
