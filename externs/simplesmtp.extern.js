/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/simplesmtp/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */
/**
 * @record
 * @struct
 */
function SmtpServerOptions() {}
 /** @type {string} */
SmtpServerOptions.prototype.name;
 /** @type {boolean} */
SmtpServerOptions.prototype.debug;
 /** @type {number} */
SmtpServerOptions.prototype.timeout;
 /** @type {boolean} */
SmtpServerOptions.prototype.secureConnection;
 /** @type {string} */
SmtpServerOptions.prototype.SMTPBanner;
 /** @type {boolean} */
SmtpServerOptions.prototype.requireAuthentication;
 /** @type {boolean} */
SmtpServerOptions.prototype.enableAuthentication;
 /** @type {number} */
SmtpServerOptions.prototype.maxSize;
 /** @type {?} */
SmtpServerOptions.prototype.credentials;
 /** @type {!Array<string>} */
SmtpServerOptions.prototype.authMethods;
 /** @type {boolean} */
SmtpServerOptions.prototype.disableEHLO;
 /** @type {boolean} */
SmtpServerOptions.prototype.ignoreTLS;
 /** @type {boolean} */
SmtpServerOptions.prototype.disableDNSValidation;
 /** @type {number} */
SmtpServerOptions.prototype.maxClients;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function SMTPServer(options) {}

/**
 * Server starts listening on defined port and hostname
 * 
 * @param {number} port
 * @param {string} host
 * @param {?=} callback
 * @return {void}
 */
SMTPServer.prototype.listen = function(port, host, callback) {};

/**
 * <p>Closes the server</p>
 * 
 * @param {?} callback
 * @return {void}
 */
SMTPServer.prototype.end = function(callback) {};

/**
 * @constructor
 * @struct
 * @param {?=} callback_or_options
 * @param {?=} callback
 */
function SimpleServer(callback_or_options, callback) {}
 /** @type {?} */
SimpleServer.prototype.server;

/**
 * Server starts listening on defined port and hostname
 * 
 * @param {number} port
 * @param {string} host
 * @param {?=} callback
 * @return {void}
 */
SimpleServer.prototype.listen = function(port, host, callback) {};
/**
 * @extends {NodeJS.ReadableStream}
 * @record
 * @struct
 */
function SimpleServerConnection() {}
 /** @type {string} */
SimpleServerConnection.prototype.from;
 /** @type {!Array<string>} */
SimpleServerConnection.prototype.to;
 /** @type {string} */
SimpleServerConnection.prototype.host;
 /** @type {string} */
SimpleServerConnection.prototype.remoteAddress;

/**
 * Accept the message with the selected ID
 * @param {string=} id
 * @return {void}
 */
SimpleServerConnection.prototype.accept = function(id) {};

/**
 * Reject the message with the selected message
 * @param {string=} reason
 * @return {void}
 */
SimpleServerConnection.prototype.reject = function(reason) {};

/**
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {?}
 */
function createSimpleServer(callback_or_options, callback) {}
