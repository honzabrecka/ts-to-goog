/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/paypal-cordova-plugin/index.d.ts:

/**
 * @constructor
 * @struct
 * @param {string} name Name of the item. 127 characters max.
 * @param {number} quantity Number of units. 10 characters max.
 * @param {string} price Unit price for this item 10 characters max.
 * May be negative for "coupon" etc.
 * @param {string} currency ISO standard currency code.
 * @param {string=} sku The stock keeping unit for this item. 50 characters max (optional).
 */
function PayPalItem(name, quantity, price, currency, sku) {}
 /** @type {string} */
PayPalItem.prototype.name;
 /** @type {number} */
PayPalItem.prototype.quantity;
 /** @type {string} */
PayPalItem.prototype.price;
 /** @type {string} */
PayPalItem.prototype.currency;
 /** @type {string} */
PayPalItem.prototype.sku;

/**
 * @constructor
 * @struct
 * @param {string} subtotal Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.
 * @param {string} shipping Amount charged for shipping. 10 characters max with support for 2 decimal places.
 * @param {string} tax Amount charged for tax. 10 characters max with support for 2 decimal places.
 */
function PayPalPaymentDetails(subtotal, shipping, tax) {}
 /** @type {string} */
PayPalPaymentDetails.prototype.subtotal;
 /** @type {string} */
PayPalPaymentDetails.prototype.shipping;
 /** @type {string} */
PayPalPaymentDetails.prototype.tax;

/**
 * @constructor
 * @struct
 * @param {string} amount The amount of the payment.
 * @param {string} currency
 * @param {string} shortDescription A short descripton of the payment.
 * @param {string} intent • "Sale" for an immediate payment.
 * • "Auth" for payment authorization only, to be captured separately at a later time.
 * • "Order" for taking an order, with authorization and capture to be done separately at a later time.
 * @param {!PayPalPaymentDetails=} details PayPalPaymentDetails object (optional).
 */
function PayPalPayment(amount, currency, shortDescription, intent, details) {}
 /** @type {string} */
PayPalPayment.prototype.amount;
 /** @type {string} */
PayPalPayment.prototype.currency;
 /** @type {string} */
PayPalPayment.prototype.shortDescription;
 /** @type {string} */
PayPalPayment.prototype.intent;
 /** @type {!PayPalPaymentDetails} */
PayPalPayment.prototype.details;
 /** @type {string} */
PayPalPayment.prototype.invoiceNumber;
 /** @type {string} */
PayPalPayment.prototype.custom;
 /** @type {string} */
PayPalPayment.prototype.softDescriptor;
 /** @type {string} */
PayPalPayment.prototype.bnCode;
 /** @type {!Array<!PayPalItem>} */
PayPalPayment.prototype.items;
 /** @type {!PayPalShippingAddress} */
PayPalPayment.prototype.shippingAddress;

/**
 * @constructor
 * @struct
 * @param {string} recipientName Name of the recipient at this address. 50 characters max.
 * @param {string} line1 Line 1 of the address (e.g., Number, street, etc). 100 characters max.
 * @param {string} line2 Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.
 * @param {string} city City name. 50 characters max.
 * @param {string} state 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.
 * @param {string} postalCode ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.
 * @param {string} countryCode 2-letter country code. 2 characters max.
 */
function PayPalShippingAddress(recipientName, line1, line2, city, state, postalCode, countryCode) {}
 /** @type {string} */
PayPalShippingAddress.prototype.recipientName;
 /** @type {string} */
PayPalShippingAddress.prototype.line1;
 /** @type {string} */
PayPalShippingAddress.prototype.line2;
 /** @type {string} */
PayPalShippingAddress.prototype.city;
 /** @type {string} */
PayPalShippingAddress.prototype.state;
 /** @type {string} */
PayPalShippingAddress.prototype.postalCode;
 /** @type {string} */
PayPalShippingAddress.prototype.countryCode;

/**
 * @constructor
 * @struct
 * @param {!PayPalConfigurationOptions=} options A set of options to use. Any options not specified will assume default values.
 */
function PayPalConfiguration(options) {}
 /** @type {string} */
PayPalConfiguration.prototype.defaultUserEmail;
 /** @type {string} */
PayPalConfiguration.prototype.defaultUserPhoneCountryCode;
 /** @type {string} */
PayPalConfiguration.prototype.defaultUserPhoneNumber;
 /** @type {string} */
PayPalConfiguration.prototype.merchantName;
 /** @type {string} */
PayPalConfiguration.prototype.merchantPrivacyPolicyURL;
 /** @type {string} */
PayPalConfiguration.prototype.merchantUserAgreementURL;
 /** @type {boolean} */
PayPalConfiguration.prototype.acceptCreditCards;
 /** @type {number} */
PayPalConfiguration.prototype.payPalShippingAddressOption;
 /** @type {boolean} */
PayPalConfiguration.prototype.rememberUser;
 /** @type {string} */
PayPalConfiguration.prototype.languageOrLocale;
 /** @type {boolean} */
PayPalConfiguration.prototype.disableBlurWhenBackgrounding;
 /** @type {boolean} */
PayPalConfiguration.prototype.presentingInPopover;
 /** @type {boolean} */
PayPalConfiguration.prototype.forceDefaultsInSandbox;
 /** @type {string} */
PayPalConfiguration.prototype.sandboxUserPassword;
 /** @type {string} */
PayPalConfiguration.prototype.sandboxUserPin;
/**
 * @record
 * @struct
 */
function PayPalConfigurationOptions() {}
 /** @type {string} */
PayPalConfigurationOptions.prototype.defaultUserEmail;
 /** @type {string} */
PayPalConfigurationOptions.prototype.defaultUserPhoneCountryCode;
 /** @type {string} */
PayPalConfigurationOptions.prototype.defaultUserPhoneNumber;
 /** @type {string} */
PayPalConfigurationOptions.prototype.merchantName;
 /** @type {string} */
PayPalConfigurationOptions.prototype.merchantPrivacyPolicyURL;
 /** @type {string} */
PayPalConfigurationOptions.prototype.merchantUserAgreementURL;
 /** @type {boolean} */
PayPalConfigurationOptions.prototype.acceptCreditCards;
 /** @type {number} */
PayPalConfigurationOptions.prototype.payPalShippingAddressOption;
 /** @type {boolean} */
PayPalConfigurationOptions.prototype.rememberUser;
 /** @type {string} */
PayPalConfigurationOptions.prototype.languageOrLocale;
 /** @type {boolean} */
PayPalConfigurationOptions.prototype.disableBlurWhenBackgrounding;
 /** @type {boolean} */
PayPalConfigurationOptions.prototype.presentingInPopover;
 /** @type {boolean} */
PayPalConfigurationOptions.prototype.forceDefaultsInSandbox;
 /** @type {string} */
PayPalConfigurationOptions.prototype.sandboxUserPassword;
 /** @type {string} */
PayPalConfigurationOptions.prototype.sandboxUserPin;
/** @const */
var PayPalCordovaPlugin = {};
/**
 * @record
 * @struct
 */
PayPalCordovaPlugin.PayPalClientIds = function() {};
 /** @type {string} */
PayPalCordovaPlugin.PayPalClientIds.prototype.PayPalEnvironmentProduction;
 /** @type {string} */
PayPalCordovaPlugin.PayPalClientIds.prototype.PayPalEnvironmentSandbox;
/**
 * @record
 * @struct
 */
PayPalCordovaPlugin.BaseResult = function() {};
 /** @type {!PayPalCordovaPlugin.Client} */
PayPalCordovaPlugin.BaseResult.prototype.client;
 /** @type {string} */
PayPalCordovaPlugin.BaseResult.prototype.response_type;
/**
 * @record
 * @struct
 */
PayPalCordovaPlugin.Client = function() {};
 /** @type {string} */
PayPalCordovaPlugin.Client.prototype.paypal_sdk_version;
 /** @type {string} */
PayPalCordovaPlugin.Client.prototype.environment;
 /** @type {string} */
PayPalCordovaPlugin.Client.prototype.platform;
 /** @type {string} */
PayPalCordovaPlugin.Client.prototype.product_name;
/**
 * @extends {PayPalCordovaPlugin.BaseResult}
 * @record
 * @struct
 */
PayPalCordovaPlugin.SinglePaymentResult = function() {};
 /** @type {{intent: string, id: string, state: string, authorization_id: string, create_time: string}} */
PayPalCordovaPlugin.SinglePaymentResult.prototype.response;
/**
 * @extends {PayPalCordovaPlugin.BaseResult}
 * @record
 * @struct
 */
PayPalCordovaPlugin.FuturePaymentResult = function() {};
 /** @type {{code: string}} */
PayPalCordovaPlugin.FuturePaymentResult.prototype.response;
/**
 * @record
 * @struct
 */
PayPalCordovaPlugin.PayPalMobileStatic = function() {};

/**
 * Retrieve the version of the PayPal iOS SDK library. Useful when contacting support.
 * 
 * @param {function(string): void} completionCallback a callback function accepting a string
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.version = function(completionCallback) {};

/**
 * You MUST call this method to initialize the PayPal Mobile SDK.
 * 
 * The PayPal Mobile SDK can operate in different environments to facilitate development and testing.
 * 
 * @param {!PayPalCordovaPlugin.PayPalClientIds} clientIdsForEnvironments set of client ids for environments
 * Example: var clientIdsForEnvironments = {
 *  PayPalEnvironmentProduction : \@"my-client-id-for-Production",
 *  PayPalEnvironmentSandbox : \@"my-client-id-for-Sandbox"
 *  }
 * @param {function(): void} completionCallback a callback function on success
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.init = function(clientIdsForEnvironments, completionCallback) {};

/**
 * You must preconnect to PayPal to prepare the device for processing payments.
 * This improves the user experience, by making the presentation of the
 * UI faster. The preconnect is valid for a limited time, so
 * the recommended time to preconnect is on page load.
 * 
 * @param {string} environment available options are "PayPalEnvironmentNoNetwork", "PayPalEnvironmentProduction" and "PayPalEnvironmentSandbox"
 * @param {!PayPalConfiguration} configuration PayPalConfiguration object, for Future Payments merchantName, merchantPrivacyPolicyURL
 *      and merchantUserAgreementURL must be set be set
 * @param {function(): void} completionCallback a callback function on success
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.prepareToRender = function(environment, configuration, completionCallback) {};

/**
 * Start PayPal UI to collect payment from the user.
 * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/ios-integration-guide/
 * for more documentation of the params.
 * 
 * @param {!PayPalPayment} payment PayPalPayment object
 * @param {function(!PayPalCordovaPlugin.SinglePaymentResult): void} completionCallback a callback function accepting a js object, called when the user has completed payment
 * @param {function(string): void} cancelCallback a callback function accepting a reason string, called when the user cancels the payment
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.renderSinglePaymentUI = function(payment, completionCallback, cancelCallback) {};

/**
 * @deprecated 
 * Once a user has consented to future payments, when the user subsequently initiates a PayPal payment
 * from their device to be completed by your server, PayPal uses a Correlation ID to verify that the
 * payment is originating from a valid, user-consented device+application.
 * This helps reduce fraud and decrease declines.
 * This method MUST be called prior to initiating a pre-consented payment (a "future payment") from a mobile device.
 * Pass the result to your server, to include in the payment request sent to PayPal.
 * Do not otherwise cache or store this value.
 * 
 * @param {string} environment available options are "PayPalEnvironmentNoNetwork", "PayPalEnvironmentProduction" and "PayPalEnvironmentSandbox"
 * @param {function(string): void} completionCallback
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.applicationCorrelationIDForEnvironment = function(environment, completionCallback) {};

/**
 * Once a user has consented to future payments, when the user subsequently initiates a PayPal payment
 * from their device to be completed by your server, PayPal uses a Correlation ID to verify that the
 * payment is originating from a valid, user-consented device+application.
 * This helps reduce fraud and decrease declines.
 * This method MUST be called prior to initiating a pre-consented payment (a "future payment") from a mobile device.
 * Pass the result to your server, to include in the payment request sent to PayPal.
 * Do not otherwise cache or store this value.
 * 
 * @param {function(string): void} completionCallback
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.clientMetadataID = function(completionCallback) {};

/**
 * Please Read Docs on Future Payments at https://github.com/paypal/PayPal-iOS-SDK#future-payments
 * 
 * @param {function(!PayPalCordovaPlugin.FuturePaymentResult): void} completionCallback a callback function accepting a js object with future payment authorization
 * @param {function(string): void} cancelCallback a callback function accepting a reason string, called when the user canceled without agreement
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.renderFuturePaymentUI = function(completionCallback, cancelCallback) {};

/**
 * Please Read Docs on Profile Sharing at https://github.com/paypal/PayPal-iOS-SDK#profile-sharing
 * 
 * @param {!Array<string>} scopes scopes Set of requested scope-values. Accepted scopes are: openid, profile, address, email, phone, futurepayments and paypalattributes
 * See https://developer.paypal.com/docs/integration/direct/identity/attributes/ for more details
 * @param {function(?): void} completionCallback a callback function accepting a js object with future payment authorization
 * @param {function(string): void} cancelCallback a callback function accepting a reason string, called when the user canceled without agreement
 * @return {void}
 */
PayPalCordovaPlugin.PayPalMobileStatic.prototype.renderProfileSharingUI = function(scopes, completionCallback, cancelCallback) {};
 /** @type {!PayPalCordovaPlugin.PayPalMobileStatic} */
var PayPalMobile;
