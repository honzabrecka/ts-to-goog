/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/orientjs/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/* TODO: ImportEqualsDeclaration in  */

/**
 * Make a orientdb server client in binary protocol  .
 * @param {!orientjs.ServerConfig} config
 * @return {!orientjs.Server}
 */
function orientjs(config) {}

/** @typedef {(string|number)} */
orientjs.Version;

/** @typedef {string} */
orientjs.PropertyType;

/** @const */
orientjs.DataTypes = {};
/** @const {number} */
orientjs.DataTypes.Boolean;
/** @const {number} */
orientjs.DataTypes.Integer;
/** @const {number} */
orientjs.DataTypes.Short;
/** @const {number} */
orientjs.DataTypes.Long;
/** @const {number} */
orientjs.DataTypes.Float;
/** @const {number} */
orientjs.DataTypes.Double;
/** @const {number} */
orientjs.DataTypes.Datetime;
/** @const {number} */
orientjs.DataTypes.string;
/** @const {number} */
orientjs.DataTypes.Binary;
/** @const {number} */
orientjs.DataTypes.Embedded;
/** @const {number} */
orientjs.DataTypes.EmbeddedList;
/** @const {number} */
orientjs.DataTypes.EmbeddedSet;
/** @const {number} */
orientjs.DataTypes.EmbeddedMap;
/** @const {number} */
orientjs.DataTypes.Link;
/** @const {number} */
orientjs.DataTypes.LinkList;
/** @const {number} */
orientjs.DataTypes.LinkSet;
/** @const {number} */
orientjs.DataTypes.LinkMap;
/** @const {number} */
orientjs.DataTypes.Byte;
/** @const {number} */
orientjs.DataTypes.Transient;
/** @const {number} */
orientjs.DataTypes.Date;
/** @const {number} */
orientjs.DataTypes.Custom;
/** @const {number} */
orientjs.DataTypes.Decimal;
/** @const {number} */
orientjs.DataTypes.LinkBag;
/** @const */
orientjs.errors = {};
/**
 * @constructor
 * @struct
 */
orientjs.errors.BaseError = function() {};
 /** @type {string} */
orientjs.errors.BaseError.prototype.name;

/**
 * @param {string} name
 * @return {void}
 */
orientjs.errors.BaseError.prototype.init = function(name) {};
/**
 * @extends {orientjs.errors.BaseError}
 * @constructor
 * @struct
 */
orientjs.errors.OperationError = function() {};
 /** @type {string} */
orientjs.errors.OperationError.prototype.message;
 /** @type {?} */
orientjs.errors.OperationError.prototype.date;
/**
 * @extends {orientjs.errors.OperationError}
 * @constructor
 * @struct
 */
orientjs.errors.RequestError = function() {};
/** @const */
orientjs.Migration = {};
/**
 * @record
 * @struct
 */
orientjs.Migration.MigrationManagerConfig = function() {};
 /** @type {string} */
orientjs.Migration.MigrationManagerConfig.prototype.name;
 /** @type {!orientjs.Db} */
orientjs.Migration.MigrationManagerConfig.prototype.db;
 /** @type {string} */
orientjs.Migration.MigrationManagerConfig.prototype.dir;
 /** @type {string} */
orientjs.Migration.MigrationManagerConfig.prototype.className;

/**
 * @constructor
 * @struct
 * @param {!orientjs.Migration.MigrationManagerConfig} config
 */
orientjs.Migration.Manager = function(config) {};
/**
 * @constructor
 * @struct
 */
orientjs.Migration.Migration = function() {};
 /** @type {string} */
orientjs.Migration.Migration.prototype.name;
 /** @type {!orientjs.Server} */
orientjs.Migration.Migration.prototype.server;
 /** @type {!orientjs.Db} */
orientjs.Migration.Migration.prototype.db;

/**
 * @param {?=} config
 * @return {void}
 */
orientjs.Migration.Migration.prototype.configure = function(config) {};

/**
 * @return {!Bluebird<?>}
 */
orientjs.Migration.Migration.prototype.up = function() {};

/**
 * @return {!Bluebird<?>}
 */
orientjs.Migration.Migration.prototype.down = function() {};

/**
 * @constructor
 * @struct
 * # Migration Manager
 * 
 * @param {!orientjs.Migration.MigrationManagerConfig=} config
 */
orientjs.Migration.MigrationManager = function(config) {};
 /** @type {string} */
orientjs.Migration.MigrationManager.prototype.name;
 /** @type {!orientjs.Server} */
orientjs.Migration.MigrationManager.prototype.server;
 /** @type {!orientjs.Db} */
orientjs.Migration.MigrationManager.prototype.db;
 /** @type {string} */
orientjs.Migration.MigrationManager.prototype.dir;
 /** @type {string} */
orientjs.Migration.MigrationManager.prototype.className;
 /** @type {!Bluebird<!orientjs.Migration.MigrationManager>} */
orientjs.Migration.MigrationManager.prototype.ensureStructure;

/**
 * Create a new migration.
 * 
 * \@promise {string}                The full path to the created migration.
 * @param {string} param
 * @return {!Bluebird<string>}
 */
orientjs.Migration.MigrationManager.prototype.create = function(param) {};

/**
 * Generate the content for a migration.
 * @param {?} config
 * @return {string}
 */
orientjs.Migration.MigrationManager.prototype.generateMigration = function(config) {};

/**
 * List the migrations that have not yet been applied.
 * 
 * \@promise {string[]} An array of migration names
 * @return {!Bluebird<!Array<string>>}
 */
orientjs.Migration.MigrationManager.prototype.list = function() {};

/**
 * List all the available migrations.
 * 
 * \@promise {string[]} The names of the available migrations.
 * @return {!Bluebird<!Array<string>>}
 */
orientjs.Migration.MigrationManager.prototype.listAvailable = function() {};

/**
 * Retrieve a list of applied migrations.
 * 
 * \@promise {Object[]} The applied migrations.
 * @return {!Bluebird<!Array<?>>}
 */
orientjs.Migration.MigrationManager.prototype.listApplied = function() {};

/**
 * Perform the migration.
 * 
 * \@promise {Mixed} The result of the migration.
 * @param {number=} limit
 * @return {!Bluebird<?>}
 */
orientjs.Migration.MigrationManager.prototype.up = function(limit) {};

/**
 * Revert the migration.
 * 
 * \@promise {Mixed} The result of the migration.
 * @param {number=} limit
 * @return {!Bluebird<?>}
 */
orientjs.Migration.MigrationManager.prototype.down = function(limit) {};

/**
 * Load the migration with the given name.
 * 
 * @param {string} name
 * @return {!orientjs.Migration.Migration}
 */
orientjs.Migration.MigrationManager.prototype.loadMigration = function(name) {};

/**
 * Apply the migration with the given name.
 * 
 * \@promise {Mixed} The result of the migration.
 * @param {string} name
 * @return {!Bluebird<?>}
 */
orientjs.Migration.MigrationManager.prototype.applyMigration = function(name) {};

/**
 * Revert the migration with the given name.
 * 
 * \@promise {Mixed} The result of the migration.
 * @param {string} name
 * @return {!Bluebird<?>}
 */
orientjs.Migration.MigrationManager.prototype.revertMigration = function(name) {};
/**
 * @record
 * @struct
 */
orientjs.Logger = function() {};

/**
 * @param {...?} args
 * @return {void}
 */
orientjs.Logger.prototype.error = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
orientjs.Logger.prototype.log = function(args) {};

/**
 * @param {...?} args
 * @return {void}
 */
orientjs.Logger.prototype.debug = function(args) {};
/**
 * @constructor
 * @struct
 */
orientjs.RID = function() {};
 /** @type {number} */
orientjs.RID.prototype.cluster;
 /** @type {number} */
orientjs.RID.prototype.position;

/**
 * @return {string}
 */
orientjs.RID.prototype.valueOf = function() {};

/**
 * @param {?=} input
 * @return {boolean}
 */
orientjs.RID.prototype.isValid = function(input) {};

/**
 * @param {(string|!orientjs.RID)} rid
 * @return {boolean}
 */
orientjs.RID.prototype.equals = function(rid) {};

/**
 * @param {string} input
 * @return {boolean|!orientjs.RID|!Array<!orientjs.RID>}
 */
orientjs.RID.prototype.parse = function(input) {};

/**
 * @param {number} cluster
 * @param {number} position
 * @return {?}
 */
orientjs.RID.prototype.toRid = function(cluster, position) {};
/**
 * @record
 * @struct
 */
orientjs.CustomField = function() {};

/**
 * Get the value of the given custom field.
 * 
 * @param {string} key
 * @return {!orientjs.CustomField}
 */
orientjs.CustomField.prototype.get = function(key) {};

/**
 * Set a custom field.
 * 
 * \@promise {Object|null}         The new set of custom fields, or null if none are present.
 * @param {string} key
 * @param {?} value
 * @return {!orientjs.CustomField}
 */
orientjs.CustomField.prototype.set = function(key, value) {};

/**
 * Unset the custom field with the given name,
 * 
 * \@promise {Object|null}     The new set of custom fields, or null if none are present.
 * @param {string} key
 * @return {!orientjs.CustomField}
 */
orientjs.CustomField.prototype.unset = function(key) {};
/**
 * @record
 * @struct
 */
orientjs.PropertyCreateConfig = function() {};
 /** @type {string} */
orientjs.PropertyCreateConfig.prototype.name;
 /** @type {string} */
orientjs.PropertyCreateConfig.prototype.type;
 /** @type {?} */
orientjs.PropertyCreateConfig.prototype.default;
 /** @type {boolean} */
orientjs.PropertyCreateConfig.prototype.ifnotexist;
 /** @type {boolean} */
orientjs.PropertyCreateConfig.prototype.unsafe;
 /** @type {boolean} */
orientjs.PropertyCreateConfig.prototype.mandatory;
 /** @type {boolean} */
orientjs.PropertyCreateConfig.prototype.readonly;
 /** @type {boolean} */
orientjs.PropertyCreateConfig.prototype.notNull;
 /** @type {string} */
orientjs.PropertyCreateConfig.prototype.collate;
 /** @type {string} */
orientjs.PropertyCreateConfig.prototype.linkedClass;
 /** @type {string} */
orientjs.PropertyCreateConfig.prototype.linkedType;
 /** @type {(string|!RegExp)} */
orientjs.PropertyCreateConfig.prototype.regexp;
 /** @type {number} */
orientjs.PropertyCreateConfig.prototype.min;
 /** @type {number} */
orientjs.PropertyCreateConfig.prototype.max;
 /** @type {{fields: !Array<!orientjs.CustomField>}} */
orientjs.PropertyCreateConfig.prototype.custom;
/**
 * @record
 * @struct
 */
orientjs.PropertyUpdateConfig = function() {};
 /** @type {string} */
orientjs.PropertyUpdateConfig.prototype.name;
 /** @type {string} */
orientjs.PropertyUpdateConfig.prototype.type;
 /** @type {?} */
orientjs.PropertyUpdateConfig.prototype.default;
 /** @type {boolean} */
orientjs.PropertyUpdateConfig.prototype.mandatory;
 /** @type {boolean} */
orientjs.PropertyUpdateConfig.prototype.readonly;
 /** @type {boolean} */
orientjs.PropertyUpdateConfig.prototype.notNull;
 /** @type {string} */
orientjs.PropertyUpdateConfig.prototype.collate;
 /** @type {string} */
orientjs.PropertyUpdateConfig.prototype.linkedClass;
 /** @type {string} */
orientjs.PropertyUpdateConfig.prototype.linkedType;
 /** @type {(string|!RegExp)} */
orientjs.PropertyUpdateConfig.prototype.regexp;
 /** @type {number} */
orientjs.PropertyUpdateConfig.prototype.min;
 /** @type {number} */
orientjs.PropertyUpdateConfig.prototype.max;
 /** @type {{fields: !Array<!orientjs.CustomField>}} */
orientjs.PropertyUpdateConfig.prototype.custom;
/**
 * @constructor
 * @struct
 */
orientjs.Property = function() {};
 /** @type {!orientjs.Class} */
orientjs.Property.prototype.class;
 /** @type {string} */
orientjs.Property.prototype.name;
 /** @type {string} */
orientjs.Property.prototype.originalName;
 /** @type {string} */
orientjs.Property.prototype.type;
 /** @type {boolean} */
orientjs.Property.prototype.mandatory;
 /** @type {boolean} */
orientjs.Property.prototype.readonly;
 /** @type {boolean} */
orientjs.Property.prototype.notNull;
 /** @type {string} */
orientjs.Property.prototype.collate;
 /** @type {string} */
orientjs.Property.prototype.linkedClass;
 /** @type {string} */
orientjs.Property.prototype.linkedType;
 /** @type {(string|!RegExp)} */
orientjs.Property.prototype.regexp;
 /** @type {number} */
orientjs.Property.prototype.min;
 /** @type {number} */
orientjs.Property.prototype.max;
 /** @type {{fields: !Array<!orientjs.CustomField>}} */
orientjs.Property.prototype.custom;

/**
 * @param {?=} config
 * @return {void}
 */
orientjs.Property.prototype.configure = function(config) {};

/**
 * @return {!Bluebird<!orientjs.Property>}
 */
orientjs.Property.prototype.reload = function() {};

/**
 * @return {!Bluebird<!Array<!orientjs.Property>>}
 */
orientjs.Property.prototype.list = function() {};

/**
 * Create a new property.
 * 
 * \@promise {Object}              The created property.
 * @param {(string|!orientjs.PropertyCreateConfig)|!Array<!orientjs.PropertyCreateConfig>=} config
 * @param {boolean=} reload
 * @return {!Bluebird<!orientjs.Property>|!Bluebird<!Array<!orientjs.Property>>}
 */
orientjs.Property.prototype.create = function(config, reload) {};

/**
 * Get the property with the given name.
 * 
 * \@promise {Object|null}   The retrieved property.
 * @param {string} name
 * @return {!Bluebird<!orientjs.Property>}
 */
orientjs.Property.prototype.get = function(name) {};

/**
 * Update the given property.
 * 
 * \@promise {Object}           The updated property.
 * @param {!orientjs.PropertyUpdateConfig} config
 * @param {boolean=} reload
 * @return {!Bluebird<!orientjs.Property>}
 */
orientjs.Property.prototype.update = function(config, reload) {};

/**
 * @param {string} name
 * @param {{ifexist: boolean, force: boolean}=} config
 * @return {!Bluebird<!orientjs.Class>}
 */
orientjs.Property.prototype.drop = function(name, config) {};

/**
 * @param {string} name
 * @param {?=} setting
 * @return {!Bluebird<!orientjs.Class>}
 */
orientjs.Property.prototype.alter = function(name, setting) {};

/**
 * @param {string} oldName
 * @param {string=} newName
 * @return {!Bluebird<!orientjs.Property>}
 */
orientjs.Property.prototype.rename = function(oldName, newName) {};
/**
 * @constructor
 * @struct
 */
orientjs.Class = function() {};
 /** @type {!orientjs.Db} */
orientjs.Class.prototype.db;
 /** @type {string} */
orientjs.Class.prototype.name;
 /** @type {string} */
orientjs.Class.prototype.shortName;
 /** @type {?} */
orientjs.Class.prototype.defaultClusterId;
 /** @type {string} */
orientjs.Class.prototype.superClass;
 /** @type {string} */
orientjs.Class.prototype.originalName;
 /** @type {!Array<number>} */
orientjs.Class.prototype.clusterIds;
 /** @type {!orientjs.Property} */
orientjs.Class.prototype.property;

/**
 * Configure the class instance.
 * @param {?=} config
 * @return {void}
 */
orientjs.Class.prototype.configure = function(config) {};

/**
 * Retreive a list of classes from the database.
 * 
 * \@promise {Object[]}       An array of class objects.
 * @param {?} limit
 * @param {number=} offset
 * @return {!Bluebird<!Array<!orientjs.Class>>}
 */
orientjs.Class.prototype.list = function(limit, offset) {};

/**
 * Find a list of records in the class.
 * 
 * \@promise {Object[]}          An array of records in the class.
 * @param {?} attributes
 * @param {number=} limit
 * @param {number=} offset
 * @return {!Bluebird<!Array<!orientjs.Record>>}
 */
orientjs.Class.prototype.find = function(attributes, limit, offset) {};

/**
 * Create a record for this class.
 * 
 * \@promise {Object}        The created record.
 * Create a new class.
 * 
 * \@promise {Object}                The created class object
 * @param {!orientjs.Record|string} record_or_name
 * @param {string=} parentName
 * @param {string=} cluster
 * @param {boolean=} isAbstract
 * @param {boolean=} ifnotexist
 * @return {!Bluebird<!orientjs.Record>|!Bluebird<!orientjs.Class>}
 */
orientjs.Class.prototype.create = function(record_or_name, parentName, cluster, isAbstract, ifnotexist) {};

/**
 * Update the given class.
 * 
 * \@promise {Object}           The updated class.
 * @param {?} cls
 * @param {boolean} reload
 * @return {!Bluebird<!orientjs.Class>}
 */
orientjs.Class.prototype.update = function(cls, reload) {};

/**
 * Reload the class instance.
 * 
 * \@promise {Class} The class instance.
 * @return {!Bluebird<!Array<!orientjs.Class>>}
 */
orientjs.Class.prototype.reload = function() {};

/**
 * Delete a class.
 * 
 * \@promise {Db}         The database instance.
 * @param {string} name
 * @param {{ifexist: boolean, force: boolean}=} config
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Class.prototype.drop = function(name, config) {};

/**
 * Get a class by name.
 * 
 * \@promise {Object}          The class object if it exists.
 * @param {string} name
 * @param {boolean=} refresh
 * @return {!Bluebird<!orientjs.Class>}
 */
orientjs.Class.prototype.get = function(name, refresh) {};

/**
 * Cache the given class data for fast lookup later.
 * 
 * @param {!Array<!orientjs.Class>} classes
 * @return {!orientjs.Db}
 */
orientjs.Class.prototype.cacheData = function(classes) {};
/**
 * @constructor
 * @struct
 */
orientjs.Cluster = function() {};
 /** @type {string} */
orientjs.Cluster.prototype.name;
 /** @type {string} */
orientjs.Cluster.prototype.location;

/**
 * @param {boolean=} refresh
 * @return {!Bluebird<!Array<?>>}
 */
orientjs.Cluster.prototype.list = function(refresh) {};

/**
 * @param {string} name
 * @param {string=} location
 * @return {?}
 */
orientjs.Cluster.prototype.create = function(name, location) {};

/**
 * @param {string} nameOrId
 * @param {boolean=} refresh
 * @return {?}
 */
orientjs.Cluster.prototype.get = function(nameOrId, refresh) {};

/**
 * @param {string} name
 * @param {boolean=} refresh
 * @return {?}
 */
orientjs.Cluster.prototype.getByName = function(name, refresh) {};

/**
 * @param {string} id
 * @param {boolean=} refresh
 * @return {?}
 */
orientjs.Cluster.prototype.getById = function(id, refresh) {};

/**
 * @param {string} name
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Cluster.prototype.drop = function(name) {};

/**
 * @param {string} name
 * @return {!Bluebird<number>}
 */
orientjs.Cluster.prototype.count = function(name) {};

/**
 * @param {string} name
 * @return {!Bluebird<?>}
 */
orientjs.Cluster.prototype.range = function(name) {};

/**
 * @param {?} clusters
 * @return {!orientjs.Db}
 */
orientjs.Cluster.prototype.cacheData = function(clusters) {};
/**
 * @constructor
 * @struct
 */
orientjs.Sequence = function() {};
 /** @type {!orientjs.Db} */
orientjs.Sequence.prototype.db;
 /** @type {string} */
orientjs.Sequence.prototype.name;
 /** @type {string} */
orientjs.Sequence.prototype.type;
 /** @type {number} */
orientjs.Sequence.prototype.value;
 /** @type {number} */
orientjs.Sequence.prototype.incr;
 /** @type {number} */
orientjs.Sequence.prototype.start;
 /** @type {number} */
orientjs.Sequence.prototype.cache;

/**
 * Configure the sequence instance.
 * @param {?=} config
 * @return {void}
 */
orientjs.Sequence.prototype.configure = function(config) {};

/**
 * Retreive a list of sequences from the database.
 * 
 * \@promise {Object[]}       An array of class objects.
 * @param {boolean} refresh
 * @return {!Bluebird<!Array<!orientjs.Sequence>>}
 */
orientjs.Sequence.prototype.list = function(refresh) {};

/**
 * Create a new sequence.
 * 
 * \@promise {Object}                The created sequence object
 * @param {string} name
 * @param {string} type
 * @param {number=} start
 * @param {number=} incerement
 * @param {number=} cache
 * @return {!Bluebird<!orientjs.Sequence>}
 */
orientjs.Sequence.prototype.create = function(name, type, start, incerement, cache) {};

/**
 * update a  sequence.
 * 
 * \@promise {Object} The created sequence object
 * @param {string} name
 * @param {number=} start
 * @param {number=} incerement
 * @param {number=} cache
 * @return {!Bluebird<!orientjs.Sequence>}
 */
orientjs.Sequence.prototype.update = function(name, start, incerement, cache) {};

/**
 * Reload the sequence instance.
 * 
 * \@promise {Sequence} The class instance.
 * @return {!Bluebird<!Array<!orientjs.Sequence>>}
 */
orientjs.Sequence.prototype.reload = function() {};

/**
 * Delete a sequence.
 * 
 * \@promise {Db}         The database instance.
 * @param {string} name
 * @param {!Object=} config
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Sequence.prototype.drop = function(name, config) {};

/**
 * Get a sequence by name.
 * 
 * \@promise {Object}          The sequence object if it exists.
 * @param {string} name
 * @param {boolean=} refresh
 * @return {!Bluebird<!orientjs.Sequence>}
 */
orientjs.Sequence.prototype.get = function(name, refresh) {};

/**
 * Cache the given class data for fast lookup later.
 * 
 * @param {!Array<!orientjs.Sequence>} sequences
 * @return {!orientjs.Db}
 */
orientjs.Sequence.prototype.cacheData = function(sequences) {};
/**
 * @record
 * @struct
 */
orientjs.RecordMeta = function() {};

/* TODO: PropertySignature: orientjs."@rid" */

/* TODO: PropertySignature: orientjs."@version" */

/** @typedef {!orientjs.Record} */
orientjs.ODocument;

/** @typedef {?} */
orientjs.BinaryRecord;
/**
 * @constructor
 * @struct
 */
orientjs.Record = function() {};

/* TODO: PropertyDeclaration: orientjs.'@rid' */

/* TODO: PropertyDeclaration: orientjs.'@type' */

/* TODO: PropertyDeclaration: orientjs.'@class' */

/* TODO: PropertyDeclaration: orientjs.'@version' */
 /** @type {!orientjs.RID} */
orientjs.Record.prototype.rid;

/**
 * Insert the given record into the database.
 * 
 * \@promise {Object}        The inserted record.
 * Insert the given record into the database.
 * 
 * \@promise {Object}        The inserted record.
 * @param {(!orientjs.Record|?)|(!Array<!orientjs.Record>|!Array<?>)} record_or_records
 * @param {?=} options
 * @return {!Bluebird<!orientjs.Record>|!Bluebird<!Array<!orientjs.Record>>}
 */
orientjs.Record.prototype.create = function(record_or_records, options) {};

/**
 * Read the given record.
 * 
 * \@promise {Object}        The loaded record.
 * Read the given record.
 * 
 * \@promise {Object[]}        The loaded record.
 * @param {(!orientjs.RID|!orientjs.Record)|(!Array<!orientjs.RID>|!Array<!orientjs.Record>)} record_or_records
 * @param {?=} options
 * @return {!Bluebird<(!orientjs.Record|?)>|!Bluebird<(!Array<!orientjs.Record>|!Array<?>)>}
 */
orientjs.Record.prototype.get = function(record_or_records, options) {};

/**
 * Resolve all references within the given collection of records.
 * 
 * @param {!Array<!orientjs.Record>} records
 * @return {!Array<!orientjs.Record>}
 */
orientjs.Record.prototype.resolveReferences = function(records) {};

/**
 * Read the metadata for the given record.
 * 
 * \@promise {Object}        The record object with loaded meta data.
 * Read the metadata for the given record.
 * 
 * \@promise {Object}        The record object with loaded meta data.
 * @param {(string|!orientjs.RID|!orientjs.Record)|(!Array<!orientjs.RID>|!Array<!orientjs.Record>)} record_or_records
 * @param {?=} options
 * @return {!Bluebird<!orientjs.RecordMeta>|!Bluebird<!Array<!orientjs.RecordMeta>>}
 */
orientjs.Record.prototype.meta = function(record_or_records, options) {};

/**
 * Update the given record.
 * 
 * \@promise {Object}        The updated record.
 * @param {(!orientjs.RID|!orientjs.Record)=} record
 * @param {?=} options
 * @return {!Bluebird<!orientjs.Record>}
 */
orientjs.Record.prototype.update = function(record, options) {};

/**
 * Delete the given record.
 * 
 * \@promise {Object}                    The deleted record object.
 * @param {(!orientjs.RID|!orientjs.Record)=} record
 * @param {?=} options
 * @return {!Bluebird<!orientjs.Record>}
 */
orientjs.Record.prototype.delete = function(record, options) {};
/**
 * @record
 * @struct
 */
orientjs.IndexConfig = function() {};
 /** @type {string} */
orientjs.IndexConfig.prototype.name;
 /** @type {string} */
orientjs.IndexConfig.prototype.class;
 /** @type {!Array<string>} */
orientjs.IndexConfig.prototype.properties;
 /** @type {string} */
orientjs.IndexConfig.prototype.type;
 /** @type {string} */
orientjs.IndexConfig.prototype.keyType;
 /** @type {?} */
orientjs.IndexConfig.prototype.metadata;
 /** @type {string} */
orientjs.IndexConfig.prototype.engine;
/**
 * @record
 * @struct
 */
orientjs.IndexEntry = function() {};
 /** @type {string} */
orientjs.IndexEntry.prototype.key;
 /** @type {(string|!orientjs.RID)} */
orientjs.IndexEntry.prototype.value;
/**
 * @record
 * @struct
 */
orientjs.Index = function() {};
 /** @type {boolean} */
orientjs.Index.prototype.cached;
 /** @type {!orientjs.Db} */
orientjs.Index.prototype.db;
 /** @type {string} */
orientjs.Index.prototype.name;
 /** @type {string} */
orientjs.Index.prototype.algorithm;
 /** @type {!Array<!orientjs.Cluster>} */
orientjs.Index.prototype.clusters;
 /** @type {string} */
orientjs.Index.prototype.type;

/**
 * @param {?} config
 * @return {void}
 */
orientjs.Index.prototype.configure = function(config) {};

/**
 * @param {(!orientjs.IndexEntry|!Array<!orientjs.IndexEntry>)} idx
 * @return {!Bluebird<!Array<!orientjs.Index>>}
 */
orientjs.Index.prototype.add = function(idx) {};

/**
 * @param {string} key
 * @param {(string|!orientjs.RID)} value
 * @return {!Bluebird<!orientjs.Index>}
 */
orientjs.Index.prototype.set = function(key, value) {};

/**
 * @param {string} name
 * @return {!Bluebird<!orientjs.Index>}
 */
orientjs.Index.prototype.delete = function(name) {};

/**
 * @return {!orientjs.Statement}
 */
orientjs.Index.prototype.select = function() {};

/**
 * @param {boolean=} refresh
 * @return {!Bluebird<!Array<!orientjs.Index>>}
 */
orientjs.Index.prototype.list = function(refresh) {};

/**
 * @param {(!orientjs.IndexConfig|!Array<!orientjs.IndexConfig>)} config
 * @return {!Bluebird<!orientjs.Index>}
 */
orientjs.Index.prototype.create = function(config) {};

/**
 * @param {string} name
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Index.prototype.drop = function(name) {};

/**
 * @param {string} name
 * @param {boolean=} refresh
 * @return {!Bluebird<!orientjs.Index>}
 */
orientjs.Index.prototype.get = function(name, refresh) {};

/**
 * @param {!Array<?>} indices
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Index.prototype.cacheData = function(indices) {};

/** @typedef {(string|!orientjs.RawExpression|!orientjs.SqlFunction)} */
orientjs.SqlExpression;
/**
 * @extends {orientjs.Query}
 * @record
 * @struct
 */
orientjs.Statement = function() {};

/**
 * @param {(string|!Array<string>)=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.select = function(param) {};

/**
 * @param {(string|!Array<string>)=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.traverse = function(param) {};

/**
 * @param {string=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.strategy = function(param) {};

/**
 * @param {(string|!Array<string>)=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.insert = function(param) {};

/**
 * @param {(string|!Array<string>)=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.update = function(param) {};

/**
 * @param {(string|!Array<string>)=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.delete = function(param) {};

/**
 * @param {string=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.into = function(param) {};

/**
 * @param {string=} paramtype
 * @param {string=} paramname
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.create = function(paramtype, paramname) {};

/**
 * @param {?=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.from = function(param) {};

/**
 * @param {?=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.to = function(param) {};

/**
 * @param {?=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.set = function(param) {};

/**
 * @param {?=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.content = function(param) {};

/**
 * @param {string=} property
 * @param {?=} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.increment = function(property, value) {};

/**
 * @param {string} property
 * @param {?} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.add = function(property, value) {};

/**
 * @param {string} property
 * @param {?} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.remove = function(property, value) {};

/**
 * @param {string} property
 * @param {?} keysValues
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.put = function(property, keysValues) {};

/**
 * @param {?=} condition
 * @param {?=} params
 * @param {string=} comparisonOperator
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.upsert = function(condition, params, comparisonOperator) {};

/**
 * @param {?} params
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.where = function(params) {};

/**
 * @param {?} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.while = function(param) {};

/**
 * @param {?} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.containsText = function(param) {};

/**
 * @param {?} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.and = function(param) {};

/**
 * @param {?} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.or = function(param) {};

/**
 * @param {?} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.group = function(param) {};

/**
 * @param {?} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.order = function(param) {};

/**
 * @param {number} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.skip = function(value) {};

/**
 * @param {number=} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.offset = function(value) {};

/**
 * @param {number} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.limit = function(value) {};

/**
 * @param {?=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.fetch = function(param) {};

/**
 * @param {string} name
 * @param {(string|!orientjs.Statement)} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.let = function(name, value) {};

/**
 * @param {?} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.lock = function(param) {};

/**
 * @param {(string|!orientjs.RawExpression|!orientjs.SqlFunction)} condition
 * @param {...!Array<!orientjs.Statement>|!orientjs.Statement} statements
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.if = function(condition, statements) {};

/**
 * @param {?=} param
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.rollback = function(param) {};

/**
 * @param {number=} ms
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.sleep = function(ms) {};

/**
 * @param {number=} retryLimit
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.commit = function(retryLimit) {};

/**
 * @param {number=} retryLimit
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.retry = function(retryLimit) {};

/**
 * @param {number} waitLimit
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.wait = function(waitLimit) {};

/**
 * @param {(string|!orientjs.RawExpression|!orientjs.SqlFunction)} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.return = function(value) {};

/**
 * @param {?} property
 * @param {string} luceneQuery
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.lucene = function(property, luceneQuery) {};

/**
 * @param {?} latitudeProperty
 * @param {(string|number)} longitudeProperty
 * @param {number} longitude
 * @param {number=} latitude
 * @param {number=} maxDistanceInKms
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.near = function(latitudeProperty, longitudeProperty, longitude, latitude, maxDistanceInKms) {};

/**
 * @param {string} latitudeProperty
 * @param {string} longitudeProperty
 * @param {!Array<number>} box
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.within = function(latitudeProperty, longitudeProperty, box) {};

/**
 * @param {string|?} key_or_value
 * @param {?=} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.addParams = function(key_or_value, value) {};

/**
 * @param {?} value
 * @return {!orientjs.Statement}
 */
orientjs.Statement.prototype.token = function(value) {};

/**
 * @return {string}
 */
orientjs.Statement.prototype.buildStatement = function() {};
/**
 * @record
 * @struct
 */
orientjs.Query = function() {};

/**
 * @template T
 * @param {function(!orientjs.Record): T} transformer
 * @return {!orientjs.Query<T>}
 */
orientjs.Query.prototype.transform = function(transformer) {};

/**
 * @param {string} name
 * @return {!orientjs.Query}
 */
orientjs.Query.prototype.column = function(name) {};

/**
 * @param {?} defaults
 * @return {!orientjs.Query}
 */
orientjs.Query.prototype.defaults = function(defaults) {};

/**
 * @template T
 * @param {?=} params
 * @return {!Bluebird<T>}
 */
orientjs.Query.prototype.one = function(params) {};

/**
 * @template T
 * @param {?=} params
 * @return {!Bluebird<!Array<T>>}
 */
orientjs.Query.prototype.all = function(params) {};

/**
 * @template T
 * @param {?=} params
 * @return {!Bluebird<T>}
 */
orientjs.Query.prototype.scalar = function(params) {};

/**
 * @template T
 * @param {?=} params
 * @return {!Bluebird<T>}
 */
orientjs.Query.prototype.exec = function(params) {};
/**
 * @constructor
 * @struct
 */
orientjs.Transaction = function() {};
 /** @type {!orientjs.Db} */
orientjs.Transaction.prototype.db;
 /** @type {number} */
orientjs.Transaction.prototype.id;

/**
 * @return {!Bluebird<?>}
 */
orientjs.Transaction.prototype.commit = function() {};

/**
 * @param {!orientjs.Record} record
 * @return {!orientjs.Transaction}
 */
orientjs.Transaction.prototype.create = function(record) {};

/**
 * @param {!orientjs.Record} record
 * @return {!orientjs.Transaction}
 */
orientjs.Transaction.prototype.update = function(record) {};

/**
 * @param {!orientjs.Record} record
 * @return {!orientjs.Transaction}
 */
orientjs.Transaction.prototype.delete = function(record) {};
/**
 * @record
 * @struct
 */
orientjs.DbConnectionConfig = function() {};
 /** @type {boolean} */
orientjs.DbConnectionConfig.prototype.useToken;
 /** @type {string} */
orientjs.DbConnectionConfig.prototype.name;
 /** @type {string} */
orientjs.DbConnectionConfig.prototype.username;
 /** @type {string} */
orientjs.DbConnectionConfig.prototype.password;
 /** @type {number} */
orientjs.DbConnectionConfig.prototype.sessionId;
 /** @type {boolean} */
orientjs.DbConnectionConfig.prototype.forcePrepare;
 /** @type {!orientjs.Server} */
orientjs.DbConnectionConfig.prototype.server;
 /** @type {string} */
orientjs.DbConnectionConfig.prototype.type;
 /** @type {string} */
orientjs.DbConnectionConfig.prototype.storage;
 /** @type {?} */
orientjs.DbConnectionConfig.prototype.token;
 /** @type {!Array<function(!orientjs.Record): ?>} */
orientjs.DbConnectionConfig.prototype.transformers;
/**
 * @record
 * @struct
 */
orientjs.RawExpression = function() {};
 /** @type {!orientjs.Db} */
orientjs.RawExpression.prototype.db;
 /** @type {string} */
orientjs.RawExpression.prototype.value;

/**
 * @param {string} alias
 * @return {!orientjs.RawExpression}
 */
orientjs.RawExpression.prototype.as = function(alias) {};

/**
 * @constructor
 * @struct
 * @param {(string|number)} field
 */
orientjs.AbsSqlFunction = function(field) {};

/**
 * @constructor
 * @struct
 * @param {string} field
 */
orientjs.AvgSqlFunction = function(field) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
orientjs.SequenceSqlFunction = function(name) {};

/**
 * @return {number}
 */
orientjs.SequenceSqlFunction.prototype.next = function() {};

/**
 * @return {number}
 */
orientjs.SequenceSqlFunction.prototype.current = function() {};

/**
 * @return {number}
 */
orientjs.SequenceSqlFunction.prototype.reset = function() {};
/**
 * @record
 * @struct
 */
orientjs.SqlFunction = function() {};
 /** @type {!orientjs.Db} */
orientjs.SqlFunction.prototype.db;
 /** @type {!orientjs.AbsSqlFunction} */
orientjs.SqlFunction.prototype.abs;
 /** @type {!orientjs.AbsSqlFunction} */
orientjs.SqlFunction.prototype.avg;
 /** @type {!orientjs.SequenceSqlFunction} */
orientjs.SqlFunction.prototype.sequence;
/**
 * @record
 * @struct
 */
orientjs.QueryOptions = function() {};
 /** @type {?} */
orientjs.QueryOptions.prototype.params;
 /** @type {string} */
orientjs.QueryOptions.prototype.mode;
 /** @type {?} */
orientjs.QueryOptions.prototype.fetchPlan;
 /** @type {number} */
orientjs.QueryOptions.prototype.limit;
 /** @type {?} */
orientjs.QueryOptions.prototype.token;
 /** @type {string} */
orientjs.QueryOptions.prototype.class;
 /** @type {string} */
orientjs.QueryOptions.prototype.language;
/**
 * @extends {internal.EventEmitter}
 * @constructor
 * @struct
 */
orientjs.Db = function() {};
 /** @type {number} */
orientjs.Db.prototype.sessionId;
 /** @type {boolean} */
orientjs.Db.prototype.forcePrepare;
 /** @type {string} */
orientjs.Db.prototype.name;
 /** @type {!orientjs.Server} */
orientjs.Db.prototype.server;
 /** @type {string} */
orientjs.Db.prototype.type;
 /** @type {string} */
orientjs.Db.prototype.storage;
 /** @type {string} */
orientjs.Db.prototype.username;
 /** @type {string} */
orientjs.Db.prototype.password;
 /** @type {?} */
orientjs.Db.prototype.token;
 /** @type {!Array<?>} */
orientjs.Db.prototype.dataSegments;
 /** @type {number} */
orientjs.Db.prototype.transactionId;
 /** @type {?} */
orientjs.Db.prototype.transformers;
 /** @type {?} */
orientjs.Db.prototype.transformerFunctions;
 /** @type {!orientjs.Class} */
orientjs.Db.prototype.class;
 /** @type {!orientjs.Cluster} */
orientjs.Db.prototype.cluster;
 /** @type {!orientjs.Record} */
orientjs.Db.prototype.record;
 /** @type {!orientjs.Index} */
orientjs.Db.prototype.index;
 /** @type {!orientjs.Sequence} */
orientjs.Db.prototype.sequence;

/**
 * Configure the database instance.
 * @param {!orientjs.DbConfig} config
 * @return {!orientjs.Db}
 */
orientjs.Db.prototype.configure = function(config) {};

/**
 * Initialize the database instance.
 * @return {void}
 */
orientjs.Db.prototype.init = function() {};

/**
 * Open the database.
 * 
 * \@promise {Db} The open db instance.
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Db.prototype.open = function() {};

/**
 * Close the database.
 * 
 * \@promise {Db} The now closed db instance.
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Db.prototype.close = function() {};

/**
 * Send the given operation to the server, ensuring the
 * database is open first.
 * 
 * \@promise {Mixed}            The result of the operation.
 * @param {number} operation
 * @param {?} data
 * @return {!Bluebird<?>}
 */
orientjs.Db.prototype.send = function(operation, data) {};

/**
 * Reload the configuration for the database.
 * 
 * \@promise {Db}  The database with reloaded configuration.
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Db.prototype.reload = function() {};

/**
 * Begin a new transaction.
 * 
 * @return {!orientjs.Transaction}
 */
orientjs.Db.prototype.begin = function() {};

/**
 * Execute an SQL query against the database and retreive the raw, parsed response.
 * 
 * \@promise {Mixed}          The results of the query / command.
 * @param {string} query
 * @param {!orientjs.QueryOptions=} options
 * @return {!Bluebird<?>}
 */
orientjs.Db.prototype.exec = function(query, options) {};

/**
 * Execute an SQL query against the database and retreive the results
 * 
 * \@promise {Mixed}          The results of the query / command.
 * @param {string} command
 * @param {!orientjs.QueryOptions=} options
 * @return {!Bluebird<?>}
 */
orientjs.Db.prototype.query = function(command, options) {};

/**
 * Execute a live query against the database
 * 
 * \@promise {Mixed}          The token of the live query.
 * @param {string} command
 * @param {!orientjs.QueryOptions=} options
 * @return {!Bluebird<?>}
 */
orientjs.Db.prototype.liveQuery = function(command, options) {};

/**
 * Normalize a result, where possible.
 * @param {?} result
 * @return {?}
 */
orientjs.Db.prototype.normalizeResult = function(result) {};

/**
 * Normalize the content for a result.
 * @param {?} content
 * @return {?}
 */
orientjs.Db.prototype.normalizeResultContent = function(content) {};

/**
 * Register a transformer function for documents of the given class.
 * This function will be invoked for each document of the specified class
 * in all future result sets.
 * 
 * @template T
 * @param {string} className
 * @param {function(!orientjs.Record): T} transformer
 * @return {!orientjs.Db}
 */
orientjs.Db.prototype.registerTransformer = function(className, transformer) {};

/**
 * Transform a document according to its `\@class` property, using the registered transformers.
 * @param {!orientjs.Record} document
 * @return {?}
 */
orientjs.Db.prototype.transformDocument = function(document) {};

/**
 * Create a query instance for this database.
 * 
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.createQuery = function() {};

/**
 * Create a raw expression.
 * 
 * @param {string} param
 * @return {!orientjs.RawExpression}
 */
orientjs.Db.prototype.rawExpression = function(param) {};

/**
 * Create a sql Function.
 * 
 * @param {?=} options
 * @return {!orientjs.SqlFunction}
 */
orientjs.Db.prototype.sqlFunction = function(options) {};

/**
 * Create a create query.
 * 
 * @param {?|string=} params_or_paramtype
 * @param {string=} paramname
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.create = function(params_or_paramtype, paramname) {};

/**
 * Create a select query.
 * 
 * @param {?=} params
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.select = function(params) {};

/**
 * Create a traverse query.
 * 
 * @param {?=} params
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.traverse = function(params) {};

/**
 * Create an insert query.
 * 
 * @param {?=} params
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.insert = function(params) {};

/**
 * Create an update query.
 * 
 * @param {?=} params
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.update = function(params) {};

/**
 * Create a delete query.
 * 
 * @param {?=} params
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.delete = function(params) {};

/**
 * Create a transactional query.
 * 
 * @param {?|string=} params_or_name
 * @param {(string|!orientjs.Statement)=} value
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.let = function(params_or_name, value) {};

/**
 * Create a transactional query with if.
 * 
 * Create a transactional query with if.
 * 
 * @param {(string|!orientjs.RawExpression|!orientjs.SqlFunction)} condition
 * @param {...!Array<!orientjs.Statement>|!orientjs.Statement} statements
 * @return {!orientjs.Statement}
 */
orientjs.Db.prototype.if = function(condition, statements) {};

/**
 * Escape the given input.
 * 
 * @param {string} input
 * @return {string}
 */
orientjs.Db.prototype.escape = function(input) {};

/**
 * Create a context for a user, using their authentication token.
 * The context includes the query builder methods, which will be executed
 * on behalf of the user.
 * 
 * @param {?} token
 * @return {?}
 */
orientjs.Db.prototype.createUserContext = function(token) {};

/**
 * Create a orient function from a plain Javascript function
 * 
 * \@promise {Mixed}           The results of the query / command.
 * @param {string|function(!Array<?>): ?} name_or_fn
 * @param {function(!Array<?>): ?|?=} fn_or_options
 * @param {?=} options
 * @return {!Bluebird<?>}
 */
orientjs.Db.prototype.createFn = function(name_or_fn, fn_or_options, options) {};
/**
 * @record
 * @struct
 */
orientjs.ServerConfiguration = function() {};

/**
 * @param {string} name
 * @return {string}
 */
orientjs.ServerConfiguration.prototype.get = function(name) {};

/**
 * @param {string} key
 * @param {string} value
 * @return {string}
 */
orientjs.ServerConfiguration.prototype.set = function(key, value) {};

/**
 * @return {?}
 */
orientjs.ServerConfiguration.prototype.list = function() {};

/**
 * @constructor
 * @struct
 * @param {!orientjs.ServerConfig=} options
 */
orientjs.Server = function(options) {};
 /** @type {!orientjs.ServerConfiguration} */
orientjs.Server.prototype.config;
 /** @type {!orientjs.Logger} */
orientjs.Server.prototype.logger;

/**
 * Initialize the server instance.
 * @return {void}
 */
orientjs.Server.prototype.init = function() {};

/**
 * Configure the server instance.
 * 
 * @param {!orientjs.ServerConfig} config
 * @return {!orientjs.Server}
 */
orientjs.Server.prototype.configure = function(config) {};

/**
 * Configure the transport for the server.
 * 
 * @param {?} config
 * @return {!orientjs.Server}
 */
orientjs.Server.prototype.configureTransport = function(config) {};

/**
 * Configure the logger for the server.
 * 
 * @param {!orientjs.Logger} logger
 * @return {!orientjs.Server}
 */
orientjs.Server.prototype.configureLogger = function(logger) {};

/**
 * Send an operation to the server,
 * 
 * \@promise {Mixed}            The result of the operation.
 * @param {number} operation
 * @param {?} options
 * @return {?}
 */
orientjs.Server.prototype.send = function(operation, options) {};

/**
 * Close the connection to the server.
 * 
 * @return {!orientjs.Server}
 */
orientjs.Server.prototype.close = function() {};

/**
 * Use the database with the given name / config.
 * 
 * @param {(string|!orientjs.DbConfig)} name
 * @return {!orientjs.Db}
 */
orientjs.Server.prototype.use = function(name) {};

/**
 * Create a database with the given name / config.
 * 
 * \@promise {Db}                  The database instance
 * @param {(string|!orientjs.DbConfig)} name
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Server.prototype.create = function(name) {};

/**
 * Destroy a database with the given name / config.
 * 
 * \@promise {Mixed}               The server response.
 * @param {(string|!orientjs.DbConfig)} name
 * @return {!Bluebird<!orientjs.Db>}
 */
orientjs.Server.prototype.drop = function(name) {};

/**
 * List all the databases on the server.
 * 
 * @return {!Bluebird<!Array<!orientjs.Db>>}
 */
orientjs.Server.prototype.list = function() {};

/**
 * Determine whether a database exists with the given name.
 * 
 * \@promise {Boolean}            true if the database exists.
 * @param {string} name
 * @param {string=} storageType
 * @return {!Bluebird<boolean>}
 */
orientjs.Server.prototype.exists = function(name, storageType) {};

/**
 * Freeze the database with the given name.
 * 
 * @param {string} name
 * @param {string=} storageType
 * @return {?}
 */
orientjs.Server.prototype.freeze = function(name, storageType) {};

/**
 * Release the database with the given name.
 * 
 * @param {string} name
 * @param {string=} storageType
 * @return {?}
 */
orientjs.Server.prototype.release = function(name, storageType) {};

/**
 * @return {!Bluebird<?>}
 */
orientjs.Server.prototype.shutdown = function() {};

/**
 * @constructor
 * @struct
 * @param {{host: string, port: number, username: string, password: string, name: string}=} config
 */
orientjs.ODatabase = function(config) {};
/**
 * @record
 * @struct
 */
orientjs.ServerConfig = function() {};
 /** @type {boolean} */
orientjs.ServerConfig.prototype.useToken;
 /** @type {string} */
orientjs.ServerConfig.prototype.host;
 /** @type {number} */
orientjs.ServerConfig.prototype.port;
 /** @type {string} */
orientjs.ServerConfig.prototype.username;
 /** @type {string} */
orientjs.ServerConfig.prototype.password;
 /** @type {!Array<!orientjs.ServerConfig>} */
orientjs.ServerConfig.prototype.servers;
/**
 * @record
 * @struct
 */
orientjs.DbConfig = function() {};
 /** @type {string} */
orientjs.DbConfig.prototype.name;
 /** @type {string} */
orientjs.DbConfig.prototype.type;
 /** @type {string} */
orientjs.DbConfig.prototype.storage;
 /** @type {string} */
orientjs.DbConfig.prototype.username;
 /** @type {string} */
orientjs.DbConfig.prototype.password;

/* TODO: ExportAssignment in  */
