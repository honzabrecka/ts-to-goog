/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/sequelize/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */
/** @const */
var sequelize = {};
/**
 * @record
 * @struct
 */
sequelize.BelongsToGetAssociationMixinOptions = function() {};
 /** @type {(string|boolean)} */
sequelize.BelongsToGetAssociationMixinOptions.prototype.scope;
/**
 * @record
 * @struct
 */
sequelize.BelongsToGetAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToSetAssociationMixinOptions = function() {};
 /** @type {boolean} */
sequelize.BelongsToSetAssociationMixinOptions.prototype.save;
/**
 * @record
 * @struct
 */
sequelize.BelongsToSetAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToCreateAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.BelongsToCreateAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasOneGetAssociationMixinOptions = function() {};
 /** @type {(string|boolean)} */
sequelize.HasOneGetAssociationMixinOptions.prototype.scope;
/**
 * @record
 * @struct
 */
sequelize.HasOneGetAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasOneSetAssociationMixinOptions = function() {};
 /** @type {boolean} */
sequelize.HasOneSetAssociationMixinOptions.prototype.save;
/**
 * @record
 * @struct
 */
sequelize.HasOneSetAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasOneCreateAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.HasOneCreateAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyGetAssociationsMixinOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.HasManyGetAssociationsMixinOptions.prototype.where;
 /** @type {(string|boolean)} */
sequelize.HasManyGetAssociationsMixinOptions.prototype.scope;
/**
 * @record
 * @struct
 */
sequelize.HasManyGetAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManySetAssociationsMixinOptions = function() {};
 /** @type {boolean} */
sequelize.HasManySetAssociationsMixinOptions.prototype.validate;
/**
 * @record
 * @struct
 */
sequelize.HasManySetAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyAddAssociationsMixinOptions = function() {};
 /** @type {boolean} */
sequelize.HasManyAddAssociationsMixinOptions.prototype.validate;
/**
 * @record
 * @struct
 */
sequelize.HasManyAddAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyAddAssociationMixinOptions = function() {};
 /** @type {boolean} */
sequelize.HasManyAddAssociationMixinOptions.prototype.validate;
/**
 * @record
 * @struct
 */
sequelize.HasManyAddAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyCreateAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.HasManyCreateAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyRemoveAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.HasManyRemoveAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyRemoveAssociationsMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.HasManyRemoveAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyHasAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.HasManyHasAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyHasAssociationsMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.HasManyHasAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.HasManyCountAssociationsMixinOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.HasManyCountAssociationsMixinOptions.prototype.where;
 /** @type {(string|boolean)} */
sequelize.HasManyCountAssociationsMixinOptions.prototype.scope;
/**
 * @record
 * @struct
 */
sequelize.HasManyCountAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyGetAssociationsMixinOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.BelongsToManyGetAssociationsMixinOptions.prototype.where;
 /** @type {(string|boolean)} */
sequelize.BelongsToManyGetAssociationsMixinOptions.prototype.scope;
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyGetAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManySetAssociationsMixinOptions = function() {};
 /** @type {boolean} */
sequelize.BelongsToManySetAssociationsMixinOptions.prototype.validate;
/**
 * @record
 * @struct
 */
sequelize.BelongsToManySetAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyAddAssociationsMixinOptions = function() {};
 /** @type {boolean} */
sequelize.BelongsToManyAddAssociationsMixinOptions.prototype.validate;
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyAddAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyAddAssociationMixinOptions = function() {};
 /** @type {boolean} */
sequelize.BelongsToManyAddAssociationMixinOptions.prototype.validate;
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyAddAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyCreateAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyCreateAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyRemoveAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyRemoveAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyRemoveAssociationsMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyRemoveAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyHasAssociationMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyHasAssociationMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyHasAssociationsMixinOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyHasAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyCountAssociationsMixinOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.BelongsToManyCountAssociationsMixinOptions.prototype.where;
 /** @type {(string|boolean)} */
sequelize.BelongsToManyCountAssociationsMixinOptions.prototype.scope;
/**
 * @record
 * @struct
 */
sequelize.BelongsToManyCountAssociationsMixin = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.ColumnOptions}
 * @record
 * @struct
 */
sequelize.AssociationForeignKeyOptions = function() {};
 /** @type {string} */
sequelize.AssociationForeignKeyOptions.prototype.name;
/**
 * @record
 * @struct
 */
sequelize.AssociationOptions = function() {};
 /** @type {boolean} */
sequelize.AssociationOptions.prototype.hooks;
 /** @type {(string|{singular: string, plural: string})} */
sequelize.AssociationOptions.prototype.as;
 /** @type {(string|!sequelize.AssociationForeignKeyOptions)} */
sequelize.AssociationOptions.prototype.foreignKey;
 /** @type {string} */
sequelize.AssociationOptions.prototype.onDelete;
 /** @type {string} */
sequelize.AssociationOptions.prototype.onUpdate;
 /** @type {boolean} */
sequelize.AssociationOptions.prototype.constraints;
 /** @type {boolean} */
sequelize.AssociationOptions.prototype.foreignKeyConstraint;
/**
 * @record
 * @struct
 */
sequelize.AssociationScope = function() {};

/* TODO: IndexSignature: sequelize */
/**
 * @extends {sequelize.AssociationOptions}
 * @record
 * @struct
 */
sequelize.AssociationOptionsManyToMany = function() {};
 /** @type {!sequelize.AssociationScope} */
sequelize.AssociationOptionsManyToMany.prototype.scope;
/**
 * @extends {sequelize.AssociationOptions}
 * @record
 * @struct
 */
sequelize.AssociationOptionsHasOne = function() {};
 /** @type {!sequelize.DataTypeAbstract} */
sequelize.AssociationOptionsHasOne.prototype.keyType;
/**
 * @extends {sequelize.AssociationOptions}
 * @record
 * @struct
 */
sequelize.AssociationOptionsBelongsTo = function() {};
 /** @type {string} */
sequelize.AssociationOptionsBelongsTo.prototype.targetKey;
 /** @type {!sequelize.DataTypeAbstract} */
sequelize.AssociationOptionsBelongsTo.prototype.keyType;
/**
 * @extends {sequelize.AssociationOptionsManyToMany}
 * @record
 * @struct
 */
sequelize.AssociationOptionsHasMany = function() {};
 /** @type {!sequelize.DataTypeAbstract} */
sequelize.AssociationOptionsHasMany.prototype.keyType;
/**
 * @extends {sequelize.AssociationOptionsManyToMany}
 * @record
 * @struct
 */
sequelize.AssociationOptionsBelongsToMany = function() {};
 /** @type {(string|!sequelize.Model<?, ?>|!sequelize.ThroughOptions)} */
sequelize.AssociationOptionsBelongsToMany.prototype.through;
 /** @type {(string|!sequelize.AssociationForeignKeyOptions)} */
sequelize.AssociationOptionsBelongsToMany.prototype.otherKey;
 /** @type {boolean} */
sequelize.AssociationOptionsBelongsToMany.prototype.timestamps;
/**
 * @record
 * @struct
 */
sequelize.ThroughOptions = function() {};
 /** @type {!sequelize.Model<?, ?>} */
sequelize.ThroughOptions.prototype.model;
 /** @type {!sequelize.AssociationScope} */
sequelize.ThroughOptions.prototype.scope;
 /** @type {boolean} */
sequelize.ThroughOptions.prototype.unique;
/**
 * @record
 * @struct
 */
sequelize.Associations = function() {};

/**
 * Creates an association between this (the source) and the provided target. The foreign key is added
 * on the target.
 * 
 * Example: `User.hasOne(Profile)`. This will add userId to the profile table.
 * 
 * @param {!sequelize.Model<?, ?>} target The model that will be associated with hasOne relationship
 * @param {!sequelize.AssociationOptionsHasOne=} options Options for the association
 * @return {void}
 */
sequelize.Associations.prototype.hasOne = function(target, options) {};

/**
 * Creates an association between this (the source) and the provided target. The foreign key is added on the
 * source.
 * 
 * Example: `Profile.belongsTo(User)`. This will add userId to the profile table.
 * 
 * @param {!sequelize.Model<?, ?>} target The model that will be associated with hasOne relationship
 * @param {!sequelize.AssociationOptionsBelongsTo=} options Options for the association
 * @return {void}
 */
sequelize.Associations.prototype.belongsTo = function(target, options) {};

/**
 * Create an association that is either 1:m or n:m.
 * 
 * ```js
 * // Create a 1:m association between user and project
 * User.hasMany(Project)
 * ```
 * ```js
 * // Create a n:m association between user and project
 * User.hasMany(Project)
 * Project.hasMany(User)
 * ```
 * By default, the name of the join table will be source+target, so in this case projectsusers. This can be
 * overridden by providing either a string or a Model as `through` in the options. If you use a through
 * model with custom attributes, these attributes can be set when adding / setting new associations in two
 * ways. Consider users and projects from before with a join table that stores whether the project has been
 * started yet:
 * ```js
 * var UserProjects = sequelize.define('userprojects', {
 *   started: Sequelize.BOOLEAN
 * })
 * User.hasMany(Project, { through: UserProjects })
 * Project.hasMany(User, { through: UserProjects })
 * ```
 * ```js
 * jan.addProject(homework, { started: false }) // The homework project is not started yet
 * jan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner have been
 * started
 * ```
 * 
 * If you want to set several target instances, but with different attributes you have to set the
 * attributes on the instance, using a property with the name of the through model:
 * 
 * ```js
 * p1.userprojects {
 *   started: true
 * }
 * user.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.
 * ```
 * 
 * Similarily, when fetching through a join table with custom attributes, these attributes will be
 * available as an object with the name of the through model.
 * ```js
 * user.getProjects().then(function (projects) {
 *   var p1 = projects[0]
 *   p1.userprojects.started // Is this project started yet?
 * })
 * ```
 * 
 * @param {!sequelize.Model<?, ?>} target The model that will be associated with hasOne relationship
 * @param {!sequelize.AssociationOptionsHasMany=} options Options for the association
 * @return {void}
 */
sequelize.Associations.prototype.hasMany = function(target, options) {};

/**
 * Create an N:M association with a join table
 * 
 * ```js
 * User.belongsToMany(Project)
 * Project.belongsToMany(User)
 * ```
 * By default, the name of the join table will be source+target, so in this case projectsusers. This can be
 * overridden by providing either a string or a Model as `through` in the options.
 * 
 * If you use a through model with custom attributes, these attributes can be set when adding / setting new
 * associations in two ways. Consider users and projects from before with a join table that stores whether
 * the project has been started yet:
 * ```js
 * var UserProjects = sequelize.define('userprojects', {
 *   started: Sequelize.BOOLEAN
 * })
 * User.belongsToMany(Project, { through: UserProjects })
 * Project.belongsToMany(User, { through: UserProjects })
 * ```
 * ```js
 * jan.addProject(homework, { started: false }) // The homework project is not started yet
 * jan.setProjects([makedinner, doshopping], { started: true}) // Both shopping and dinner has been started
 * ```
 * 
 * If you want to set several target instances, but with different attributes you have to set the
 * attributes on the instance, using a property with the name of the through model:
 * 
 * ```js
 * p1.userprojects {
 *   started: true
 * }
 * user.setProjects([p1, p2], {started: false}) // The default value is false, but p1 overrides that.
 * ```
 * 
 * Similarily, when fetching through a join table with custom attributes, these attributes will be
 * available as an object with the name of the through model.
 * ```js
 * user.getProjects().then(function (projects) {
 *   var p1 = projects[0]
 *   p1.userprojects.started // Is this project started yet?
 * })
 * ```
 * 
 * @param {!sequelize.Model<?, ?>} target The model that will be associated with hasOne relationship
 * @param {!sequelize.AssociationOptionsBelongsToMany} options Options for the association
 * 
 * @return {void}
 */
sequelize.Associations.prototype.belongsToMany = function(target, options) {};
/**
 * @record
 * @struct
 */
sequelize.DataTypeAbstract = function() {};
 /** @type {string} */
sequelize.DataTypeAbstract.prototype.dialectTypes;
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeAbstractString = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
 /** @type {T} */
sequelize.DataTypeAbstractString.prototype.BINARY;
/**
 * @extends {sequelize.DataTypeAbstractString}
 * @record
 * @struct
 */
sequelize.DataTypeString = function() {};
/**
 * @extends {sequelize.DataTypeAbstractString}
 * @record
 * @struct
 */
sequelize.DataTypeChar = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeText = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeAbstractNumber = function() {};
 /** @type {T} */
sequelize.DataTypeAbstractNumber.prototype.UNSIGNED;
 /** @type {T} */
sequelize.DataTypeAbstractNumber.prototype.ZEROFILL;
/**
 * @extends {sequelize.DataTypeAbstractNumber}
 * @record
 * @struct
 */
sequelize.DataTypeNumber = function() {};
/**
 * @extends {sequelize.DataTypeAbstractNumber}
 * @record
 * @struct
 */
sequelize.DataTypeInteger = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstractNumber}
 * @record
 * @struct
 */
sequelize.DataTypeBigInt = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstractNumber}
 * @record
 * @struct
 */
sequelize.DataTypeFloat = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstractNumber}
 * @record
 * @struct
 */
sequelize.DataTypeReal = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstractNumber}
 * @record
 * @struct
 */
sequelize.DataTypeDouble = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstractNumber}
 * @record
 * @struct
 */
sequelize.DataTypeDecimal = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeBoolean = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeTime = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeDate = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeDateOnly = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeHStore = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeJSONType = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeJSONB = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeNow = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeBlob = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeRange = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeUUID = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeUUIDv1 = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeUUIDv4 = function() {};
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeVirtual = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeEnum = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeArray = function() {};

/* TODO: CallSignature: sequelize */

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DataTypeAbstract}
 * @record
 * @struct
 */
sequelize.DataTypeGeometry = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.DataTypes = function() {};
 /** @type {!sequelize.DataTypeAbstract} */
sequelize.DataTypes.prototype.ABSTRACT;
 /** @type {!sequelize.DataTypeString} */
sequelize.DataTypes.prototype.STRING;
 /** @type {!sequelize.DataTypeChar} */
sequelize.DataTypes.prototype.CHAR;
 /** @type {!sequelize.DataTypeText} */
sequelize.DataTypes.prototype.TEXT;
 /** @type {!sequelize.DataTypeNumber} */
sequelize.DataTypes.prototype.NUMBER;
 /** @type {!sequelize.DataTypeInteger} */
sequelize.DataTypes.prototype.INTEGER;
 /** @type {!sequelize.DataTypeBigInt} */
sequelize.DataTypes.prototype.BIGINT;
 /** @type {!sequelize.DataTypeFloat} */
sequelize.DataTypes.prototype.FLOAT;
 /** @type {!sequelize.DataTypeTime} */
sequelize.DataTypes.prototype.TIME;
 /** @type {!sequelize.DataTypeDate} */
sequelize.DataTypes.prototype.DATE;
 /** @type {!sequelize.DataTypeDateOnly} */
sequelize.DataTypes.prototype.DATEONLY;
 /** @type {!sequelize.DataTypeBoolean} */
sequelize.DataTypes.prototype.BOOLEAN;
 /** @type {!sequelize.DataTypeNow} */
sequelize.DataTypes.prototype.NOW;
 /** @type {!sequelize.DataTypeBlob} */
sequelize.DataTypes.prototype.BLOB;
 /** @type {!sequelize.DataTypeDecimal} */
sequelize.DataTypes.prototype.DECIMAL;
 /** @type {!sequelize.DataTypeDecimal} */
sequelize.DataTypes.prototype.NUMERIC;
 /** @type {!sequelize.DataTypeUUID} */
sequelize.DataTypes.prototype.UUID;
 /** @type {!sequelize.DataTypeUUIDv1} */
sequelize.DataTypes.prototype.UUIDV1;
 /** @type {!sequelize.DataTypeUUIDv4} */
sequelize.DataTypes.prototype.UUIDV4;
 /** @type {!sequelize.DataTypeHStore} */
sequelize.DataTypes.prototype.HSTORE;
 /** @type {!sequelize.DataTypeJSONType} */
sequelize.DataTypes.prototype.JSON;
 /** @type {!sequelize.DataTypeJSONB} */
sequelize.DataTypes.prototype.JSONB;
 /** @type {!sequelize.DataTypeVirtual} */
sequelize.DataTypes.prototype.VIRTUAL;
 /** @type {!sequelize.DataTypeArray} */
sequelize.DataTypes.prototype.ARRAY;
 /** @type {!sequelize.DataTypeVirtual} */
sequelize.DataTypes.prototype.NONE;
 /** @type {!sequelize.DataTypeEnum} */
sequelize.DataTypes.prototype.ENUM;
 /** @type {!sequelize.DataTypeRange} */
sequelize.DataTypes.prototype.RANGE;
 /** @type {!sequelize.DataTypeReal} */
sequelize.DataTypes.prototype.REAL;
 /** @type {!sequelize.DataTypeDouble} */
sequelize.DataTypes.prototype.DOUBLE;

/* TODO: PropertySignature: sequelize."DOUBLE PRECISION" */
 /** @type {!sequelize.DataTypeGeometry} */
sequelize.DataTypes.prototype.GEOMETRY;
/**
 * @record
 * @struct
 */
sequelize.DeferrableAbstract = function() {};

/**
 * Although this is not needed for the definitions itself, we want to make sure that DeferrableAbstract is
 * not something than can be evaluated to an empty object.
 * @return {string}
 */
sequelize.DeferrableAbstract.prototype.toString = function() {};

/**
 * @return {string}
 */
sequelize.DeferrableAbstract.prototype.toSql = function() {};
/**
 * @extends {sequelize.DeferrableAbstract}
 * @record
 * @struct
 */
sequelize.DeferrableInitiallyDeferred = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DeferrableAbstract}
 * @record
 * @struct
 */
sequelize.DeferrableInitiallyImmediate = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DeferrableAbstract}
 * @record
 * @struct
 */
sequelize.DeferrableNot = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DeferrableAbstract}
 * @record
 * @struct
 */
sequelize.DeferrableSetDeferred = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @extends {sequelize.DeferrableAbstract}
 * @record
 * @struct
 */
sequelize.DeferrableSetImmediate = function() {};

/* TODO: CallSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.Deferrable = function() {};
 /** @type {!sequelize.DeferrableInitiallyDeferred} */
sequelize.Deferrable.prototype.INITIALLY_DEFERRED;
 /** @type {!sequelize.DeferrableInitiallyImmediate} */
sequelize.Deferrable.prototype.INITIALLY_IMMEDIATE;
 /** @type {!sequelize.DeferrableNot} */
sequelize.Deferrable.prototype.NOT;
 /** @type {!sequelize.DeferrableSetDeferred} */
sequelize.Deferrable.prototype.SET_DEFERRED;
 /** @type {!sequelize.DeferrableSetImmediate} */
sequelize.Deferrable.prototype.SET_IMMEDIATE;
/**
 * @extends {ErrorConstructor}
 * @record
 * @struct
 */
sequelize.BaseError = function() {};
/**
 * @extends {sequelize.BaseError}
 * @record
 * @struct
 */
sequelize.ValidationError = function() {};

/* TODO: ConstructSignature: sequelize */
 /** @type {!Array<!sequelize.ValidationErrorItem>} */
sequelize.ValidationError.prototype.errors;

/**
 * Gets all validation error items for the path / field specified.
 * 
 * @param {string} path The path to be checked for error items
 * @return {!Array<!sequelize.ValidationErrorItem>}
 */
sequelize.ValidationError.prototype.get = function(path) {};
/**
 * @extends {sequelize.BaseError}
 * @record
 * @struct
 */
sequelize.ValidationErrorItem = function() {};

/* TODO: ConstructSignature: sequelize */
 /** @type {string} */
sequelize.ValidationErrorItem.prototype.message;
 /** @type {string} */
sequelize.ValidationErrorItem.prototype.type;
 /** @type {string} */
sequelize.ValidationErrorItem.prototype.path;
 /** @type {string} */
sequelize.ValidationErrorItem.prototype.value;
/**
 * @extends {sequelize.BaseError}
 * @record
 * @struct
 */
sequelize.DatabaseError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.DatabaseError}
 * @record
 * @struct
 */
sequelize.TimeoutError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.ValidationError}
 * @record
 * @struct
 */
sequelize.UniqueConstraintError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.DatabaseError}
 * @record
 * @struct
 */
sequelize.ForeignKeyConstraintError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.DatabaseError}
 * @record
 * @struct
 */
sequelize.ExclusionConstraintError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.BaseError}
 * @record
 * @struct
 */
sequelize.ConnectionError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.ConnectionError}
 * @record
 * @struct
 */
sequelize.ConnectionRefusedError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.ConnectionError}
 * @record
 * @struct
 */
sequelize.AccessDeniedError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.ConnectionError}
 * @record
 * @struct
 */
sequelize.HostNotFoundError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.ConnectionError}
 * @record
 * @struct
 */
sequelize.HostNotReachableError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.ConnectionError}
 * @record
 * @struct
 */
sequelize.InvalidConnectionError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.ConnectionError}
 * @record
 * @struct
 */
sequelize.ConnectionTimedOutError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {sequelize.BaseError}
 * @record
 * @struct
 */
sequelize.EmptyResultError = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.Errors = function() {};
 /** @type {!sequelize.BaseError} */
sequelize.Errors.prototype.Error;
 /** @type {!sequelize.ValidationError} */
sequelize.Errors.prototype.ValidationError;
 /** @type {!sequelize.ValidationErrorItem} */
sequelize.Errors.prototype.ValidationErrorItem;
 /** @type {!sequelize.DatabaseError} */
sequelize.Errors.prototype.DatabaseError;
 /** @type {!sequelize.TimeoutError} */
sequelize.Errors.prototype.TimeoutError;
 /** @type {!sequelize.UniqueConstraintError} */
sequelize.Errors.prototype.UniqueConstraintError;
 /** @type {!sequelize.ExclusionConstraintError} */
sequelize.Errors.prototype.ExclusionConstraintError;
 /** @type {!sequelize.ForeignKeyConstraintError} */
sequelize.Errors.prototype.ForeignKeyConstraintError;
 /** @type {!sequelize.ConnectionError} */
sequelize.Errors.prototype.ConnectionError;
 /** @type {!sequelize.ConnectionRefusedError} */
sequelize.Errors.prototype.ConnectionRefusedError;
 /** @type {!sequelize.AccessDeniedError} */
sequelize.Errors.prototype.AccessDeniedError;
 /** @type {!sequelize.HostNotFoundError} */
sequelize.Errors.prototype.HostNotFoundError;
 /** @type {!sequelize.HostNotReachableError} */
sequelize.Errors.prototype.HostNotReachableError;
 /** @type {!sequelize.InvalidConnectionError} */
sequelize.Errors.prototype.InvalidConnectionError;
 /** @type {!sequelize.ConnectionTimedOutError} */
sequelize.Errors.prototype.ConnectionTimedOutError;
 /** @type {!sequelize.EmptyResultError} */
sequelize.Errors.prototype.EmptyResultError;
/**
 * @record
 * @struct
 */
sequelize.HooksDefineOptions = function() {};
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeValidate;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterValidate;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeCreate;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterCreate;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeDestroy;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeDelete;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterDestroy;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterDelete;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeUpdate;
 /** @type {function(TInstance, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterUpdate;
 /** @type {function(!Array<TInstance>, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeBulkCreate;
 /** @type {function(!Array<TInstance>, !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterBulkCreate;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeBulkDestroy;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeBulkDelete;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterBulkDestroy;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterBulkDelete;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeBulkUpdate;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterBulkUpdate;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeFind;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeFindAfterExpandIncludeAll;
 /** @type {function(!Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.beforeFindAfterOptions;
 /** @type {function((TInstance|!Array<TInstance>), !Object, !Function): ?} */
sequelize.HooksDefineOptions.prototype.afterFind;
/**
 * @record
 * @struct
 */
sequelize.Hooks = function() {};

/**
 * Add a hook to the model
 * 
 * \@alias hook
 * @param {string} hookType
 * @param {string|!Function} name_or_fn Provide a name for the hook function. It can be used to remove the hook later or to order
 *     hooks based on some sort of priority system in the future.
 * @param {!Function=} fn The hook function
 * 
 * @return {!sequelize.Hooks}
 */
sequelize.Hooks.prototype.addHook = function(hookType, name_or_fn, fn) {};

/**
 * @param {string} hookType
 * @param {string|!Function} name_or_fn
 * @param {!Function=} fn
 * @return {!sequelize.Hooks}
 */
sequelize.Hooks.prototype.hook = function(hookType, name_or_fn, fn) {};

/**
 * Remove hook from the model
 * 
 * @param {string} hookType
 * @param {string} name
 * @return {!sequelize.Hooks}
 */
sequelize.Hooks.prototype.removeHook = function(hookType, name) {};

/**
 * Check whether the mode has any hooks of this type
 * 
 * \@alias hasHooks
 * @param {string} hookType 
 * 
 * @return {boolean}
 */
sequelize.Hooks.prototype.hasHook = function(hookType) {};

/**
 * @param {string} hookType
 * @return {boolean}
 */
sequelize.Hooks.prototype.hasHooks = function(hookType) {};

/**
 * A hook that is run before validation
 * 
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with instance, options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeValidate = function(name_or_fn, fn) {};

/**
 * A hook that is run after validation
 * 
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with instance, options
 * @return {void}
 */
sequelize.Hooks.prototype.afterValidate = function(name_or_fn, fn) {};

/**
 * A hook that is run before creating a single instance
 * 
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with attributes, options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeCreate = function(name_or_fn, fn) {};

/**
 * A hook that is run after creating a single instance
 * 
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with attributes, options
 * @return {void}
 */
sequelize.Hooks.prototype.afterCreate = function(name_or_fn, fn) {};

/**
 * A hook that is run before destroying a single instance
 * 
 * \@alias beforeDelete
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with instance, options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeDestroy = function(name_or_fn, fn) {};

/**
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn
 * @return {void}
 */
sequelize.Hooks.prototype.beforeDelete = function(name_or_fn, fn) {};

/**
 * A hook that is run after destroying a single instance
 * 
 * \@alias afterDelete
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with instance, options
 * @return {void}
 */
sequelize.Hooks.prototype.afterDestroy = function(name_or_fn, fn) {};

/**
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn
 * @return {void}
 */
sequelize.Hooks.prototype.afterDelete = function(name_or_fn, fn) {};

/**
 * A hook that is run before updating a single instance
 * 
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with instance, options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeUpdate = function(name_or_fn, fn) {};

/**
 * A hook that is run after updating a single instance
 * 
 * @param {string|function(TInstance, !Object, !Function): void} name_or_fn
 * @param {function(TInstance, !Object, !Function): void=} fn A callback function that is called with instance, options
 * @return {void}
 */
sequelize.Hooks.prototype.afterUpdate = function(name_or_fn, fn) {};

/**
 * A hook that is run before creating instances in bulk
 * 
 * @param {string|function(!Array<TInstance>, !Object, !Function): void} name_or_fn
 * @param {function(!Array<TInstance>, !Object, !Function): void=} fn A callback function that is called with instances, options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeBulkCreate = function(name_or_fn, fn) {};

/**
 * A hook that is run after creating instances in bulk
 * 
 * \@name afterBulkCreate
 * @param {string|function(!Array<TInstance>, !Object, !Function): void} name_or_fn
 * @param {function(!Array<TInstance>, !Object, !Function): void=} fn A callback function that is called with instances, options
 * @return {void}
 */
sequelize.Hooks.prototype.afterBulkCreate = function(name_or_fn, fn) {};

/**
 * A hook that is run before destroying instances in bulk
 * 
 * \@alias beforeBulkDelete
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn   A callback function that is called with options
 * 
 * @return {void}
 */
sequelize.Hooks.prototype.beforeBulkDestroy = function(name_or_fn, fn) {};

/**
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn
 * @return {void}
 */
sequelize.Hooks.prototype.beforeBulkDelete = function(name_or_fn, fn) {};

/**
 * A hook that is run after destroying instances in bulk
 * 
 * \@alias afterBulkDelete
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn   A callback function that is called with options
 * 
 * @return {void}
 */
sequelize.Hooks.prototype.afterBulkDestroy = function(name_or_fn, fn) {};

/**
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn
 * @return {void}
 */
sequelize.Hooks.prototype.afterBulkDelete = function(name_or_fn, fn) {};

/**
 * A hook that is run after updating instances in bulk
 * 
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn   A callback function that is called with options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeBulkUpdate = function(name_or_fn, fn) {};

/**
 * A hook that is run after updating instances in bulk
 * 
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn   A callback function that is called with options
 * @return {void}
 */
sequelize.Hooks.prototype.afterBulkUpdate = function(name_or_fn, fn) {};

/**
 * A hook that is run before a find (select) query
 * 
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn   A callback function that is called with options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeFind = function(name_or_fn, fn) {};

/**
 * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded
 * 
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn   A callback function that is called with options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeFindAfterExpandIncludeAll = function(name_or_fn, fn) {};

/**
 * A hook that is run before a find (select) query, after all option parsing is complete
 * 
 * @param {string|function(!Object, !Function): void} name_or_fn
 * @param {function(!Object, !Function): void=} fn   A callback function that is called with options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeFindAfterOptions = function(name_or_fn, fn) {};

/**
 * A hook that is run after a find (select) query
 * 
 * @param {string|function((TInstance|!Array<TInstance>), !Object, !Function): void} name_or_fn
 * @param {function((TInstance|!Array<TInstance>), !Object, !Function): void=} fn   A callback function that is called with instance(s), options
 * @return {void}
 */
sequelize.Hooks.prototype.afterFind = function(name_or_fn, fn) {};

/**
 * A hook that is run before a define call
 * 
 * @param {string|function(!sequelize.DefineAttributes, !Object): void} name_or_fn
 * @param {function(!sequelize.DefineAttributes, !Object): void=} fn   A callback function that is called with attributes, options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeDefine = function(name_or_fn, fn) {};

/**
 * A hook that is run after a define call
 * 
 * @param {string|function(!sequelize.Model<TInstance, ?>): void} name_or_fn
 * @param {function(!sequelize.Model<TInstance, ?>): void=} fn   A callback function that is called with factory
 * @return {void}
 */
sequelize.Hooks.prototype.afterDefine = function(name_or_fn, fn) {};

/**
 * A hook that is run before Sequelize() call
 * 
 * @param {string|function(!Object, !Object): void} name_or_fn
 * @param {function(!Object, !Object): void=} fn   A callback function that is called with config, options
 * @return {void}
 */
sequelize.Hooks.prototype.beforeInit = function(name_or_fn, fn) {};

/**
 * A hook that is run after Sequelize() call
 * 
 * @param {string|function(!sequelize.Sequelize): void} name_or_fn
 * @param {function(!sequelize.Sequelize): void=} fn   A callback function that is called with sequelize
 * @return {void}
 */
sequelize.Hooks.prototype.afterInit = function(name_or_fn, fn) {};

/**
 * A hook that is run before Model.sync call
 * 
 * @param {string|function(!sequelize.SyncOptions): void} name_or_fn
 * @param {function(!sequelize.SyncOptions): void=} fn   	A callback function that is called with options passed to Model.sync
 * @return {void}
 */
sequelize.Hooks.prototype.beforeSync = function(name_or_fn, fn) {};

/**
 * A hook that is run after Model.sync call
 * 
 * @param {string|function(!sequelize.SyncOptions): void} name_or_fn
 * @param {function(!sequelize.SyncOptions): void=} fn   	A callback function that is called with options passed to Model.sync
 * @return {void}
 */
sequelize.Hooks.prototype.afterSync = function(name_or_fn, fn) {};

/**
 * A hook that is run before sequelize.sync call
 * 
 * @param {string|function(!sequelize.SyncOptions): void} name_or_fn
 * @param {function(!sequelize.SyncOptions): void=} fn    A callback function that is called with options passed to sequelize.sync
 * @return {void}
 */
sequelize.Hooks.prototype.beforeBulkSync = function(name_or_fn, fn) {};

/**
 * A hook that is run after sequelize.sync call
 * 
 * @param {string|function(!sequelize.SyncOptions): void} name_or_fn
 * @param {function(!sequelize.SyncOptions): void=} fn   A callback function that is called with options passed to sequelize.sync
 * @return {void}
 */
sequelize.Hooks.prototype.afterBulkSync = function(name_or_fn, fn) {};
/**
 * @record
 * @struct
 */
sequelize.InstanceIncrementDecrementOptions = function() {};
 /** @type {number} */
sequelize.InstanceIncrementDecrementOptions.prototype.by;
 /** @type {(boolean|!Function)} */
sequelize.InstanceIncrementDecrementOptions.prototype.logging;
 /** @type {!sequelize.Transaction} */
sequelize.InstanceIncrementDecrementOptions.prototype.transaction;
 /** @type {(!sequelize.AnyWhereOptions|!Array<(string|!sequelize.col|!sequelize.and|!sequelize.or)>)} */
sequelize.InstanceIncrementDecrementOptions.prototype.where;
/**
 * @record
 * @struct
 */
sequelize.InstanceRestoreOptions = function() {};
 /** @type {(boolean|!Function)} */
sequelize.InstanceRestoreOptions.prototype.logging;
 /** @type {!sequelize.Transaction} */
sequelize.InstanceRestoreOptions.prototype.transaction;
/**
 * @record
 * @struct
 */
sequelize.InstanceDestroyOptions = function() {};
 /** @type {boolean} */
sequelize.InstanceDestroyOptions.prototype.force;
 /** @type {(boolean|!Function)} */
sequelize.InstanceDestroyOptions.prototype.logging;
 /** @type {!sequelize.Transaction} */
sequelize.InstanceDestroyOptions.prototype.transaction;
/**
 * @extends {sequelize.InstanceSaveOptions}
 * @extends {sequelize.InstanceSetOptions}
 * @record
 * @struct
 */
sequelize.InstanceUpdateOptions = function() {};
 /** @type {(!sequelize.AnyWhereOptions|!Array<(string|!sequelize.col|!sequelize.and|!sequelize.or)>)} */
sequelize.InstanceUpdateOptions.prototype.where;
/**
 * @record
 * @struct
 */
sequelize.InstanceSetOptions = function() {};
 /** @type {boolean} */
sequelize.InstanceSetOptions.prototype.raw;
 /** @type {boolean} */
sequelize.InstanceSetOptions.prototype.reset;
/**
 * @extends {sequelize.FieldsOptions}
 * @extends {sequelize.LoggingOptions}
 * @extends {sequelize.ReturningOptions}
 * @extends {sequelize.SearchPathOptions}
 * @record
 * @struct
 */
sequelize.InstanceSaveOptions = function() {};
 /** @type {boolean} */
sequelize.InstanceSaveOptions.prototype.silent;
/**
 * @record
 * @struct
 */
sequelize.Instance = function() {};
 /** @type {boolean} */
sequelize.Instance.prototype.isNewRecord;
 /** @type {!sequelize.Model<Instance, TAttributes>} */
sequelize.Instance.prototype.Model;
 /** @type {!sequelize.Sequelize} */
sequelize.Instance.prototype.sequelize;

/**
 * Get an object representing the query for this instance, use with `options.where`
 * @return {!Object}
 */
sequelize.Instance.prototype.where = function() {};

/**
 * Get the value of the underlying data value
 * @param {string} key
 * @return {?}
 */
sequelize.Instance.prototype.getDataValue = function(key) {};

/**
 * Update the underlying data value
 * @param {string} key
 * @param {?} value
 * @return {void}
 */
sequelize.Instance.prototype.setDataValue = function(key, value) {};

/**
 * If no key is given, returns all values of the instance, also invoking virtual getters.
 * 
 * If key is given and a field or virtual getter is present for the key it will call that getter - else it
 * will return the value for key.
 * 
 * @param {string|{plain: boolean, clone: boolean}=} key_or_options
 * @param {{plain: boolean, clone: boolean}=} options
 * @return {?|TAttributes}
 */
sequelize.Instance.prototype.get = function(key_or_options, options) {};

/**
 * Set is used to update values on the instance (the sequelize representation of the instance that is,
 * remember that nothing will be persisted before you actually call `save`). In its most basic form `set`
 * will update a value stored in the underlying `dataValues` object. However, if a custom setter function
 * is defined for the key, that function will be called instead. To bypass the setter, you can pass `raw:
 * true` in the options object.
 * 
 * If set is called with an object, it will loop over the object, and call set recursively for each key,
 * value pair. If you set raw to true, the underlying dataValues will either be set directly to the object
 * passed, or used to extend dataValues, if dataValues already contain values.
 * 
 * When set is called, the previous value of the field is stored and sets a changed flag(see `changed`).
 * 
 * Set can also be used to build instances for associations, if you have values for those.
 * When using set with associations you need to make sure the property key matches the alias of the
 * association while also making sure that the proper include options have been set (from .build() or
 * .find())
 * 
 * If called with a dot.seperated key on a JSON/JSONB attribute it will set the value nested and flag the
 * entire object as changed.
 * 
 * @param {string|!Object} key_or_keys
 * @param {?|!sequelize.InstanceSetOptions=} value_or_options
 * @param {!sequelize.InstanceSetOptions=} options
 * @return {Instance}
 */
sequelize.Instance.prototype.set = function(key_or_keys, value_or_options, options) {};

/**
 * @param {string|!Object} key_or_keys
 * @param {?|!sequelize.InstanceSetOptions=} value_or_options
 * @param {!sequelize.InstanceSetOptions=} options
 * @return {Instance}
 */
sequelize.Instance.prototype.setAttributes = function(key_or_keys, value_or_options, options) {};

/**
 * If changed is called with a string it will return a boolean indicating whether the value of that key in
 * `dataValues` is different from the value in `_previousDataValues`.
 * 
 * If changed is called without an argument, it will return an array of keys that have changed.
 * 
 * If changed is called without an argument and no keys have changed, it will return `false`.
 * @param {string=} key
 * @return {boolean|(boolean|!Array<string>)}
 */
sequelize.Instance.prototype.changed = function(key) {};

/**
 * Returns the previous value for key from `_previousDataValues`.
 * @param {string} key
 * @return {?}
 */
sequelize.Instance.prototype.previous = function(key) {};

/**
 * Validate this instance, and if the validation passes, persist it to the database.
 * 
 * On success, the callback will be called with this instance. On validation error, the callback will be
 * called with an instance of `Sequelize.ValidationError`. This error will have a property for each of the
 * fields for which validation failed, with the error message for that field.
 * @param {!sequelize.InstanceSaveOptions=} options
 * @return {!Bluebird<Instance>}
 */
sequelize.Instance.prototype.save = function(options) {};

/**
 * Refresh the current instance in-place, i.e. update the object with current data from the DB and return
 * the same object. This is different from doing a `find(Instance.id)`, because that would create and
 * return a new instance. With this method, all references to the Instance are updated with the new data
 * and no new objects are created.
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<Instance>}
 */
sequelize.Instance.prototype.reload = function(options) {};

/**
 * Validate the attribute of this instance according to validation rules set in the model definition.
 * 
 * Emits null if and only if validation successful; otherwise an Error instance containing
 * { field name : [error msgs] } entries.
 * 
 * @param {{skip: !Array<string>}=} options
 * @return {!Bluebird<!sequelize.ValidationError>}
 */
sequelize.Instance.prototype.validate = function(options) {};

/**
 * This is the same as calling `set` and then calling `save`.
 * @param {string|!Object} key_or_keys
 * @param {?|!sequelize.InstanceUpdateOptions=} value_or_options
 * @param {!sequelize.InstanceUpdateOptions=} options
 * @return {!Bluebird<Instance>}
 */
sequelize.Instance.prototype.update = function(key_or_keys, value_or_options, options) {};

/**
 * @param {string|!Object} key_or_keys
 * @param {?|!sequelize.InstanceUpdateOptions=} value_or_options
 * @param {!sequelize.InstanceUpdateOptions=} options
 * @return {!Bluebird<Instance>}
 */
sequelize.Instance.prototype.updateAttributes = function(key_or_keys, value_or_options, options) {};

/**
 * Destroy the row corresponding to this instance. Depending on your setting for paranoid, the row will
 * either be completely deleted, or have its deletedAt timestamp set to the current time.
 * @param {!sequelize.InstanceDestroyOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.Instance.prototype.destroy = function(options) {};

/**
 * Restore the row corresponding to this instance. Only available for paranoid models.
 * @param {!sequelize.InstanceRestoreOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.Instance.prototype.restore = function(options) {};

/**
 * Increment the value of one or more columns. This is done in the database, which means it does not use
 * the values currently stored on the Instance. The increment is done using a
 * ```sql
 * SET column = column + X
 * ```
 * query. To get the correct value after an increment into the Instance you should do a reload.
 * 
 * ```js
 * instance.increment('number') // increment number by 1
 * instance.increment(['number', 'count'], { by: 2 }) // increment number and count by 2
 * instance.increment({ answer: 42, tries: 1}, { by: 2 }) // increment answer by 42, and tries by 1.
 *                                                        // `by` is ignored, since each column has its own
 *                                                        // value
 * ```
 * 
 * @param {(string|!Object|!Array<string>)} fields If a string is provided, that column is incremented by the value of `by` given in options.
 *               If an array is provided, the same is true for each column.
 *               If and object is provided, each column is incremented by the value given.
 * @param {!sequelize.InstanceIncrementDecrementOptions=} options
 * @return {!Bluebird<Instance>}
 */
sequelize.Instance.prototype.increment = function(fields, options) {};

/**
 * Decrement the value of one or more columns. This is done in the database, which means it does not use
 * the values currently stored on the Instance. The decrement is done using a
 * ```sql
 * SET column = column - X
 * ```
 * query. To get the correct value after an decrement into the Instance you should do a reload.
 * 
 * ```js
 * instance.decrement('number') // decrement number by 1
 * instance.decrement(['number', 'count'], { by: 2 }) // decrement number and count by 2
 * instance.decrement({ answer: 42, tries: 1}, { by: 2 }) // decrement answer by 42, and tries by 1.
 *                                                        // `by` is ignored, since each column has its own
 *                                                        // value
 * ```
 * 
 * @param {(string|!Object|!Array<string>)} fields If a string is provided, that column is decremented by the value of `by` given in options.
 *               If an array is provided, the same is true for each column.
 *               If and object is provided, each column is decremented by the value given
 * @param {!sequelize.InstanceIncrementDecrementOptions=} options
 * @return {!Bluebird<Instance>}
 */
sequelize.Instance.prototype.decrement = function(fields, options) {};

/**
 * Check whether all values of this and `other` Instance are the same
 * @param {!sequelize.Instance<?>} other
 * @return {boolean}
 */
sequelize.Instance.prototype.equals = function(other) {};

/**
 * Check if this is eqaul to one of `others` by calling equals
 * @param {!Array<!sequelize.Instance<?>>} others
 * @return {boolean}
 */
sequelize.Instance.prototype.equalsOneOf = function(others) {};

/**
 * Convert the instance to a JSON representation. Proxies to calling `get` with no keys. This means get all
 * values gotten from the DB, and apply all custom getters.
 * @return {TAttributes}
 */
sequelize.Instance.prototype.toJSON = function() {};
/**
 * @record
 * @struct
 */
sequelize.LoggingOptions = function() {};
 /** @type {(boolean|!Function)} */
sequelize.LoggingOptions.prototype.logging;
 /** @type {boolean} */
sequelize.LoggingOptions.prototype.benchmark;
/**
 * @record
 * @struct
 */
sequelize.SearchPathOptions = function() {};
 /** @type {!sequelize.Transaction} */
sequelize.SearchPathOptions.prototype.transaction;
 /** @type {string} */
sequelize.SearchPathOptions.prototype.searchPath;
/**
 * @record
 * @struct
 */
sequelize.ReturningOptions = function() {};
 /** @type {boolean} */
sequelize.ReturningOptions.prototype.returning;
/**
 * @record
 * @struct
 */
sequelize.FieldsOptions = function() {};
 /** @type {boolean} */
sequelize.FieldsOptions.prototype.validate;
 /** @type {!Array<string>} */
sequelize.FieldsOptions.prototype.fields;
/**
 * @extends {sequelize.LoggingOptions}
 * @record
 * @struct
 */
sequelize.DropOptions = function() {};
 /** @type {boolean} */
sequelize.DropOptions.prototype.cascade;
/**
 * @extends {sequelize.LoggingOptions}
 * @record
 * @struct
 */
sequelize.SchemaOptions = function() {};
 /** @type {string} */
sequelize.SchemaOptions.prototype.schemaDelimeter;
/**
 * @extends {sequelize.LoggingOptions}
 * @record
 * @struct
 */
sequelize.GetTableNameOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.AddScopeOptions = function() {};
 /** @type {boolean} */
sequelize.AddScopeOptions.prototype.override;
/**
 * @record
 * @struct
 */
sequelize.ScopeOptions = function() {};
 /** @type {(string|!Array<?>)} */
sequelize.ScopeOptions.prototype.method;
/**
 * @record
 * @struct
 */
sequelize.WhereNested = function() {};
 /** @type {!Array<(!sequelize.AnyWhereOptions|?)>} */
sequelize.WhereNested.prototype.$and;
 /** @type {!Array<(!sequelize.AnyWhereOptions|?)>} */
sequelize.WhereNested.prototype.$or;
/**
 * @record
 * @struct
 */
sequelize.WherePGStatement = function() {};
 /** @type {!Array<(string|number)>} */
sequelize.WherePGStatement.prototype.$any;
 /** @type {!Array<(string|number)>} */
sequelize.WherePGStatement.prototype.$all;
/**
 * @record
 * @struct
 */
sequelize.WhereGeometryOptions = function() {};
 /** @type {string} */
sequelize.WhereGeometryOptions.prototype.type;
 /** @type {!Array<(number|!Array<number>)>} */
sequelize.WhereGeometryOptions.prototype.coordinates;

/** @typedef {?} */
sequelize.WhereLogic;

/** @typedef {?} */
sequelize.WhereOptions;
/**
 * @record
 * @struct
 */
sequelize.AnyWhereOptions = function() {};

/* TODO: IndexSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.IncludeThroughOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.IncludeThroughOptions.prototype.where;
 /** @type {!Array<string>} */
sequelize.IncludeThroughOptions.prototype.attributes;
/**
 * @record
 * @struct
 */
sequelize.IncludeAssociation = function() {};
 /** @type {!sequelize.Model<?, ?>} */
sequelize.IncludeAssociation.prototype.source;
 /** @type {!sequelize.Model<?, ?>} */
sequelize.IncludeAssociation.prototype.target;
 /** @type {string} */
sequelize.IncludeAssociation.prototype.identifier;
/**
 * @record
 * @struct
 */
sequelize.IncludeOptions = function() {};
 /** @type {!sequelize.Model<?, ?>} */
sequelize.IncludeOptions.prototype.model;
 /** @type {string} */
sequelize.IncludeOptions.prototype.as;
 /** @type {!sequelize.IncludeAssociation} */
sequelize.IncludeOptions.prototype.association;
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.IncludeOptions.prototype.where;
 /** @type {(!Array<(string|!sequelize.literal|!Array<?>|!sequelize.fn|!sequelize.cast)>|{include: !Array<(string|!sequelize.literal|!Array<?>|!sequelize.fn|!sequelize.cast)>, exclude: !Array<string>})} */
sequelize.IncludeOptions.prototype.attributes;
 /** @type {boolean} */
sequelize.IncludeOptions.prototype.required;
 /** @type {!sequelize.IncludeThroughOptions} */
sequelize.IncludeOptions.prototype.through;
 /** @type {!Array<(!sequelize.Model<?, ?>|!sequelize.IncludeOptions)>} */
sequelize.IncludeOptions.prototype.include;
 /** @type {boolean} */
sequelize.IncludeOptions.prototype.paranoid;
 /** @type {(string|boolean)} */
sequelize.IncludeOptions.prototype.all;

/** @typedef {!Array<(string|!sequelize.literal|!Array<?>|!sequelize.fn|!sequelize.cast)>} */
sequelize.FindOptionsAttributesArray;
/**
 * @extends {sequelize.LoggingOptions}
 * @extends {sequelize.SearchPathOptions}
 * @record
 * @struct
 */
sequelize.FindOptions = function() {};
 /** @type {(!Array<(string|!sequelize.col|!sequelize.and|!sequelize.or)>|!sequelize.fn|?)} */
sequelize.FindOptions.prototype.where;
 /** @type {(!Array<(string|!sequelize.literal|!Array<?>|!sequelize.fn|!sequelize.cast)>|{include: !Array<(string|!sequelize.literal|!Array<?>|!sequelize.fn|!sequelize.cast)>, exclude: !Array<string>})} */
sequelize.FindOptions.prototype.attributes;
 /** @type {boolean} */
sequelize.FindOptions.prototype.paranoid;
 /** @type {!Array<(!sequelize.Model<?, ?>|!sequelize.IncludeOptions)>} */
sequelize.FindOptions.prototype.include;
 /** @type {(string|!sequelize.col|!sequelize.literal|!Array<(string|number|!sequelize.Model<?, ?>|{model: !sequelize.Model<?, ?>, as: string})>|!Array<(string|!sequelize.col|!sequelize.literal|!Array<(string|number|!sequelize.Model<?, ?>|{model: !sequelize.Model<?, ?>, as: string})>)>)} */
sequelize.FindOptions.prototype.order;
 /** @type {number} */
sequelize.FindOptions.prototype.limit;
 /** @type {number} */
sequelize.FindOptions.prototype.offset;
 /** @type {(string|{level: string, of: !sequelize.Model<?, ?>})} */
sequelize.FindOptions.prototype.lock;
 /** @type {boolean} */
sequelize.FindOptions.prototype.raw;
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.FindOptions.prototype.having;
 /** @type {(string|!Object|!Array<string>)} */
sequelize.FindOptions.prototype.group;
 /** @type {boolean} */
sequelize.FindOptions.prototype.distinct;
 /** @type {boolean} */
sequelize.FindOptions.prototype.subQuery;
 /** @type {boolean} */
sequelize.FindOptions.prototype.rejectOnEmpty;

/** @typedef {!sequelize.FindOptions<?>} */
sequelize.AnyFindOptions;
/**
 * @extends {sequelize.LoggingOptions}
 * @extends {sequelize.SearchPathOptions}
 * @record
 * @struct
 */
sequelize.CountOptions = function() {};
 /** @type {(!sequelize.AnyWhereOptions|!Array<string>)} */
sequelize.CountOptions.prototype.where;
 /** @type {!Array<(!sequelize.Model<?, ?>|!sequelize.IncludeOptions)>} */
sequelize.CountOptions.prototype.include;
 /** @type {boolean} */
sequelize.CountOptions.prototype.distinct;
 /** @type {!Array<(string|!Array<?>)>} */
sequelize.CountOptions.prototype.attributes;
 /** @type {!Object} */
sequelize.CountOptions.prototype.group;
/**
 * @extends {sequelize.ReturningOptions}
 * @record
 * @struct
 */
sequelize.BuildOptions = function() {};
 /** @type {boolean} */
sequelize.BuildOptions.prototype.raw;
 /** @type {boolean} */
sequelize.BuildOptions.prototype.isNewRecord;
 /** @type {!Array<(!sequelize.Model<?, ?>|!sequelize.IncludeOptions)>} */
sequelize.BuildOptions.prototype.include;
/**
 * @extends {sequelize.BuildOptions}
 * @extends {sequelize.InstanceSaveOptions}
 * @record
 * @struct
 */
sequelize.CreateOptions = function() {};
 /** @type {string} */
sequelize.CreateOptions.prototype.onDuplicate;
/**
 * @extends {sequelize.AnyFindOptions}
 * @record
 * @struct
 */
sequelize.FindOrInitializeOptions = function() {};
 /** @type {TAttributes} */
sequelize.FindOrInitializeOptions.prototype.defaults;
/**
 * @extends {sequelize.FindOptions}
 * @record
 * @struct
 */
sequelize.FindCreateFindOptions = function() {};
 /** @type {TAttributes} */
sequelize.FindCreateFindOptions.prototype.defaults;
/**
 * @extends {sequelize.FieldsOptions}
 * @extends {sequelize.LoggingOptions}
 * @extends {sequelize.SearchPathOptions}
 * @record
 * @struct
 */
sequelize.UpsertOptions = function() {};
/**
 * @extends {sequelize.FieldsOptions}
 * @extends {sequelize.LoggingOptions}
 * @extends {sequelize.SearchPathOptions}
 * @extends {sequelize.ReturningOptions}
 * @record
 * @struct
 */
sequelize.BulkCreateOptions = function() {};
 /** @type {boolean} */
sequelize.BulkCreateOptions.prototype.hooks;
 /** @type {boolean} */
sequelize.BulkCreateOptions.prototype.individualHooks;
 /** @type {boolean} */
sequelize.BulkCreateOptions.prototype.ignoreDuplicates;
 /** @type {!Array<string>} */
sequelize.BulkCreateOptions.prototype.updateOnDuplicate;
/**
 * @extends {sequelize.LoggingOptions}
 * @extends {sequelize.SearchPathOptions}
 * @record
 * @struct
 */
sequelize.TruncateOptions = function() {};
 /** @type {boolean} */
sequelize.TruncateOptions.prototype.cascade;
 /** @type {boolean} */
sequelize.TruncateOptions.prototype.force;
/**
 * @extends {sequelize.TruncateOptions}
 * @record
 * @struct
 */
sequelize.DestroyOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.DestroyOptions.prototype.where;
 /** @type {boolean} */
sequelize.DestroyOptions.prototype.hooks;
 /** @type {boolean} */
sequelize.DestroyOptions.prototype.individualHooks;
 /** @type {number} */
sequelize.DestroyOptions.prototype.limit;
 /** @type {boolean} */
sequelize.DestroyOptions.prototype.force;
 /** @type {boolean} */
sequelize.DestroyOptions.prototype.truncate;
/**
 * @extends {sequelize.LoggingOptions}
 * @record
 * @struct
 */
sequelize.RestoreOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.RestoreOptions.prototype.where;
 /** @type {boolean} */
sequelize.RestoreOptions.prototype.hooks;
 /** @type {boolean} */
sequelize.RestoreOptions.prototype.individualHooks;
 /** @type {number} */
sequelize.RestoreOptions.prototype.limit;
 /** @type {!sequelize.Transaction} */
sequelize.RestoreOptions.prototype.transaction;
/**
 * @extends {sequelize.FieldsOptions}
 * @extends {sequelize.LoggingOptions}
 * @extends {sequelize.ReturningOptions}
 * @record
 * @struct
 */
sequelize.UpdateOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.UpdateOptions.prototype.where;
 /** @type {boolean} */
sequelize.UpdateOptions.prototype.hooks;
 /** @type {boolean} */
sequelize.UpdateOptions.prototype.sideEffects;
 /** @type {boolean} */
sequelize.UpdateOptions.prototype.individualHooks;
 /** @type {number} */
sequelize.UpdateOptions.prototype.limit;
 /** @type {!sequelize.Transaction} */
sequelize.UpdateOptions.prototype.transaction;
 /** @type {boolean} */
sequelize.UpdateOptions.prototype.silent;
/**
 * @extends {sequelize.LoggingOptions}
 * @record
 * @struct
 */
sequelize.AggregateOptions = function() {};
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.AggregateOptions.prototype.where;
 /** @type {(string|!sequelize.DataTypeAbstract)} */
sequelize.AggregateOptions.prototype.dataType;
 /** @type {boolean} */
sequelize.AggregateOptions.prototype.distinct;
 /** @type {!sequelize.Transaction} */
sequelize.AggregateOptions.prototype.transaction;
 /** @type {boolean} */
sequelize.AggregateOptions.prototype.plain;
/**
 * @extends {sequelize.Hooks}
 * @extends {sequelize.Associations}
 * @record
 * @struct
 */
sequelize.Model = function() {};

/**
 * The Instance class
 * @return {TInstance}
 */
sequelize.Model.prototype.Instance = function() {};

/**
 * Remove attribute from model definition
 * 
 * @param {string} attribute
 * @return {void}
 */
sequelize.Model.prototype.removeAttribute = function(attribute) {};

/**
 * Sync this Model to the DB, that is create the table. Upon success, the callback will be called with the
 * model instance (this)
 * @param {!sequelize.SyncOptions=} options
 * @return {!Bluebird<Model>}
 */
sequelize.Model.prototype.sync = function(options) {};

/**
 * Drop the table represented by this Model
 * 
 * @param {!sequelize.DropOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.Model.prototype.drop = function(options) {};

/**
 * Apply a schema to this model. For postgres, this will actually place the schema in front of the table
 * name
 * - `"schema"."tableName"`, while the schema will be prepended to the table name for mysql and
 * sqlite - `'schema.tablename'`.
 * 
 * @param {string} schema The name of the schema
 * @param {!sequelize.SchemaOptions=} options
 * @return {Model}
 */
sequelize.Model.prototype.schema = function(schema, options) {};

/**
 * Get the tablename of the model, taking schema into account. The method will return The name as a string
 * if the model has no schema, or an object with `tableName`, `schema` and `delimiter` properties.
 * 
 * @param {!sequelize.GetTableNameOptions=} options The hash of options from any query. You can use one model to access tables with matching
 *     schemas by overriding `getTableName` and using custom key/values to alter the name of the table.
 *     (eg.
 *     subscribers_1, subscribers_2)
 * @return {(string|!Object)}
 */
sequelize.Model.prototype.getTableName = function(options) {};

/**
 * Add a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.
 * 
 * By default this will throw an error if a scope with that name already exists. Pass `override: true` in the options object to silence this error.
 * 
 * Add a new scope to the model. This is especially useful for adding scopes with includes, when the model you want to include is not available at the time this model is defined.
 * 
 * By default this will throw an error if a scope with that name already exists. Pass `override: true` in the options object to silence this error.
 * 
 * @param {string} name
 * @param {(!Function|!sequelize.FindOptions<?>)} scope
 * @param {!sequelize.AddScopeOptions=} options
 * @return {void}
 */
sequelize.Model.prototype.addScope = function(name, scope, options) {};

/**
 * Apply a scope created in `define` to the model. First let's look at how to create scopes:
 * ```js
 * var Model = sequelize.define('model', attributes, {
 *   defaultScope: {
 *     where: {
 *       username: 'dan'
 *     },
 *     limit: 12
 *   },
 *   scopes: {
 *     isALie: {
 *       where: {
 *         stuff: 'cake'
 *       }
 *     },
 *     complexFunction: function(email, accessLevel) {
 *       return {
 *         where: {
 *           email: {
 *             $like: email
 *           },
 *           accesss_level {
 *             $gte: accessLevel
 *           }
 *         }
 *       }
 *     }
 *   }
 * })
 * ```
 * Now, since you defined a default scope, every time you do Model.find, the default scope is appended to
 * your query. Here's a couple of examples:
 * ```js
 * Model.findAll() // WHERE username = 'dan'
 * Model.findAll({ where: { age: { gt: 12 } } }) // WHERE age > 12 AND username = 'dan'
 * ```
 * 
 * To invoke scope functions you can do:
 * ```js
 * Model.scope({ method: ['complexFunction' 'dan\@sequelize.com', 42]}).findAll()
 * // WHERE email like 'dan\@sequelize.com%' AND access_level >= 42
 * ```
 * 
 * @param {(string|!sequelize.AnyWhereOptions|!sequelize.ScopeOptions|!Array<(string|!sequelize.AnyWhereOptions|!sequelize.ScopeOptions)>)=} options
 * @return {Model} Model A reference to the model, with the scope(s) applied. Calling scope again on the returned
 *     model will clear the previous scope.
 */
sequelize.Model.prototype.scope = function(options) {};

/**
 * Search for multiple instances.
 * 
 * __Simple search using AND and =__
 * ```js
 * Model.findAll({
 *   where: {
 *     attr1: 42,
 *     attr2: 'cake'
 *   }
 * })
 * ```
 * ```sql
 * WHERE attr1 = 42 AND attr2 = 'cake'
 * ```
 * 
 * __Using greater than, less than etc.__
 * ```js
 * 
 * Model.findAll({
 *   where: {
 *     attr1: {
 *       gt: 50
 *     },
 *     attr2: {
 *       lte: 45
 *     },
 *     attr3: {
 *       in: [1,2,3]
 *     },
 *     attr4: {
 *       ne: 5
 *     }
 *   }
 * })
 * ```
 * ```sql
 * WHERE attr1 > 50 AND attr2 <= 45 AND attr3 IN (1,2,3) AND attr4 != 5
 * ```
 * Possible options are: `$ne, $in, $not, $notIn, $gte, $gt, $lte, $lt, $like, $ilike/$iLike, $notLike,
 * $notILike, '..'/$between, '!..'/$notBetween, '&&'/$overlap, '\@>'/$contains, '<\@'/$contained`
 * 
 * __Queries using OR__
 * ```js
 * Model.findAll({
 *   where: Sequelize.and(
 *     { name: 'a project' },
 *     Sequelize.or(
 *       { id: [1,2,3] },
 *       { id: { gt: 10 } }
 *     )
 *   )
 * })
 * ```
 * ```sql
 * WHERE name = 'a project' AND (id` IN (1,2,3) OR id > 10)
 * ```
 * 
 * The success listener is called with an array of instances if the query succeeds.
 * 
 * @see {Sequelize#query}
 * @template TCustomAttributes
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<!Array<TInstance>>}
 */
sequelize.Model.prototype.findAll = function(options) {};

/**
 * @template TCustomAttributes
 * @param {!sequelize.FindOptions<?>=} optionz
 * @return {!Bluebird<!Array<TInstance>>}
 */
sequelize.Model.prototype.all = function(optionz) {};

/**
 * Search for a single instance by its primary key. This applies LIMIT 1, so the listener will
 * always be called with a single instance.
 * @template TCustomAttributes
 * @param {(string|number)=} identifier
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<TInstance>}
 */
sequelize.Model.prototype.findById = function(identifier, options) {};

/**
 * @template TCustomAttributes
 * @param {(string|number)=} identifier
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<TInstance>}
 */
sequelize.Model.prototype.findByPrimary = function(identifier, options) {};

/**
 * Search for a single instance. This applies LIMIT 1, so the listener will always be called with a single
 * instance.
 * @template TCustomAttributes
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<TInstance>}
 */
sequelize.Model.prototype.findOne = function(options) {};

/**
 * @template TCustomAttributes
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<TInstance>}
 */
sequelize.Model.prototype.find = function(options) {};

/**
 * Run an aggregation method on the specified field
 * 
 * @param {string} field The field to aggregate over. Can be a field name or *
 * @param {string} aggregateFunction The function to use for aggregation, e.g. sum, max etc.
 * @param {!sequelize.AggregateOptions=} options Query options. See sequelize.query for full options
 * @return {!Bluebird<!Object>} Returns the aggregate result cast to `options.dataType`, unless `options.plain` is false, in
 *     which case the complete data result is returned.
 */
sequelize.Model.prototype.aggregate = function(field, aggregateFunction, options) {};

/**
 * Count the number of records matching the provided where clause.
 * 
 * If you provide an `include` option, the number of matching associations will be counted instead.
 * @param {!sequelize.CountOptions=} options
 * @return {!Bluebird<number>}
 */
sequelize.Model.prototype.count = function(options) {};

/**
 * Find all the rows matching your query, within a specified offset / limit, and get the total number of
 * rows matching your query. This is very usefull for paging
 * 
 * ```js
 * Model.findAndCountAll({
 *   where: ...,
 *   limit: 12,
 *   offset: 12
 * }).then(function (result) {
 *   ...
 * })
 * ```
 * In the above example, `result.rows` will contain rows 13 through 24, while `result.count` will return
 * the
 * total number of rows that matched your query.
 * 
 * When you add includes, only those which are required (either because they have a where clause, or
 * because
 * `required` is explicitly set to true on the include) will be added to the count part.
 * 
 * Suppose you want to find all users who have a profile attached:
 * ```js
 * User.findAndCountAll({
 *   include: [
 *      { model: Profile, required: true}
 *   ],
 *   limit 3
 * });
 * ```
 * Because the include for `Profile` has `required` set it will result in an inner join, and only the users
 * who have a profile will be counted. If we remove `required` from the include, both users with and
 * without
 * profiles will be counted
 * @template TCustomAttributes
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<{rows: !Array<TInstance>, count: number}>}
 */
sequelize.Model.prototype.findAndCount = function(options) {};

/**
 * @template TCustomAttributes
 * @param {!sequelize.FindOptions<?>=} options
 * @return {!Bluebird<{rows: !Array<TInstance>, count: number}>}
 */
sequelize.Model.prototype.findAndCountAll = function(options) {};

/**
 * Find the maximum value of field
 * @param {string} field
 * @param {!sequelize.AggregateOptions=} options
 * @return {!Bluebird<?>}
 */
sequelize.Model.prototype.max = function(field, options) {};

/**
 * Find the minimum value of field
 * @param {string} field
 * @param {!sequelize.AggregateOptions=} options
 * @return {!Bluebird<?>}
 */
sequelize.Model.prototype.min = function(field, options) {};

/**
 * Find the sum of field
 * @param {string} field
 * @param {!sequelize.AggregateOptions=} options
 * @return {!Bluebird<number>}
 */
sequelize.Model.prototype.sum = function(field, options) {};

/**
 * Builds a new model instance. Values is an object of key value pairs, must be defined but can be empty.
 * @param {TAttributes=} record
 * @param {!sequelize.BuildOptions=} options
 * @return {TInstance}
 */
sequelize.Model.prototype.build = function(record, options) {};

/**
 * Undocumented bulkBuild
 * @param {!Array<TAttributes>} records
 * @param {!sequelize.BuildOptions=} options
 * @return {!Array<TInstance>}
 */
sequelize.Model.prototype.bulkBuild = function(records, options) {};

/**
 * Builds a new model instance and calls save on it.
 * @param {TAttributes=} values
 * @param {!sequelize.CreateOptions=} options
 * @return {!Bluebird<TInstance>}
 */
sequelize.Model.prototype.create = function(values, options) {};

/**
 * Find a row that matches the query, or build (but don't save) the row if none is found.
 * The successfull result of the promise will be (instance, initialized) - Make sure to use .spread()
 * @param {!sequelize.FindOrInitializeOptions<TAttributes>} options
 * @return {!Bluebird<!Array<?>>}
 */
sequelize.Model.prototype.findOrInitialize = function(options) {};

/**
 * @param {!sequelize.FindOrInitializeOptions<TAttributes>} options
 * @return {!Bluebird<!Array<?>>}
 */
sequelize.Model.prototype.findOrBuild = function(options) {};

/**
 * Find a row that matches the query, or build and save the row if none is found
 * The successful result of the promise will be (instance, created) - Make sure to use .spread()
 * 
 * If no transaction is passed in the `options` object, a new transaction will be created internally, to
 * prevent the race condition where a matching row is created by another connection after the find but
 * before the insert call. However, it is not always possible to handle this case in SQLite, specifically
 * if one transaction inserts and another tries to select before the first one has comitted. In this case,
 * an instance of sequelize.TimeoutError will be thrown instead. If a transaction is created, a savepoint
 * will be created instead, and any unique constraint violation will be handled internally.
 * @param {!sequelize.FindOrInitializeOptions<TAttributes>} options
 * @return {!Bluebird<!Array<?>>}
 */
sequelize.Model.prototype.findOrCreate = function(options) {};

/**
 * A more performant findOrCreate that will not work under a transaction (at least not in postgres)
 * Will execute a find call, if empty then attempt to create, if unique constraint then attempt to find again
 * @template TCustomAttributes
 * @param {!sequelize.FindCreateFindOptions<?>} options
 * @return {!Bluebird<!Array<?>>}
 */
sequelize.Model.prototype.findCreateFind = function(options) {};

/**
 * Insert or update a single row. An update will be executed if a row which matches the supplied values on
 * either the primary key or a unique key is found. Note that the unique index must be defined in your
 * sequelize model and not just in the table. Otherwise you may experience a unique constraint violation,
 * because sequelize fails to identify the row that should be updated.
 * 
 * **Implementation details:**
 * 
 * * MySQL - Implemented as a single query `INSERT values ON DUPLICATE KEY UPDATE values`
 * * PostgreSQL - Implemented as a temporary function with exception handling: INSERT EXCEPTION WHEN
 *   unique_constraint UPDATE
 * * SQLite - Implemented as two queries `INSERT; UPDATE`. This means that the update is executed
 * regardless
 *   of whether the row already existed or not
 * 
 * **Note** that SQLite returns undefined for created, no matter if the row was created or updated. This is
 * because SQLite always runs INSERT OR IGNORE + UPDATE, in a single query, so there is no way to know
 * whether the row was inserted or not.
 * @param {TAttributes} values
 * @param {!sequelize.UpsertOptions=} options
 * @return {!Bluebird<boolean>}
 */
sequelize.Model.prototype.upsert = function(values, options) {};

/**
 * @param {TAttributes} values
 * @param {!sequelize.UpsertOptions=} options
 * @return {!Bluebird<boolean>}
 */
sequelize.Model.prototype.insertOrUpdate = function(values, options) {};

/**
 * Create and insert multiple instances in bulk.
 * 
 * The success handler is passed an array of instances, but please notice that these may not completely
 * represent the state of the rows in the DB. This is because MySQL and SQLite do not make it easy to
 * obtain
 * back automatically generated IDs and other default values in a way that can be mapped to multiple
 * records. To obtain Instances for the newly created values, you will need to query for them again.
 * 
 * @param {!Array<TAttributes>} records List of objects (key/value pairs) to create instances from
 * @param {!sequelize.BulkCreateOptions=} options
 * @return {!Bluebird<!Array<TInstance>>}
 */
sequelize.Model.prototype.bulkCreate = function(records, options) {};

/**
 * Truncate all instances of the model. This is a convenient method for Model.destroy({ truncate: true }).
 * @param {!sequelize.TruncateOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.Model.prototype.truncate = function(options) {};

/**
 * Delete multiple instances, or set their deletedAt timestamp to the current time if `paranoid` is enabled.
 * 
 * @param {!sequelize.DestroyOptions=} options
 * @return {!Bluebird<number>} Promise<number> The number of destroyed rows
 */
sequelize.Model.prototype.destroy = function(options) {};

/**
 * Restore multiple instances if `paranoid` is enabled.
 * @param {!sequelize.RestoreOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.Model.prototype.restore = function(options) {};

/**
 * Update multiple instances that match the where options. The promise returns an array with one or two
 * elements. The first element is always the number of affected rows, while the second element is the actual
 * affected rows (only supported in postgres with `options.returning` true.)
 * @param {TAttributes} values
 * @param {!sequelize.UpdateOptions} options
 * @return {!Bluebird<!Array<?>>}
 */
sequelize.Model.prototype.update = function(values, options) {};

/**
 * Run a describe query on the table. The result will be return to the listener as a hash of attributes and
 * their types.
 * @return {!Bluebird<!Object>}
 */
sequelize.Model.prototype.describe = function() {};

/**
 * Unscope the model
 * @return {Model}
 */
sequelize.Model.prototype.unscoped = function() {};
/**
 * @record
 * @struct
 */
sequelize.QueryInterfaceOptions = function() {};
 /** @type {(boolean|!Function)} */
sequelize.QueryInterfaceOptions.prototype.logging;
/**
 * @record
 * @struct
 */
sequelize.AddUniqueConstraintOptions = function() {};
 /** @type {string} */
sequelize.AddUniqueConstraintOptions.prototype.type;
 /** @type {string} */
sequelize.AddUniqueConstraintOptions.prototype.name;
/**
 * @record
 * @struct
 */
sequelize.AddDefaultConstraintOptions = function() {};
 /** @type {string} */
sequelize.AddDefaultConstraintOptions.prototype.type;
 /** @type {string} */
sequelize.AddDefaultConstraintOptions.prototype.name;
 /** @type {?} */
sequelize.AddDefaultConstraintOptions.prototype.defaultValue;
/**
 * @record
 * @struct
 */
sequelize.AddCheckConstraintOptions = function() {};
 /** @type {string} */
sequelize.AddCheckConstraintOptions.prototype.type;
 /** @type {string} */
sequelize.AddCheckConstraintOptions.prototype.name;
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.AddCheckConstraintOptions.prototype.where;
/**
 * @record
 * @struct
 */
sequelize.AddPrimaryKeyConstraintOptions = function() {};
 /** @type {string} */
sequelize.AddPrimaryKeyConstraintOptions.prototype.type;
 /** @type {string} */
sequelize.AddPrimaryKeyConstraintOptions.prototype.name;
/**
 * @record
 * @struct
 */
sequelize.AddForeignKeyConstraintOptions = function() {};
 /** @type {string} */
sequelize.AddForeignKeyConstraintOptions.prototype.type;
 /** @type {string} */
sequelize.AddForeignKeyConstraintOptions.prototype.name;
 /** @type {{table: string, field: string}} */
sequelize.AddForeignKeyConstraintOptions.prototype.references;
 /** @type {string} */
sequelize.AddForeignKeyConstraintOptions.prototype.onDelete;
 /** @type {string} */
sequelize.AddForeignKeyConstraintOptions.prototype.onUpdate;

/** @typedef {(!sequelize.AddUniqueConstraintOptions|!sequelize.AddDefaultConstraintOptions|!sequelize.AddCheckConstraintOptions|!sequelize.AddPrimaryKeyConstraintOptions|!sequelize.AddForeignKeyConstraintOptions)} */
sequelize.AddConstraintOptions;
/**
 * @record
 * @struct
 */
sequelize.QueryInterface = function() {};
 /** @type {?} */
sequelize.QueryInterface.prototype.QueryGenerator;
 /** @type {!sequelize.Sequelize} */
sequelize.QueryInterface.prototype.sequelize;

/**
 * Queries the schema (table list).
 * 
 * @param {string=} schema The schema to query. Applies only to Postgres.
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.createSchema = function(schema, options) {};

/**
 * Drops the specified schema (table).
 * 
 * @param {string=} schema The schema to query. Applies only to Postgres.
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.dropSchema = function(schema, options) {};

/**
 * Drops all tables.
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.dropAllSchemas = function(options) {};

/**
 * Queries all table names in the database.
 * 
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.showAllSchemas = function(options) {};

/**
 * Return database version
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<string>}
 */
sequelize.QueryInterface.prototype.databaseVersion = function(options) {};

/**
 * Creates a table with specified attributes.
 * 
 * @param {(string|{schema: string, tableName: string})} tableName     Name of table to create
 * @param {!sequelize.DefineAttributes} attributes    Hash of attributes, key is attribute name, value is data type
 * @param {!sequelize.QueryOptions=} options       Query options.
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.createTable = function(tableName, attributes, options) {};

/**
 * Drops the specified table.
 * 
 * @param {string} tableName Table name.
 * @param {!sequelize.QueryOptions=} options   Query options, particularly "force".
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.dropTable = function(tableName, options) {};

/**
 * Drops all tables.
 * 
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.dropAllTables = function(options) {};

/**
 * Drops all defined enums
 * 
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.dropAllEnums = function(options) {};

/**
 * Renames a table
 * @param {string} before
 * @param {string} after
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.renameTable = function(before, after, options) {};

/**
 * Returns all tables
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Array<string>>}
 */
sequelize.QueryInterface.prototype.showAllTables = function(options) {};

/**
 * Describe a table
 * @param {(string|{schema: string, tableName: string})} tableName
 * @param {(string|{schema: string, schemaDelimeter: string, logging: (boolean|!Function)})=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.describeTable = function(tableName, options) {};

/**
 * Adds a new column to a table
 * @param {string} table
 * @param {string} key
 * @param {(!sequelize.DataTypeAbstract|!sequelize.DefineAttributeColumnOptions)} attribute
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.addColumn = function(table, key, attribute, options) {};

/**
 * Removes a column from a table
 * @param {string} table
 * @param {string} attribute
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.removeColumn = function(table, attribute, options) {};

/**
 * Changes a column
 * @param {(string|{schema: string, tableName: string})} tableName
 * @param {string} attributeName
 * @param {(string|!sequelize.DataTypeAbstract|!sequelize.DefineAttributeColumnOptions)=} dataTypeOrOptions
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.changeColumn = function(tableName, attributeName, dataTypeOrOptions, options) {};

/**
 * Renames a column
 * @param {(string|{schema: string, tableName: string})} tableName
 * @param {string} attrNameBefore
 * @param {string} attrNameAfter
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.renameColumn = function(tableName, attrNameBefore, attrNameAfter, options) {};

/**
 * Adds a new index to a table
 * @param {(string|!Object)} tableName
 * @param {!Array<string>} attributes
 * @param {!sequelize.QueryOptions=} options
 * @param {string=} rawTablename
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.addIndex = function(tableName, attributes, options, rawTablename) {};

/**
 * Shows the index of a table
 * @param {(string|!Object)} tableName
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.showIndex = function(tableName, options) {};

/**
 * Put a name to an index
 * @param {!Array<string>} indexes
 * @param {string} rawTablename
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.nameIndexes = function(indexes, rawTablename) {};

/**
 * Returns all foreign key constraints of a table
 * @param {string} tableNames
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.getForeignKeysForTables = function(tableNames, options) {};

/**
 * Removes an index of a table
 * @param {string} tableName
 * @param {(string|!Array<string>)} indexNameOrAttributes
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.removeIndex = function(tableName, indexNameOrAttributes, options) {};

/**
 * Adds constraints to a table
 * @param {string} tableName
 * @param {!Array<string>} attributes
 * @param {(!sequelize.AddUniqueConstraintOptions|!sequelize.AddDefaultConstraintOptions|!sequelize.AddCheckConstraintOptions|!sequelize.AddPrimaryKeyConstraintOptions|!sequelize.AddForeignKeyConstraintOptions|!sequelize.QueryInterfaceOptions)=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.addConstraint = function(tableName, attributes, options) {};

/**
 * Removes constraints from a table
 * @param {string} tableName
 * @param {string} constraintName
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.removeConstraint = function(tableName, constraintName, options) {};

/**
 * Inserts a new record
 * @param {!sequelize.Instance<?>} instance
 * @param {string} tableName
 * @param {!Object} values
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.insert = function(instance, tableName, values, options) {};

/**
 * Inserts or Updates a record in the database
 * @param {string} tableName
 * @param {!Object} values
 * @param {!Object} updateValues
 * @param {!sequelize.Model<?, ?>} model
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.upsert = function(tableName, values, updateValues, model, options) {};

/**
 * Inserts multiple records at once
 * @param {string} tableName
 * @param {!Array<!Object>} records
 * @param {!sequelize.QueryOptions=} options
 * @param {(string|!Array<string>)=} attributes
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.bulkInsert = function(tableName, records, options, attributes) {};

/**
 * Updates a row
 * @param {!sequelize.Instance<?>} instance
 * @param {string} tableName
 * @param {!Object} values
 * @param {!Object} identifier
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.update = function(instance, tableName, values, identifier, options) {};

/**
 * Updates multiple rows at once
 * @param {string} tableName
 * @param {!Object} values
 * @param {!Object} identifier
 * @param {!sequelize.QueryOptions=} options
 * @param {(string|!Array<string>)=} attributes
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.bulkUpdate = function(tableName, values, identifier, options, attributes) {};

/**
 * Deletes a row
 * @param {!sequelize.Instance<?>} instance
 * @param {string} tableName
 * @param {!Object} identifier
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype"delete" = function(instance, tableName, identifier, options) {};

/**
 * Deletes multiple rows at once
 * @param {string} tableName
 * @param {!Object} identifier
 * @param {!sequelize.QueryOptions=} options
 * @param {!sequelize.Model<?, ?>=} model
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.bulkDelete = function(tableName, identifier, options, model) {};

/**
 * Returns selected rows
 * @param {!sequelize.Model<?, ?>} model
 * @param {string} tableName
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Array<!Object>>}
 */
sequelize.QueryInterface.prototype.select = function(model, tableName, options) {};

/**
 * Increments a row value
 * @param {!sequelize.Instance<?>} instance
 * @param {string} tableName
 * @param {!Object} values
 * @param {!Object} identifier
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!Object>}
 */
sequelize.QueryInterface.prototype.increment = function(instance, tableName, values, identifier, options) {};

/**
 * Selects raw without parsing the string into an object
 * @param {string} tableName
 * @param {!sequelize.QueryOptions} options
 * @param {(string|!Array<string>)} attributeSelector
 * @param {!sequelize.Model<?, ?>=} model
 * @return {!Bluebird<!Array<string>>}
 */
sequelize.QueryInterface.prototype.rawSelect = function(tableName, options, attributeSelector, model) {};

/**
 * Postgres only. Creates a trigger on specified table to call the specified function with supplied
 * parameters.
 * @param {string} tableName
 * @param {string} triggerName
 * @param {string} timingType
 * @param {!Array<?>} fireOnArray
 * @param {string} functionName
 * @param {!Array<?>} functionParams
 * @param {!Array<string>} optionsArray
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.createTrigger = function(tableName, triggerName, timingType, fireOnArray, functionName, functionParams, optionsArray, options) {};

/**
 * Postgres only. Drops the specified trigger.
 * @param {string} tableName
 * @param {string} triggerName
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.dropTrigger = function(tableName, triggerName, options) {};

/**
 * Postgres only. Renames a trigger
 * @param {string} tableName
 * @param {string} oldTriggerName
 * @param {string} newTriggerName
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.renameTrigger = function(tableName, oldTriggerName, newTriggerName, options) {};

/**
 * Postgres only. Create a function
 * @param {string} functionName
 * @param {!Array<?>} params
 * @param {string} returnType
 * @param {string} language
 * @param {string} body
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.createFunction = function(functionName, params, returnType, language, body, options) {};

/**
 * Postgres only. Drops a function
 * @param {string} functionName
 * @param {!Array<?>} params
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.dropFunction = function(functionName, params, options) {};

/**
 * Postgres only. Rename a function
 * @param {string} oldFunctionName
 * @param {!Array<?>} params
 * @param {string} newFunctionName
 * @param {!sequelize.QueryInterfaceOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.renameFunction = function(oldFunctionName, params, newFunctionName, options) {};

/**
 * Escape an identifier (e.g. a table or attribute name). If force is true, the identifier will be quoted
 * even if the `quoteIdentifiers` option is false.
 * @param {string} identifier
 * @param {boolean} force
 * @return {string}
 */
sequelize.QueryInterface.prototype.quoteIdentifier = function(identifier, force) {};

/**
 * Escape a table name
 * @param {string} identifier
 * @return {string}
 */
sequelize.QueryInterface.prototype.quoteTable = function(identifier) {};

/**
 * Split an identifier into .-separated tokens and quote each part. If force is true, the identifier will be
 * quoted even if the `quoteIdentifiers` option is false.
 * @param {string} identifiers
 * @param {boolean} force
 * @return {string}
 */
sequelize.QueryInterface.prototype.quoteIdentifiers = function(identifiers, force) {};

/**
 * Escape a value (e.g. a string, number or date)
 * @param {(string|number|!Date)=} value
 * @return {string}
 */
sequelize.QueryInterface.prototype.escape = function(value) {};

/**
 * Set option for autocommit of a transaction
 * @param {!sequelize.Transaction} transaction
 * @param {boolean} value
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.setAutocommit = function(transaction, value, options) {};

/**
 * Set the isolation level of a transaction
 * @param {!sequelize.Transaction} transaction
 * @param {string} value
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.setIsolationLevel = function(transaction, value, options) {};

/**
 * Begin a new transaction
 * @param {!sequelize.Transaction} transaction
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.startTransaction = function(transaction, options) {};

/**
 * Defer constraints
 * @param {!sequelize.Transaction} transaction
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.deferConstraints = function(transaction, options) {};

/**
 * Commit an already started transaction
 * @param {!sequelize.Transaction} transaction
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.commitTransaction = function(transaction, options) {};

/**
 * Rollback ( revert ) a transaction that has'nt been commited
 * @param {!sequelize.Transaction} transaction
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<void>}
 */
sequelize.QueryInterface.prototype.rollbackTransaction = function(transaction, options) {};
/**
 * @record
 * @struct
 */
sequelize.QueryTypes = function() {};
 /** @type {string} */
sequelize.QueryTypes.prototype.SELECT;
 /** @type {string} */
sequelize.QueryTypes.prototype.INSERT;
 /** @type {string} */
sequelize.QueryTypes.prototype.UPDATE;
 /** @type {string} */
sequelize.QueryTypes.prototype.BULKUPDATE;
 /** @type {string} */
sequelize.QueryTypes.prototype.BULKDELETE;
 /** @type {string} */
sequelize.QueryTypes.prototype.DELETE;
 /** @type {string} */
sequelize.QueryTypes.prototype.UPSERT;
 /** @type {string} */
sequelize.QueryTypes.prototype.VERSION;
 /** @type {string} */
sequelize.QueryTypes.prototype.SHOWTABLES;
 /** @type {string} */
sequelize.QueryTypes.prototype.SHOWINDEXES;
 /** @type {string} */
sequelize.QueryTypes.prototype.DESCRIBE;
 /** @type {string} */
sequelize.QueryTypes.prototype.RAW;
 /** @type {string} */
sequelize.QueryTypes.prototype.FOREIGNKEYS;
/**
 * @record
 * @struct
 */
sequelize.ColumnOptions = function() {};
 /** @type {boolean} */
sequelize.ColumnOptions.prototype.allowNull;
 /** @type {string} */
sequelize.ColumnOptions.prototype.field;
 /** @type {?} */
sequelize.ColumnOptions.prototype.defaultValue;
/**
 * @record
 * @struct
 */
sequelize.DefineAttributeColumnReferencesOptions = function() {};
 /** @type {(string|!sequelize.Model<?, ?>)} */
sequelize.DefineAttributeColumnReferencesOptions.prototype.model;
 /** @type {string} */
sequelize.DefineAttributeColumnReferencesOptions.prototype.key;
 /** @type {!sequelize.Deferrable} */
sequelize.DefineAttributeColumnReferencesOptions.prototype.deferrable;
/**
 * @extends {sequelize.ColumnOptions}
 * @record
 * @struct
 */
sequelize.DefineAttributeColumnOptions = function() {};
 /** @type {(string|!sequelize.DataTypeAbstract)} */
sequelize.DefineAttributeColumnOptions.prototype.type;
 /** @type {(string|boolean|{name: string, msg: string})} */
sequelize.DefineAttributeColumnOptions.prototype.unique;
 /** @type {boolean} */
sequelize.DefineAttributeColumnOptions.prototype.primaryKey;
 /** @type {boolean} */
sequelize.DefineAttributeColumnOptions.prototype.autoIncrement;
 /** @type {string} */
sequelize.DefineAttributeColumnOptions.prototype.comment;
 /** @type {!sequelize.DefineAttributeColumnReferencesOptions} */
sequelize.DefineAttributeColumnOptions.prototype.references;
 /** @type {string} */
sequelize.DefineAttributeColumnOptions.prototype.onUpdate;
 /** @type {string} */
sequelize.DefineAttributeColumnOptions.prototype.onDelete;
 /** @type {function(): ?} */
sequelize.DefineAttributeColumnOptions.prototype.get;
 /** @type {function(?): void} */
sequelize.DefineAttributeColumnOptions.prototype.set;
 /** @type {!sequelize.DefineValidateOptions} */
sequelize.DefineAttributeColumnOptions.prototype.validate;
 /** @type {!Array<string>} */
sequelize.DefineAttributeColumnOptions.prototype.values;
/**
 * @record
 * @struct
 */
sequelize.DefineAttributes = function() {};

/* TODO: IndexSignature: sequelize */
/**
 * @extends {sequelize.SearchPathOptions}
 * @extends {sequelize.ReturningOptions}
 * @record
 * @struct
 */
sequelize.QueryOptions = function() {};
 /** @type {boolean} */
sequelize.QueryOptions.prototype.raw;
 /** @type {string} */
sequelize.QueryOptions.prototype.type;
 /** @type {boolean} */
sequelize.QueryOptions.prototype.nest;
 /** @type {boolean} */
sequelize.QueryOptions.prototype.plain;
 /** @type {(!Object|!Array<string>)} */
sequelize.QueryOptions.prototype.replacements;
 /** @type {(!Object|!Array<string>)} */
sequelize.QueryOptions.prototype.bind;
 /** @type {boolean} */
sequelize.QueryOptions.prototype.useMaster;
 /** @type {(boolean|!Function)} */
sequelize.QueryOptions.prototype.logging;
 /** @type {!sequelize.Instance<?>} */
sequelize.QueryOptions.prototype.instance;
 /** @type {!sequelize.Model<?, ?>} */
sequelize.QueryOptions.prototype.model;
 /** @type {!sequelize.RetryOptions} */
sequelize.QueryOptions.prototype.retry;
 /** @type {boolean} */
sequelize.QueryOptions.prototype.supportsSearchPath;
 /** @type {boolean} */
sequelize.QueryOptions.prototype.mapToModel;
 /** @type {!Object<string,string>} */
sequelize.QueryOptions.prototype.fieldMap;
/**
 * @record
 * @struct
 */
sequelize.DefineValidateOptions = function() {};
 /** @type {(string|!RegExp|!Array<(string|!RegExp)>|{msg: string, args: (string|!RegExp|!Array<(string|!RegExp)>)})} */
sequelize.DefineValidateOptions.prototype.is;
 /** @type {(string|!RegExp|!Array<(string|!RegExp)>|{msg: string, args: (string|!RegExp|!Array<(string|!RegExp)>)})} */
sequelize.DefineValidateOptions.prototype.not;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isEmail;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isUrl;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isIP;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isIPv4;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isIPv6;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isAlpha;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isAlphanumeric;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isNumeric;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isInt;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isFloat;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isDecimal;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isLowercase;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isUppercase;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.notNull;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.isNull;
 /** @type {(boolean|{msg: string})} */
sequelize.DefineValidateOptions.prototype.notEmpty;
 /** @type {(string|{msg: string})} */
sequelize.DefineValidateOptions.prototype.equals;
 /** @type {(string|{msg: string})} */
sequelize.DefineValidateOptions.prototype.contains;
 /** @type {(!Array<!Array<string>>|{msg: string, args: !Array<!Array<string>>})} */
sequelize.DefineValidateOptions.prototype.notIn;
 /** @type {(!Array<!Array<string>>|{msg: string, args: !Array<!Array<string>>})} */
sequelize.DefineValidateOptions.prototype.isIn;
 /** @type {(string|!Array<string>|{msg: string, args: (string|!Array<string>)})} */
sequelize.DefineValidateOptions.prototype.notContains;
 /** @type {(!Array<?>|{msg: string, args: !Array<?>})} */
sequelize.DefineValidateOptions.prototype.len;
 /** @type {(number|string|{msg: string, args: number})} */
sequelize.DefineValidateOptions.prototype.isUUID;
 /** @type {(boolean|{msg: string, args: boolean})} */
sequelize.DefineValidateOptions.prototype.isDate;
 /** @type {(string|{msg: string, args: string})} */
sequelize.DefineValidateOptions.prototype.isAfter;
 /** @type {(string|{msg: string, args: string})} */
sequelize.DefineValidateOptions.prototype.isBefore;
 /** @type {(number|{msg: string, args: number})} */
sequelize.DefineValidateOptions.prototype.max;
 /** @type {(number|{msg: string, args: number})} */
sequelize.DefineValidateOptions.prototype.min;
 /** @type {(boolean|{msg: string, args: boolean})} */
sequelize.DefineValidateOptions.prototype.isArray;
 /** @type {(boolean|{msg: string, args: boolean})} */
sequelize.DefineValidateOptions.prototype.isCreditCard;

/* TODO: IndexSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.DefineIndexesOptions = function() {};
 /** @type {string} */
sequelize.DefineIndexesOptions.prototype.name;
 /** @type {string} */
sequelize.DefineIndexesOptions.prototype.index;
 /** @type {string} */
sequelize.DefineIndexesOptions.prototype.method;
 /** @type {boolean} */
sequelize.DefineIndexesOptions.prototype.unique;
 /** @type {boolean} */
sequelize.DefineIndexesOptions.prototype.concurrently;
 /** @type {!Array<(string|{attribute: string, length: number, order: string, collate: string})>} */
sequelize.DefineIndexesOptions.prototype.fields;
 /** @type {string} */
sequelize.DefineIndexesOptions.prototype.using;
 /** @type {string} */
sequelize.DefineIndexesOptions.prototype.operator;
 /** @type {!sequelize.AnyWhereOptions} */
sequelize.DefineIndexesOptions.prototype.where;
/**
 * @record
 * @struct
 */
sequelize.DefineNameOptions = function() {};
 /** @type {string} */
sequelize.DefineNameOptions.prototype.singular;
 /** @type {string} */
sequelize.DefineNameOptions.prototype.plural;
/**
 * @record
 * @struct
 */
sequelize.DefineGetterMethodsOptions = function() {};

/* TODO: IndexSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.DefineSetterMethodsOptions = function() {};

/* TODO: IndexSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.DefineScopeOptions = function() {};

/* TODO: IndexSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.DefineOptions = function() {};
 /** @type {!sequelize.FindOptions<?>} */
sequelize.DefineOptions.prototype.defaultScope;
 /** @type {!sequelize.DefineScopeOptions} */
sequelize.DefineOptions.prototype.scopes;
 /** @type {boolean} */
sequelize.DefineOptions.prototype.omitNull;
 /** @type {boolean} */
sequelize.DefineOptions.prototype.timestamps;
 /** @type {boolean} */
sequelize.DefineOptions.prototype.paranoid;
 /** @type {boolean} */
sequelize.DefineOptions.prototype.underscored;
 /** @type {boolean} */
sequelize.DefineOptions.prototype.underscoredAll;
 /** @type {boolean} */
sequelize.DefineOptions.prototype.hasTrigger;
 /** @type {boolean} */
sequelize.DefineOptions.prototype.freezeTableName;
 /** @type {!sequelize.DefineNameOptions} */
sequelize.DefineOptions.prototype.name;
 /** @type {!Array<!sequelize.DefineIndexesOptions>} */
sequelize.DefineOptions.prototype.indexes;
 /** @type {(string|boolean)} */
sequelize.DefineOptions.prototype.createdAt;
 /** @type {(string|boolean)} */
sequelize.DefineOptions.prototype.deletedAt;
 /** @type {(string|boolean)} */
sequelize.DefineOptions.prototype.updatedAt;
 /** @type {string} */
sequelize.DefineOptions.prototype.tableName;
 /** @type {!sequelize.DefineGetterMethodsOptions} */
sequelize.DefineOptions.prototype.getterMethods;
 /** @type {!sequelize.DefineSetterMethodsOptions} */
sequelize.DefineOptions.prototype.setterMethods;
 /** @type {!Object} */
sequelize.DefineOptions.prototype.instanceMethods;
 /** @type {!Object} */
sequelize.DefineOptions.prototype.classMethods;
 /** @type {string} */
sequelize.DefineOptions.prototype.schema;
 /** @type {string} */
sequelize.DefineOptions.prototype.engine;
 /** @type {string} */
sequelize.DefineOptions.prototype.charset;
 /** @type {string} */
sequelize.DefineOptions.prototype.comment;
 /** @type {string} */
sequelize.DefineOptions.prototype.collate;
 /** @type {string} */
sequelize.DefineOptions.prototype.initialAutoIncrement;
 /** @type {!sequelize.HooksDefineOptions<TInstance>} */
sequelize.DefineOptions.prototype.hooks;
 /** @type {!sequelize.DefineValidateOptions} */
sequelize.DefineOptions.prototype.validate;
 /** @type {(string|boolean)} */
sequelize.DefineOptions.prototype.version;
/**
 * @record
 * @struct
 */
sequelize.SyncOptions = function() {};
 /** @type {boolean} */
sequelize.SyncOptions.prototype.force;
 /** @type {!RegExp} */
sequelize.SyncOptions.prototype.match;
 /** @type {(boolean|!Function)} */
sequelize.SyncOptions.prototype.logging;
 /** @type {string} */
sequelize.SyncOptions.prototype.schema;
 /** @type {boolean} */
sequelize.SyncOptions.prototype.alter;
 /** @type {boolean} */
sequelize.SyncOptions.prototype.hooks;
 /** @type {string} */
sequelize.SyncOptions.prototype.searchPath;
/**
 * @record
 * @struct
 */
sequelize.SetOptions = function() {};
/**
 * @record
 * @struct
 */
sequelize.PoolOptions = function() {};
 /** @type {number} */
sequelize.PoolOptions.prototype.max;
 /** @type {number} */
sequelize.PoolOptions.prototype.min;
 /** @type {number} */
sequelize.PoolOptions.prototype.idle;
 /** @type {function(?): boolean} */
sequelize.PoolOptions.prototype.validateConnection;
/**
 * @record
 * @struct
 */
sequelize.ReplicationOptions = function() {};
 /** @type {{host: string, port: (string|number), username: string, password: string, database: string}} */
sequelize.ReplicationOptions.prototype.read;
 /** @type {{host: string, port: (string|number), username: string, password: string, database: string}} */
sequelize.ReplicationOptions.prototype.write;
/**
 * @record
 * @struct
 */
sequelize.RetryOptions = function() {};
 /** @type {!Array<string>} */
sequelize.RetryOptions.prototype.match;
 /** @type {number} */
sequelize.RetryOptions.prototype.max;
/**
 * @record
 * @struct
 */
sequelize.Options = function() {};
 /** @type {string} */
sequelize.Options.prototype.dialect;
 /** @type {string} */
sequelize.Options.prototype.dialectModulePath;
 /** @type {!Object} */
sequelize.Options.prototype.dialectOptions;
 /** @type {string} */
sequelize.Options.prototype.storage;
 /** @type {string} */
sequelize.Options.prototype.host;
 /** @type {number} */
sequelize.Options.prototype.port;
 /** @type {string} */
sequelize.Options.prototype.protocol;
 /** @type {string} */
sequelize.Options.prototype.username;
 /** @type {string} */
sequelize.Options.prototype.password;
 /** @type {string} */
sequelize.Options.prototype.database;
 /** @type {!sequelize.DefineOptions<?>} */
sequelize.Options.prototype.define;
 /** @type {!sequelize.QueryOptions} */
sequelize.Options.prototype.query;
 /** @type {!sequelize.SetOptions} */
sequelize.Options.prototype.set;
 /** @type {!sequelize.SyncOptions} */
sequelize.Options.prototype.sync;
 /** @type {string} */
sequelize.Options.prototype.timezone;
 /** @type {(boolean|!Function)} */
sequelize.Options.prototype.logging;
 /** @type {boolean} */
sequelize.Options.prototype.omitNull;
 /** @type {boolean} */
sequelize.Options.prototype.native;
 /** @type {!sequelize.ReplicationOptions} */
sequelize.Options.prototype.replication;
 /** @type {!sequelize.RetryOptions} */
sequelize.Options.prototype.retry;
 /** @type {boolean} */
sequelize.Options.prototype.typeValidation;
 /** @type {!sequelize.PoolOptions} */
sequelize.Options.prototype.pool;
 /** @type {boolean} */
sequelize.Options.prototype.quoteIdentifiers;
 /** @type {string} */
sequelize.Options.prototype.isolationLevel;
 /** @type {string} */
sequelize.Options.prototype.transactionType;
 /** @type {boolean} */
sequelize.Options.prototype.benchmark;
/**
 * @extends {sequelize.Errors}
 * @record
 * @struct
 */
sequelize.SequelizeStaticAndInstance = function() {};
 /** @type {!sequelize.Utils} */
sequelize.SequelizeStaticAndInstance.prototype.Utils;
 /** @type {?} */
sequelize.SequelizeStaticAndInstance.prototype.Promise;
 /** @type {!sequelize.QueryTypes} */
sequelize.SequelizeStaticAndInstance.prototype.QueryTypes;
 /** @type {!sequelize.Validator} */
sequelize.SequelizeStaticAndInstance.prototype.Validator;
 /** @type {!sequelize.Model<?, ?>} */
sequelize.SequelizeStaticAndInstance.prototype.Model;
 /** @type {!sequelize.TransactionStatic} */
sequelize.SequelizeStaticAndInstance.prototype.Transaction;
 /** @type {!sequelize.Deferrable} */
sequelize.SequelizeStaticAndInstance.prototype.Deferrable;
 /** @type {!sequelize.Instance<?>} */
sequelize.SequelizeStaticAndInstance.prototype.Instance;

/**
 * Creates a object representing a database function. This can be used in search queries, both in where and
 * order parts, and as default values in column definitions. If you want to refer to columns in your
 * function, you should use `sequelize.col`, so that the columns are properly interpreted as columns and
 * not a strings.
 * 
 * Convert a user's username to upper case
 * ```js
 * instance.updateAttributes({
 *   username: self.sequelize.fn('upper', self.sequelize.col('username'))
 * })
 * ```
 * @param {string} fn The function you want to call
 * @param {...?} args All further arguments will be passed as arguments to the function
 * @return {!sequelize.fn}
 */
sequelize.SequelizeStaticAndInstance.prototype.fn = function(fn, args) {};

/**
 * Creates a object representing a column in the DB. This is often useful in conjunction with
 * `sequelize.fn`, since raw string arguments to fn will be escaped.
 * 
 * @param {string} col The name of the column
 * @return {!sequelize.col}
 */
sequelize.SequelizeStaticAndInstance.prototype.col = function(col) {};

/**
 * Creates a object representing a call to the cast function.
 * 
 * @param {?} val The value to cast
 * @param {string} type The type to cast it to
 * @return {!sequelize.cast}
 */
sequelize.SequelizeStaticAndInstance.prototype.cast = function(val, type) {};

/**
 * Creates a object representing a literal, i.e. something that will not be escaped.
 * 
 * @param {?} val
 * @return {!sequelize.literal}
 */
sequelize.SequelizeStaticAndInstance.prototype.literal = function(val) {};

/**
 * @param {?} val
 * @return {!sequelize.literal}
 */
sequelize.SequelizeStaticAndInstance.prototype.asIs = function(val) {};

/**
 * An AND query
 * 
 * @param {...(string|!Object)} args Each argument will be joined by AND
 * @return {!sequelize.and}
 */
sequelize.SequelizeStaticAndInstance.prototype.and = function(args) {};

/**
 * An OR query
 * 
 * @param {...(string|!Object)} args Each argument will be joined by OR
 * @return {!sequelize.or}
 */
sequelize.SequelizeStaticAndInstance.prototype.or = function(args) {};

/**
 * Creates an object representing nested where conditions for postgres's json data-type.
 * 
 * @param {(string|!Object)} conditionsOrPath A hash containing strings/numbers or other nested hash, a string using dot
 *     notation or a string using postgres json syntax.
 * @param {(string|number|boolean)=} value An optional value to compare against. Produces a string of the form "<json path> =
 *     '<value>'".
 * @return {!sequelize.json}
 */
sequelize.SequelizeStaticAndInstance.prototype.json = function(conditionsOrPath, value) {};

/**
 * A way of specifying attr = condition.
 * 
 * The attr can either be an object taken from `Model.rawAttributes` (for example `Model.rawAttributes.id`
 * or
 * `Model.rawAttributes.name`). The attribute should be defined in your model definition. The attribute can
 * also be an object from one of the sequelize utility functions (`sequelize.fn`, `sequelize.col` etc.)
 * 
 * For string attributes, use the regular `{ where: { attr: something }}` syntax. If you don't want your
 * string to be escaped, use `sequelize.literal`.
 * 
 * @param {!Object} attr The attribute, which can be either an attribute object from `Model.rawAttributes` or a
 *     sequelize object, for example an instance of `sequelize.fn`. For simple string attributes, use the
 *     POJO syntax
 * @param {string|(string|!Object)} comparator_or_logic Comparator
 * @param {(string|!Object)=} logic The condition. Can be both a simply type, or a further condition (`.or`, `.and`, `.literal`
 *     etc.)
 * @return {!sequelize.where}
 */
sequelize.SequelizeStaticAndInstance.prototype.where = function(attr, comparator_or_logic, logic) {};

/**
 * @param {!Object} attr
 * @param {(string|!Object)} logic
 * @return {!sequelize.where}
 */
sequelize.SequelizeStaticAndInstance.prototype.condition = function(attr, logic) {};
/**
 * @extends {sequelize.SequelizeStaticAndInstance}
 * @extends {sequelize.DataTypes}
 * @record
 * @struct
 */
sequelize.SequelizeStatic = function() {};

/* TODO: ConstructSignature: sequelize */

/* TODO: ConstructSignature: sequelize */

/* TODO: ConstructSignature: sequelize */

/* TODO: ConstructSignature: sequelize */
 /** @type {?} */
sequelize.SequelizeStatic.prototype.cls;
/**
 * @record
 * @struct
 */
sequelize.QueryOptionsTransactionRequired = function() {};
/**
 * @record
 * @struct
 */
sequelize.ModelsHashInterface = function() {};

/* TODO: IndexSignature: sequelize */
/**
 * @extends {sequelize.SequelizeStaticAndInstance}
 * @extends {sequelize.Hooks}
 * @record
 * @struct
 */
sequelize.Sequelize = function() {};
 /** @type {!sequelize.SequelizeStatic} */
sequelize.Sequelize.prototype.Sequelize;
 /** @type {!sequelize.ModelsHashInterface} */
sequelize.Sequelize.prototype.models;
 /** @type {!sequelize.Options} */
sequelize.Sequelize.prototype.options;

/**
 * Returns the specified dialect.
 * @return {string}
 */
sequelize.Sequelize.prototype.getDialect = function() {};

/**
 * Returns an instance of QueryInterface.
 * @return {!sequelize.QueryInterface}
 */
sequelize.Sequelize.prototype.getQueryInterface = function() {};

/**
 * Define a new model, representing a table in the DB.
 * 
 * The table columns are define by the hash that is given as the second argument. Each attribute of the
 * hash
 * represents a column. A short table definition might look like this:
 * 
 * ```js
 * sequelize.define('modelName', {
 *     columnA: {
 *         type: Sequelize.BOOLEAN,
 *         validate: {
 *           is: ["[a-z]",'i'],        // will only allow letters
 *           max: 23,                  // only allow values <= 23
 *           isIn: {
 *             args: [['en', 'zh']],
 *             msg: "Must be English or Chinese"
 *           }
 *         },
 *         field: 'column_a'
 *         // Other attributes here
 *     },
 *     columnB: Sequelize.STRING,
 *     columnC: 'MY VERY OWN COLUMN TYPE'
 * })
 * 
 * sequelize.models.modelName // The model will now be available in models under the name given to define
 * ```
 * 
 * As shown above, column definitions can be either strings, a reference to one of the datatypes that are
 * predefined on the Sequelize constructor, or an object that allows you to specify both the type of the
 * column, and other attributes such as default values, foreign key constraints and custom setters and
 * getters.
 * 
 * For a list of possible data types, see
 * http://docs.sequelizejs.com/en/latest/docs/models-definition/#data-types
 * 
 * For more about getters and setters, see
 * http://docs.sequelizejs.com/en/latest/docs/models-definition/#getters-setters
 * 
 * For more about instance and class methods, see
 * http://docs.sequelizejs.com/en/latest/docs/models-definition/#expansion-of-models
 * 
 * For more about validation, see
 * http://docs.sequelizejs.com/en/latest/docs/models-definition/#validations
 * 
 * @template TInstance, TAttributes
 * @param {string} modelName  The name of the model. The model will be stored in `sequelize.models` under this name
 * @param {!sequelize.DefineAttributes} attributes An object, where each attribute is a column of the table. Each column can be either a
 *                   DataType, a string or a type-description object, with the properties described below:
 * @param {!sequelize.DefineOptions<TInstance>=} options    These options are merged with the default define options provided to the Sequelize
 *                   constructor
 * @return {!sequelize.Model<TInstance, TAttributes>}
 */
sequelize.Sequelize.prototype.define = function(modelName, attributes, options) {};

/**
 * Fetch a Model which is already defined
 * 
 * @template TInstance, TAttributes
 * @param {string} modelName The name of a model defined with Sequelize.define
 * @return {!sequelize.Model<TInstance, TAttributes>}
 */
sequelize.Sequelize.prototype.model = function(modelName) {};

/**
 * Checks whether a model with the given name is defined
 * 
 * @param {string} modelName The name of a model defined with Sequelize.define
 * @return {boolean}
 */
sequelize.Sequelize.prototype.isDefined = function(modelName) {};

/**
 * Imports a model defined in another file
 * 
 * Imported models are cached, so multiple calls to import with the same path will not load the file
 * multiple times
 * 
 * See https://github.com/sequelize/sequelize/blob/master/examples/using-multiple-model-files/Task.js for a
 * short example of how to define your models in separate files so that they can be imported by
 * sequelize.import
 * 
 * @template TInstance, TAttributes
 * @param {string} path The path to the file that holds the model you want to import. If the part is relative, it
 *     will be resolved relatively to the calling file
 * 
 * @param {function(!sequelize.Sequelize, !sequelize.DataTypes): !sequelize.Model<TInstance, TAttributes>=} defineFunction An optional function that provides model definitions. Useful if you do not
 *     want to use the module root as the define function
 * @return {!sequelize.Model<TInstance, TAttributes>}
 */
sequelize.Sequelize.prototype.import = function(path, defineFunction) {};

/**
 * Execute a query on the DB, with the posibility to bypass all the sequelize goodness.
 * 
 * By default, the function will return two arguments: an array of results, and a metadata object,
 * containing number of affected rows etc. Use `.spread` to access the results.
 * 
 * If you are running a type of query where you don't need the metadata, for example a `SELECT` query, you
 * can pass in a query type to make sequelize format the results:
 * 
 * ```js
 * sequelize.query('SELECT...').spread(function (results, metadata) {
 *   // Raw query - use spread
 * });
 * 
 * sequelize.query('SELECT...', { type: sequelize.QueryTypes.SELECT }).then(function (results) {
 *   // SELECT query - use then
 * })
 * ```
 * 
 * @param {(string|{query: string, values: !Array<?>})} sql
 * @param {!sequelize.QueryOptions=} options Query options
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.query = function(sql, options) {};

/**
 * Execute a query which would set an environment or user variable. The variables are set per connection,
 * so this function needs a transaction.
 * 
 * Only works for MySQL.
 * 
 * @param {!Object} variables Object with multiple variables.
 * @param {!sequelize.QueryOptionsTransactionRequired} options Query options.
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.set = function(variables, options) {};

/**
 * Escape value.
 * 
 * @param {string} value Value that needs to be escaped
 * @return {string}
 */
sequelize.Sequelize.prototype.escape = function(value) {};

/**
 * Create a new database schema.
 * 
 * Note,that this is a schema in the
 * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
 * not a database table. In mysql and sqlite, this command will do nothing.
 * 
 * @param {string} schema Name of the schema
 * @param {{logging: (boolean|!Function)}} options Options supplied
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.createSchema = function(schema, options) {};

/**
 * Show all defined schemas
 * 
 * Note,that this is a schema in the
 * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
 * not a database table. In mysql and sqlite, this will show all tables.
 * 
 * @param {{logging: (boolean|!Function)}} options Options supplied
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.showAllSchemas = function(options) {};

/**
 * Drop a single schema
 * 
 * Note,that this is a schema in the
 * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
 * not a database table. In mysql and sqlite, this drop a table matching the schema name
 * 
 * @param {string} schema Name of the schema
 * @param {{logging: (boolean|!Function)}} options Options supplied
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.dropSchema = function(schema, options) {};

/**
 * Drop all schemas
 * 
 * Note,that this is a schema in the
 * [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
 * not a database table. In mysql and sqlite, this is the equivalent of drop all tables.
 * 
 * @param {{logging: (boolean|!Function)}} options Options supplied
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.dropAllSchemas = function(options) {};

/**
 * Sync all defined models to the DB.
 * 
 * @param {!sequelize.SyncOptions=} options Sync Options
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.sync = function(options) {};

/**
 * Truncate all tables defined through the sequelize models. This is done
 * by calling Model.truncate() on each model.
 * 
 * @param {!sequelize.DestroyOptions=} options
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.truncate = function(options) {};

/**
 * Drop all tables defined through this sequelize instance. This is done by calling Model.drop on each model
 * @see {Model#drop} for options
 * 
 * @param {!sequelize.DropOptions=} options The options passed to each call to Model.drop
 * @return {!Bluebird<?>}
 */
sequelize.Sequelize.prototype.drop = function(options) {};

/**
 * Test the connection by trying to authenticate
 * 
 * @param {!sequelize.QueryOptions=} options Query Options for authentication
 * @return {!Bluebird<void>}
 */
sequelize.Sequelize.prototype.authenticate = function(options) {};

/**
 * @param {!sequelize.QueryOptions=} options
 * @return {!Bluebird<!sequelize.ValidationError>}
 */
sequelize.Sequelize.prototype.validate = function(options) {};

/**
 * Start a transaction. When using transactions, you should pass the transaction in the options argument
 * in order for the query to happen under that transaction
 * 
 * ```js
 * sequelize.transaction().then(function (t) {
 *   return User.find(..., { transaction: t}).then(function (user) {
 *     return user.updateAttributes(..., { transaction: t});
 *   })
 *   .then(t.commit.bind(t))
 *   .catch(t.rollback.bind(t));
 * })
 * ```
 * 
 * A syntax for automatically committing or rolling back based on the promise chain resolution is also
 * supported:
 * 
 * ```js
 * sequelize.transaction(function (t) { // Note that we use a callback rather than a promise.then()
 *   return User.find(..., { transaction: t}).then(function (user) {
 *     return user.updateAttributes(..., { transaction: t});
 *   });
 * }).then(function () {
 *   // Commited
 * }).catch(function (err) {
 *   // Rolled back
 *   console.error(err);
 * });
 * ```
 * 
 * If you have [CLS](https://github.com/othiym23/node-continuation-local-storage) enabled, the transaction
 * will automatically be passed to any query that runs witin the callback. To enable CLS, add it do your
 * project, create a namespace and set it on the sequelize constructor:
 * 
 * ```js
 * var cls = require('continuation-local-storage'),
 *     ns = cls.createNamespace('....');
 * var Sequelize = require('sequelize');
 * Sequelize.cls = ns;
 * ```
 * Note, that CLS is enabled for all sequelize instances, and all instances will share the same namespace
 * 
 * @param {!sequelize.TransactionOptions|function(!sequelize.Transaction): !PromiseLike<?>=} options_or_autoCallback Transaction Options
 * @param {function(!sequelize.Transaction): !PromiseLike<?>=} autoCallback Callback for the transaction
 * @return {!Bluebird<?>|!Bluebird<!sequelize.Transaction>}
 */
sequelize.Sequelize.prototype.transaction = function(options_or_autoCallback, autoCallback) {};

/**
 * Close all connections used by this sequelize instance, and free all references so the instance can be
 * garbage collected.
 * 
 * Normally this is done on process exit, so you only need to call this method if you are creating multiple
 * instances, and want to garbage collect some of them.
 * @return {void}
 */
sequelize.Sequelize.prototype.close = function() {};

/**
 * Returns the database version
 * @return {!Bluebird<string>}
 */
sequelize.Sequelize.prototype.databaseVersion = function() {};
/**
 * @extends {ValidatorJS.ValidatorStatic}
 * @record
 * @struct
 */
sequelize.Validator = function() {};

/**
 * @param {string} str
 * @return {boolean}
 */
sequelize.Validator.prototype.notEmpty = function(str) {};

/**
 * @param {string} str
 * @param {number} min
 * @param {number} max
 * @return {boolean}
 */
sequelize.Validator.prototype.len = function(str, min, max) {};

/**
 * @param {string} str
 * @return {boolean}
 */
sequelize.Validator.prototype.isUrl = function(str) {};

/**
 * @param {string} str
 * @return {boolean}
 */
sequelize.Validator.prototype.isIPv6 = function(str) {};

/**
 * @param {string} str
 * @return {boolean}
 */
sequelize.Validator.prototype.isIPv4 = function(str) {};

/**
 * @param {string} str
 * @param {!Array<string>} values
 * @return {boolean}
 */
sequelize.Validator.prototype.notIn = function(str, values) {};

/**
 * @param {string} str
 * @param {string} pattern
 * @param {string} modifiers
 * @return {boolean}
 */
sequelize.Validator.prototype.regex = function(str, pattern, modifiers) {};

/**
 * @param {string} str
 * @param {string} pattern
 * @param {string} modifiers
 * @return {boolean}
 */
sequelize.Validator.prototype.notRegex = function(str, pattern, modifiers) {};

/**
 * @param {string} str
 * @return {boolean}
 */
sequelize.Validator.prototype.isDecimal = function(str) {};

/**
 * @param {string} str
 * @param {number} val
 * @return {boolean}
 */
sequelize.Validator.prototype.min = function(str, val) {};

/**
 * @param {string} str
 * @param {number} val
 * @return {boolean}
 */
sequelize.Validator.prototype.max = function(str, val) {};

/**
 * @param {string} str
 * @param {string} pattern
 * @param {string} modifiers
 * @return {boolean}
 */
sequelize.Validator.prototype.not = function(str, pattern, modifiers) {};

/**
 * @param {string} str
 * @param {!Array<string>} element
 * @return {boolean}
 */
sequelize.Validator.prototype.contains = function(str, element) {};

/**
 * @param {string} str
 * @param {!Array<string>} element
 * @return {boolean}
 */
sequelize.Validator.prototype.notContains = function(str, element) {};

/**
 * @param {string} str
 * @param {string} pattern
 * @param {string} modifiers
 * @return {boolean}
 */
sequelize.Validator.prototype.is = function(str, pattern, modifiers) {};
/**
 * @record
 * @struct
 */
sequelize.Transaction = function() {};
 /** @type {!sequelize.TransactionLock} */
sequelize.Transaction.prototype.LOCK;

/**
 * Commit the transaction
 * @return {!Bluebird<void>}
 */
sequelize.Transaction.prototype.commit = function() {};

/**
 * Rollback (abort) the transaction
 * @return {!Bluebird<void>}
 */
sequelize.Transaction.prototype.rollback = function() {};
/**
 * @record
 * @struct
 */
sequelize.TransactionStatic = function() {};
 /** @type {!sequelize.TransactionIsolationLevels} */
sequelize.TransactionStatic.prototype.ISOLATION_LEVELS;
 /** @type {!sequelize.TransactionTypes} */
sequelize.TransactionStatic.prototype.TYPES;
 /** @type {!sequelize.TransactionLock} */
sequelize.TransactionStatic.prototype.LOCK;
/**
 * @record
 * @struct
 */
sequelize.TransactionIsolationLevels = function() {};
 /** @type {string} */
sequelize.TransactionIsolationLevels.prototype.READ_UNCOMMITTED;
 /** @type {string} */
sequelize.TransactionIsolationLevels.prototype.READ_COMMITTED;
 /** @type {string} */
sequelize.TransactionIsolationLevels.prototype.REPEATABLE_READ;
 /** @type {string} */
sequelize.TransactionIsolationLevels.prototype.SERIALIZABLE;
/**
 * @record
 * @struct
 */
sequelize.TransactionTypes = function() {};
 /** @type {string} */
sequelize.TransactionTypes.prototype.DEFERRED;
 /** @type {string} */
sequelize.TransactionTypes.prototype.IMMEDIATE;
 /** @type {string} */
sequelize.TransactionTypes.prototype.EXCLUSIVE;
/**
 * @record
 * @struct
 */
sequelize.TransactionLock = function() {};
 /** @type {string} */
sequelize.TransactionLock.prototype.UPDATE;
 /** @type {string} */
sequelize.TransactionLock.prototype.SHARE;
 /** @type {string} */
sequelize.TransactionLock.prototype.KEY_SHARE;
 /** @type {string} */
sequelize.TransactionLock.prototype.NO_KEY_UPDATE;
/**
 * @record
 * @struct
 */
sequelize.TransactionOptions = function() {};
 /** @type {boolean} */
sequelize.TransactionOptions.prototype.autocommit;
 /** @type {string} */
sequelize.TransactionOptions.prototype.isolationLevel;
 /** @type {string} */
sequelize.TransactionOptions.prototype.type;
 /** @type {!Function} */
sequelize.TransactionOptions.prototype.logging;
/**
 * @record
 * @struct
 */
sequelize.fn = function() {};
 /** @type {!sequelize.fnStatic} */
sequelize.fn.prototype.clone;
/**
 * @record
 * @struct
 */
sequelize.fnStatic = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.col = function() {};
 /** @type {string} */
sequelize.col.prototype.col;
/**
 * @record
 * @struct
 */
sequelize.colStatic = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.cast = function() {};
 /** @type {?} */
sequelize.cast.prototype.val;
 /** @type {string} */
sequelize.cast.prototype.type;
/**
 * @record
 * @struct
 */
sequelize.castStatic = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.literal = function() {};
 /** @type {?} */
sequelize.literal.prototype.val;
/**
 * @record
 * @struct
 */
sequelize.literalStatic = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.and = function() {};
 /** @type {!Array<?>} */
sequelize.and.prototype.args;
/**
 * @record
 * @struct
 */
sequelize.andStatic = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.or = function() {};
 /** @type {!Array<?>} */
sequelize.or.prototype.args;
/**
 * @record
 * @struct
 */
sequelize.orStatic = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.json = function() {};
 /** @type {!Object} */
sequelize.json.prototype.conditions;
 /** @type {string} */
sequelize.json.prototype.path;
 /** @type {(string|number|boolean)} */
sequelize.json.prototype.value;
/**
 * @record
 * @struct
 */
sequelize.jsonStatic = function() {};

/* TODO: ConstructSignature: sequelize */
/**
 * @record
 * @struct
 */
sequelize.where = function() {};
 /** @type {!Object} */
sequelize.where.prototype.attribute;
 /** @type {string} */
sequelize.where.prototype.comparator;
 /** @type {(string|!Object)} */
sequelize.where.prototype.logic;
/**
 * @record
 * @struct
 */
sequelize.whereStatic = function() {};

/* TODO: ConstructSignature: sequelize */

/* TODO: ConstructSignature: sequelize */
/**
 * @extends {_.LoDashStatic}
 * @record
 * @struct
 */
sequelize.SequelizeLoDash = function() {};

/**
 * @param {string} str
 * @param {boolean} condition
 * @return {string}
 */
sequelize.SequelizeLoDash.prototype.camelizeIf = function(str, condition) {};

/**
 * @param {string} str
 * @param {boolean} condition
 * @return {string}
 */
sequelize.SequelizeLoDash.prototype.underscoredIf = function(str, condition) {};

/**
 * * Returns an array with some falsy values removed. The values null, "", undefined and NaN are considered
 * falsey.
 * 
 * @template T
 * @param {!Array<T>} arr Array to compact.
 * @return {!Array<T>}
 */
sequelize.SequelizeLoDash.prototype.compactLite = function(arr) {};

/**
 * @param {(string|!Array<string>)} dots
 * @param {!Object} value
 * @return {function(!Object): boolean}
 */
sequelize.SequelizeLoDash.prototype.matchesDots = function(dots, value) {};
/**
 * @record
 * @struct
 */
sequelize.Utils = function() {};
 /** @type {!sequelize.SequelizeLoDash} */
sequelize.Utils.prototype._;
 /** @type {?} */
sequelize.Utils.prototype.mergeDefaults;
 /** @type {!sequelize.fnStatic} */
sequelize.Utils.prototype.fn;
 /** @type {!sequelize.colStatic} */
sequelize.Utils.prototype.col;
 /** @type {!sequelize.castStatic} */
sequelize.Utils.prototype.cast;
 /** @type {!sequelize.literalStatic} */
sequelize.Utils.prototype.literal;
 /** @type {!sequelize.andStatic} */
sequelize.Utils.prototype.and;
 /** @type {!sequelize.orStatic} */
sequelize.Utils.prototype.or;
 /** @type {!sequelize.jsonStatic} */
sequelize.Utils.prototype.json;
 /** @type {!sequelize.whereStatic} */
sequelize.Utils.prototype.where;
 /** @type {?} */
sequelize.Utils.prototype.Promise;

/**
 * @param {string} str
 * @return {string}
 */
sequelize.Utils.prototype.lowercaseFirst = function(str) {};

/**
 * @param {string} str
 * @return {string}
 */
sequelize.Utils.prototype.uppercaseFirst = function(str) {};

/**
 * @param {string} str
 * @param {number} index
 * @param {number} count
 * @param {string} add
 * @return {string}
 */
sequelize.Utils.prototype.spliceStr = function(str, index, count, add) {};

/**
 * @param {string} str
 * @return {string}
 */
sequelize.Utils.prototype.camelize = function(str) {};

/**
 * @param {!Array<?>} arr
 * @param {string=} dialect
 * @return {string}
 */
sequelize.Utils.prototype.format = function(arr, dialect) {};

/**
 * @param {string} sql
 * @param {?} parameters
 * @param {string=} dialect
 * @return {string}
 */
sequelize.Utils.prototype.formatNamedParameters = function(sql, parameters, dialect) {};

/**
 * @template T
 * @param {T} obj
 * @param {function(T): ?=} fn
 * @return {T}
 */
sequelize.Utils.prototype.cloneDeep = function(obj, fn) {};

/**
 * @template T
 * @param {T} options
 * @param {!sequelize.Model<?, ?>} Model
 * @return {T}
 */
sequelize.Utils.prototype.mapOptionFieldNames = function(options, Model) {};

/**
 * @param {!Object} dataValues
 * @param {!Array<string>} fields
 * @param {!sequelize.Model<?, ?>} Model
 * @return {!Object}
 */
sequelize.Utils.prototype.mapValueFieldNames = function(dataValues, fields, Model) {};

/**
 * @param {!Array<?>} args
 * @param {!Object} primaryKeys
 * @return {boolean}
 */
sequelize.Utils.prototype.argsArePrimaryKeys = function(args, primaryKeys) {};

/**
 * @param {!Array<?>} arr
 * @return {boolean}
 */
sequelize.Utils.prototype.canTreatArrayAsAnd = function(arr) {};

/**
 * @param {string} tableName1
 * @param {string} tableName2
 * @return {string}
 */
sequelize.Utils.prototype.combineTableNames = function(tableName1, tableName2) {};

/**
 * @param {string} s
 * @return {string}
 */
sequelize.Utils.prototype.singularize = function(s) {};

/**
 * @param {string} s
 * @return {string}
 */
sequelize.Utils.prototype.pluralize = function(s) {};

/**
 * @param {string} s
 * @return {string}
 */
sequelize.Utils.prototype.removeCommentsFromFunctionString = function(s) {};

/**
 * @param {!sequelize.DataTypeAbstract|function(): !sequelize.DataTypeAbstract} value
 * @return {?}
 */
sequelize.Utils.prototype.toDefaultValue = function(value) {};

/**
 * Determine if the default value provided exists and can be described
 * in a db schema using the DEFAULT directive.
 * @param {?} value
 * @return {boolean}
 */
sequelize.Utils.prototype.defaultValueSchemable = function(value) {};

/**
 * @param {!Object} hash
 * @param {boolean=} omitNull
 * @param {!Object=} options
 * @return {?}
 */
sequelize.Utils.prototype.removeNullValuesFromHash = function(hash, omitNull, options) {};

/**
 * @param {!Object} subClass
 * @param {!Object} superClass
 * @return {!Object}
 */
sequelize.Utils.prototype.inherit = function(subClass, superClass) {};

/**
 * @return {string}
 */
sequelize.Utils.prototype.stack = function() {};

/**
 * @param {!Array<?>} args
 * @param {number=} begin
 * @return {!Array<?>}
 */
sequelize.Utils.prototype.sliceArgs = function(args, begin) {};

/**
 * @param {string} dialect
 * @return {!Date}
 */
sequelize.Utils.prototype.now = function(dialect) {};

/**
 * @param {!Function} f
 * @return {void}
 */
sequelize.Utils.prototype.tick = function(f) {};

/**
 * @param {string} s
 * @param {string=} tickChar
 * @return {string}
 */
sequelize.Utils.prototype.addTicks = function(s, tickChar) {};

/**
 * @param {string} s
 * @param {string=} tickChar
 * @return {string}
 */
sequelize.Utils.prototype.removeTicks = function(s, tickChar) {};

/**
 * @param {!Object} value
 * @param {!Object} expectation
 * @param {!Object=} options
 * @return {boolean}
 */
sequelize.Utils.prototype.validateParameter = function(value, expectation, options) {};

/**
 * @param {!Object} obj
 * @return {!Object}
 */
sequelize.Utils.prototype.formatReferences = function(obj) {};
 /** @type {!sequelize.SequelizeStatic} */
var sequelize;

/* TODO: ExportAssignment in  */
