/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/usb/index.d.ts:
/**
 * @constructor
 * @struct
 */
function Device() {}
 /** @type {number} */
Device.prototype.timeout;
 /** @type {number} */
Device.prototype.busNumber;
 /** @type {number} */
Device.prototype.deviceAddress;
 /** @type {!Array<number>} */
Device.prototype.portNumbers;
 /** @type {?} */
Device.prototype.deviceDescriptor;
 /** @type {?} */
Device.prototype.configDescriptor;
 /** @type {!Array<?>} */
Device.prototype.interfaces;

/**
 * @return {void}
 */
Device.prototype.__open = function() {};

/**
 * @param {number} addr
 * @return {void}
 */
Device.prototype.__claimInterface = function(addr) {};

/**
 * @param {boolean=} defaultConfig
 * @return {void}
 */
Device.prototype.open = function(defaultConfig) {};

/**
 * @return {void}
 */
Device.prototype.close = function() {};

/**
 * @param {number} addr
 * @return {?}
 */
Device.prototype.interface = function(addr) {};

/**
 * @param {number} bmRequestType
 * @param {number} bRequest
 * @param {number} wValue
 * @param {number} wIndex
 * @param {?} data_or_length
 * @param {?} callback
 * @return {?}
 */
Device.prototype.controlTransfer = function(bmRequestType, bRequest, wValue, wIndex, data_or_length, callback) {};

/**
 * @param {number} desc_index
 * @param {?} callback
 * @return {void}
 */
Device.prototype.getStringDescriptor = function(desc_index, callback) {};

/**
 * @param {number} desired
 * @param {?} cb
 * @return {void}
 */
Device.prototype.setConfiguration = function(desired, cb) {};

/**
 * @param {?} callback
 * @return {void}
 */
Device.prototype.reset = function(callback) {};
/**
 * @constructor
 * @struct
 */
function DeviceDescriptor() {}
 /** @type {number} */
DeviceDescriptor.prototype.bLength;
 /** @type {number} */
DeviceDescriptor.prototype.bDescriptorType;
 /** @type {number} */
DeviceDescriptor.prototype.bcdUSB;
 /** @type {number} */
DeviceDescriptor.prototype.bDeviceClass;
 /** @type {number} */
DeviceDescriptor.prototype.bDeviceSubClass;
 /** @type {number} */
DeviceDescriptor.prototype.bDeviceProtocol;
 /** @type {number} */
DeviceDescriptor.prototype.bMaxPacketSize;
 /** @type {number} */
DeviceDescriptor.prototype.idVendor;
 /** @type {number} */
DeviceDescriptor.prototype.idProduct;
 /** @type {number} */
DeviceDescriptor.prototype.bcdDevice;
 /** @type {number} */
DeviceDescriptor.prototype.iManufacturer;
 /** @type {number} */
DeviceDescriptor.prototype.iProduct;
 /** @type {number} */
DeviceDescriptor.prototype.iSerialNumber;
 /** @type {number} */
DeviceDescriptor.prototype.bNumConfigurations;
/**
 * @constructor
 * @struct
 */
function ConfigDescriptor() {}
 /** @type {number} */
ConfigDescriptor.prototype.bLength;
 /** @type {number} */
ConfigDescriptor.prototype.bDescriptorType;
 /** @type {number} */
ConfigDescriptor.prototype.wTotalLength;
 /** @type {number} */
ConfigDescriptor.prototype.bNumInterfaces;
 /** @type {number} */
ConfigDescriptor.prototype.bConfigurationValue;
 /** @type {number} */
ConfigDescriptor.prototype.iConfiguration;
 /** @type {number} */
ConfigDescriptor.prototype.bmAttributes;
 /** @type {number} */
ConfigDescriptor.prototype.bMaxPower;
 /** @type {?} */
ConfigDescriptor.prototype.extra;

/**
 * @constructor
 * @struct
 * @param {?} device
 * @param {number} id
 */
function Interface(device, id) {}
 /** @type {?} */
Interface.prototype.descriptor;
 /** @type {!Array<?>} */
Interface.prototype.endpoints;

/**
 * @return {void}
 */
Interface.prototype.claim = function() {};

/**
 * @param {?=} closeEndpoints
 * @param {?=} cb
 * @return {void}
 */
Interface.prototype.release = function(closeEndpoints, cb) {};

/**
 * @return {boolean}
 */
Interface.prototype.isKernelDriverActive = function() {};

/**
 * @return {number}
 */
Interface.prototype.detachKernelDriver = function() {};

/**
 * @return {number}
 */
Interface.prototype.attachKernelDriver = function() {};

/**
 * @param {number} altSetting
 * @param {?} cb
 * @return {void}
 */
Interface.prototype.setAltSetting = function(altSetting, cb) {};

/**
 * @param {number} addr
 * @return {?}
 */
Interface.prototype.endpoint = function(addr) {};
/**
 * @constructor
 * @struct
 */
function InterfaceDescriptor() {}
 /** @type {number} */
InterfaceDescriptor.prototype.bLength;
 /** @type {number} */
InterfaceDescriptor.prototype.bDescriptorType;
 /** @type {number} */
InterfaceDescriptor.prototype.bInterfaceNumber;
 /** @type {number} */
InterfaceDescriptor.prototype.bAlternateSetting;
 /** @type {number} */
InterfaceDescriptor.prototype.bNumEndpoints;
 /** @type {number} */
InterfaceDescriptor.prototype.bInterfaceClass;
 /** @type {number} */
InterfaceDescriptor.prototype.bInterfaceSubClass;
 /** @type {number} */
InterfaceDescriptor.prototype.bInterfaceProtocol;
 /** @type {number} */
InterfaceDescriptor.prototype.iInterface;
 /** @type {?} */
InterfaceDescriptor.prototype.extra;
/**
 * @record
 * @struct
 */
function Endpoint() {}
 /** @type {string} */
Endpoint.prototype.direction;
 /** @type {number} */
Endpoint.prototype.transferType;
 /** @type {number} */
Endpoint.prototype.timeout;
 /** @type {?} */
Endpoint.prototype.descriptor;

/**
 * @constructor
 * @struct
 * @param {?} device
 * @param {?} descriptor
 */
function InEndpoint(device, descriptor) {}
 /** @type {string} */
InEndpoint.prototype.direction;
 /** @type {number} */
InEndpoint.prototype.transferType;
 /** @type {number} */
InEndpoint.prototype.timeout;
 /** @type {?} */
InEndpoint.prototype.descriptor;

/**
 * @param {number} length
 * @param {?} callback
 * @return {?}
 */
InEndpoint.prototype.transfer = function(length, callback) {};

/**
 * @param {number} nTransfers
 * @param {number} transferSize
 * @return {void}
 */
InEndpoint.prototype.startPoll = function(nTransfers, transferSize) {};

/**
 * @param {?} cb
 * @return {void}
 */
InEndpoint.prototype.stopPoll = function(cb) {};

/**
 * @constructor
 * @struct
 * @param {?} device
 * @param {?} descriptor
 */
function OutEndpoint(device, descriptor) {}
 /** @type {string} */
OutEndpoint.prototype.direction;
 /** @type {number} */
OutEndpoint.prototype.transferType;
 /** @type {number} */
OutEndpoint.prototype.timeout;
 /** @type {?} */
OutEndpoint.prototype.descriptor;

/**
 * @param {?} buffer
 * @param {?} cb
 * @return {?}
 */
OutEndpoint.prototype.transfer = function(buffer, cb) {};

/**
 * @param {?} buf
 * @param {?} cb
 * @return {void}
 */
OutEndpoint.prototype.transferWithZLP = function(buf, cb) {};
/**
 * @constructor
 * @struct
 */
function EndpointDescriptor() {}
 /** @type {number} */
EndpointDescriptor.prototype.bLength;
 /** @type {number} */
EndpointDescriptor.prototype.bDescriptorType;
 /** @type {number} */
EndpointDescriptor.prototype.bEndpointAddress;
 /** @type {number} */
EndpointDescriptor.prototype.bmAttributes;
 /** @type {number} */
EndpointDescriptor.prototype.wMaxPacketSize;
 /** @type {number} */
EndpointDescriptor.prototype.bInterval;
 /** @type {number} */
EndpointDescriptor.prototype.bRefresh;
 /** @type {number} */
EndpointDescriptor.prototype.bSynchAddress;

/**
 * @param {number} vid
 * @param {number} pid
 * @return {?}
 */
function findByIds(vid, pid) {}

/**
 * @param {string} event
 * @param {?} callback
 * @return {void}
 */
function on(event, callback) {}

/**
 * @return {!Array<?>}
 */
function getDeviceList() {}

/**
 * @param {number} level
 * @return {void}
 */
function setDebugLevel(level) {}
 /** @type {number} */
var LIBUSB_CLASS_PER_INTERFACE;
 /** @type {number} */
var LIBUSB_CLASS_AUDIO;
 /** @type {number} */
var LIBUSB_CLASS_COMM;
 /** @type {number} */
var LIBUSB_CLASS_HID;
 /** @type {number} */
var LIBUSB_CLASS_PRINTER;
 /** @type {number} */
var LIBUSB_CLASS_PTP;
 /** @type {number} */
var LIBUSB_CLASS_MASS_STORAGE;
 /** @type {number} */
var LIBUSB_CLASS_HUB;
 /** @type {number} */
var LIBUSB_CLASS_DATA;
 /** @type {number} */
var LIBUSB_CLASS_WIRELESS;
 /** @type {number} */
var LIBUSB_CLASS_APPLICATION;
 /** @type {number} */
var LIBUSB_CLASS_VENDOR_SPEC;
 /** @type {number} */
var LIBUSB_REQUEST_GET_STATUS;
 /** @type {number} */
var LIBUSB_REQUEST_CLEAR_FEATURE;
 /** @type {number} */
var LIBUSB_REQUEST_SET_FEATURE;
 /** @type {number} */
var LIBUSB_REQUEST_SET_ADDRESS;
 /** @type {number} */
var LIBUSB_REQUEST_GET_DESCRIPTOR;
 /** @type {number} */
var LIBUSB_REQUEST_SET_DESCRIPTOR;
 /** @type {number} */
var LIBUSB_REQUEST_GET_CONFIGURATION;
 /** @type {number} */
var LIBUSB_REQUEST_SET_CONFIGURATION;
 /** @type {number} */
var LIBUSB_REQUEST_GET_INTERFACE;
 /** @type {number} */
var LIBUSB_REQUEST_SET_INTERFACE;
 /** @type {number} */
var LIBUSB_REQUEST_SYNCH_FRAME;
 /** @type {number} */
var LIBUSB_DT_DEVICE;
 /** @type {number} */
var LIBUSB_DT_CONFIG;
 /** @type {number} */
var LIBUSB_DT_STRING;
 /** @type {number} */
var LIBUSB_DT_INTERFACE;
 /** @type {number} */
var LIBUSB_DT_ENDPOINT;
 /** @type {number} */
var LIBUSB_DT_HID;
 /** @type {number} */
var LIBUSB_DT_REPORT;
 /** @type {number} */
var LIBUSB_DT_PHYSICAL;
 /** @type {number} */
var LIBUSB_DT_HUB;
 /** @type {number} */
var LIBUSB_ENDPOINT_IN;
 /** @type {number} */
var LIBUSB_ENDPOINT_OUT;
 /** @type {number} */
var LIBUSB_TRANSFER_TYPE_CONTROL;
 /** @type {number} */
var LIBUSB_TRANSFER_TYPE_ISOCHRONOUS;
 /** @type {number} */
var LIBUSB_TRANSFER_TYPE_BULK;
 /** @type {number} */
var LIBUSB_TRANSFER_TYPE_INTERRUPT;
 /** @type {number} */
var LIBUSB_ISO_SYNC_TYPE_NONE;
 /** @type {number} */
var LIBUSB_ISO_SYNC_TYPE_ASYNC;
 /** @type {number} */
var LIBUSB_ISO_SYNC_TYPE_ADAPTIVE;
 /** @type {number} */
var LIBUSB_ISO_SYNC_TYPE_SYNC;
 /** @type {number} */
var LIBUSB_ISO_USAGE_TYPE_DATA;
 /** @type {number} */
var LIBUSB_ISO_USAGE_TYPE_FEEDBACK;
 /** @type {number} */
var LIBUSB_ISO_USAGE_TYPE_IMPLICIT;
 /** @type {number} */
var LIBUSB_TRANSFER_COMPLETED;
 /** @type {number} */
var LIBUSB_TRANSFER_ERROR;
 /** @type {number} */
var LIBUSB_TRANSFER_TIMED_OUT;
 /** @type {number} */
var LIBUSB_TRANSFER_CANCELLED;
 /** @type {number} */
var LIBUSB_TRANSFER_STALL;
 /** @type {number} */
var LIBUSB_TRANSFER_NO_DEVICE;
 /** @type {number} */
var LIBUSB_TRANSFER_OVERFLOW;
 /** @type {number} */
var LIBUSB_TRANSFER_SHORT_NOT_OK;
 /** @type {number} */
var LIBUSB_TRANSFER_FREE_BUFFER;
 /** @type {number} */
var LIBUSB_TRANSFER_FREE_TRANSFER;
 /** @type {number} */
var LIBUSB_REQUEST_TYPE_STANDARD;
 /** @type {number} */
var LIBUSB_REQUEST_TYPE_CLASS;
 /** @type {number} */
var LIBUSB_REQUEST_TYPE_VENDOR;
 /** @type {number} */
var LIBUSB_REQUEST_TYPE_RESERVED;
 /** @type {number} */
var LIBUSB_RECIPIENT_DEVICE;
 /** @type {number} */
var LIBUSB_RECIPIENT_INTERFACE;
 /** @type {number} */
var LIBUSB_RECIPIENT_ENDPOINT;
 /** @type {number} */
var LIBUSB_RECIPIENT_OTHER;
 /** @type {number} */
var LIBUSB_CONTROL_SETUP_SIZE;
 /** @type {number} */
var LIBUSB_ERROR_IO;
 /** @type {number} */
var LIBUSB_ERROR_INVALID_PARAM;
 /** @type {number} */
var LIBUSB_ERROR_ACCESS;
 /** @type {number} */
var LIBUSB_ERROR_NO_DEVICE;
 /** @type {number} */
var LIBUSB_ERROR_NOT_FOUND;
 /** @type {number} */
var LIBUSB_ERROR_BUSY;
 /** @type {number} */
var LIBUSB_ERROR_TIMEOUT;
 /** @type {number} */
var LIBUSB_ERROR_OVERFLOW;
 /** @type {number} */
var LIBUSB_ERROR_PIPE;
 /** @type {number} */
var LIBUSB_ERROR_INTERRUPTED;
 /** @type {number} */
var LIBUSB_ERROR_NO_MEM;
 /** @type {number} */
var LIBUSB_ERROR_NOT_SUPPORTED;
 /** @type {number} */
var LIBUSB_ERROR_OTHER;
