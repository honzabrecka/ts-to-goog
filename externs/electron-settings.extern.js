/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/electron-settings/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var SettingsHandler;
/**
 * @record
 * @struct
 */
function JsonObject() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function JsonArray() {}

/** @typedef {(string|number|boolean|?)} */
var JsonValue;
/**
 * @record
 * @struct
 */
function SettingsOptions() {}
 /** @type {boolean} */
SettingsOptions.prototype.prettify;
/**
 * @record
 * @struct
 */
function Settings() {}

/**
 * Returns a boolean indicating whether the settings object contains the
 * given key path.
 * @param {string} keyPath
 * @return {boolean}
 */
Settings.prototype.has = function(keyPath) {};

/**
 * Sets the value at the given key path and returns the Settings instance.
 * Chainable.
 * @see #setAll
 * @param {string} keyPath The path to the key whose value we wish to set. This key
 *                need not already exist.
 * @param {(string|number|boolean|?)} value   The value to set the key at the chosen key path to. This
 *                must be a data type supported by JSON.
 * @param {?=} options
 * @return {?}
 */
Settings.prototype.set = function(keyPath, value, options) {};

/**
 * Sets all settings and returns the Settings instance. Chainable.
 * @see #set
 * @param {(string|number|boolean|?)} obj The new settings object.
 * @param {?=} options
 * @return {?}
 */
Settings.prototype.setAll = function(obj, options) {};

/**
 * Returns the value at the given key path, or sets the value at that key
 * path to the default value, if provided, if the key does not exist.
 * @see #getAll
 * @param {string} keyPath
 * @param {?=} defaultValue The value to apply if the setting does not already
 *                     exist.
 * @return {(string|number|boolean|?)}
 */
Settings.prototype.get = function(keyPath, defaultValue) {};

/**
 * Returns all settings.
 * @see #get
 * @return {(string|number|boolean|?)}
 */
Settings.prototype.getAll = function() {};

/**
 * Deletes the key and value at the given key path and returns the Settings
 * instance. Chainable.
 * @see #deleteAll
 * @param {string} keyPath
 * @param {?=} options
 * @return {?}
 */
Settings.prototype.delete = function(keyPath, options) {};

/**
 * Deletes all settings and returns the Settings instance. Chainable.
 * @see #delete
 * @param {?=} options
 * @return {?}
 */
Settings.prototype.deleteAll = function(options) {};

/**
 * Returns an Observer instance which watches the given key path for changes
 * and calls the given handler if the value changes. To unsubscribe from
 * changes, call observer.dispose().
 * @param {string} keyPath The path to the key that we wish to watch for changes.
 * @param {?} handler The callback that will be invoked if the value at the
 *                chosen key path changes. The context of this callback is
 *                that of the observer instance.
 * @return {?}
 */
Settings.prototype.watch = function(keyPath, handler) {};

/**
 * Returns the absolute path to where the settings file is or will be
 * stored.
 * 
 * In general, the settings file is stored in your app's user data directory
 * in a file called Settings. The default user data directory for your
 * system can be found below.
 * 
 * * MacOS: If you're running macOS, your app's default user data directory
 *   is `~/Library/Application\ Support/<Your App>`.
 * * Windows: If you're running Windows, your app's default user data
 *   directory is `%APPDATA%/<Your App>`.
 * * Linux: If you're running Linux, your app's default user data directory
 *   is either `$XDG_CONFIG_HOME/<Your App>` or `~/.config/<Your App>`.
 * 
 * If you wish, you may change your app's default user data directory by
 * calling Electron's `app.setPath()` method before the ready event of the
 * app module is emitted, but this is not recommended, as it will likely
 * cause unintended consequences.
 * @return {string}
 */
Settings.prototype.file = function() {};
/**
 * @record
 * @struct
 */
function SettingsObserver() {}

/**
 * Disposes of this Observer instance.
 * @return {void}
 */
SettingsObserver.prototype.dispose = function() {};
 /** @type {?} */
var settings;

/* TODO: ExportAssignment in  */
