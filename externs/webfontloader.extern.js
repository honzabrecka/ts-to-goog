/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/webfontloader/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var WebFont = {};

/**
 * @param {!WebFont.Config} config
 * @return {void}
 */
WebFont.load = function(config) {};
/**
 * @record
 * @struct
 */
WebFont.Config = function() {};
 /** @type {boolean} */
WebFont.Config.prototype.classes;
 /** @type {boolean} */
WebFont.Config.prototype.events;
 /** @type {number} */
WebFont.Config.prototype.timeout;
 /** @type {!Array<string>} */
WebFont.Config.prototype.context;
 /** @type {!WebFont.Custom} */
WebFont.Config.prototype.custom;
 /** @type {!WebFont.Google} */
WebFont.Config.prototype.google;
 /** @type {!WebFont.Typekit} */
WebFont.Config.prototype.typekit;
 /** @type {!WebFont.Fontdeck} */
WebFont.Config.prototype.fontdeck;
 /** @type {!WebFont.Monotype} */
WebFont.Config.prototype.monotype;

/**
 * This event is triggered when all fonts have been requested.
 * @return {void}
 */
WebFont.Config.prototype.loading = function() {};

/**
 * This event is triggered when the fonts have rendered.
 * @return {void}
 */
WebFont.Config.prototype.active = function() {};

/**
 * This event is triggered when the browser does not support linked fonts or if none of the fonts could be loaded.
 * @return {void}
 */
WebFont.Config.prototype.inactive = function() {};

/**
 * This event is triggered once for each font that's loaded.
 * @param {string} familyName
 * @param {string} fvd
 * @return {void}
 */
WebFont.Config.prototype.fontloading = function(familyName, fvd) {};

/**
 * This event is triggered once for each font that renders.
 * @param {string} familyName
 * @param {string} fvd
 * @return {void}
 */
WebFont.Config.prototype.fontactive = function(familyName, fvd) {};

/**
 * This event is triggered if the font can't be loaded.
 * @param {string} familyName
 * @param {string} fvd
 * @return {void}
 */
WebFont.Config.prototype.fontinactive = function(familyName, fvd) {};
/**
 * @record
 * @struct
 */
WebFont.Google = function() {};
 /** @type {!Array<string>} */
WebFont.Google.prototype.families;
 /** @type {string} */
WebFont.Google.prototype.text;
/**
 * @record
 * @struct
 */
WebFont.Typekit = function() {};
 /** @type {string} */
WebFont.Typekit.prototype.id;
/**
 * @record
 * @struct
 */
WebFont.Custom = function() {};
 /** @type {!Array<string>} */
WebFont.Custom.prototype.families;
 /** @type {!Array<string>} */
WebFont.Custom.prototype.urls;
 /** @type {!Object<string,string>} */
WebFont.Custom.prototype.testStrings;
/**
 * @record
 * @struct
 */
WebFont.Fontdeck = function() {};
 /** @type {string} */
WebFont.Fontdeck.prototype.id;
/**
 * @record
 * @struct
 */
WebFont.Monotype = function() {};
 /** @type {string} */
WebFont.Monotype.prototype.projectId;
 /** @type {number} */
WebFont.Monotype.prototype.version;
