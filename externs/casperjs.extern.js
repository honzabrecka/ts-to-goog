/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/casperjs/index.d.ts:

/**
 * @param {?=} options
 * @return {?}
 */
function create(options) {}

/**
 * @param {string} expression
 * @return {!Object}
 */
function selectXPath(expression) {}

/**
 * @constructor
 * @struct
 * @param {?} options
 */
function Casper(options) {}
 /** @type {?} */
Casper.prototype.test;
 /** @type {?} */
Casper.prototype.options;
 /** @type {?} */
Casper.prototype.__utils__;

/**
 * @return {?}
 */
Casper.prototype.back = function() {};

/**
 * @param {string} url
 * @param {string=} method
 * @param {?=} data
 * @return {string}
 */
Casper.prototype.base64encode = function(url, method, data) {};

/**
 * @param {number} nb
 * @return {?}
 */
Casper.prototype.bypass = function(nb) {};

/**
 * @param {string} selector
 * @return {boolean}
 */
Casper.prototype.click = function(selector) {};

/**
 * @param {string} label
 * @param {string=} tag
 * @return {boolean}
 */
Casper.prototype.clickLabel = function(label, tag) {};

/**
 * @param {string} targetFilePath
 * @param {!ClipRect} clipRect
 * @return {?}
 */
Casper.prototype.capture = function(targetFilePath, clipRect) {};

/**
 * @param {string} format
 * @param {string|!ClipRect|?=} area
 * @return {string}
 */
Casper.prototype.captureBase64 = function(format, area) {};

/**
 * @param {string} targetFile
 * @param {string} selector
 * @return {?}
 */
Casper.prototype.captureSelector = function(targetFile, selector) {};

/**
 * @return {?}
 */
Casper.prototype.clear = function() {};

/**
 * @param {string=} selector
 * @param {boolean=} outer
 * @return {?}
 */
Casper.prototype.debugHTML = function(selector, outer) {};

/**
 * @return {?}
 */
Casper.prototype.debugPage = function() {};

/**
 * @param {string} message
 * @param {number=} status
 * @return {?}
 */
Casper.prototype.die = function(message, status) {};

/**
 * @param {string} url
 * @param {string=} target
 * @param {string=} method
 * @param {?=} data
 * @return {?}
 */
Casper.prototype.download = function(url, target, method, data) {};

/**
 * @template T
 * @param {!Array<?>} array
 * @param {?} fn
 * @return {?}
 */
Casper.prototype.each = function(array, fn) {};

/**
 * @param {string} message
 * @param {string=} style
 * @return {?}
 */
Casper.prototype.echo = function(message, style) {};

/**
 * @template T
 * @param {?} fn
 * @param {...?} args
 * @return {?}
 */
Casper.prototype.evaluate = function(fn, args) {};

/**
 * @param {?} fn
 * @param {string=} message
 * @param {number=} status
 * @return {?}
 */
Casper.prototype.evaluateOrDie = function(fn, message, status) {};

/**
 * @param {number=} status
 * @return {?}
 */
Casper.prototype.exit = function(status) {};

/**
 * @param {string} selector
 * @return {boolean}
 */
Casper.prototype.exists = function(selector) {};

/**
 * @param {string} selector
 * @return {string}
 */
Casper.prototype.fetchText = function(selector) {};

/**
 * @return {?}
 */
Casper.prototype.forward = function() {};

/**
 * @param {string} message
 * @param {string=} level
 * @param {string=} space
 * @return {?}
 */
Casper.prototype.log = function(message, level, space) {};

/**
 * @param {string} selector
 * @param {?} values
 * @param {boolean=} submit
 * @return {void}
 */
Casper.prototype.fill = function(selector, values, submit) {};

/**
 * @param {string} selector
 * @param {?} values
 * @param {boolean=} submit
 * @return {void}
 */
Casper.prototype.fillSelectors = function(selector, values, submit) {};

/**
 * @param {string} selector
 * @param {?} values
 * @param {boolean=} submit
 * @return {void}
 */
Casper.prototype.fillXPath = function(selector, values, submit) {};

/**
 * @return {string}
 */
Casper.prototype.getCurrentUrl = function() {};

/**
 * @param {string} selector
 * @param {string} attribute
 * @return {string}
 */
Casper.prototype.getElementAttribute = function(selector, attribute) {};

/**
 * @param {string} selector
 * @param {string} attribute
 * @return {string}
 */
Casper.prototype.getElementsAttribute = function(selector, attribute) {};

/**
 * @param {string} selector
 * @return {?}
 */
Casper.prototype.getElementBounds = function(selector) {};

/**
 * @param {string} selector
 * @return {!Array<?>}
 */
Casper.prototype.getElementsBounds = function(selector) {};

/**
 * @param {string} selector
 * @return {?}
 */
Casper.prototype.getElementInfo = function(selector) {};

/**
 * @param {string} selector
 * @return {?}
 */
Casper.prototype.getElementsInfo = function(selector) {};

/**
 * @param {string} selector
 * @return {?}
 */
Casper.prototype.getFormValues = function(selector) {};

/**
 * @param {string} name
 * @return {?}
 */
Casper.prototype.getGlobal = function(name) {};

/**
 * @param {string=} selector
 * @param {boolean=} outer
 * @return {string}
 */
Casper.prototype.getHTML = function(selector, outer) {};

/**
 * @return {string}
 */
Casper.prototype.getPageContent = function() {};

/**
 * @return {string}
 */
Casper.prototype.getTitle = function() {};

/**
 * @param {string} type
 * @param {string} selector
 * @return {boolean}
 */
Casper.prototype.mouseEvent = function(type, selector) {};

/**
 * @param {string} location
 * @param {?} settings
 * @return {?}
 */
Casper.prototype.open = function(location, settings) {};

/**
 * @param {?=} then
 * @return {?}
 */
Casper.prototype.reload = function(then) {};

/**
 * @param {number} times
 * @param {!Function} then
 * @return {?}
 */
Casper.prototype.repeat = function(times, then) {};

/**
 * @param {!Function|string} test
 * @return {boolean}
 */
Casper.prototype.resourceExists = function(test) {};

/**
 * @param {!Function} onComplete
 * @param {number=} time
 * @return {?}
 */
Casper.prototype.run = function(onComplete, time) {};

/**
 * @param {number} x
 * @param {number} y
 * @return {?}
 */
Casper.prototype.scrollTo = function(x, y) {};

/**
 * @return {?}
 */
Casper.prototype.scrollToBottom = function() {};

/**
 * @param {string} selector
 * @param {string} keys
 * @param {?=} options
 * @return {?}
 */
Casper.prototype.sendKeys = function(selector, keys, options) {};

/**
 * @param {string} username
 * @param {string} password
 * @return {?}
 */
Casper.prototype.setHttpAuth = function(username, password) {};

/**
 * @param {string=} url
 * @param {?=} then
 * @return {?}
 */
Casper.prototype.start = function(url, then) {};

/**
 * @param {boolean} asString
 * @return {?}
 */
Casper.prototype.status = function(asString) {};

/**
 * @param {?} fn
 * @return {?}
 */
Casper.prototype.then = function(fn) {};

/**
 * @param {number} nb
 * @return {?}
 */
Casper.prototype.thenBypass = function(nb) {};

/**
 * @param {?} condition
 * @param {number} nb
 * @return {?}
 */
Casper.prototype.thenBypassIf = function(condition, nb) {};

/**
 * @param {?} condition
 * @param {number} nb
 * @return {?}
 */
Casper.prototype.thenBypassUnless = function(condition, nb) {};

/**
 * @param {string} selector
 * @return {?}
 */
Casper.prototype.thenClick = function(selector) {};

/**
 * @param {?} fn
 * @param {...?} args
 * @return {?}
 */
Casper.prototype.thenEvaluate = function(fn, args) {};

/**
 * @param {string} location
 * @param {?=} then_or_options
 * @param {?=} then
 * @return {?}
 */
Casper.prototype.thenOpen = function(location, then_or_options, then) {};

/**
 * @param {string} location
 * @param {!Function=} then
 * @param {...?} args
 * @return {?}
 */
Casper.prototype.thenOpenAndEvaluate = function(location, then, args) {};

/**
 * @return {string}
 */
Casper.prototype.toString = function() {};

/**
 * @return {?}
 */
Casper.prototype.unwait = function() {};

/**
 * @param {string} agent
 * @return {string}
 */
Casper.prototype.userAgent = function(agent) {};

/**
 * @param {number} width
 * @param {number} height
 * @return {?}
 */
Casper.prototype.viewport = function(width, height) {};

/**
 * @param {string} selector
 * @return {boolean}
 */
Casper.prototype.visible = function(selector) {};

/**
 * @param {number} timeout
 * @param {!Function=} then
 * @return {?}
 */
Casper.prototype.wait = function(timeout, then) {};

/**
 * @param {!Function} testFx
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitFor = function(testFx, then, onTimeout, timeout) {};

/**
 * @param {!Function} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitForAlert = function(then, onTimeout, timeout) {};

/**
 * @param {string|!RegExp} urlPattern
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitForPopup = function(urlPattern, then, onTimeout, timeout) {};

/**
 * @param {string|!RegExp} url
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitForUrl = function(url, then, onTimeout, timeout) {};

/**
 * @param {string} selector
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitForSelector = function(selector, then, onTimeout, timeout) {};

/**
 * @param {string} selector
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitWhileSelector = function(selector, then, onTimeout, timeout) {};

/**
 * @param {!Function} testFx
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitForResource = function(testFx, then, onTimeout, timeout) {};

/**
 * @param {string|!RegExp} pattern
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitForText = function(pattern, then, onTimeout, timeout) {};

/**
 * @param {string} selector
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitUntilVisible = function(selector, then, onTimeout, timeout) {};

/**
 * @param {string} selector
 * @param {!Function=} then
 * @param {!Function=} onTimeout
 * @param {number=} timeout
 * @return {?}
 */
Casper.prototype.waitWhileVisible = function(selector, then, onTimeout, timeout) {};

/**
 * @param {string} message
 * @return {?}
 */
Casper.prototype.warn = function(message) {};

/**
 * @param {string|number} frameInfo
 * @param {!Function} then
 * @return {?}
 */
Casper.prototype.withFrame = function(frameInfo, then) {};

/**
 * @param {string|!RegExp} popupInfo
 * @param {!Function} step
 * @return {?}
 */
Casper.prototype.withPopup = function(popupInfo, step) {};

/**
 * @param {number} factor
 * @return {?}
 */
Casper.prototype.zoom = function(factor) {};

/**
 * @param {string} filter
 * @return {?}
 */
Casper.prototype.removeAllFilters = function(filter) {};

/**
 * @param {string} filter
 * @param {!Function} cb
 * @return {boolean}
 */
Casper.prototype.setFilter = function(filter, cb) {};
/**
 * @record
 * @struct
 */
function HttpResponse() {}
 /** @type {string} */
HttpResponse.prototype.contentType;
 /** @type {!Array<?>} */
HttpResponse.prototype.headers;
 /** @type {number} */
HttpResponse.prototype.id;
 /** @type {string} */
HttpResponse.prototype.redirectURL;
 /** @type {string} */
HttpResponse.prototype.stage;
 /** @type {number} */
HttpResponse.prototype.status;
 /** @type {string} */
HttpResponse.prototype.statusText;
 /** @type {string} */
HttpResponse.prototype.time;
 /** @type {string} */
HttpResponse.prototype.url;
/**
 * @record
 * @struct
 */
function OpenSettings() {}
 /** @type {string} */
OpenSettings.prototype.method;
 /** @type {?} */
OpenSettings.prototype.data;
 /** @type {?} */
OpenSettings.prototype.headers;
/**
 * @record
 * @struct
 */
function ElementBounds() {}
 /** @type {number} */
ElementBounds.prototype.top;
 /** @type {number} */
ElementBounds.prototype.left;
 /** @type {number} */
ElementBounds.prototype.width;
 /** @type {number} */
ElementBounds.prototype.height;
/**
 * @record
 * @struct
 */
function ElementInfo() {}
 /** @type {string} */
ElementInfo.prototype.nodeName;
 /** @type {?} */
ElementInfo.prototype.attributes;
 /** @type {string} */
ElementInfo.prototype.tag;
 /** @type {string} */
ElementInfo.prototype.html;
 /** @type {string} */
ElementInfo.prototype.text;
 /** @type {number} */
ElementInfo.prototype.x;
 /** @type {number} */
ElementInfo.prototype.y;
 /** @type {number} */
ElementInfo.prototype.width;
 /** @type {number} */
ElementInfo.prototype.height;
 /** @type {boolean} */
ElementInfo.prototype.visible;
/**
 * @record
 * @struct
 */
function CasperOptions() {}
 /** @type {!Array<?>} */
CasperOptions.prototype.clientScripts;
 /** @type {boolean} */
CasperOptions.prototype.exitOnError;
 /** @type {?} */
CasperOptions.prototype.httpStatusHandlers;
 /** @type {string} */
CasperOptions.prototype.logLevel;
 /** @type {!Function} */
CasperOptions.prototype.onAlert;
 /** @type {!Function} */
CasperOptions.prototype.onDie;
 /** @type {!Function} */
CasperOptions.prototype.onError;
 /** @type {!Function} */
CasperOptions.prototype.onLoadError;
 /** @type {!Function} */
CasperOptions.prototype.onPageInitialized;
 /** @type {!Function} */
CasperOptions.prototype.onResourceReceived;
 /** @type {!Function} */
CasperOptions.prototype.onResourceRequested;
 /** @type {!Function} */
CasperOptions.prototype.onStepComplete;
 /** @type {!Function} */
CasperOptions.prototype.onStepTimeout;
 /** @type {!Function} */
CasperOptions.prototype.onTimeout;
 /** @type {!Function} */
CasperOptions.prototype.onWaitTimeout;
 /** @type {!WebPage} */
CasperOptions.prototype.page;
 /** @type {?} */
CasperOptions.prototype.pageSettings;
 /** @type {!Array<?>} */
CasperOptions.prototype.remoteScripts;
 /** @type {boolean} */
CasperOptions.prototype.safeLogs;
 /** @type {boolean} */
CasperOptions.prototype.silentErrors;
 /** @type {number} */
CasperOptions.prototype.stepTimeout;
 /** @type {number} */
CasperOptions.prototype.timeout;
 /** @type {boolean} */
CasperOptions.prototype.verbose;
 /** @type {?} */
CasperOptions.prototype.viewportSize;
 /** @type {number} */
CasperOptions.prototype.retryTimeout;
 /** @type {number} */
CasperOptions.prototype.waitTimeout;
/**
 * @record
 * @struct
 */
function ClientUtils() {}

/**
 * @param {string} message
 * @return {void}
 */
ClientUtils.prototype.echo = function(message) {};

/**
 * @param {string} contents
 * @return {void}
 */
ClientUtils.prototype.encode = function(contents) {};

/**
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.exists = function(selector) {};

/**
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.findAll = function(selector) {};

/**
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.findOne = function(selector) {};

/**
 * @param {string} url
 * @param {string=} method
 * @param {?=} data
 * @return {void}
 */
ClientUtils.prototype.getBase64 = function(url, method, data) {};

/**
 * @param {string} url
 * @param {string=} method
 * @param {?=} data
 * @return {void}
 */
ClientUtils.prototype.getBinary = function(url, method, data) {};

/**
 * @return {void}
 */
ClientUtils.prototype.getDocumentHeight = function() {};

/**
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.getElementBounds = function(selector) {};

/**
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.getElementsBounds = function(selector) {};

/**
 * @param {string} expression
 * @param {!HTMLElement=} scope
 * @return {void}
 */
ClientUtils.prototype.getElementByXPath = function(expression, scope) {};

/**
 * @param {string} expression
 * @param {!HTMLElement=} scope
 * @return {void}
 */
ClientUtils.prototype.getElementsByXPath = function(expression, scope) {};

/**
 * @param {string} inputName
 * @return {void}
 */
ClientUtils.prototype.getFieldValue = function(inputName) {};

/**
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.getFormValues = function(selector) {};

/**
 * @param {string} type
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.mouseEvent = function(type, selector) {};

/**
 * @param {string} expression
 * @return {void}
 */
ClientUtils.prototype.removeElementsByXPath = function(expression) {};

/**
 * @param {string} url
 * @param {string=} method
 * @param {?=} data
 * @param {boolean=} async
 * @return {void}
 */
ClientUtils.prototype.sendAJAX = function(url, method, data, async) {};

/**
 * @param {string} selector
 * @return {void}
 */
ClientUtils.prototype.visible = function(selector) {};
/**
 * @record
 * @struct
 */
function Colorizer() {}

/**
 * @param {string} text
 * @param {string} styleName
 * @return {void}
 */
Colorizer.prototype.colorize = function(text, styleName) {};

/**
 * @param {string} text
 * @param {?} style
 * @return {void}
 */
Colorizer.prototype.format = function(text, style) {};
/**
 * @record
 * @struct
 */
function Tester() {}

/**
 * @param {boolean} condition
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assert = function(condition, message) {};

/**
 * @param {string} selector
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertDoesntExist = function(selector, message) {};

/**
 * @param {string} selctor
 * @param {number} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertElementCount = function(selctor, expected, message) {};

/**
 * @param {?} testValue
 * @param {?} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertEquals = function(testValue, expected, message) {};

/**
 * @param {!Function} fn
 * @param {string} message
 * @param {?} args
 * @return {?}
 */
Tester.prototype.assertEval = function(fn, message, args) {};

/**
 * @param {!Function} fn
 * @param {?} expected
 * @param {string=} message
 * @param {?=} args
 * @return {?}
 */
Tester.prototype.assertEvalEquals = function(fn, expected, message, args) {};

/**
 * @param {string} selector
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertExists = function(selector, message) {};

/**
 * @param {?} subject
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertFalsy = function(subject, message) {};

/**
 * @param {string} inputName
 * @param {string} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertField = function(inputName, expected, message) {};

/**
 * @param {string} inputName
 * @param {string} expected
 * @param {string=} message
 * @param {?=} options
 * @return {?}
 */
Tester.prototype.assertFieldName = function(inputName, expected, message, options) {};

/**
 * @param {string} cssSelector
 * @param {string} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertFieldCSS = function(cssSelector, expected, message) {};

/**
 * @param {string} xpathSelector
 * @param {string} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertFieldXPath = function(xpathSelector, expected, message) {};

/**
 * @param {number} status
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertHttpStatus = function(status, message) {};

/**
 * @param {?} subject
 * @param {!RegExp} pattern
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertMatch = function(subject, pattern, message) {};

/**
 * @param {?} subject
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertNot = function(subject, message) {};

/**
 * @param {?} testValue
 * @param {?} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertNotEquals = function(testValue, expected, message) {};

/**
 * @param {string} selector
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertNotVisible = function(selector, message) {};

/**
 * @param {!Function} fn
 * @param {!Array<?>} args
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertRaises = function(fn, args, message) {};

/**
 * @param {string} selector
 * @param {string} text
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertSelectorDoesntHaveText = function(selector, text, message) {};

/**
 * @param {string} selector
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertSelectorExists = function(selector, message) {};

/**
 * @param {string} selector
 * @param {string} text
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertSelectorHasText = function(selector, text, message) {};

/**
 * @param {!Function} testFx
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertResourceExists = function(testFx, message) {};

/**
 * @param {string} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertTextExists = function(expected, message) {};

/**
 * @param {string} unexpected
 * @param {string} message
 * @return {?}
 */
Tester.prototype.assertTextDoesntExist = function(unexpected, message) {};

/**
 * @param {string} expected
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertTitle = function(expected, message) {};

/**
 * @param {!RegExp} pattern
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertTitleMatch = function(pattern, message) {};

/**
 * @param {?} subject
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertTruthy = function(subject, message) {};

/**
 * @param {?} input
 * @param {string} type
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertType = function(input, type, message) {};

/**
 * @param {?} input
 * @param {!Function} ctor
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertInstanceOf = function(input, ctor, message) {};

/**
 * @param {string|!RegExp} pattern
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertUrlMatch = function(pattern, message) {};

/**
 * @param {string} selector
 * @param {string=} message
 * @return {?}
 */
Tester.prototype.assertVisible = function(selector, message) {};

/**
 * @param {string} description
 * @param {number|!Function|!Object} planned_or_suite_or_config
 * @param {!Function|!Object=} suite_or_config
 * @return {?}
 */
Tester.prototype.begin = function(description, planned_or_suite_or_config, suite_or_config) {};

/**
 * @param {string} message
 * @param {string} style
 * @return {?}
 */
Tester.prototype.colorize = function(message, style) {};

/**
 * @param {string} message
 * @return {?}
 */
Tester.prototype.comment = function(message) {};

/**
 * @param {number=} expected
 * @return {?}
 */
Tester.prototype.done = function(expected) {};

/**
 * @param {string} message
 * @return {?}
 */
Tester.prototype.error = function(message) {};

/**
 * @param {string} message
 * @return {?}
 */
Tester.prototype.fail = function(message) {};

/**
 * @param {string} message
 * @param {string} style
 * @return {?}
 */
Tester.prototype.formatMessage = function(message, style) {};

/**
 * @return {?}
 */
Tester.prototype.getFailures = function() {};

/**
 * @return {?}
 */
Tester.prototype.getPasses = function() {};

/**
 * @param {string} message
 * @return {?}
 */
Tester.prototype.info = function(message) {};

/**
 * @param {string} message
 * @return {?}
 */
Tester.prototype.pass = function(message) {};

/**
 * @param {boolean} exit
 * @param {number} status
 * @param {string} save
 * @return {?}
 */
Tester.prototype.renderResults = function(exit, status, save) {};

/**
 * @param {!Function} fn
 * @return {?}
 */
Tester.prototype.setup = function(fn) {};

/**
 * @param {number} nb
 * @param {string} message
 * @return {?}
 */
Tester.prototype.skip = function(nb, message) {};

/**
 * @param {!Function} fn
 * @return {?}
 */
Tester.prototype.tearDown = function(fn) {};
/**
 * @record
 * @struct
 */
function Cases() {}
 /** @type {number} */
Cases.prototype.length;
 /** @type {!Array<?>} */
Cases.prototype.cases;
/**
 * @record
 * @struct
 */
function Case() {}
 /** @type {boolean} */
Case.prototype.success;
 /** @type {string} */
Case.prototype.type;
 /** @type {string} */
Case.prototype.standard;
 /** @type {string} */
Case.prototype.file;
 /** @type {?} */
Case.prototype.values;
/**
 * @record
 * @struct
 */
function CaseValues() {}
 /** @type {boolean} */
CaseValues.prototype.subject;
 /** @type {boolean} */
CaseValues.prototype.expected;
/**
 * @record
 * @struct
 */
function Utils() {}

/**
 * @param {?} input
 * @return {?}
 */
Utils.prototype.betterTypeOf = function(input) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.dump = function(value) {};

/**
 * @param {string} file
 * @return {?}
 */
Utils.prototype.fileExt = function(file) {};

/**
 * @param {string} text
 * @param {number} pad
 * @return {?}
 */
Utils.prototype.fillBlanks = function(text, pad) {};

/**
 * @param {string} f
 * @param {...?} args
 * @return {?}
 */
Utils.prototype.format = function(f, args) {};

/**
 * @param {?} obj
 * @param {string} path
 * @return {?}
 */
Utils.prototype.getPropertyPath = function(obj, path) {};

/**
 * @param {?} ctor
 * @param {?} superCtor
 * @return {?}
 */
Utils.prototype.inherits = function(ctor, superCtor) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isArray = function(value) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isCasperObject = function(value) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isClipRect = function(value) {};

/**
 * @param {?} subject
 * @return {?}
 */
Utils.prototype.isFalsy = function(subject) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isFunction = function(value) {};

/**
 * @param {string} file
 * @return {?}
 */
Utils.prototype.isJsFile = function(file) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isNull = function(value) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isNumber = function(value) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isObject = function(value) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isRegExp = function(value) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isString = function(value) {};

/**
 * @param {?} subject
 * @return {?}
 */
Utils.prototype.isTruthy = function(subject) {};

/**
 * @param {?} what
 * @param {string} type
 * @return {?}
 */
Utils.prototype.isType = function(what, type) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.isUndefined = function(value) {};

/**
 * @param {?} what
 * @return {?}
 */
Utils.prototype.isWebPage = function(what) {};

/**
 * @param {?} origin
 * @param {?} add
 * @return {?}
 */
Utils.prototype.mergeObjects = function(origin, add) {};

/**
 * @param {string} name
 * @param {?} attributes
 * @return {?}
 */
Utils.prototype.node = function(name, attributes) {};

/**
 * @param {?} value
 * @return {?}
 */
Utils.prototype.serialize = function(value) {};

/**
 * @param {!Array<?>} array
 * @return {?}
 */
Utils.prototype.unique = function(array) {};
