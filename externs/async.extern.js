/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/async/index.d.ts:
/**
 * @record
 * @struct
 */
function Dictionary() {}

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function ErrorCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncBooleanResultCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncResultCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncResultArrayCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncResultObjectCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncFunction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncIterator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncForEachOfIterator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncResultIterator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncMemoIterator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncBooleanIterator() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncWorker() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncVoidFunction() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function AsyncQueue() {}
 /** @type {boolean} */
AsyncQueue.prototype.started;
 /** @type {number} */
AsyncQueue.prototype.concurrency;
 /** @type {function(): ?} */
AsyncQueue.prototype.saturated;
 /** @type {function(): ?} */
AsyncQueue.prototype.empty;
 /** @type {function(): ?} */
AsyncQueue.prototype.drain;
 /** @type {boolean} */
AsyncQueue.prototype.paused;
 /** @type {number} */
AsyncQueue.prototype.buffer;

/**
 * @return {number}
 */
AsyncQueue.prototype.length = function() {};

/**
 * @return {number}
 */
AsyncQueue.prototype.running = function() {};

/**
 * @return {boolean}
 */
AsyncQueue.prototype.idle = function() {};

/**
 * @template E, R
 * @param {T|!Array<T>} task
 * @param {!ErrorCallback<E>|!AsyncResultCallback<R, E>=} callback
 * @return {void}
 */
AsyncQueue.prototype.push = function(task, callback) {};

/**
 * @template E
 * @param {T|!Array<T>} task
 * @param {!ErrorCallback<E>=} callback
 * @return {void}
 */
AsyncQueue.prototype.unshift = function(task, callback) {};

/**
 * @return {void}
 */
AsyncQueue.prototype.pause = function() {};

/**
 * @return {void}
 */
AsyncQueue.prototype.resume = function() {};

/**
 * @return {void}
 */
AsyncQueue.prototype.kill = function() {};

/**
 * @return {!Array<{data: T, callback: !Function}>}
 */
AsyncQueue.prototype.workersList = function() {};

/**
 * @param {!Error} error
 * @param {?} data
 * @return {void}
 */
AsyncQueue.prototype.error = function(error, data) {};

/**
 * @return {void}
 */
AsyncQueue.prototype.unsaturated = function() {};
/**
 * @record
 * @struct
 */
function AsyncPriorityQueue() {}
 /** @type {number} */
AsyncPriorityQueue.prototype.concurrency;
 /** @type {boolean} */
AsyncPriorityQueue.prototype.started;
 /** @type {boolean} */
AsyncPriorityQueue.prototype.paused;
 /** @type {function(): ?} */
AsyncPriorityQueue.prototype.saturated;
 /** @type {function(): ?} */
AsyncPriorityQueue.prototype.empty;
 /** @type {function(): ?} */
AsyncPriorityQueue.prototype.drain;
 /** @type {number} */
AsyncPriorityQueue.prototype.buffer;

/**
 * @return {number}
 */
AsyncPriorityQueue.prototype.length = function() {};

/**
 * @template R, E
 * @param {T|!Array<T>} task
 * @param {number} priority
 * @param {!AsyncResultArrayCallback<R, E>=} callback
 * @return {void}
 */
AsyncPriorityQueue.prototype.push = function(task, priority, callback) {};

/**
 * @return {number}
 */
AsyncPriorityQueue.prototype.running = function() {};

/**
 * @return {boolean}
 */
AsyncPriorityQueue.prototype.idle = function() {};

/**
 * @return {void}
 */
AsyncPriorityQueue.prototype.pause = function() {};

/**
 * @return {void}
 */
AsyncPriorityQueue.prototype.resume = function() {};

/**
 * @return {void}
 */
AsyncPriorityQueue.prototype.kill = function() {};

/**
 * @return {!Array<{data: T, priority: number, callback: !Function}>}
 */
AsyncPriorityQueue.prototype.workersList = function() {};

/**
 * @param {!Error} error
 * @param {?} data
 * @return {void}
 */
AsyncPriorityQueue.prototype.error = function(error, data) {};

/**
 * @return {void}
 */
AsyncPriorityQueue.prototype.unsaturated = function() {};
/**
 * @record
 * @struct
 */
function AsyncCargo() {}
 /** @type {number} */
AsyncCargo.prototype.payload;

/**
 * @return {number}
 */
AsyncCargo.prototype.length = function() {};

/**
 * @param {?|!Array<?>} task
 * @param {!Function=} callback
 * @return {void}
 */
AsyncCargo.prototype.push = function(task, callback) {};

/**
 * @return {void}
 */
AsyncCargo.prototype.saturated = function() {};

/**
 * @return {void}
 */
AsyncCargo.prototype.empty = function() {};

/**
 * @return {void}
 */
AsyncCargo.prototype.drain = function() {};

/**
 * @return {boolean}
 */
AsyncCargo.prototype.idle = function() {};

/**
 * @return {void}
 */
AsyncCargo.prototype.pause = function() {};

/**
 * @return {void}
 */
AsyncCargo.prototype.resume = function() {};

/**
 * @return {void}
 */
AsyncCargo.prototype.kill = function() {};
/**
 * @record
 * @struct
 */
function Async() {}
 /** @type {?} */
Async.prototype.eachSeries;
 /** @type {?} */
Async.prototype.forEach;
 /** @type {?} */
Async.prototype.forEachSeries;
 /** @type {?} */
Async.prototype.forEachLimit;
 /** @type {?} */
Async.prototype.forEachOfSeries;
 /** @type {?} */
Async.prototype.eachOf;
 /** @type {?} */
Async.prototype.eachOfSeries;
 /** @type {?} */
Async.prototype.eachOfLimit;
 /** @type {?} */
Async.prototype.mapSeries;
 /** @type {function(!Dictionary<T>, function(T, string, !AsyncResultCallback<R, E>): void, !AsyncResultObjectCallback<R, E>): void} */
Async.prototype.mapValuesSeries;
 /** @type {?} */
Async.prototype.filterSeries;
 /** @type {?} */
Async.prototype.select;
 /** @type {?} */
Async.prototype.selectSeries;
 /** @type {?} */
Async.prototype.selectLimit;
 /** @type {?} */
Async.prototype.reject;
 /** @type {?} */
Async.prototype.rejectSeries;
 /** @type {?} */
Async.prototype.rejectLimit;
 /** @type {function((!Array<T>|!IterableIterator<T>), R, !AsyncMemoIterator<T, R, E>, !AsyncResultCallback<R, E>): void} */
Async.prototype.inject;
 /** @type {function((!Array<T>|!IterableIterator<T>), R, !AsyncMemoIterator<T, R, E>, !AsyncResultCallback<R, E>): void} */
Async.prototype.foldl;
 /** @type {function((!Array<T>|!IterableIterator<T>), R, !AsyncMemoIterator<T, R, E>, !AsyncResultCallback<R, E>): void} */
Async.prototype.reduceRight;
 /** @type {function((!Array<T>|!IterableIterator<T>), R, !AsyncMemoIterator<T, R, E>, !AsyncResultCallback<R, E>): void} */
Async.prototype.foldr;
 /** @type {?} */
Async.prototype.detectSeries;
 /** @type {?} */
Async.prototype.find;
 /** @type {?} */
Async.prototype.findSeries;
 /** @type {?} */
Async.prototype.findLimit;
 /** @type {?} */
Async.prototype.someSeries;
 /** @type {?} */
Async.prototype.any;
 /** @type {?} */
Async.prototype.anySeries;
 /** @type {?} */
Async.prototype.anyLimit;
 /** @type {?} */
Async.prototype.everySeries;
 /** @type {?} */
Async.prototype.all;
 /** @type {?} */
Async.prototype.allSeries;
 /** @type {?} */
Async.prototype.allLimit;
 /** @type {?} */
Async.prototype.concatSeries;
 /** @type {function(!Function, !Array<?>): void} */
Async.prototype.setImmediate;

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {!AsyncIterator<T, E>} iterator
 * @param {!ErrorCallback<E>=} callback
 * @return {void}
 */
Async.prototype.each = function(arr, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {number} limit
 * @param {!AsyncIterator<T, E>} iterator
 * @param {!ErrorCallback<E>=} callback
 * @return {void}
 */
Async.prototype.eachLimit = function(arr, limit, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} obj
 * @param {!AsyncForEachOfIterator<T, E>} iterator
 * @param {!ErrorCallback<E>=} callback
 * @return {void}
 */
Async.prototype.forEachOf = function(obj, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} obj
 * @param {number} limit
 * @param {!AsyncForEachOfIterator<T, E>} iterator
 * @param {!ErrorCallback<E>=} callback
 * @return {void}
 */
Async.prototype.forEachOfLimit = function(obj, limit, iterator, callback) {};

/**
 * @template T, R, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {!AsyncResultIterator<T, R, E>} iterator
 * @param {!AsyncResultArrayCallback<R, E>=} callback
 * @return {void}
 */
Async.prototype.map = function(arr, iterator, callback) {};

/**
 * @template T, R, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {number} limit
 * @param {!AsyncResultIterator<T, R, E>} iterator
 * @param {!AsyncResultArrayCallback<R, E>=} callback
 * @return {void}
 */
Async.prototype.mapLimit = function(arr, limit, iterator, callback) {};

/**
 * @template T, R, E
 * @param {!Dictionary<T>} obj
 * @param {number} limit
 * @param {function(T, string, !AsyncResultCallback<R, E>): void} iteratee
 * @param {!AsyncResultObjectCallback<R, E>} callback
 * @return {void}
 */
Async.prototype.mapValuesLimit = function(obj, limit, iteratee, callback) {};

/**
 * @template T, R, E
 * @param {!Dictionary<T>} obj
 * @param {function(T, string, !AsyncResultCallback<R, E>): void} iteratee
 * @param {!AsyncResultObjectCallback<R, E>} callback
 * @return {void}
 */
Async.prototype.mapValues = function(obj, iteratee, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncResultArrayCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.filter = function(arr, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {number} limit
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncResultArrayCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.filterLimit = function(arr, limit, iterator, callback) {};

/**
 * @template T, R, E
 * @param {(!Array<T>|!IterableIterator<T>)} arr
 * @param {R} memo
 * @param {!AsyncMemoIterator<T, R, E>} iterator
 * @param {!AsyncResultCallback<R, E>=} callback
 * @return {void}
 */
Async.prototype.reduce = function(arr, memo, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncResultCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.detect = function(arr, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {number} limit
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncResultCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.detectLimit = function(arr, limit, iterator, callback) {};

/**
 * @template T, V, E
 * @param {(!Array<T>|!IterableIterator<T>)} arr
 * @param {!AsyncResultIterator<T, V, E>} iterator
 * @param {!AsyncResultArrayCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.sortBy = function(arr, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncBooleanResultCallback<E>=} callback
 * @return {void}
 */
Async.prototype.some = function(arr, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {number} limit
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncBooleanResultCallback<E>=} callback
 * @return {void}
 */
Async.prototype.someLimit = function(arr, limit, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncBooleanResultCallback<E>=} callback
 * @return {void}
 */
Async.prototype.every = function(arr, iterator, callback) {};

/**
 * @template T, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {number} limit
 * @param {!AsyncBooleanIterator<T, E>} iterator
 * @param {!AsyncBooleanResultCallback<E>=} callback
 * @return {void}
 */
Async.prototype.everyLimit = function(arr, limit, iterator, callback) {};

/**
 * @template T, R, E
 * @param {(!Array<T>|!IterableIterator<T>)|!Dictionary<T>} arr
 * @param {!AsyncResultIterator<T, !Array<R>, E>} iterator
 * @param {!AsyncResultArrayCallback<R, E>=} callback
 * @return {void}
 */
Async.prototype.concat = function(arr, iterator, callback) {};

/**
 * @template T, E
 * @param {!Array<!AsyncFunction<T, E>>|!Dictionary<!AsyncFunction<T, E>>} tasks
 * @param {!AsyncResultArrayCallback<T, E>|!AsyncResultObjectCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.series = function(tasks, callback) {};

/**
 * @template T, E
 * @param {!Array<!AsyncFunction<T, E>>|!Dictionary<!AsyncFunction<T, E>>} tasks
 * @param {!AsyncResultArrayCallback<T, E>|!AsyncResultObjectCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.parallel = function(tasks, callback) {};

/**
 * @template T, E
 * @param {!Array<!AsyncFunction<T, E>>|!Dictionary<!AsyncFunction<T, E>>} tasks
 * @param {number} limit
 * @param {!AsyncResultArrayCallback<T, E>|!AsyncResultObjectCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.parallelLimit = function(tasks, limit, callback) {};

/**
 * @template E
 * @param {function(): boolean} test
 * @param {!AsyncVoidFunction<E>} fn
 * @param {!ErrorCallback<E>} callback
 * @return {void}
 */
Async.prototype.whilst = function(test, fn, callback) {};

/**
 * @template E
 * @param {!AsyncVoidFunction<E>} fn
 * @param {function(): boolean} test
 * @param {!ErrorCallback<E>} callback
 * @return {void}
 */
Async.prototype.doWhilst = function(fn, test, callback) {};

/**
 * @template E
 * @param {function(): boolean} test
 * @param {!AsyncVoidFunction<E>} fn
 * @param {!ErrorCallback<E>} callback
 * @return {void}
 */
Async.prototype.until = function(test, fn, callback) {};

/**
 * @template E
 * @param {!AsyncVoidFunction<E>} fn
 * @param {function(): boolean} test
 * @param {!ErrorCallback<E>} callback
 * @return {void}
 */
Async.prototype.doUntil = function(fn, test, callback) {};

/**
 * @template E
 * @param {function(!AsyncBooleanResultCallback<E>): void} test
 * @param {!AsyncVoidFunction<E>} fn
 * @param {!ErrorCallback<E>} callback
 * @return {void}
 */
Async.prototype.during = function(test, fn, callback) {};

/**
 * @template E
 * @param {!AsyncVoidFunction<E>} fn
 * @param {function(!AsyncBooleanResultCallback<E>): void} test
 * @param {!ErrorCallback<E>} callback
 * @return {void}
 */
Async.prototype.doDuring = function(fn, test, callback) {};

/**
 * @template E
 * @param {function(!ErrorCallback<E>): void} next
 * @param {!ErrorCallback<E>} errBack
 * @return {void}
 */
Async.prototype.forever = function(next, errBack) {};

/**
 * @template T, E
 * @param {!Array<!Function>} tasks
 * @param {!AsyncResultCallback<T, (!Error|E)>=} callback
 * @return {void}
 */
Async.prototype.waterfall = function(tasks, callback) {};

/**
 * @param {...!Function} fns
 * @return {!Function}
 */
Async.prototype.compose = function(fns) {};

/**
 * @param {...!Function} fns
 * @return {!Function}
 */
Async.prototype.seq = function(fns) {};

/**
 * @param {!Array<!Function>} fns
 * @param {!Array<?>} argsAndCallback
 * @return {void}
 */
Async.prototype.applyEach = function(fns, argsAndCallback) {};

/**
 * @param {!Array<!Function>} fns
 * @param {!Array<?>} argsAndCallback
 * @return {void}
 */
Async.prototype.applyEachSeries = function(fns, argsAndCallback) {};

/**
 * @template T, E, R
 * @param {!AsyncWorker<T, E>|!AsyncResultIterator<T, R, E>} worker
 * @param {number=} concurrency
 * @return {!AsyncQueue<T>}
 */
Async.prototype.queue = function(worker, concurrency) {};

/**
 * @template T, E
 * @param {!AsyncWorker<T, E>} worker
 * @param {number} concurrency
 * @return {!AsyncPriorityQueue<T>}
 */
Async.prototype.priorityQueue = function(worker, concurrency) {};

/**
 * @template E
 * @param {function(!Array<?>, !ErrorCallback<E>): void} worker
 * @param {number=} payload
 * @return {!AsyncCargo}
 */
Async.prototype.cargo = function(worker, payload) {};

/**
 * @template E
 * @param {?} tasks
 * @param {number=} concurrency
 * @param {!AsyncResultCallback<?, E>=} callback
 * @return {void}
 */
Async.prototype.auto = function(tasks, concurrency, callback) {};

/**
 * @template E
 * @param {?} tasks
 * @param {!AsyncResultCallback<?, E>=} callback
 * @return {void}
 */
Async.prototype.autoInject = function(tasks, callback) {};

/**
 * @template T, E
 * @param {number|{times: number, interval: (number|function(number): number)}} opts
 * @param {function(!AsyncResultCallback<T, E>, ?): void} task
 * @param {!AsyncResultCallback<?, (!Error|E)>} callback
 * @return {void}
 */
Async.prototype.retry = function(opts, task, callback) {};

/**
 * @template T, E
 * @param {(number|{times: number, interval: number})} opts
 * @param {!AsyncFunction<T, E>} task
 * @return {!AsyncFunction<T, (!Error|E)>}
 */
Async.prototype.retryable = function(opts, task) {};

/**
 * @template E
 * @param {!Function} fn
 * @param {...?} tsickle_arguments
 * @return {!AsyncFunction<?, (!Error|E)>}
 */
Async.prototype.apply = function(fn, tsickle_arguments) {};

/**
 * @param {!Function} callback
 * @param {...?} args
 * @return {void}
 */
Async.prototype.nextTick = function(callback, args) {};

/**
 * @template T, E
 * @param {!AsyncFunction<T, E>} fn
 * @return {function(function(null, {error: E, value: T}): void): void}
 */
Async.prototype.reflect = function(fn) {};

/**
 * @template T, E
 * @param {!Array<!AsyncFunction<T, E>>} tasks
 * @return {!Array<function(function(null, {error: E, value: T}): void): void>}
 */
Async.prototype.reflectAll = function(tasks) {};

/**
 * @template T, E, R
 * @param {!AsyncFunction<T, E>|!AsyncResultIterator<T, R, E>} fn
 * @param {number} milliseconds
 * @param {?=} info
 * @return {!AsyncFunction<T, (!Error|E)>|!AsyncResultIterator<T, R, (!Error|E)>}
 */
Async.prototype.timeout = function(fn, milliseconds, info) {};

/**
 * @template T, E
 * @param {number} n
 * @param {!AsyncResultIterator<number, T, E>} iterator
 * @param {!AsyncResultArrayCallback<T, E>} callback
 * @return {void}
 */
Async.prototype.times = function(n, iterator, callback) {};

/**
 * @template T, E
 * @param {number} n
 * @param {!AsyncResultIterator<number, T, E>} iterator
 * @param {!AsyncResultArrayCallback<T, E>} callback
 * @return {void}
 */
Async.prototype.timesSeries = function(n, iterator, callback) {};

/**
 * @template T, E
 * @param {number} n
 * @param {number} limit
 * @param {!AsyncResultIterator<number, T, E>} iterator
 * @param {!AsyncResultArrayCallback<T, E>} callback
 * @return {void}
 */
Async.prototype.timesLimit = function(n, limit, iterator, callback) {};

/**
 * @template T, R, E
 * @param {!Array<T>|!Object<string,T>} arr
 * @param {function(!Array<R>, T, number, function(E): void): void|!Array<R>|function(!Object<string,R>, T, string, function(E): void): void|!Object<string,R>} iteratee_or_acc
 * @param {!AsyncResultArrayCallback<T, E>|function(!Array<R>, T, number, function(E): void): void|!AsyncResultObjectCallback<T, E>|function(!Object<string,R>, T, string, function(E): void): void=} callback_or_iteratee
 * @param {!AsyncResultArrayCallback<T, E>|!AsyncResultObjectCallback<T, E>=} callback
 * @return {void}
 */
Async.prototype.transform = function(arr, iteratee_or_acc, callback_or_iteratee, callback) {};

/**
 * @template T, E
 * @param {!Array<!AsyncFunction<T, E>>} tasks
 * @param {!AsyncResultCallback<T, (!Error|E)>} callback
 * @return {void}
 */
Async.prototype.race = function(tasks, callback) {};

/**
 * @param {!Function} fn
 * @param {!Function=} hasher
 * @return {!Function}
 */
Async.prototype.memoize = function(fn, hasher) {};

/**
 * @param {!Function} fn
 * @return {!Function}
 */
Async.prototype.unmemoize = function(fn) {};

/**
 * @param {function(!Array<?>): void} fn
 * @return {!Function}
 */
Async.prototype.ensureAsync = function(fn) {};

/**
 * @param {...?} values
 * @return {!Function}
 */
Async.prototype.constant = function(values) {};

/**
 * @param {!Function} fn
 * @return {!Function}
 */
Async.prototype.asyncify = function(fn) {};

/**
 * @param {!Function} fn
 * @return {!Function}
 */
Async.prototype.wrapSync = function(fn) {};

/**
 * @param {!Function} fn
 * @param {...?} tsickle_arguments
 * @return {void}
 */
Async.prototype.log = function(fn, tsickle_arguments) {};

/**
 * @param {!Function} fn
 * @param {...?} tsickle_arguments
 * @return {void}
 */
Async.prototype.dir = function(fn, tsickle_arguments) {};
 /** @type {!Async} */
var async;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "async"
/** @const */
tsickle_declare_module.async = {};

/* TODO: ExportAssignment in tsickle_declare_module.async */
