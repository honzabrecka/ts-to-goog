/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/koa-session/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var session = {};
/**
 * @record
 * @struct
 */
session.sessionConfig = function() {};
 /** @type {string} */
session.sessionConfig.prototype.key;
 /** @type {(number|string)} */
session.sessionConfig.prototype.maxAge;
 /** @type {boolean} */
session.sessionConfig.prototype.overwrite;
 /** @type {boolean} */
session.sessionConfig.prototype.httpOnly;
 /** @type {boolean} */
session.sessionConfig.prototype.signed;
 /** @type {boolean} */
session.sessionConfig.prototype.rolling;
 /** @type {!session.stores} */
session.sessionConfig.prototype.store;

/**
 * Hook: valid session value before use it
 * @param {!Application.Context} ctx
 * @param {!session.sessionProps} session
 * @return {void}
 */
session.sessionConfig.prototype.valid = function(ctx, session) {};

/**
 * Hook: before save session
 * @param {!Application.Context} ctx
 * @param {!session.sessionProps} session
 * @return {void}
 */
session.sessionConfig.prototype.beforeSave = function(ctx, session) {};
/**
 * @record
 * @struct
 */
session.sessionProps = function() {};
 /** @type {boolean} */
session.sessionProps.prototype.isNew;
 /** @type {number} */
session.sessionProps.prototype.maxAge;

/* TODO: IndexSignature: session */

/**
 * Save this session no matter whether it is populated
 * @return {void}
 */
session.sessionProps.prototype.save = function() {};
/**
 * @record
 * @struct
 */
session.stores = function() {};

/**
 * get session object by key
 * @param {?} key
 * @return {?}
 */
session.stores.prototype.get = function(key) {};

/**
 * set session object for key, with a maxAge (in ms)
 * @param {?} key
 * @param {?} sess
 * @param {number=} maxAge
 * @return {?}
 */
session.stores.prototype.set = function(key, sess, maxAge) {};

/**
 * destroy session for key
 * @param {?} key
 * @return {void}
 */
session.stores.prototype.destroy = function(key) {};

/**
 * @param {!session.sessionConfig|!Application} CONFIG_or_app
 * @param {!Application=} app
 * @return {function(!Application.Context, function(): !Promise<?>): ?}
 */
function session(CONFIG_or_app, app) {}
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "koa"
 /** @type {!session.sessionProps} */
tsickle_declare_module.koa.Context.prototype.session;

/* TODO: ExportAssignment in  */
