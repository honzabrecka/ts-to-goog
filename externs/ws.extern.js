/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ws/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {string} address
 * @param {!WebSocket.IClientOptions|(string|!Array<string>)=} options_or_protocols
 * @param {!WebSocket.IClientOptions=} options
 */
function WebSocket(address, options_or_protocols, options) {}
 /** @type {number} */
WebSocket.CONNECTING;
 /** @type {number} */
WebSocket.OPEN;
 /** @type {number} */
WebSocket.CLOSING;
 /** @type {number} */
WebSocket.CLOSED;
 /** @type {string} */
WebSocket.prototype.binaryType;
 /** @type {number} */
WebSocket.prototype.bufferedAmount;
 /** @type {number} */
WebSocket.prototype.bytesReceived;
 /** @type {!Object} */
WebSocket.prototype.extensions;
 /** @type {string} */
WebSocket.prototype.protocol;
 /** @type {number} */
WebSocket.prototype.protocolVersion;
 /** @type {number} */
WebSocket.prototype.readyState;
 /** @type {string} */
WebSocket.prototype.url;
 /** @type {number} */
WebSocket.prototype.CONNECTING;
 /** @type {number} */
WebSocket.prototype.OPEN;
 /** @type {number} */
WebSocket.prototype.CLOSING;
 /** @type {number} */
WebSocket.prototype.CLOSED;
 /** @type {function({target: !WebSocket}): void} */
WebSocket.prototype.onopen;
 /** @type {function(!Error): void} */
WebSocket.prototype.onerror;
 /** @type {function({wasClean: boolean, code: number, reason: string, target: !WebSocket}): void} */
WebSocket.prototype.onclose;
 /** @type {function({data: (string|?|!ArrayBuffer|!Array<?>), type: string, target: !WebSocket}): void} */
WebSocket.prototype.onmessage;

/**
 * @param {number=} code
 * @param {?=} data
 * @return {void}
 */
WebSocket.prototype.close = function(code, data) {};

/**
 * @return {void}
 */
WebSocket.prototype.pause = function() {};

/**
 * @return {void}
 */
WebSocket.prototype.resume = function() {};

/**
 * @param {?=} data
 * @param {boolean=} mask
 * @param {boolean=} dontFail
 * @return {void}
 */
WebSocket.prototype.ping = function(data, mask, dontFail) {};

/**
 * @param {?=} data
 * @param {boolean=} mask
 * @param {boolean=} dontFail
 * @return {void}
 */
WebSocket.prototype.pong = function(data, mask, dontFail) {};

/**
 * @param {?} data
 * @param {function(!Error): void|{mask: boolean, binary: boolean}=} cb_or_options
 * @param {function(!Error): void=} cb
 * @return {void}
 */
WebSocket.prototype.send = function(data, cb_or_options, cb) {};

/**
 * @param {{mask: boolean, binary: boolean}|function(!Error, boolean): void=} options_or_cb
 * @param {function(!Error, boolean): void=} cb
 * @return {void}
 */
WebSocket.prototype.stream = function(options_or_cb, cb) {};

/**
 * @return {void}
 */
WebSocket.prototype.terminate = function() {};

/**
 * @param {string} method
 * @param {function({data: ?, type: string, target: !WebSocket}): void|function({wasClean: boolean, code: number, reason: string, target: !WebSocket}): void|function(!Error): void|function({target: !WebSocket}): void|function(): void=} cb_or_listener
 * @return {void}
 */
WebSocket.prototype.addEventListener = function(method, cb_or_listener) {};

/**
 * @param {string} event
 * @param {function(!Error): void|function(number, string): void|function(!Object, !IncomingMessage): void|function((string|?|!ArrayBuffer|!Array<?>)): void|function(?): void|function(): void|function(!ClientRequest, !IncomingMessage): void} cb_or_listener
 * @return {WebSocket}
 */
WebSocket.prototype.on = function(event, cb_or_listener) {};

/**
 * @param {string} event
 * @param {function(!Error): void|function(number, string): void|function(!Object, !IncomingMessage): void|function((string|?|!ArrayBuffer|!Array<?>), {binary: boolean}): void|function(?): void|function(): void|function(!ClientRequest, !IncomingMessage): void} cb_or_listener
 * @return {WebSocket}
 */
WebSocket.prototype.addListener = function(event, cb_or_listener) {};

/** @typedef {(string|?|!ArrayBuffer|!Array<?>)} */
WebSocket.Data;

/** @typedef {(string|!Array<string>|?|!Array<?>)} */
WebSocket.CertMeta;

/** @typedef {function({origin: string, secure: boolean, req: !IncomingMessage}): boolean} */
WebSocket.VerifyClientCallbackSync;

/** @typedef {function({origin: string, secure: boolean, req: !IncomingMessage}, function(boolean, number, string): void): void} */
WebSocket.VerifyClientCallbackAsync;
/**
 * @record
 * @struct
 */
WebSocket.IClientOptions = function() {};
 /** @type {string} */
WebSocket.IClientOptions.prototype.protocol;
 /** @type {(boolean|!WebSocket.IPerMessageDeflateOptions)} */
WebSocket.IClientOptions.prototype.perMessageDeflate;
 /** @type {string} */
WebSocket.IClientOptions.prototype.localAddress;
 /** @type {number} */
WebSocket.IClientOptions.prototype.protocolVersion;
 /** @type {!Object<string,string>} */
WebSocket.IClientOptions.prototype.headers;
 /** @type {string} */
WebSocket.IClientOptions.prototype.origin;
 /** @type {!Agent} */
WebSocket.IClientOptions.prototype.agent;
 /** @type {string} */
WebSocket.IClientOptions.prototype.host;
 /** @type {number} */
WebSocket.IClientOptions.prototype.family;
 /** @type {!Function} */
WebSocket.IClientOptions.prototype.checkServerIdentity;
 /** @type {boolean} */
WebSocket.IClientOptions.prototype.rejectUnauthorized;
 /** @type {string} */
WebSocket.IClientOptions.prototype.passphrase;
 /** @type {string} */
WebSocket.IClientOptions.prototype.ciphers;
 /** @type {(string|!Array<string>|?|!Array<?>)} */
WebSocket.IClientOptions.prototype.cert;
 /** @type {(string|!Array<string>|?|!Array<?>)} */
WebSocket.IClientOptions.prototype.key;
 /** @type {(string|?)} */
WebSocket.IClientOptions.prototype.pfx;
 /** @type {(string|!Array<string>|?|!Array<?>)} */
WebSocket.IClientOptions.prototype.ca;
/**
 * @record
 * @struct
 */
WebSocket.IPerMessageDeflateOptions = function() {};
 /** @type {boolean} */
WebSocket.IPerMessageDeflateOptions.prototype.serverNoContextTakeover;
 /** @type {boolean} */
WebSocket.IPerMessageDeflateOptions.prototype.clientNoContextTakeover;
 /** @type {number} */
WebSocket.IPerMessageDeflateOptions.prototype.serverMaxWindowBits;
 /** @type {number} */
WebSocket.IPerMessageDeflateOptions.prototype.clientMaxWindowBits;
 /** @type {number} */
WebSocket.IPerMessageDeflateOptions.prototype.memLevel;
/**
 * @record
 * @struct
 */
WebSocket.IServerOptions = function() {};
 /** @type {string} */
WebSocket.IServerOptions.prototype.host;
 /** @type {number} */
WebSocket.IServerOptions.prototype.port;
 /** @type {number} */
WebSocket.IServerOptions.prototype.backlog;
 /** @type {!Server} */
WebSocket.IServerOptions.prototype.server;
 /** @type {(function({origin: string, secure: boolean, req: !IncomingMessage}): boolean|function({origin: string, secure: boolean, req: !IncomingMessage}, function(boolean, number, string): void): void)} */
WebSocket.IServerOptions.prototype.verifyClient;
 /** @type {?} */
WebSocket.IServerOptions.prototype.handleProtocols;
 /** @type {string} */
WebSocket.IServerOptions.prototype.path;
 /** @type {boolean} */
WebSocket.IServerOptions.prototype.noServer;
 /** @type {boolean} */
WebSocket.IServerOptions.prototype.clientTracking;
 /** @type {(boolean|!WebSocket.IPerMessageDeflateOptions)} */
WebSocket.IServerOptions.prototype.perMessageDeflate;
 /** @type {number} */
WebSocket.IServerOptions.prototype.maxPayload;

/**
 * @constructor
 * @struct
 * @param {!WebSocket.IServerOptions=} options
 * @param {!Function=} callback
 */
WebSocket.Server = function(options, callback) {};
 /** @type {!WebSocket.IServerOptions} */
WebSocket.Server.prototype.options;
 /** @type {string} */
WebSocket.Server.prototype.path;
 /** @type {!Set<!WebSocket>} */
WebSocket.Server.prototype.clients;

/**
 * @param {function(?): void=} cb
 * @return {void}
 */
WebSocket.Server.prototype.close = function(cb) {};

/**
 * @param {!IncomingMessage} request
 * @param {?} socket
 * @param {?} upgradeHead
 * @param {function(!WebSocket): void} callback
 * @return {void}
 */
WebSocket.Server.prototype.handleUpgrade = function(request, socket, upgradeHead, callback) {};

/**
 * @param {!IncomingMessage} request
 * @return {boolean}
 */
WebSocket.Server.prototype.shouldHandle = function(request) {};

/**
 * @param {string} event
 * @param {function(!WebSocket, !IncomingMessage): void|function(!Error): void|function(!Array<string>, !IncomingMessage): void|function(): void} cb_or_listener
 * @return {Server}
 */
WebSocket.Server.prototype.on = function(event, cb_or_listener) {};

/**
 * @param {string} event
 * @param {function(!WebSocket): void|function(!Error): void|function(!Array<string>, !IncomingMessage): void|function(): void} cb_or_listener
 * @return {Server}
 */
WebSocket.Server.prototype.addListener = function(event, cb_or_listener) {};

/**
 * @param {!WebSocket.IServerOptions=} options
 * @param {function(!WebSocket): void=} connectionListener
 * @return {!WebSocket.Server}
 */
WebSocket.createServer = function(options, connectionListener) {};

/**
 * @param {string} address
 * @param {!Function=} openListener
 * @return {void}
 */
WebSocket.connect = function(address, openListener) {};

/**
 * @param {string} address
 * @param {!Function=} openListener
 * @return {void}
 */
WebSocket.createConnection = function(address, openListener) {};

/* TODO: ExportAssignment in  */
