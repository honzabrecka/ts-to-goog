/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rx-core-binding/index.d.ts:
/**
 * @extends {Rx.Observable}
 * @extends {Rx.Observer}
 * @extends {Rx.IDisposable}
 * @record
 * @struct
 */
Rx.ISubject = function() {};

/**
 * @return {boolean}
 */
Rx.ISubject.prototype.hasObservers = function() {};
/**
 * @extends {Rx.ISubject}
 * @record
 * @struct
 */
Rx.Subject = function() {};
/**
 * @record
 * @struct
 */
Rx.SubjectStatic = function() {};

/* TODO: ConstructSignature: Rx */

/**
 * @template T
 * @param {!Rx.Observer<T>=} observer
 * @param {!Rx.Observable<T>=} observable
 * @return {!Rx.ISubject<T>}
 */
Rx.SubjectStatic.prototype.create = function(observer, observable) {};
 /** @type {!Rx.SubjectStatic} */
Rx.Subject;
/**
 * @record
 * @struct
 */
Rx.AsyncSubject = function() {};
/**
 * @record
 * @struct
 */
Rx.AsyncSubjectStatic = function() {};

/* TODO: ConstructSignature: Rx */
 /** @type {!Rx.AsyncSubjectStatic} */
Rx.AsyncSubject;
/**
 * @record
 * @struct
 */
Rx.BehaviorSubject = function() {};

/**
 * @return {T}
 */
Rx.BehaviorSubject.prototype.getValue = function() {};
/**
 * @record
 * @struct
 */
Rx.BehaviorSubjectStatic = function() {};

/* TODO: ConstructSignature: Rx */
 /** @type {!Rx.BehaviorSubjectStatic} */
Rx.BehaviorSubject;
/**
 * @record
 * @struct
 */
Rx.ReplaySubject = function() {};
/**
 * @record
 * @struct
 */
Rx.ReplaySubjectStatic = function() {};

/* TODO: ConstructSignature: Rx */
 /** @type {!Rx.ReplaySubjectStatic} */
Rx.ReplaySubject;
/**
 * @extends {Rx.Observable}
 * @record
 * @struct
 */
Rx.ConnectableObservable = function() {};

/**
 * @return {!Rx.IDisposable}
 */
Rx.ConnectableObservable.prototype.connect = function() {};

/**
 * @return {!Rx.Observable<T>}
 */
Rx.ConnectableObservable.prototype.refCount = function() {};
/**
 * @record
 * @struct
 */
Rx.ConnectableObservableStatic = function() {};

/* TODO: ConstructSignature: Rx */
 /** @type {!Rx.ConnectableObservableStatic} */
Rx.ConnectableObservable;

/**
 * @template TResult
 * @param {!Rx.Observable|function(): !Rx.ISubject<T>} subject_or_subjectSelector
 * @param {function(?<T>): !Rx.Observable=} selector
 * @return {?<T>|!Rx.Observable}
 */
Rx.Observable.prototype.multicast = function(subject_or_subjectSelector, selector) {};

/**
 * @template TResult
 * @param {function(?<T>): !Rx.Observable<TResult>=} selector
 * @return {?<T>|!Rx.Observable<TResult>}
 */
Rx.Observable.prototype.publish = function(selector) {};

/**
 * Returns an observable sequence that shares a single subscription to the underlying sequence.
 * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one,
 * then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
 * 
 * \@example 
 * var res = source.share();
 * 
 * @return {!Rx.Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
 */
Rx.Observable.prototype.share = function() {};

/**
 * @template TResult
 * @param {function(?<T>): !Rx.Observable<TResult>=} selector
 * @return {?<T>|!Rx.Observable<TResult>}
 */
Rx.Observable.prototype.publishLast = function(selector) {};

/**
 * @template TResult
 * @param {T|function(?<T>): !Rx.Observable<TResult>} initialValue_or_selector
 * @param {T=} initialValue
 * @return {?<T>|!Rx.Observable<TResult>}
 */
Rx.Observable.prototype.publishValue = function(initialValue_or_selector, initialValue) {};

/**
 * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
 * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one,
 * then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
 * 
 * \@example 
 * var res = source.shareValue(42);
 * 
 * @param {T} initialValue Initial value received by observers upon subscription.
 * @return {!Rx.Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
 */
Rx.Observable.prototype.shareValue = function(initialValue) {};

/**
 * @param {boolean|function(?<T>): !Rx.Observable=} selector
 * @param {number=} bufferSize
 * @param {number=} window
 * @param {!Rx.IScheduler=} scheduler
 * @return {?<T>|!Rx.Observable}
 */
Rx.Observable.prototype.replay = function(selector, bufferSize, window, scheduler) {};

/**
 * @param {number=} bufferSize
 * @param {number=} window
 * @param {!Rx.IScheduler=} scheduler
 * @return {!Rx.Observable}
 */
Rx.Observable.prototype.shareReplay = function(bufferSize, window, scheduler) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "rx-core-binding"
/** @const */
tsickle_declare_module.rx_core_binding = {};

/* TODO: ExportAssignment in tsickle_declare_module.rx_core_binding */
