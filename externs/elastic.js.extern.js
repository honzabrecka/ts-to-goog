/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/elastic.js/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var elasticjs = {};
/**
 * @record
 * @struct
 */
elasticjs.Facet = function() {};
/**
 * @record
 * @struct
 */
elasticjs.Geo = function() {};
/**
 * @record
 * @struct
 */
elasticjs.Suggest = function() {};
/**
 * @record
 * @struct
 */
elasticjs.Generator = function() {};
/**
 * @record
 * @struct
 */
elasticjs.Query = function() {};
/**
 * @record
 * @struct
 */
elasticjs.Filter = function() {};
/**
 * @record
 * @struct
 */
elasticjs.Aggregation = function() {};
/**
 * @record
 * @struct
 */
elasticjs.ScoreFunction = function() {};
/**
 * @implements {elasticjs.Aggregation}
 * @constructor
 * @struct
 */
elasticjs.AggregationMixin = function() {};

/**
 * @return {string}
 */
elasticjs.AggregationMixin.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.AggregationMixin}
 */
elasticjs.AggregationMixin.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.AggregationMixin}
 */
elasticjs.AggregationMixin.prototype.aggregation = function(agg) {};

/**
 * @return {?}
 */
elasticjs.AggregationMixin.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {(!elasticjs.Filter|!Array<!elasticjs.Filter>)} f
 */
elasticjs.AndFilter = function(f) {};

/**
 * @return {string}
 */
elasticjs.AndFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.AndFilter}
 */
elasticjs.AndFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.AndFilter}
 */
elasticjs.AndFilter.prototype.cacheKey = function(key) {};

/**
 * @param {(!elasticjs.Filter|!Array<!elasticjs.Filter>)} fltr
 * @return {!elasticjs.AndFilter}
 */
elasticjs.AndFilter.prototype.filters = function(fltr) {};

/**
 * @param {string} name
 * @return {!elasticjs.AndFilter}
 */
elasticjs.AndFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.AndFilter}
 */
elasticjs.AndFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.AvgAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.AvgAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.AvgAggregation}
 */
elasticjs.AvgAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.AvgAggregation}
 */
elasticjs.AvgAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.AvgAggregation}
 */
elasticjs.AvgAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.AvgAggregation}
 */
elasticjs.AvgAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.AvgAggregation}
 */
elasticjs.AvgAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.AvgAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.BoolFilter = function() {};

/**
 * @return {string}
 */
elasticjs.BoolFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.BoolFilter}
 */
elasticjs.BoolFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.BoolFilter}
 */
elasticjs.BoolFilter.prototype.cacheKey = function(key) {};

/**
 * @param {(!elasticjs.Filter|!Array<!elasticjs.Filter>)} oFilter
 * @return {!elasticjs.BoolFilter}
 */
elasticjs.BoolFilter.prototype.must = function(oFilter) {};

/**
 * @param {(!elasticjs.Filter|!Array<!elasticjs.Filter>)} oFilter
 * @return {!elasticjs.BoolFilter}
 */
elasticjs.BoolFilter.prototype.mustNot = function(oFilter) {};

/**
 * @param {string} name
 * @return {!elasticjs.BoolFilter}
 */
elasticjs.BoolFilter.prototype.name = function(name) {};

/**
 * @param {(!elasticjs.Filter|!Array<!elasticjs.Filter>)} oFilter
 * @return {!elasticjs.BoolFilter}
 */
elasticjs.BoolFilter.prototype.should = function(oFilter) {};

/**
 * @return {!elasticjs.BoolFilter}
 */
elasticjs.BoolFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.BoolQuery = function() {};

/**
 * @return {string}
 */
elasticjs.BoolQuery.prototype._type = function() {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.BoolQuery}
 */
elasticjs.BoolQuery.prototype.adjustPureNegative = function(trueFalse) {};

/**
 * @param {number} boost
 * @return {!elasticjs.BoolQuery}
 */
elasticjs.BoolQuery.prototype.boost = function(boost) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.BoolQuery}
 */
elasticjs.BoolQuery.prototype.disableCoord = function(trueFalse) {};

/**
 * @param {number} minMatch
 * @return {!elasticjs.BoolQuery}
 */
elasticjs.BoolQuery.prototype.minimumNumberShouldMatch = function(minMatch) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.BoolQuery}
 */
elasticjs.BoolQuery.prototype.must = function(oQuery) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.BoolQuery}
 */
elasticjs.BoolQuery.prototype.mustNot = function(oQuery) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.BoolQuery}
 */
elasticjs.BoolQuery.prototype.should = function(oQuery) {};

/**
 * @return {?}
 */
elasticjs.BoolQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {number} boostVal
 */
elasticjs.BoostFactorScoreFunction = function(boostVal) {};

/**
 * @return {string}
 */
elasticjs.BoostFactorScoreFunction.prototype._type = function() {};

/**
 * @param {number} b
 * @return {!elasticjs.BoostFactorScoreFunction}
 */
elasticjs.BoostFactorScoreFunction.prototype.boost = function(b) {};

/**
 * @param {!elasticjs.Filter} oFilter
 * @return {!elasticjs.BoostFactorScoreFunction}
 */
elasticjs.BoostFactorScoreFunction.prototype.filter = function(oFilter) {};

/**
 * @return {?}
 */
elasticjs.BoostFactorScoreFunction.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} positiveQry
 * @param {!Object} negativeQry
 * @param {number} negativeBoost
 */
elasticjs.BoostingQuery = function(positiveQry, negativeQry, negativeBoost) {};

/**
 * @return {string}
 */
elasticjs.BoostingQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.BoostingQuery}
 */
elasticjs.BoostingQuery.prototype.boost = function(boost) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.BoostingQuery}
 */
elasticjs.BoostingQuery.prototype.negative = function(oQuery) {};

/**
 * @param {number} boost
 * @return {!elasticjs.BoostingQuery}
 */
elasticjs.BoostingQuery.prototype.negativeBoost = function(boost) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.BoostingQuery}
 */
elasticjs.BoostingQuery.prototype.positive = function(oQuery) {};

/**
 * @return {?}
 */
elasticjs.BoostingQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.CardinalityAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.CardinalityAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.CardinalityAggregation}
 */
elasticjs.CardinalityAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.CardinalityAggregation}
 */
elasticjs.CardinalityAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.CardinalityAggregation}
 */
elasticjs.CardinalityAggregation.prototype.params = function(p) {};

/**
 * @param {number} num
 * @return {!elasticjs.CardinalityAggregation}
 */
elasticjs.CardinalityAggregation.prototype.precisionThreshold = function(num) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.CardinalityAggregation}
 */
elasticjs.CardinalityAggregation.prototype.rehash = function(trueFalse) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.CardinalityAggregation}
 */
elasticjs.CardinalityAggregation.prototype.script = function(scriptCode) {};

/**
 * @return {?}
 */
elasticjs.CardinalityAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} qstr
 */
elasticjs.CommonTermsQuery = function(field, qstr) {};

/**
 * @return {string}
 */
elasticjs.CommonTermsQuery.prototype._type = function() {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.analyzer = function(analyzer) {};

/**
 * @param {!Number} boost
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.boost = function(boost) {};

/**
 * @param {!Number} freq
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.cutoffFrequency = function(freq) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.disableCoord = function(trueFalse) {};

/**
 * @param {string} f
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.field = function(f) {};

/**
 * @param {string} op
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.highFreqOperator = function(op) {};

/**
 * @param {string} op
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.lowFreqOperator = function(op) {};

/**
 * @param {number} min
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.minimumShouldMatch = function(min) {};

/**
 * @param {number} min
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.minimumShouldMatchHighFreq = function(min) {};

/**
 * @param {number} min
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.minimumShouldMatchLowFreq = function(min) {};

/**
 * @param {string} qstr
 * @return {!elasticjs.CommonTermsQuery}
 */
elasticjs.CommonTermsQuery.prototype.query = function(qstr) {};

/**
 * @return {?}
 */
elasticjs.CommonTermsQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.CompletionSuggester = function(name) {};

/**
 * @return {string}
 */
elasticjs.CompletionSuggester.prototype._type = function() {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.analyzer = function(analyzer) {};

/**
 * @param {number} d
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.editDistance = function(d) {};

/**
 * @param {string} field
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.field = function(field) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.fuzzy = function(trueFalse) {};

/**
 * @param {number} m
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.minLength = function(m) {};

/**
 * @param {number} l
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.prefixLength = function(l) {};

/**
 * @param {number} s
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.shardSize = function(s) {};

/**
 * @param {number} s
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.size = function(s) {};

/**
 * @param {string} txt
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.text = function(txt) {};

/**
 * @return {?}
 */
elasticjs.CompletionSuggester.prototype.toJSON = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.transpositions = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.CompletionSuggester}
 */
elasticjs.CompletionSuggester.prototype.unicodeAware = function(trueFalse) {};

/**
 * @constructor
 * @struct
 */
elasticjs.ConstantScoreQuery = function() {};

/**
 * @return {string}
 */
elasticjs.ConstantScoreQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.ConstantScoreQuery}
 */
elasticjs.ConstantScoreQuery.prototype.boost = function(boost) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.ConstantScoreQuery}
 */
elasticjs.ConstantScoreQuery.prototype.cache = function(trueFalse) {};

/**
 * @param {string} k
 * @return {!elasticjs.ConstantScoreQuery}
 */
elasticjs.ConstantScoreQuery.prototype.cacheKey = function(k) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.ConstantScoreQuery}
 */
elasticjs.ConstantScoreQuery.prototype.filter = function(oFilter) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.ConstantScoreQuery}
 */
elasticjs.ConstantScoreQuery.prototype.query = function(oQuery) {};

/**
 * @return {?}
 */
elasticjs.ConstantScoreQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.DateHistogramAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.DateHistogramAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {(string|number)} min
 * @param {(string|number)} max
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.extendedBounds = function(min, max) {};

/**
 * @param {string} field
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.field = function(field) {};

/**
 * @param {string} f
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.format = function(f) {};

/**
 * @param {string} i
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.interval = function(i) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.keyed = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.lang = function(language) {};

/**
 * @param {number} num
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.minDocCount = function(num) {};

/**
 * @param {string} order
 * @param {string} direction
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.order = function(order, direction) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.params = function(p) {};

/**
 * @param {string} offset
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.postOffset = function(offset) {};

/**
 * @param {string} tz
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.postZone = function(tz) {};

/**
 * @param {string} offset
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.preOffset = function(offset) {};

/**
 * @param {string} tz
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.preZone = function(tz) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.preZoneAdjustLargeInterval = function(trueFalse) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @param {string} tz
 * @return {!elasticjs.DateHistogramAggregation}
 */
elasticjs.DateHistogramAggregation.prototype.timeZone = function(tz) {};

/**
 * @return {?}
 */
elasticjs.DateHistogramAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.DateHistogramFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.DateHistogramFacet.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {number} f
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.factor = function(f) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.field = function(fieldName) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} timeInterval
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.interval = function(timeInterval) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.keyField = function(fieldName) {};

/**
 * @param {string} language
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.lang = function(language) {};

/**
 * @param {string} m
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.nested = function(path) {};

/**
 * @param {string} o
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.order = function(o) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.params = function(p) {};

/**
 * @param {string} offset
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.postOffset = function(offset) {};

/**
 * @param {number} tz
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.postZone = function(tz) {};

/**
 * @param {string} offset
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.preOffset = function(offset) {};

/**
 * @param {number} tz
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.preZone = function(tz) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.preZoneAdjustLargeInterval = function(trueFalse) {};

/**
 * @param {string} scope
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.scope = function(scope) {};

/**
 * @param {number} tz
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.timeZone = function(tz) {};

/**
 * @return {?}
 */
elasticjs.DateHistogramFacet.prototype.toJSON = function() {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.valueField = function(fieldName) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.DateHistogramFacet}
 */
elasticjs.DateHistogramFacet.prototype.valueScript = function(scriptCode) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.DateRangeAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.DateRangeAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} field
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.field = function(field) {};

/**
 * @param {string} f
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.format = function(f) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.keyed = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.params = function(p) {};

/**
 * @param {string} from
 * @param {string} to
 * @param {string} key
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.range = function(from, to, key) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.DateRangeAggregation}
 */
elasticjs.DateRangeAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.DateRangeAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 */
elasticjs.DecayScoreFunction = function(field) {};

/**
 * @return {string}
 */
elasticjs.DecayScoreFunction.prototype._type = function() {};

/**
 * @param {number} d
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.decay = function(d) {};

/**
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.exp = function() {};

/**
 * @param {string} f
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.field = function(f) {};

/**
 * @param {!elasticjs.Filter} oFilter
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.filter = function(oFilter) {};

/**
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.gauss = function() {};

/**
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.linear = function() {};

/**
 * @param {string} o
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.offset = function(o) {};

/**
 * @param {string} o
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.origin = function(o) {};

/**
 * @param {string} s
 * @return {!elasticjs.DecayScoreFunction}
 */
elasticjs.DecayScoreFunction.prototype.scale = function(s) {};

/**
 * @return {?}
 */
elasticjs.DecayScoreFunction.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.DirectGenerator = function() {};

/**
 * @return {string}
 */
elasticjs.DirectGenerator.prototype._type = function() {};

/**
 * @param {number} a
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.accuracy = function(a) {};

/**
 * @param {string} field
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.field = function(field) {};

/**
 * @param {number} max
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.maxEdits = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.maxInspections = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.maxTermFreq = function(max) {};

/**
 * @param {number} min
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.minDocFreq = function(min) {};

/**
 * @param {number} len
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.minWordLen = function(len) {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.postFilter = function(analyzer) {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.preFilter = function(analyzer) {};

/**
 * @param {number} s
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.size = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.sort = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.stringDistance = function(s) {};

/**
 * @param {string} m
 * @return {!elasticjs.DirectGenerator}
 */
elasticjs.DirectGenerator.prototype.suggestMode = function(m) {};

/**
 * @return {?}
 */
elasticjs.DirectGenerator.prototype.toJSON = function() {};
/**
 * @constructor
 * @struct
 */
elasticjs.DirectSettingsMixin = function() {};

/**
 * @param {number} a
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.accuracy = function(a) {};

/**
 * @param {number} max
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.maxEdits = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.maxInspections = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.maxTermFreq = function(max) {};

/**
 * @param {number} min
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.minDocFreq = function(min) {};

/**
 * @param {number} len
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.minWordLen = function(len) {};

/**
 * @param {number} len
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.prefixLen = function(len) {};

/**
 * @param {string} s
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.sort = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.stringDistance = function(s) {};

/**
 * @param {string} m
 * @return {!elasticjs.DirectSettingsMixin}
 */
elasticjs.DirectSettingsMixin.prototype.suggestMode = function(m) {};

/**
 * @constructor
 * @struct
 */
elasticjs.DisMaxQuery = function() {};

/**
 * @return {string}
 */
elasticjs.DisMaxQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.DisMaxQuery}
 */
elasticjs.DisMaxQuery.prototype.boost = function(boost) {};

/**
 * @param {(!elasticjs.Query|!Array<!elasticjs.Query>)} qs
 * @return {!elasticjs.DisMaxQuery}
 */
elasticjs.DisMaxQuery.prototype.queries = function(qs) {};

/**
 * @param {number} tieBreaker
 * @return {!elasticjs.DisMaxQuery}
 */
elasticjs.DisMaxQuery.prototype.tieBreaker = function(tieBreaker) {};

/**
 * @return {?}
 */
elasticjs.DisMaxQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.ExistsFilter = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.ExistsFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.ExistsFilter}
 */
elasticjs.ExistsFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.ExistsFilter}
 */
elasticjs.ExistsFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} name
 * @return {!elasticjs.ExistsFilter}
 */
elasticjs.ExistsFilter.prototype.field = function(name) {};

/**
 * @param {string} name
 * @return {!elasticjs.ExistsFilter}
 */
elasticjs.ExistsFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.ExistsFilter}
 */
elasticjs.ExistsFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.ExtendedStatsAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.ExtendedStatsAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.ExtendedStatsAggregation}
 */
elasticjs.ExtendedStatsAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.ExtendedStatsAggregation}
 */
elasticjs.ExtendedStatsAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.ExtendedStatsAggregation}
 */
elasticjs.ExtendedStatsAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.ExtendedStatsAggregation}
 */
elasticjs.ExtendedStatsAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.ExtendedStatsAggregation}
 */
elasticjs.ExtendedStatsAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.ExtendedStatsAggregation.prototype.toJSON = function() {};
/**
 * @constructor
 * @struct
 */
elasticjs.FacetMixin = function() {};

/**
 * @return {string}
 */
elasticjs.FacetMixin.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FacetMixin}
 */
elasticjs.FacetMixin.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.FacetMixin}
 */
elasticjs.FacetMixin.prototype.facetFilter = function(oFilter) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FacetMixin}
 */
elasticjs.FacetMixin.prototype.global = function(trueFalse) {};

/**
 * @param {string} m
 * @return {!elasticjs.FacetMixin}
 */
elasticjs.FacetMixin.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.FacetMixin}
 */
elasticjs.FacetMixin.prototype.nested = function(path) {};

/**
 * @param {string} scope
 * @return {!elasticjs.FacetMixin}
 */
elasticjs.FacetMixin.prototype.scope = function(scope) {};

/**
 * @return {?}
 */
elasticjs.FacetMixin.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!elasticjs.Query} spanQry
 * @param {number} field
 */
elasticjs.FieldMaskingSpanQuery = function(spanQry, field) {};

/**
 * @return {string}
 */
elasticjs.FieldMaskingSpanQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.FieldMaskingSpanQuery}
 */
elasticjs.FieldMaskingSpanQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.FieldMaskingSpanQuery}
 */
elasticjs.FieldMaskingSpanQuery.prototype.field = function(f) {};

/**
 * @param {!elasticjs.Query} spanQuery
 * @return {!elasticjs.FieldMaskingSpanQuery}
 */
elasticjs.FieldMaskingSpanQuery.prototype.query = function(spanQuery) {};

/**
 * @return {?}
 */
elasticjs.FieldMaskingSpanQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.FilterAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.FilterAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.FilterAggregation}
 */
elasticjs.FilterAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.FilterAggregation}
 */
elasticjs.FilterAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {!elasticjs.Filter} oFilter
 * @return {!elasticjs.FilterAggregation}
 */
elasticjs.FilterAggregation.prototype.filter = function(oFilter) {};

/**
 * @return {?}
 */
elasticjs.FilterAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} someQuery
 * @param {!Object} someFilter
 */
elasticjs.FilteredQuery = function(someQuery, someFilter) {};

/**
 * @return {string}
 */
elasticjs.FilteredQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.FilteredQuery}
 */
elasticjs.FilteredQuery.prototype.boost = function(boost) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FilteredQuery}
 */
elasticjs.FilteredQuery.prototype.cache = function(trueFalse) {};

/**
 * @param {string} k
 * @return {!elasticjs.FilteredQuery}
 */
elasticjs.FilteredQuery.prototype.cacheKey = function(k) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.FilteredQuery}
 */
elasticjs.FilteredQuery.prototype.filter = function(oFilter) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.FilteredQuery}
 */
elasticjs.FilteredQuery.prototype.query = function(oQuery) {};

/**
 * @param {string} strategy
 * @return {!elasticjs.FilteredQuery}
 */
elasticjs.FilteredQuery.prototype.strategy = function(strategy) {};

/**
 * @return {?}
 */
elasticjs.FilteredQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.FilterFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.FilterFacet.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FilterFacet}
 */
elasticjs.FilterFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.FilterFacet}
 */
elasticjs.FilterFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.FilterFacet}
 */
elasticjs.FilterFacet.prototype.filter = function(oFilter) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FilterFacet}
 */
elasticjs.FilterFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} m
 * @return {!elasticjs.FilterFacet}
 */
elasticjs.FilterFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.FilterFacet}
 */
elasticjs.FilterFacet.prototype.nested = function(path) {};

/**
 * @param {string} scope
 * @return {!elasticjs.FilterFacet}
 */
elasticjs.FilterFacet.prototype.scope = function(scope) {};

/**
 * @return {?}
 */
elasticjs.FilterFacet.prototype.toJSON = function() {};
/**
 * @constructor
 * @struct
 */
elasticjs.FilterMixin = function() {};

/**
 * @return {string}
 */
elasticjs.FilterMixin.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FilterMixin}
 */
elasticjs.FilterMixin.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.FilterMixin}
 */
elasticjs.FilterMixin.prototype.cacheKey = function(key) {};

/**
 * @param {string} name
 * @return {!elasticjs.FilterMixin}
 */
elasticjs.FilterMixin.prototype.name = function(name) {};

/**
 * @return {!elasticjs.FilterMixin}
 */
elasticjs.FilterMixin.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.FunctionScoreQuery = function() {};

/**
 * @return {string}
 */
elasticjs.FunctionScoreQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.FunctionScoreQuery}
 */
elasticjs.FunctionScoreQuery.prototype.boost = function(boost) {};

/**
 * @param {string} mode
 * @return {!elasticjs.FunctionScoreQuery}
 */
elasticjs.FunctionScoreQuery.prototype.boostMode = function(mode) {};

/**
 * @param {!elasticjs.Filter} oFilter
 * @return {!elasticjs.FunctionScoreQuery}
 */
elasticjs.FunctionScoreQuery.prototype.filter = function(oFilter) {};

/**
 * @param {!Array<!elasticjs.ScoreFunction>} funcs
 * @return {!elasticjs.FunctionScoreQuery}
 */
elasticjs.FunctionScoreQuery.prototype.functions = function(funcs) {};

/**
 * @param {!elasticjs.Query} oQuery
 * @return {!elasticjs.FunctionScoreQuery}
 */
elasticjs.FunctionScoreQuery.prototype.query = function(oQuery) {};

/**
 * @param {string} mode
 * @return {!elasticjs.FunctionScoreQuery}
 */
elasticjs.FunctionScoreQuery.prototype.scoreMode = function(mode) {};

/**
 * @return {?}
 */
elasticjs.FunctionScoreQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} likeText
 */
elasticjs.FuzzyLikeThisFieldQuery = function(field, likeText) {};

/**
 * @return {string}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype._type = function() {};

/**
 * @param {string} analyzerName
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.analyzer = function(analyzerName) {};

/**
 * @param {number} boost
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.boost = function(boost) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.failOnUnsupportedField = function(trueFalse) {};

/**
 * @param {string} f
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.field = function(f) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.ignoreTf = function(trueFalse) {};

/**
 * @param {string} s
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.likeText = function(s) {};

/**
 * @param {number} max
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.maxQueryTerms = function(max) {};

/**
 * @param {number} min
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.minSimilarity = function(min) {};

/**
 * @param {number} len
 * @return {!elasticjs.FuzzyLikeThisFieldQuery}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.prefixLength = function(len) {};

/**
 * @return {?}
 */
elasticjs.FuzzyLikeThisFieldQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} likeText
 */
elasticjs.FuzzyLikeThisQuery = function(likeText) {};

/**
 * @return {string}
 */
elasticjs.FuzzyLikeThisQuery.prototype._type = function() {};

/**
 * @param {string} analyzerName
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.analyzer = function(analyzerName) {};

/**
 * @param {number} boost
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.boost = function(boost) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.failOnUnsupportedField = function(trueFalse) {};

/**
 * @param {(string|!Array<string>)} f
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.fields = function(f) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.ignoreTf = function(trueFalse) {};

/**
 * @param {string} s
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.likeText = function(s) {};

/**
 * @param {number} max
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.maxQueryTerms = function(max) {};

/**
 * @param {number} min
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.minSimilarity = function(min) {};

/**
 * @param {number} len
 * @return {!elasticjs.FuzzyLikeThisQuery}
 */
elasticjs.FuzzyLikeThisQuery.prototype.prefixLength = function(len) {};

/**
 * @return {?}
 */
elasticjs.FuzzyLikeThisQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} value
 */
elasticjs.FuzzyQuery = function(field, value) {};

/**
 * @return {string}
 */
elasticjs.FuzzyQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.field = function(f) {};

/**
 * @param {number} max
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.maxExpansions = function(max) {};

/**
 * @param {number} min
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.minSimilarity = function(min) {};

/**
 * @param {number} len
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.prefixLength = function(len) {};

/**
 * @param {string} m
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.rewrite = function(m) {};

/**
 * @return {?}
 */
elasticjs.FuzzyQuery.prototype.toJSON = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.transpositions = function(trueFalse) {};

/**
 * @param {string} s
 * @return {!elasticjs.FuzzyQuery}
 */
elasticjs.FuzzyQuery.prototype.value = function(s) {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.GeoBboxFilter = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.GeoBboxFilter.prototype._type = function() {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.bottomRight = function(p) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} f
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.field = function(f) {};

/**
 * @param {string} name
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.name = function(name) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.normalize = function(trueFalse) {};

/**
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.toJSON = function() {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.topLeft = function(p) {};

/**
 * @param {string} type
 * @return {!elasticjs.GeoBboxFilter}
 */
elasticjs.GeoBboxFilter.prototype.type = function(type) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.GeoDistanceAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.GeoDistanceAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.center = function(p) {};

/**
 * @param {string} type
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.distanceType = function(type) {};

/**
 * @param {string} field
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.field = function(field) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.keyed = function(trueFalse) {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.origin = function(p) {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.point = function(p) {};

/**
 * @param {string} from
 * @param {string} to
 * @param {string} key
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.range = function(from, to, key) {};

/**
 * @return {?}
 */
elasticjs.GeoDistanceAggregation.prototype.toJSON = function() {};

/**
 * @param {string} unit
 * @return {!elasticjs.GeoDistanceAggregation}
 */
elasticjs.GeoDistanceAggregation.prototype.unit = function(unit) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.GeoDistanceFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.GeoDistanceFacet.prototype._type = function() {};

/**
 * @param {!Number} from
 * @param {!Number} to
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.addRange = function(from, to) {};

/**
 * @param {!Number} from
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.addUnboundedFrom = function(from) {};

/**
 * @param {!Number} to
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.addUnboundedTo = function(to) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {string} type
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.distanceType = function(type) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.field = function(fieldName) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.lang = function(language) {};

/**
 * @param {string} m
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.nested = function(path) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.normalize = function(trueFalse) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.params = function(p) {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.point = function(p) {};

/**
 * @param {string} scope
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.scope = function(scope) {};

/**
 * @return {?}
 */
elasticjs.GeoDistanceFacet.prototype.toJSON = function() {};

/**
 * @param {string} unit
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.unit = function(unit) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.valueField = function(fieldName) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.GeoDistanceFacet}
 */
elasticjs.GeoDistanceFacet.prototype.valueScript = function(scriptCode) {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.GeoDistanceFilter = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.GeoDistanceFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.cacheKey = function(key) {};

/**
 * @param {!Number} numericDistance
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.distance = function(numericDistance) {};

/**
 * @param {string} type
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.distanceType = function(type) {};

/**
 * @param {string} f
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.field = function(f) {};

/**
 * @param {string} name
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.name = function(name) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.normalize = function(trueFalse) {};

/**
 * @param {string} t
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.optimizeBbox = function(t) {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.point = function(p) {};

/**
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.toJSON = function() {};

/**
 * @param {string} unit
 * @return {!elasticjs.GeoDistanceFilter}
 */
elasticjs.GeoDistanceFilter.prototype.unit = function(unit) {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.GeoDistanceRangeFilter = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.GeoDistanceRangeFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} type
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.distanceType = function(type) {};

/**
 * @param {string} f
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.field = function(f) {};

/**
 * @param {!Number} numericDistance
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.from = function(numericDistance) {};

/**
 * @param {!Number} val
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.gt = function(val) {};

/**
 * @param {!Number} val
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.gte = function(val) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.includeLower = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.includeUpper = function(trueFalse) {};

/**
 * @param {!Number} val
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.lt = function(val) {};

/**
 * @param {!Number} val
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.lte = function(val) {};

/**
 * @param {string} name
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.name = function(name) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.normalize = function(trueFalse) {};

/**
 * @param {string} t
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.optimizeBbox = function(t) {};

/**
 * @param {!elasticjs.GeoPoint} p
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.point = function(p) {};

/**
 * @param {!Number} numericDistance
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.to = function(numericDistance) {};

/**
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.toJSON = function() {};

/**
 * @param {string} unit
 * @return {!elasticjs.GeoDistanceRangeFilter}
 */
elasticjs.GeoDistanceRangeFilter.prototype.unit = function(unit) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.GeoHashGridAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.GeoHashGridAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.GeoHashGridAggregation}
 */
elasticjs.GeoHashGridAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.GeoHashGridAggregation}
 */
elasticjs.GeoHashGridAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} field
 * @return {!elasticjs.GeoHashGridAggregation}
 */
elasticjs.GeoHashGridAggregation.prototype.field = function(field) {};

/**
 * @param {number} p
 * @return {!elasticjs.GeoHashGridAggregation}
 */
elasticjs.GeoHashGridAggregation.prototype.precision = function(p) {};

/**
 * @param {number} shardSize
 * @return {!elasticjs.GeoHashGridAggregation}
 */
elasticjs.GeoHashGridAggregation.prototype.shardSize = function(shardSize) {};

/**
 * @param {number} size
 * @return {!elasticjs.GeoHashGridAggregation}
 */
elasticjs.GeoHashGridAggregation.prototype.size = function(size) {};

/**
 * @return {?}
 */
elasticjs.GeoHashGridAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Array<?>} p
 */
elasticjs.GeoPoint = function(p) {};

/**
 * @return {string}
 */
elasticjs.GeoPoint.prototype._type = function() {};

/**
 * @param {!Array<?>} a
 * @return {!elasticjs.GeoPoint}
 */
elasticjs.GeoPoint.prototype.array = function(a) {};

/**
 * @param {string} hash
 * @param {number} precision
 * @return {!elasticjs.GeoPoint}
 */
elasticjs.GeoPoint.prototype.geohash = function(hash, precision) {};

/**
 * @param {!Object} obj
 * @return {!elasticjs.GeoPoint}
 */
elasticjs.GeoPoint.prototype.properties = function(obj) {};

/**
 * @param {string} s
 * @return {!elasticjs.GeoPoint}
 */
elasticjs.GeoPoint.prototype.string = function(s) {};

/**
 * @return {?}
 */
elasticjs.GeoPoint.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.GeoPolygonFilter = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.GeoPolygonFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoPolygonFilter}
 */
elasticjs.GeoPolygonFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.GeoPolygonFilter}
 */
elasticjs.GeoPolygonFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} f
 * @return {!elasticjs.GeoPolygonFilter}
 */
elasticjs.GeoPolygonFilter.prototype.field = function(f) {};

/**
 * @param {string} name
 * @return {!elasticjs.GeoPolygonFilter}
 */
elasticjs.GeoPolygonFilter.prototype.name = function(name) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.GeoPolygonFilter}
 */
elasticjs.GeoPolygonFilter.prototype.normalize = function(trueFalse) {};

/**
 * @param {!Array<?>} pointsArray
 * @return {!elasticjs.GeoPolygonFilter}
 */
elasticjs.GeoPolygonFilter.prototype.points = function(pointsArray) {};

/**
 * @return {!elasticjs.GeoPolygonFilter}
 */
elasticjs.GeoPolygonFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.GeoShapeFilter = function() {};

/**
 * @return {string}
 */
elasticjs.GeoShapeFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} f
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.field = function(f) {};

/**
 * @param {string} indexedShape
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.indexedShape = function(indexedShape) {};

/**
 * @param {string} name
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.name = function(name) {};

/**
 * @param {string} indexedShape
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.relation = function(indexedShape) {};

/**
 * @param {string} shape
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.shape = function(shape) {};

/**
 * @param {string} strategy
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.strategy = function(strategy) {};

/**
 * @return {!elasticjs.GeoShapeFilter}
 */
elasticjs.GeoShapeFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.GeoShapeQuery = function() {};

/**
 * @return {string}
 */
elasticjs.GeoShapeQuery.prototype._type = function() {};

/**
 * @param {!Number} boost
 * @return {!elasticjs.GeoShapeQuery}
 */
elasticjs.GeoShapeQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.GeoShapeQuery}
 */
elasticjs.GeoShapeQuery.prototype.field = function(f) {};

/**
 * @param {string} indexedShape
 * @return {!elasticjs.GeoShapeQuery}
 */
elasticjs.GeoShapeQuery.prototype.indexedShape = function(indexedShape) {};

/**
 * @param {string} indexedShape
 * @return {!elasticjs.GeoShapeQuery}
 */
elasticjs.GeoShapeQuery.prototype.relation = function(indexedShape) {};

/**
 * @param {string} shape
 * @return {!elasticjs.GeoShapeQuery}
 */
elasticjs.GeoShapeQuery.prototype.shape = function(shape) {};

/**
 * @param {string} strategy
 * @return {!elasticjs.GeoShapeQuery}
 */
elasticjs.GeoShapeQuery.prototype.strategy = function(strategy) {};

/**
 * @return {?}
 */
elasticjs.GeoShapeQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.GlobalAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.GlobalAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.GlobalAggregation}
 */
elasticjs.GlobalAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.GlobalAggregation}
 */
elasticjs.GlobalAggregation.prototype.aggregation = function(agg) {};

/**
 * @return {?}
 */
elasticjs.GlobalAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} qry
 * @param {string} type
 */
elasticjs.HasChildFilter = function(qry, type) {};

/**
 * @return {string}
 */
elasticjs.HasChildFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.cacheKey = function(key) {};

/**
 * @param {!elasticjs.Query} f
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.filter = function(f) {};

/**
 * @param {string} name
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.name = function(name) {};

/**
 * @param {!elasticjs.Query} q
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.query = function(q) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.scope = function(s) {};

/**
 * @param {number} cutoff
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.shortCircuitCutoff = function(cutoff) {};

/**
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.toJSON = function() {};

/**
 * @param {string} t
 * @return {!elasticjs.HasChildFilter}
 */
elasticjs.HasChildFilter.prototype.type = function(t) {};

/**
 * @constructor
 * @struct
 * @param {!Object} qry
 * @param {string} type
 */
elasticjs.HasChildQuery = function(qry, type) {};

/**
 * @return {string}
 */
elasticjs.HasChildQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.HasChildQuery}
 */
elasticjs.HasChildQuery.prototype.boost = function(boost) {};

/**
 * @param {!Object} q
 * @return {!elasticjs.HasChildQuery}
 */
elasticjs.HasChildQuery.prototype.query = function(q) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasChildQuery}
 */
elasticjs.HasChildQuery.prototype.scope = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasChildQuery}
 */
elasticjs.HasChildQuery.prototype.scoreMode = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasChildQuery}
 */
elasticjs.HasChildQuery.prototype.scoreType = function(s) {};

/**
 * @param {number} cutoff
 * @return {!elasticjs.HasChildQuery}
 */
elasticjs.HasChildQuery.prototype.shortCircuitCutoff = function(cutoff) {};

/**
 * @return {?}
 */
elasticjs.HasChildQuery.prototype.toJSON = function() {};

/**
 * @param {string} t
 * @return {!elasticjs.HasChildQuery}
 */
elasticjs.HasChildQuery.prototype.type = function(t) {};

/**
 * @constructor
 * @struct
 * @param {!Object} qry
 * @param {string} parentType
 */
elasticjs.HasParentFilter = function(qry, parentType) {};

/**
 * @return {string}
 */
elasticjs.HasParentFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.cacheKey = function(key) {};

/**
 * @param {!Object} f
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.filter = function(f) {};

/**
 * @param {string} name
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.name = function(name) {};

/**
 * @param {string} t
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.parentType = function(t) {};

/**
 * @param {!Object} q
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.query = function(q) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.scope = function(s) {};

/**
 * @return {!elasticjs.HasParentFilter}
 */
elasticjs.HasParentFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} qry
 * @param {string} parentType
 */
elasticjs.HasParentQuery = function(qry, parentType) {};

/**
 * @return {string}
 */
elasticjs.HasParentQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.HasParentQuery}
 */
elasticjs.HasParentQuery.prototype.boost = function(boost) {};

/**
 * @param {string} t
 * @return {!elasticjs.HasParentQuery}
 */
elasticjs.HasParentQuery.prototype.parentType = function(t) {};

/**
 * @param {!Object} q
 * @return {!elasticjs.HasParentQuery}
 */
elasticjs.HasParentQuery.prototype.query = function(q) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasParentQuery}
 */
elasticjs.HasParentQuery.prototype.scope = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasParentQuery}
 */
elasticjs.HasParentQuery.prototype.scoreMode = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.HasParentQuery}
 */
elasticjs.HasParentQuery.prototype.scoreType = function(s) {};

/**
 * @return {?}
 */
elasticjs.HasParentQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {(string|!Array<string>)} fields
 */
elasticjs.Highlight = function(fields) {};

/**
 * @return {string}
 */
elasticjs.Highlight.prototype._type = function() {};

/**
 * @param {string} charStr
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.boundaryChars = function(charStr, oField) {};

/**
 * @param {number} cnt
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.boundaryMaxScan = function(cnt, oField) {};

/**
 * @param {string} e
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.encoder = function(e) {};

/**
 * @param {(string|!Array<string>)} vals
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.fields = function(vals) {};

/**
 * @param {string} f
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.fragmenter = function(f, oField) {};

/**
 * @param {number} size
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.fragmentSize = function(size, oField) {};

/**
 * @param {boolean} trueFalse
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.highlightFilter = function(trueFalse, oField) {};

/**
 * @param {number} cnt
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.numberOfFragments = function(cnt, oField) {};

/**
 * @param {string} opts
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.options = function(opts, oField) {};

/**
 * @param {string} o
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.order = function(o, oField) {};

/**
 * @param {(string|!Array<string>)} tags
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.postTags = function(tags, oField) {};

/**
 * @param {(string|!Array<string>)} tags
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.preTags = function(tags, oField) {};

/**
 * @param {boolean} trueFalse
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.requireFieldMatch = function(trueFalse, oField) {};

/**
 * @param {string} s
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.tagsSchema = function(s) {};

/**
 * @return {?}
 */
elasticjs.Highlight.prototype.toJSON = function() {};

/**
 * @param {string} t
 * @param {string} oField
 * @return {!elasticjs.Highlight}
 */
elasticjs.Highlight.prototype.type = function(t, oField) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.HistogramAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.HistogramAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {number} min
 * @param {number} max
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.extendedBounds = function(min, max) {};

/**
 * @param {string} field
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.field = function(field) {};

/**
 * @param {string} f
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.format = function(f) {};

/**
 * @param {number} i
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.interval = function(i) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.keyed = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.lang = function(language) {};

/**
 * @param {number} num
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.minDocCount = function(num) {};

/**
 * @param {string} order
 * @param {string} direction
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.order = function(order, direction) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.HistogramAggregation}
 */
elasticjs.HistogramAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.HistogramAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.HistogramFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.HistogramFacet.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.field = function(fieldName) {};

/**
 * @param {!Number} from
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.from = function(from) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.global = function(trueFalse) {};

/**
 * @param {!Number} numericInterval
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.interval = function(numericInterval) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.keyField = function(fieldName) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.keyScript = function(scriptCode) {};

/**
 * @param {string} language
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.lang = function(language) {};

/**
 * @param {string} m
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.nested = function(path) {};

/**
 * @param {string} o
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.order = function(o) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.params = function(p) {};

/**
 * @param {string} scope
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.scope = function(scope) {};

/**
 * @param {!Number} timeInterval
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.timeInterval = function(timeInterval) {};

/**
 * @param {!Number} to
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.to = function(to) {};

/**
 * @return {?}
 */
elasticjs.HistogramFacet.prototype.toJSON = function() {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.valueField = function(fieldName) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.HistogramFacet}
 */
elasticjs.HistogramFacet.prototype.valueScript = function(scriptCode) {};

/**
 * @constructor
 * @struct
 * @param {(string|!Array<string>)} ids
 */
elasticjs.IdsFilter = function(ids) {};

/**
 * @return {string}
 */
elasticjs.IdsFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.IdsFilter}
 */
elasticjs.IdsFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.IdsFilter}
 */
elasticjs.IdsFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} name
 * @return {!elasticjs.IdsFilter}
 */
elasticjs.IdsFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.IdsFilter}
 */
elasticjs.IdsFilter.prototype.toJSON = function() {};

/**
 * @param {(string|!Array<string>)} type
 * @return {!elasticjs.IdsFilter}
 */
elasticjs.IdsFilter.prototype.type = function(type) {};

/**
 * @param {(string|!Array<string>)} val
 * @return {!elasticjs.IdsFilter}
 */
elasticjs.IdsFilter.prototype.values = function(val) {};

/**
 * @constructor
 * @struct
 * @param {(string|!Array<string>)} ids
 */
elasticjs.IdsQuery = function(ids) {};

/**
 * @return {string}
 */
elasticjs.IdsQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.IdsQuery}
 */
elasticjs.IdsQuery.prototype.boost = function(boost) {};

/**
 * @return {?}
 */
elasticjs.IdsQuery.prototype.toJSON = function() {};

/**
 * @param {(string|!Array<string>)} type
 * @return {!elasticjs.IdsQuery}
 */
elasticjs.IdsQuery.prototype.type = function(type) {};

/**
 * @param {(string|!Array<string>)} val
 * @return {!elasticjs.IdsQuery}
 */
elasticjs.IdsQuery.prototype.values = function(val) {};

/**
 * @constructor
 * @struct
 * @param {string} type
 * @param {string} id
 */
elasticjs.IndexedShape = function(type, id) {};

/**
 * @return {string}
 */
elasticjs.IndexedShape.prototype._type = function() {};

/**
 * @param {string} id
 * @return {!elasticjs.IndexedShape}
 */
elasticjs.IndexedShape.prototype.id = function(id) {};

/**
 * @param {string} idx
 * @return {!elasticjs.IndexedShape}
 */
elasticjs.IndexedShape.prototype.index = function(idx) {};

/**
 * @param {string} field
 * @return {!elasticjs.IndexedShape}
 */
elasticjs.IndexedShape.prototype.shapeFieldName = function(field) {};

/**
 * @return {?}
 */
elasticjs.IndexedShape.prototype.toJSON = function() {};

/**
 * @param {string} t
 * @return {!elasticjs.IndexedShape}
 */
elasticjs.IndexedShape.prototype.type = function(t) {};

/**
 * @constructor
 * @struct
 * @param {!Object} fltr
 * @param {(string|!Array<string>)} indices
 */
elasticjs.IndicesFilter = function(fltr, indices) {};

/**
 * @return {string}
 */
elasticjs.IndicesFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.IndicesFilter}
 */
elasticjs.IndicesFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.IndicesFilter}
 */
elasticjs.IndicesFilter.prototype.cacheKey = function(key) {};

/**
 * @param {!Object} f
 * @return {!elasticjs.IndicesFilter}
 */
elasticjs.IndicesFilter.prototype.filter = function(f) {};

/**
 * @param {(string|!Array<string>)} i
 * @return {!elasticjs.IndicesFilter}
 */
elasticjs.IndicesFilter.prototype.indices = function(i) {};

/**
 * @param {string} name
 * @return {!elasticjs.IndicesFilter}
 */
elasticjs.IndicesFilter.prototype.name = function(name) {};

/**
 * @param {(string|!elasticjs.Filter)} f
 * @return {!elasticjs.IndicesFilter}
 */
elasticjs.IndicesFilter.prototype.noMatchFilter = function(f) {};

/**
 * @return {!elasticjs.IndicesFilter}
 */
elasticjs.IndicesFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!elasticjs.Query} qry
 * @param {(string|!Array<string>)} indices
 */
elasticjs.IndicesQuery = function(qry, indices) {};

/**
 * @return {string}
 */
elasticjs.IndicesQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.IndicesQuery}
 */
elasticjs.IndicesQuery.prototype.boost = function(boost) {};

/**
 * @param {(string|!Array<string>)} i
 * @return {!elasticjs.IndicesQuery}
 */
elasticjs.IndicesQuery.prototype.indices = function(i) {};

/**
 * @param {(string|!elasticjs.Query)} q
 * @return {!elasticjs.IndicesQuery}
 */
elasticjs.IndicesQuery.prototype.noMatchQuery = function(q) {};

/**
 * @param {!elasticjs.Query} q
 * @return {!elasticjs.IndicesQuery}
 */
elasticjs.IndicesQuery.prototype.query = function(q) {};

/**
 * @return {?}
 */
elasticjs.IndicesQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.IPv4RangeAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.IPv4RangeAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} field
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.field = function(field) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.keyed = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.params = function(p) {};

/**
 * @param {string} from
 * @param {string} to
 * @param {string} key
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.range = function(from, to, key) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.IPv4RangeAggregation}
 */
elasticjs.IPv4RangeAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.IPv4RangeAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {number} limit
 */
elasticjs.LimitFilter = function(limit) {};

/**
 * @return {string}
 */
elasticjs.LimitFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.LimitFilter}
 */
elasticjs.LimitFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.LimitFilter}
 */
elasticjs.LimitFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} name
 * @return {!elasticjs.LimitFilter}
 */
elasticjs.LimitFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.LimitFilter}
 */
elasticjs.LimitFilter.prototype.toJSON = function() {};

/**
 * @param {number} val
 * @return {!elasticjs.LimitFilter}
 */
elasticjs.LimitFilter.prototype.value = function(val) {};

/**
 * @constructor
 * @struct
 */
elasticjs.MatchAllFilter = function() {};

/**
 * @return {string}
 */
elasticjs.MatchAllFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MatchAllFilter}
 */
elasticjs.MatchAllFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.MatchAllFilter}
 */
elasticjs.MatchAllFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} name
 * @return {!elasticjs.MatchAllFilter}
 */
elasticjs.MatchAllFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.MatchAllFilter}
 */
elasticjs.MatchAllFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.MatchAllQuery = function() {};

/**
 * @return {string}
 */
elasticjs.MatchAllQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.MatchAllQuery}
 */
elasticjs.MatchAllQuery.prototype.boost = function(boost) {};

/**
 * @return {?}
 */
elasticjs.MatchAllQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} qstr
 */
elasticjs.MatchQuery = function(field, qstr) {};

/**
 * @return {string}
 */
elasticjs.MatchQuery.prototype._type = function() {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.analyzer = function(analyzer) {};

/**
 * @param {!Number} boost
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.boost = function(boost) {};

/**
 * @param {!Number} freq
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.cutoffFrequency = function(freq) {};

/**
 * @param {number} fuzz
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.fuzziness = function(fuzz) {};

/**
 * @param {string} m
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.fuzzyRewrite = function(m) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.fuzzyTranspositions = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.lenient = function(trueFalse) {};

/**
 * @param {number} e
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.maxExpansions = function(e) {};

/**
 * @param {number} minMatch
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.minimumShouldMatch = function(minMatch) {};

/**
 * @param {string} op
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.operator = function(op) {};

/**
 * @param {number} l
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.prefixLength = function(l) {};

/**
 * @param {string} qstr
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.query = function(qstr) {};

/**
 * @param {string} m
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.rewrite = function(m) {};

/**
 * @param {number} slop
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.slop = function(slop) {};

/**
 * @return {?}
 */
elasticjs.MatchQuery.prototype.toJSON = function() {};

/**
 * @param {string} type
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.type = function(type) {};

/**
 * @param {string} q
 * @return {!elasticjs.MatchQuery}
 */
elasticjs.MatchQuery.prototype.zeroTermsQuery = function(q) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.MaxAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.MaxAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.MaxAggregation}
 */
elasticjs.MaxAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.MaxAggregation}
 */
elasticjs.MaxAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.MaxAggregation}
 */
elasticjs.MaxAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.MaxAggregation}
 */
elasticjs.MaxAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MaxAggregation}
 */
elasticjs.MaxAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.MaxAggregation.prototype.toJSON = function() {};
/**
 * @implements {elasticjs.Aggregation}
 * @constructor
 * @struct
 */
elasticjs.MetricsAggregationMixin = function() {};

/**
 * @return {string}
 */
elasticjs.MetricsAggregationMixin.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.MetricsAggregationMixin}
 */
elasticjs.MetricsAggregationMixin.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.MetricsAggregationMixin}
 */
elasticjs.MetricsAggregationMixin.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.MetricsAggregationMixin}
 */
elasticjs.MetricsAggregationMixin.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.MetricsAggregationMixin}
 */
elasticjs.MetricsAggregationMixin.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MetricsAggregationMixin}
 */
elasticjs.MetricsAggregationMixin.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.MetricsAggregationMixin.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.MinAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.MinAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.MinAggregation}
 */
elasticjs.MinAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.MinAggregation}
 */
elasticjs.MinAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.MinAggregation}
 */
elasticjs.MinAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.MinAggregation}
 */
elasticjs.MinAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MinAggregation}
 */
elasticjs.MinAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.MinAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.MissingAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.MissingAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.MissingAggregation}
 */
elasticjs.MissingAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.MissingAggregation}
 */
elasticjs.MissingAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} field
 * @return {!elasticjs.MissingAggregation}
 */
elasticjs.MissingAggregation.prototype.field = function(field) {};

/**
 * @return {?}
 */
elasticjs.MissingAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.MissingFilter = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.MissingFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MissingFilter}
 */
elasticjs.MissingFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.MissingFilter}
 */
elasticjs.MissingFilter.prototype.cacheKey = function(key) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MissingFilter}
 */
elasticjs.MissingFilter.prototype.existence = function(trueFalse) {};

/**
 * @param {string} name
 * @return {!elasticjs.MissingFilter}
 */
elasticjs.MissingFilter.prototype.field = function(name) {};

/**
 * @param {string} name
 * @return {!elasticjs.MissingFilter}
 */
elasticjs.MissingFilter.prototype.name = function(name) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MissingFilter}
 */
elasticjs.MissingFilter.prototype.nullValue = function(trueFalse) {};

/**
 * @return {!elasticjs.MissingFilter}
 */
elasticjs.MissingFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} likeText
 */
elasticjs.MoreLikeThisFieldQuery = function(field, likeText) {};

/**
 * @return {string}
 */
elasticjs.MoreLikeThisFieldQuery.prototype._type = function() {};

/**
 * @param {string} analyzerName
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.analyzer = function(analyzerName) {};

/**
 * @param {number} boost
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.boost = function(boost) {};

/**
 * @param {number} boost
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.boostTerms = function(boost) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.failOnUnsupportedField = function(trueFalse) {};

/**
 * @param {string} f
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.field = function(f) {};

/**
 * @param {string} s
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.likeText = function(s) {};

/**
 * @param {number} max
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.maxDocFreq = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.maxQueryTerms = function(max) {};

/**
 * @param {number} len
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.maxWordLen = function(len) {};

/**
 * @param {number} min
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.minDocFreq = function(min) {};

/**
 * @param {number} freq
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.minTermFreq = function(freq) {};

/**
 * @param {number} len
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.minWordLen = function(len) {};

/**
 * @param {number} percent
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.percentTermsToMatch = function(percent) {};

/**
 * @param {!Array<?>} stopWords
 * @return {!elasticjs.MoreLikeThisFieldQuery}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.stopWords = function(stopWords) {};

/**
 * @return {?}
 */
elasticjs.MoreLikeThisFieldQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {(string|!Array<string>)} fields
 * @param {string} likeText
 */
elasticjs.MoreLikeThisQuery = function(fields, likeText) {};

/**
 * @return {string}
 */
elasticjs.MoreLikeThisQuery.prototype._type = function() {};

/**
 * @param {string} analyzerName
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.analyzer = function(analyzerName) {};

/**
 * @param {number} boost
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.boost = function(boost) {};

/**
 * @param {number} boost
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.boostTerms = function(boost) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.failOnUnsupportedField = function(trueFalse) {};

/**
 * @param {(string|!Array<string>)} f
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.fields = function(f) {};

/**
 * @param {string} s
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.likeText = function(s) {};

/**
 * @param {number} max
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.maxDocFreq = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.maxQueryTerms = function(max) {};

/**
 * @param {number} len
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.maxWordLen = function(len) {};

/**
 * @param {number} min
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.minDocFreq = function(min) {};

/**
 * @param {number} freq
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.minTermFreq = function(freq) {};

/**
 * @param {number} len
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.minWordLen = function(len) {};

/**
 * @param {number} percent
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.percentTermsToMatch = function(percent) {};

/**
 * @param {!Array<?>} stopWords
 * @return {!elasticjs.MoreLikeThisQuery}
 */
elasticjs.MoreLikeThisQuery.prototype.stopWords = function(stopWords) {};

/**
 * @return {?}
 */
elasticjs.MoreLikeThisQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {(string|!Array<string>)} fields
 * @param {string} qstr
 */
elasticjs.MultiMatchQuery = function(fields, qstr) {};

/**
 * @return {string}
 */
elasticjs.MultiMatchQuery.prototype._type = function() {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.analyzer = function(analyzer) {};

/**
 * @param {number} boost
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.boost = function(boost) {};

/**
 * @param {!Number} freq
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.cutoffFrequency = function(freq) {};

/**
 * @param {(string|!Array<string>)} f
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.fields = function(f) {};

/**
 * @param {number} fuzz
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.fuzziness = function(fuzz) {};

/**
 * @param {string} m
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.fuzzyRewrite = function(m) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.lenient = function(trueFalse) {};

/**
 * @param {number} e
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.maxExpansions = function(e) {};

/**
 * @param {number} minMatch
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.minimumShouldMatch = function(minMatch) {};

/**
 * @param {string} op
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.operator = function(op) {};

/**
 * @param {number} l
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.prefixLength = function(l) {};

/**
 * @param {string} qstr
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.query = function(qstr) {};

/**
 * @param {string} m
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.rewrite = function(m) {};

/**
 * @param {number} slop
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.slop = function(slop) {};

/**
 * @param {number} tieBreaker
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.tieBreaker = function(tieBreaker) {};

/**
 * @return {?}
 */
elasticjs.MultiMatchQuery.prototype.toJSON = function() {};

/**
 * @param {string} type
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.type = function(type) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.useDisMax = function(trueFalse) {};

/**
 * @param {string} q
 * @return {!elasticjs.MultiMatchQuery}
 */
elasticjs.MultiMatchQuery.prototype.zeroTermsQuery = function(q) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.NestedAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.NestedAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.NestedAggregation}
 */
elasticjs.NestedAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.NestedAggregation}
 */
elasticjs.NestedAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} path
 * @return {!elasticjs.NestedAggregation}
 */
elasticjs.NestedAggregation.prototype.path = function(path) {};

/**
 * @return {?}
 */
elasticjs.NestedAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} path
 */
elasticjs.NestedFilter = function(path) {};

/**
 * @return {string}
 */
elasticjs.NestedFilter.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.boost = function(boost) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.cacheKey = function(key) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.filter = function(oFilter) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.join = function(trueFalse) {};

/**
 * @param {string} name
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.name = function(name) {};

/**
 * @param {string} p
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.path = function(p) {};

/**
 * @param {!elasticjs.Query} oQuery
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.query = function(oQuery) {};

/**
 * @param {string} s
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.scope = function(s) {};

/**
 * @return {!elasticjs.NestedFilter}
 */
elasticjs.NestedFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} path
 */
elasticjs.NestedQuery = function(path) {};

/**
 * @return {string}
 */
elasticjs.NestedQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.NestedQuery}
 */
elasticjs.NestedQuery.prototype.boost = function(boost) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.NestedQuery}
 */
elasticjs.NestedQuery.prototype.filter = function(oFilter) {};

/**
 * @param {string} path
 * @return {!elasticjs.NestedQuery}
 */
elasticjs.NestedQuery.prototype.path = function(path) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.NestedQuery}
 */
elasticjs.NestedQuery.prototype.query = function(oQuery) {};

/**
 * @param {string} s
 * @return {!elasticjs.NestedQuery}
 */
elasticjs.NestedQuery.prototype.scope = function(s) {};

/**
 * @param {string} mode
 * @return {!elasticjs.NestedQuery}
 */
elasticjs.NestedQuery.prototype.scoreMode = function(mode) {};

/**
 * @return {?}
 */
elasticjs.NestedQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} oFilter
 */
elasticjs.NotFilter = function(oFilter) {};

/**
 * @return {string}
 */
elasticjs.NotFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.NotFilter}
 */
elasticjs.NotFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.NotFilter}
 */
elasticjs.NotFilter.prototype.cacheKey = function(key) {};

/**
 * @param {!Object} fltr
 * @return {!elasticjs.NotFilter}
 */
elasticjs.NotFilter.prototype.filter = function(fltr) {};

/**
 * @param {string} name
 * @return {!elasticjs.NotFilter}
 */
elasticjs.NotFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.NotFilter}
 */
elasticjs.NotFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.NumericRangeFilter = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.NumericRangeFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} field
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.field = function(field) {};

/**
 * @param {!Number} startPoint
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.from = function(startPoint) {};

/**
 * @param {?} val
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.gt = function(val) {};

/**
 * @param {?} val
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.gte = function(val) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.includeLower = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.includeUpper = function(trueFalse) {};

/**
 * @param {?} val
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.lt = function(val) {};

/**
 * @param {?} val
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.lte = function(val) {};

/**
 * @param {string} name
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.name = function(name) {};

/**
 * @param {!Number} endPoint
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.to = function(endPoint) {};

/**
 * @return {!elasticjs.NumericRangeFilter}
 */
elasticjs.NumericRangeFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {(!elasticjs.Filter|!Array<!elasticjs.Filter>)} filters
 */
elasticjs.OrFilter = function(filters) {};

/**
 * @return {string}
 */
elasticjs.OrFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.OrFilter}
 */
elasticjs.OrFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.OrFilter}
 */
elasticjs.OrFilter.prototype.cacheKey = function(key) {};

/**
 * @param {(!elasticjs.Filter|!Array<!elasticjs.Filter>)} fltr
 * @return {!elasticjs.OrFilter}
 */
elasticjs.OrFilter.prototype.filters = function(fltr) {};

/**
 * @param {string} name
 * @return {!elasticjs.OrFilter}
 */
elasticjs.OrFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.OrFilter}
 */
elasticjs.OrFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.PercentilesAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.PercentilesAggregation.prototype._type = function() {};

/**
 * @param {number} c
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.compression = function(c) {};

/**
 * @param {string} field
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.field = function(field) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.keyed = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.params = function(p) {};

/**
 * @param {number} percentile
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.percent = function(percentile) {};

/**
 * @param {!Array<number>} percents
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.percents = function(percents) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.PercentilesAggregation}
 */
elasticjs.PercentilesAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.PercentilesAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.PhraseSuggester = function(name) {};

/**
 * @return {string}
 */
elasticjs.PhraseSuggester.prototype._type = function() {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.analyzer = function(analyzer) {};

/**
 * @param {number} c
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.confidence = function(c) {};

/**
 * @param {(!elasticjs.Generator|!Array<!elasticjs.Generator>)} oGenerator
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.directGenerator = function(oGenerator) {};

/**
 * @param {string} field
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.field = function(field) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.forceUnigrams = function(trueFalse) {};

/**
 * @param {number} s
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.gramSize = function(s) {};

/**
 * @param {string} preTag
 * @param {string} postTag
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.highlight = function(preTag, postTag) {};

/**
 * @param {number} alpha
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.laplaceSmoothing = function(alpha) {};

/**
 * @param {number} tl
 * @param {number} bl
 * @param {number} ul
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.linearSmoothing = function(tl, bl, ul) {};

/**
 * @param {number} c
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.maxErrors = function(c) {};

/**
 * @param {number} l
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.realWordErrorLikelihood = function(l) {};

/**
 * @param {string} sep
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.separator = function(sep) {};

/**
 * @param {number} s
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.shardSize = function(s) {};

/**
 * @param {number} s
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.size = function(s) {};

/**
 * @param {number} discount
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.stupidBackoffSmoothing = function(discount) {};

/**
 * @param {string} txt
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.text = function(txt) {};

/**
 * @return {?}
 */
elasticjs.PhraseSuggester.prototype.toJSON = function() {};

/**
 * @param {number} l
 * @return {!elasticjs.PhraseSuggester}
 */
elasticjs.PhraseSuggester.prototype.tokenLimit = function(l) {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 * @param {string} prefix
 */
elasticjs.PrefixFilter = function(fieldName, prefix) {};

/**
 * @return {string}
 */
elasticjs.PrefixFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.PrefixFilter}
 */
elasticjs.PrefixFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.PrefixFilter}
 */
elasticjs.PrefixFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} field
 * @return {!elasticjs.PrefixFilter}
 */
elasticjs.PrefixFilter.prototype.field = function(field) {};

/**
 * @param {string} name
 * @return {!elasticjs.PrefixFilter}
 */
elasticjs.PrefixFilter.prototype.name = function(name) {};

/**
 * @param {string} value
 * @return {!elasticjs.PrefixFilter}
 */
elasticjs.PrefixFilter.prototype.prefix = function(value) {};

/**
 * @return {!elasticjs.PrefixFilter}
 */
elasticjs.PrefixFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} value
 */
elasticjs.PrefixQuery = function(field, value) {};

/**
 * @return {string}
 */
elasticjs.PrefixQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.PrefixQuery}
 */
elasticjs.PrefixQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.PrefixQuery}
 */
elasticjs.PrefixQuery.prototype.field = function(f) {};

/**
 * @param {string} m
 * @return {!elasticjs.PrefixQuery}
 */
elasticjs.PrefixQuery.prototype.rewrite = function(m) {};

/**
 * @return {?}
 */
elasticjs.PrefixQuery.prototype.toJSON = function() {};

/**
 * @param {string} p
 * @return {!elasticjs.PrefixQuery}
 */
elasticjs.PrefixQuery.prototype.value = function(p) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.QueryFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.QueryFacet.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryFacet}
 */
elasticjs.QueryFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.QueryFacet}
 */
elasticjs.QueryFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryFacet}
 */
elasticjs.QueryFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} m
 * @return {!elasticjs.QueryFacet}
 */
elasticjs.QueryFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.QueryFacet}
 */
elasticjs.QueryFacet.prototype.nested = function(path) {};

/**
 * @param {!Object} oQuery
 * @return {!elasticjs.QueryFacet}
 */
elasticjs.QueryFacet.prototype.query = function(oQuery) {};

/**
 * @param {string} scope
 * @return {!elasticjs.QueryFacet}
 */
elasticjs.QueryFacet.prototype.scope = function(scope) {};

/**
 * @return {?}
 */
elasticjs.QueryFacet.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} qry
 */
elasticjs.QueryFilter = function(qry) {};

/**
 * @return {string}
 */
elasticjs.QueryFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryFilter}
 */
elasticjs.QueryFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.QueryFilter}
 */
elasticjs.QueryFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} name
 * @return {!elasticjs.QueryFilter}
 */
elasticjs.QueryFilter.prototype.name = function(name) {};

/**
 * @param {!Object} q
 * @return {!elasticjs.QueryFilter}
 */
elasticjs.QueryFilter.prototype.query = function(q) {};

/**
 * @return {!elasticjs.QueryFilter}
 */
elasticjs.QueryFilter.prototype.toJSON = function() {};
/**
 * @constructor
 * @struct
 */
elasticjs.QueryMixin = function() {};

/**
 * @return {string}
 */
elasticjs.QueryMixin.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.QueryMixin}
 */
elasticjs.QueryMixin.prototype.boost = function(boost) {};

/**
 * @return {?}
 */
elasticjs.QueryMixin.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} qstr
 */
elasticjs.QueryStringQuery = function(qstr) {};

/**
 * @return {string}
 */
elasticjs.QueryStringQuery.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.allowLeadingWildcard = function(trueFalse) {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.analyzer = function(analyzer) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.analyzeWildcard = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.autoGeneratePhraseQueries = function(trueFalse) {};

/**
 * @param {number} boost
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.boost = function(boost) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.defaultField = function(fieldName) {};

/**
 * @param {string} op
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.defaultOperator = function(op) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.enablePositionIncrements = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.escape = function(trueFalse) {};

/**
 * @param {!Array<?>} fieldNames
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.fields = function(fieldNames) {};

/**
 * @param {number} max
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.fuzzyMaxExpansions = function(max) {};

/**
 * @param {number} minSim
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.fuzzyMinSim = function(minSim) {};

/**
 * @param {number} fuzzLen
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.fuzzyPrefixLength = function(fuzzLen) {};

/**
 * @param {string} m
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.fuzzyRewrite = function(m) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.lenient = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.lowercaseExpandedTerms = function(trueFalse) {};

/**
 * @param {number} minMatch
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.minimumShouldMatch = function(minMatch) {};

/**
 * @param {number} slop
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.phraseSlop = function(slop) {};

/**
 * @param {string} qstr
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.query = function(qstr) {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.quoteAnalyzer = function(analyzer) {};

/**
 * @param {string} s
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.quoteFieldSuffix = function(s) {};

/**
 * @param {string} m
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.rewrite = function(m) {};

/**
 * @param {number} tieBreaker
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.tieBreaker = function(tieBreaker) {};

/**
 * @return {?}
 */
elasticjs.QueryStringQuery.prototype.toJSON = function() {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.QueryStringQuery}
 */
elasticjs.QueryStringQuery.prototype.useDisMax = function(trueFalse) {};

/**
 * @constructor
 * @struct
 */
elasticjs.RandomScoreFunction = function() {};

/**
 * @return {string}
 */
elasticjs.RandomScoreFunction.prototype._type = function() {};

/**
 * @param {!elasticjs.Filter} oFilter
 * @return {!elasticjs.RandomScoreFunction}
 */
elasticjs.RandomScoreFunction.prototype.filter = function(oFilter) {};

/**
 * @param {number} s
 * @return {!elasticjs.RandomScoreFunction}
 */
elasticjs.RandomScoreFunction.prototype.seed = function(s) {};

/**
 * @return {?}
 */
elasticjs.RandomScoreFunction.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.RangeAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.RangeAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} field
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.field = function(field) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.keyed = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.params = function(p) {};

/**
 * @param {number} from
 * @param {number=} to
 * @param {string=} key
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.range = function(from, to, key) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeAggregation}
 */
elasticjs.RangeAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.RangeAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.RangeFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.RangeFacet.prototype._type = function() {};

/**
 * @param {!Number} from
 * @param {!Number} to
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.addRange = function(from, to) {};

/**
 * @param {!Number} from
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.addUnboundedFrom = function(from) {};

/**
 * @param {!Number} to
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.addUnboundedTo = function(to) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.field = function(fieldName) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.keyField = function(fieldName) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.keyScript = function(scriptCode) {};

/**
 * @param {string} language
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.lang = function(language) {};

/**
 * @param {string} m
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.nested = function(path) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.params = function(p) {};

/**
 * @param {string} scope
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.scope = function(scope) {};

/**
 * @return {?}
 */
elasticjs.RangeFacet.prototype.toJSON = function() {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.valueField = function(fieldName) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.RangeFacet}
 */
elasticjs.RangeFacet.prototype.valueScript = function(scriptCode) {};

/**
 * @constructor
 * @struct
 * @param {string} field
 */
elasticjs.RangeFilter = function(field) {};

/**
 * @return {string}
 */
elasticjs.RangeFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} f
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.field = function(f) {};

/**
 * @param {?} f
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.from = function(f) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.gt = function(val) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.gte = function(val) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.includeLower = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.includeUpper = function(trueFalse) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.lt = function(val) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.lte = function(val) {};

/**
 * @param {string} name
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.name = function(name) {};

/**
 * @param {?} t
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.to = function(t) {};

/**
 * @return {!elasticjs.RangeFilter}
 */
elasticjs.RangeFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 */
elasticjs.RangeQuery = function(field) {};

/**
 * @return {string}
 */
elasticjs.RangeQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.field = function(f) {};

/**
 * @param {?} f
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.from = function(f) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.gt = function(val) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.gte = function(val) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.includeLower = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.includeUpper = function(trueFalse) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.lt = function(val) {};

/**
 * @param {?} val
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.lte = function(val) {};

/**
 * @param {?} t
 * @return {!elasticjs.RangeQuery}
 */
elasticjs.RangeQuery.prototype.to = function(t) {};

/**
 * @return {?}
 */
elasticjs.RangeQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} value
 */
elasticjs.RegexpFilter = function(field, value) {};

/**
 * @return {string}
 */
elasticjs.RegexpFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} f
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.field = function(f) {};

/**
 * @param {string} f
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.flags = function(f) {};

/**
 * @param {string} v
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.flagsValue = function(v) {};

/**
 * @param {string} name
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.toJSON = function() {};

/**
 * @param {string} p
 * @return {!elasticjs.RegexpFilter}
 */
elasticjs.RegexpFilter.prototype.value = function(p) {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} value
 */
elasticjs.RegexpQuery = function(field, value) {};

/**
 * @return {string}
 */
elasticjs.RegexpQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.RegexpQuery}
 */
elasticjs.RegexpQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.RegexpQuery}
 */
elasticjs.RegexpQuery.prototype.field = function(f) {};

/**
 * @param {string} f
 * @return {!elasticjs.RegexpQuery}
 */
elasticjs.RegexpQuery.prototype.flags = function(f) {};

/**
 * @param {string} v
 * @return {!elasticjs.RegexpQuery}
 */
elasticjs.RegexpQuery.prototype.flagsValue = function(v) {};

/**
 * @param {string} m
 * @return {!elasticjs.RegexpQuery}
 */
elasticjs.RegexpQuery.prototype.rewrite = function(m) {};

/**
 * @return {?}
 */
elasticjs.RegexpQuery.prototype.toJSON = function() {};

/**
 * @param {string} p
 * @return {!elasticjs.RegexpQuery}
 */
elasticjs.RegexpQuery.prototype.value = function(p) {};

/**
 * @constructor
 * @struct
 * @param {!Object} conf
 */
elasticjs.Request = function(conf) {};

/**
 * @return {string}
 */
elasticjs.Request.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.aggregation = function(agg) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.explain = function(trueFalse) {};

/**
 * @param {!elasticjs.Facet} facet
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.facet = function(facet) {};

/**
 * @param {(string|!Array<string>)} s
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.fields = function(s) {};

/**
 * @param {!elasticjs.Filter} filter
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.filter = function(filter) {};

/**
 * @param {number} f
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.from = function(f) {};

/**
 * @param {!elasticjs.Highlight} h
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.highlight = function(h) {};

/**
 * @param {string} index
 * @param {number} boost
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.indexBoost = function(index, boost) {};

/**
 * @param {number} min
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.minScore = function(min) {};

/**
 * @param {!elasticjs.Query} someQuery
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.query = function(someQuery) {};

/**
 * @param {!elasticjs.Rescore} r
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.rescore = function(r) {};

/**
 * @param {!elasticjs.ScriptField} oScriptField
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.scriptField = function(oScriptField) {};

/**
 * @param {number} s
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.size = function(s) {};

/**
 * @param {(string|!Array<?>|!elasticjs.Sort)=} fieldName
 * @param {string=} order
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.sort = function(fieldName, order) {};

/**
 * @param {(string|boolean|!Array<string>)} includes
 * @param {(string|!Array<string>)} excludes
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.source = function(includes, excludes) {};

/**
 * @param {(string|!elasticjs.Suggest)} s
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.suggest = function(s) {};

/**
 * @param {number} t
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.timeout = function(t) {};

/**
 * @return {?}
 */
elasticjs.Request.prototype.toJSON = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.trackScores = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.Request}
 */
elasticjs.Request.prototype.version = function(trueFalse) {};

/**
 * @constructor
 * @struct
 * @param {!Number} windowSize
 */
elasticjs.Rescore = function(windowSize) {};

/**
 * @return {string}
 */
elasticjs.Rescore.prototype._type = function() {};

/**
 * @param {!Number} weight
 * @return {!elasticjs.Rescore}
 */
elasticjs.Rescore.prototype.queryWeight = function(weight) {};

/**
 * @param {!elasticjs.Query} someQuery
 * @return {!elasticjs.Rescore}
 */
elasticjs.Rescore.prototype.rescoreQuery = function(someQuery) {};

/**
 * @param {!Number} weight
 * @return {!elasticjs.Rescore}
 */
elasticjs.Rescore.prototype.rescoreQueryWeight = function(weight) {};

/**
 * @param {string} s
 * @return {!elasticjs.Rescore}
 */
elasticjs.Rescore.prototype.scoreMode = function(s) {};

/**
 * @return {?}
 */
elasticjs.Rescore.prototype.toJSON = function() {};

/**
 * @param {!Number} size
 * @return {!elasticjs.Rescore}
 */
elasticjs.Rescore.prototype.windowSize = function(size) {};
/**
 * @implements {elasticjs.ScoreFunction}
 * @constructor
 * @struct
 */
elasticjs.ScoreFunctionMixin = function() {};

/**
 * @return {string}
 */
elasticjs.ScoreFunctionMixin.prototype._type = function() {};

/**
 * @param {!elasticjs.Filter} oFilter
 * @return {!elasticjs.ScoreFunctionMixin}
 */
elasticjs.ScoreFunctionMixin.prototype.filter = function(oFilter) {};

/**
 * @return {?}
 */
elasticjs.ScoreFunctionMixin.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.ScriptField = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.ScriptField.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.ScriptField}
 */
elasticjs.ScriptField.prototype.ignoreFailure = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.ScriptField}
 */
elasticjs.ScriptField.prototype.lang = function(language) {};

/**
 * @param {!Object} oParams
 * @return {!elasticjs.ScriptField}
 */
elasticjs.ScriptField.prototype.params = function(oParams) {};

/**
 * @param {string} expression
 * @return {!elasticjs.ScriptField}
 */
elasticjs.ScriptField.prototype.script = function(expression) {};

/**
 * @return {?}
 */
elasticjs.ScriptField.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} script
 */
elasticjs.ScriptFilter = function(script) {};

/**
 * @return {string}
 */
elasticjs.ScriptFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.ScriptFilter}
 */
elasticjs.ScriptFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.ScriptFilter}
 */
elasticjs.ScriptFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} lang
 * @return {!elasticjs.ScriptFilter}
 */
elasticjs.ScriptFilter.prototype.lang = function(lang) {};

/**
 * @param {string} name
 * @return {!elasticjs.ScriptFilter}
 */
elasticjs.ScriptFilter.prototype.name = function(name) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.ScriptFilter}
 */
elasticjs.ScriptFilter.prototype.params = function(p) {};

/**
 * @param {string} s
 * @return {!elasticjs.ScriptFilter}
 */
elasticjs.ScriptFilter.prototype.script = function(s) {};

/**
 * @return {!elasticjs.ScriptFilter}
 */
elasticjs.ScriptFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 */
elasticjs.ScriptScoreFunction = function() {};

/**
 * @return {string}
 */
elasticjs.ScriptScoreFunction.prototype._type = function() {};

/**
 * @param {!elasticjs.Filter} oFilter
 * @return {!elasticjs.ScriptScoreFunction}
 */
elasticjs.ScriptScoreFunction.prototype.filter = function(oFilter) {};

/**
 * @param {string} language
 * @return {!elasticjs.ScriptScoreFunction}
 */
elasticjs.ScriptScoreFunction.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.ScriptScoreFunction}
 */
elasticjs.ScriptScoreFunction.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.ScriptScoreFunction}
 */
elasticjs.ScriptScoreFunction.prototype.script = function(scriptCode) {};

/**
 * @return {?}
 */
elasticjs.ScriptScoreFunction.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} type
 * @param {!Array<?>} coords
 */
elasticjs.Shape = function(type, coords) {};

/**
 * @return {string}
 */
elasticjs.Shape.prototype._type = function() {};

/**
 * @param {!Array<?>} c
 * @return {!elasticjs.Shape}
 */
elasticjs.Shape.prototype.coordinates = function(c) {};

/**
 * @param {string} r
 * @return {!elasticjs.Shape}
 */
elasticjs.Shape.prototype.radius = function(r) {};

/**
 * @return {?}
 */
elasticjs.Shape.prototype.toJSON = function() {};

/**
 * @param {string} t
 * @return {!elasticjs.Shape}
 */
elasticjs.Shape.prototype.type = function(t) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.SignificantTermsAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.SignificantTermsAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} exclude
 * @param {string} flags
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.exclude = function(exclude, flags) {};

/**
 * @param {string} h
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.executionHint = function(h) {};

/**
 * @param {string} field
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.field = function(field) {};

/**
 * @param {string} f
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.format = function(f) {};

/**
 * @param {string} include
 * @param {string} flags
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.include = function(include, flags) {};

/**
 * @param {number} num
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.minDocCount = function(num) {};

/**
 * @param {number} shardSize
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.shardSize = function(shardSize) {};

/**
 * @param {number} size
 * @return {!elasticjs.SignificantTermsAggregation}
 */
elasticjs.SignificantTermsAggregation.prototype.size = function(size) {};

/**
 * @return {?}
 */
elasticjs.SignificantTermsAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 */
elasticjs.Sort = function(fieldName) {};

/**
 * @return {string}
 */
elasticjs.Sort.prototype._type = function() {};

/**
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.asc = function() {};

/**
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.desc = function() {};

/**
 * @param {string} type
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.distanceType = function(type) {};

/**
 * @param {string} f
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.field = function(f) {};

/**
 * @param {!elasticjs.GeoPoint} point
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.geoDistance = function(point) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.ignoreUnmapped = function(trueFalse) {};

/**
 * @param {string} lang
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.lang = function(lang) {};

/**
 * @param {string} m
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.missing = function(m) {};

/**
 * @param {string} m
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.mode = function(m) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.nestedFilter = function(oFilter) {};

/**
 * @param {string} path
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.nestedPath = function(path) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.normalize = function(trueFalse) {};

/**
 * @param {string} o
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.order = function(o) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.params = function(p) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.reverse = function(trueFalse) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.script = function(scriptCode) {};

/**
 * @return {?}
 */
elasticjs.Sort.prototype.toJSON = function() {};

/**
 * @param {string} type
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.type = function(type) {};

/**
 * @param {string} unit
 * @return {!elasticjs.Sort}
 */
elasticjs.Sort.prototype.unit = function(unit) {};

/**
 * @constructor
 * @struct
 * @param {!elasticjs.Query} spanQry
 * @param {number} end
 */
elasticjs.SpanFirstQuery = function(spanQry, end) {};

/**
 * @return {string}
 */
elasticjs.SpanFirstQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.SpanFirstQuery}
 */
elasticjs.SpanFirstQuery.prototype.boost = function(boost) {};

/**
 * @param {!Number} position
 * @return {!elasticjs.SpanFirstQuery}
 */
elasticjs.SpanFirstQuery.prototype.end = function(position) {};

/**
 * @param {!Object} spanQuery
 * @return {!elasticjs.SpanFirstQuery}
 */
elasticjs.SpanFirstQuery.prototype.match = function(spanQuery) {};

/**
 * @return {?}
 */
elasticjs.SpanFirstQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!elasticjs.Query} qry
 */
elasticjs.SpanMultiTermQuery = function(qry) {};

/**
 * @return {string}
 */
elasticjs.SpanMultiTermQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.SpanMultiTermQuery}
 */
elasticjs.SpanMultiTermQuery.prototype.boost = function(boost) {};

/**
 * @param {!Object} mtQuery
 * @return {!elasticjs.SpanMultiTermQuery}
 */
elasticjs.SpanMultiTermQuery.prototype.match = function(mtQuery) {};

/**
 * @return {?}
 */
elasticjs.SpanMultiTermQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {(!elasticjs.Query|!Array<!elasticjs.Query>)} clauses
 * @param {number} slop
 */
elasticjs.SpanNearQuery = function(clauses, slop) {};

/**
 * @return {string}
 */
elasticjs.SpanNearQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.SpanNearQuery}
 */
elasticjs.SpanNearQuery.prototype.boost = function(boost) {};

/**
 * @param {(!elasticjs.Query|!Array<!elasticjs.Query>)} clauses
 * @return {!elasticjs.SpanNearQuery}
 */
elasticjs.SpanNearQuery.prototype.clauses = function(clauses) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.SpanNearQuery}
 */
elasticjs.SpanNearQuery.prototype.collectPayloads = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.SpanNearQuery}
 */
elasticjs.SpanNearQuery.prototype.inOrder = function(trueFalse) {};

/**
 * @param {!Number} distance
 * @return {!elasticjs.SpanNearQuery}
 */
elasticjs.SpanNearQuery.prototype.slop = function(distance) {};

/**
 * @return {?}
 */
elasticjs.SpanNearQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!elasticjs.Query} includeQry
 * @param {!elasticjs.Query} excludeQry
 */
elasticjs.SpanNotQuery = function(includeQry, excludeQry) {};

/**
 * @return {string}
 */
elasticjs.SpanNotQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.SpanNotQuery}
 */
elasticjs.SpanNotQuery.prototype.boost = function(boost) {};

/**
 * @param {!Object} spanQuery
 * @return {!elasticjs.SpanNotQuery}
 */
elasticjs.SpanNotQuery.prototype.exclude = function(spanQuery) {};

/**
 * @param {!Object} spanQuery
 * @return {!elasticjs.SpanNotQuery}
 */
elasticjs.SpanNotQuery.prototype.include = function(spanQuery) {};

/**
 * @return {?}
 */
elasticjs.SpanNotQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} clauses
 */
elasticjs.SpanOrQuery = function(clauses) {};

/**
 * @return {string}
 */
elasticjs.SpanOrQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.SpanOrQuery}
 */
elasticjs.SpanOrQuery.prototype.boost = function(boost) {};

/**
 * @param {(!elasticjs.Query|!Array<!elasticjs.Query>)} clauses
 * @return {!elasticjs.SpanOrQuery}
 */
elasticjs.SpanOrQuery.prototype.clauses = function(clauses) {};

/**
 * @return {?}
 */
elasticjs.SpanOrQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} value
 */
elasticjs.SpanTermQuery = function(field, value) {};

/**
 * @return {string}
 */
elasticjs.SpanTermQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.SpanTermQuery}
 */
elasticjs.SpanTermQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.SpanTermQuery}
 */
elasticjs.SpanTermQuery.prototype.field = function(f) {};

/**
 * @param {string} t
 * @return {!elasticjs.SpanTermQuery}
 */
elasticjs.SpanTermQuery.prototype.term = function(t) {};

/**
 * @return {?}
 */
elasticjs.SpanTermQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.StatisticalFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.StatisticalFacet.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.field = function(fieldName) {};

/**
 * @param {!Array<?>} aFieldName
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.fields = function(aFieldName) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.lang = function(language) {};

/**
 * @param {string} m
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.nested = function(path) {};

/**
 * @param {!Object} oParams
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.params = function(oParams) {};

/**
 * @param {string} scope
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.scope = function(scope) {};

/**
 * @param {string} code
 * @return {!elasticjs.StatisticalFacet}
 */
elasticjs.StatisticalFacet.prototype.script = function(code) {};

/**
 * @return {?}
 */
elasticjs.StatisticalFacet.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.StatsAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.StatsAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.StatsAggregation}
 */
elasticjs.StatsAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.StatsAggregation}
 */
elasticjs.StatsAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.StatsAggregation}
 */
elasticjs.StatsAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.StatsAggregation}
 */
elasticjs.StatsAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.StatsAggregation}
 */
elasticjs.StatsAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.StatsAggregation.prototype.toJSON = function() {};
/**
 * @constructor
 * @struct
 */
elasticjs.SuggestContextMixin = function() {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.SuggestContextMixin}
 */
elasticjs.SuggestContextMixin.prototype.analyzer = function(analyzer) {};

/**
 * @param {string} field
 * @return {!elasticjs.SuggestContextMixin}
 */
elasticjs.SuggestContextMixin.prototype.field = function(field) {};

/**
 * @param {number} s
 * @return {!elasticjs.SuggestContextMixin}
 */
elasticjs.SuggestContextMixin.prototype.shardSize = function(s) {};

/**
 * @param {number} s
 * @return {!elasticjs.SuggestContextMixin}
 */
elasticjs.SuggestContextMixin.prototype.size = function(s) {};
/**
 * @constructor
 * @struct
 */
elasticjs.SuggesterMixin = function() {};

/**
 * @return {string}
 */
elasticjs.SuggesterMixin.prototype._type = function() {};

/**
 * @param {string} txt
 * @return {!elasticjs.SuggesterMixin}
 */
elasticjs.SuggesterMixin.prototype.text = function(txt) {};

/**
 * @return {?}
 */
elasticjs.SuggesterMixin.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.SumAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.SumAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.SumAggregation}
 */
elasticjs.SumAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.SumAggregation}
 */
elasticjs.SumAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.SumAggregation}
 */
elasticjs.SumAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.SumAggregation}
 */
elasticjs.SumAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.SumAggregation}
 */
elasticjs.SumAggregation.prototype.scriptValuesSorted = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.SumAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} fieldName
 * @param {string} term
 */
elasticjs.TermFilter = function(fieldName, term) {};

/**
 * @return {string}
 */
elasticjs.TermFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermFilter}
 */
elasticjs.TermFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.TermFilter}
 */
elasticjs.TermFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} f
 * @return {!elasticjs.TermFilter}
 */
elasticjs.TermFilter.prototype.field = function(f) {};

/**
 * @param {string} name
 * @return {!elasticjs.TermFilter}
 */
elasticjs.TermFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.TermFilter}
 */
elasticjs.TermFilter.prototype.term = function() {};

/**
 * @return {!elasticjs.TermFilter}
 */
elasticjs.TermFilter.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} term
 */
elasticjs.TermQuery = function(field, term) {};

/**
 * @return {string}
 */
elasticjs.TermQuery.prototype._type = function() {};

/**
 * @param {!Number} boost
 * @return {!elasticjs.TermQuery}
 */
elasticjs.TermQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.TermQuery}
 */
elasticjs.TermQuery.prototype.field = function(f) {};

/**
 * @param {string} t
 * @return {!elasticjs.TermQuery}
 */
elasticjs.TermQuery.prototype.term = function(t) {};

/**
 * @return {?}
 */
elasticjs.TermQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.TermsAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.TermsAggregation.prototype._type = function() {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.agg = function(agg) {};

/**
 * @param {!elasticjs.Aggregation} agg
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.aggregation = function(agg) {};

/**
 * @param {string} exclude
 * @param {string} flags
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.exclude = function(exclude, flags) {};

/**
 * @param {string} h
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.executionHint = function(h) {};

/**
 * @param {string} field
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.field = function(field) {};

/**
 * @param {string} f
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.format = function(f) {};

/**
 * @param {string} include
 * @param {string} flags
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.include = function(include, flags) {};

/**
 * @param {string} language
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.lang = function(language) {};

/**
 * @param {number} num
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.minDocCount = function(num) {};

/**
 * @param {string} order
 * @param {string} direction
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.order = function(order, direction) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.scriptValuesUnique = function(trueFalse) {};

/**
 * @param {number} shardSize
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.shardSize = function(shardSize) {};

/**
 * @param {number} size
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.size = function(size) {};

/**
 * @return {?}
 */
elasticjs.TermsAggregation.prototype.toJSON = function() {};

/**
 * @param {string} v
 * @return {!elasticjs.TermsAggregation}
 */
elasticjs.TermsAggregation.prototype.valueType = function(v) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.TermsFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.TermsFacet.prototype._type = function() {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.allTerms = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {(string|!Array<string>)} exclude
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.exclude = function(exclude) {};

/**
 * @param {!Object} h
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.executionHint = function(h) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.field = function(fieldName) {};

/**
 * @param {!Array<?>} aFieldName
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.fields = function(aFieldName) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} language
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.lang = function(language) {};

/**
 * @param {string} m
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.nested = function(path) {};

/**
 * @param {string} o
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.order = function(o) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.params = function(p) {};

/**
 * @param {string} exp
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.regex = function(exp) {};

/**
 * @param {string} flags
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.regexFlags = function(flags) {};

/**
 * @param {string} scope
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.scope = function(scope) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.script = function(scriptCode) {};

/**
 * @param {string} script
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.scriptField = function(script) {};

/**
 * @param {number} shardSize
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.shardSize = function(shardSize) {};

/**
 * @param {number} facetSize
 * @return {!elasticjs.TermsFacet}
 */
elasticjs.TermsFacet.prototype.size = function(facetSize) {};

/**
 * @return {?}
 */
elasticjs.TermsFacet.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {(string|!Array<string>)} terms
 */
elasticjs.TermsFilter = function(field, terms) {};

/**
 * @return {string}
 */
elasticjs.TermsFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.cacheKey = function(key) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.cacheLookup = function(trueFalse) {};

/**
 * @param {string} e
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.execution = function(e) {};

/**
 * @param {string} f
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.field = function(f) {};

/**
 * @param {string} id
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.id = function(id) {};

/**
 * @param {string} idx
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.index = function(idx) {};

/**
 * @param {string} name
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.name = function(name) {};

/**
 * @param {string} path
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.path = function(path) {};

/**
 * @param {string} path
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.routing = function(path) {};

/**
 * @param {(string|!Array<string>)} t
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.terms = function(t) {};

/**
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.toJSON = function() {};

/**
 * @param {string} type
 * @return {!elasticjs.TermsFilter}
 */
elasticjs.TermsFilter.prototype.type = function(type) {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {(string|!Array<string>)} terms
 */
elasticjs.TermsQuery = function(field, terms) {};

/**
 * @return {string}
 */
elasticjs.TermsQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.TermsQuery}
 */
elasticjs.TermsQuery.prototype.boost = function(boost) {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.TermsQuery}
 */
elasticjs.TermsQuery.prototype.disableCoord = function(trueFalse) {};

/**
 * @param {string} f
 * @return {!elasticjs.TermsQuery}
 */
elasticjs.TermsQuery.prototype.field = function(f) {};

/**
 * @param {number} min
 * @return {!elasticjs.TermsQuery}
 */
elasticjs.TermsQuery.prototype.minimumShouldMatch = function(min) {};

/**
 * @param {(string|!Array<string>)} t
 * @return {!elasticjs.TermsQuery}
 */
elasticjs.TermsQuery.prototype.terms = function(t) {};

/**
 * @return {?}
 */
elasticjs.TermsQuery.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.TermStatsFacet = function(name) {};

/**
 * @return {string}
 */
elasticjs.TermStatsFacet.prototype._type = function() {};

/**
 * @param {string} trueFalse
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.allTerms = function(trueFalse) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.cacheFilter = function(trueFalse) {};

/**
 * @param {!Object} oFilter
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.facetFilter = function(oFilter) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.global = function(trueFalse) {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.keyField = function(fieldName) {};

/**
 * @param {string} language
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.lang = function(language) {};

/**
 * @param {string} m
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.mode = function(m) {};

/**
 * @param {string} path
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.nested = function(path) {};

/**
 * @param {string} o
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.order = function(o) {};

/**
 * @param {!Object} oParams
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.params = function(oParams) {};

/**
 * @param {string} scope
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.scope = function(scope) {};

/**
 * @param {string} script
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.scriptField = function(script) {};

/**
 * @param {number} facetSize
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.size = function(facetSize) {};

/**
 * @return {?}
 */
elasticjs.TermStatsFacet.prototype.toJSON = function() {};

/**
 * @param {string} fieldName
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.valueField = function(fieldName) {};

/**
 * @param {string} code
 * @return {!elasticjs.TermStatsFacet}
 */
elasticjs.TermStatsFacet.prototype.valueScript = function(code) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.TermSuggester = function(name) {};

/**
 * @return {string}
 */
elasticjs.TermSuggester.prototype._type = function() {};

/**
 * @param {number} a
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.accuracy = function(a) {};

/**
 * @param {string} analyzer
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.analyzer = function(analyzer) {};

/**
 * @param {string} field
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.field = function(field) {};

/**
 * @param {number} max
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.maxEdits = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.maxInspections = function(max) {};

/**
 * @param {number} max
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.maxTermFreq = function(max) {};

/**
 * @param {number} min
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.minDocFreq = function(min) {};

/**
 * @param {number} len
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.minWordLen = function(len) {};

/**
 * @param {number} s
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.shardSize = function(s) {};

/**
 * @param {number} s
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.size = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.sort = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.stringDistance = function(s) {};

/**
 * @param {string} m
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.suggestMode = function(m) {};

/**
 * @param {string} txt
 * @return {!elasticjs.TermSuggester}
 */
elasticjs.TermSuggester.prototype.text = function(txt) {};

/**
 * @return {?}
 */
elasticjs.TermSuggester.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {!Object} qry
 * @param {string} type
 */
elasticjs.TopChildrenQuery = function(qry, type) {};

/**
 * @return {string}
 */
elasticjs.TopChildrenQuery.prototype._type = function() {};

/**
 * @param {number} boost
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.boost = function(boost) {};

/**
 * @param {number} f
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.factor = function(f) {};

/**
 * @param {number} f
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.incrementalFactor = function(f) {};

/**
 * @param {!Object} q
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.query = function(q) {};

/**
 * @param {string} s
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.scope = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.score = function(s) {};

/**
 * @param {string} s
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.scoreMode = function(s) {};

/**
 * @return {?}
 */
elasticjs.TopChildrenQuery.prototype.toJSON = function() {};

/**
 * @param {string} t
 * @return {!elasticjs.TopChildrenQuery}
 */
elasticjs.TopChildrenQuery.prototype.type = function(t) {};

/**
 * @constructor
 * @struct
 * @param {string} type
 */
elasticjs.TypeFilter = function(type) {};

/**
 * @return {string}
 */
elasticjs.TypeFilter.prototype._type = function() {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.TypeFilter}
 */
elasticjs.TypeFilter.prototype.cache = function(trueFalse) {};

/**
 * @param {string} key
 * @return {!elasticjs.TypeFilter}
 */
elasticjs.TypeFilter.prototype.cacheKey = function(key) {};

/**
 * @param {string} name
 * @return {!elasticjs.TypeFilter}
 */
elasticjs.TypeFilter.prototype.name = function(name) {};

/**
 * @return {!elasticjs.TypeFilter}
 */
elasticjs.TypeFilter.prototype.toJSON = function() {};

/**
 * @param {string} type
 * @return {!elasticjs.TypeFilter}
 */
elasticjs.TypeFilter.prototype.type = function(type) {};

/**
 * @constructor
 * @struct
 * @param {string} name
 */
elasticjs.ValueCountAggregation = function(name) {};

/**
 * @return {string}
 */
elasticjs.ValueCountAggregation.prototype._type = function() {};

/**
 * @param {string} field
 * @return {!elasticjs.ValueCountAggregation}
 */
elasticjs.ValueCountAggregation.prototype.field = function(field) {};

/**
 * @param {string} language
 * @return {!elasticjs.ValueCountAggregation}
 */
elasticjs.ValueCountAggregation.prototype.lang = function(language) {};

/**
 * @param {!Object} p
 * @return {!elasticjs.ValueCountAggregation}
 */
elasticjs.ValueCountAggregation.prototype.params = function(p) {};

/**
 * @param {string} scriptCode
 * @return {!elasticjs.ValueCountAggregation}
 */
elasticjs.ValueCountAggregation.prototype.script = function(scriptCode) {};

/**
 * @param {boolean} trueFalse
 * @return {!elasticjs.ValueCountAggregation}
 */
elasticjs.ValueCountAggregation.prototype.scriptValuesUnique = function(trueFalse) {};

/**
 * @return {?}
 */
elasticjs.ValueCountAggregation.prototype.toJSON = function() {};

/**
 * @constructor
 * @struct
 * @param {string} field
 * @param {string} value
 */
elasticjs.WildcardQuery = function(field, value) {};

/**
 * @return {string}
 */
elasticjs.WildcardQuery.prototype._type = function() {};

/**
 * @param {!Number} boost
 * @return {!elasticjs.WildcardQuery}
 */
elasticjs.WildcardQuery.prototype.boost = function(boost) {};

/**
 * @param {string} f
 * @return {!elasticjs.WildcardQuery}
 */
elasticjs.WildcardQuery.prototype.field = function(f) {};

/**
 * @param {string} m
 * @return {!elasticjs.WildcardQuery}
 */
elasticjs.WildcardQuery.prototype.rewrite = function(m) {};

/**
 * @return {?}
 */
elasticjs.WildcardQuery.prototype.toJSON = function() {};

/**
 * @param {string} v
 * @return {!elasticjs.WildcardQuery}
 */
elasticjs.WildcardQuery.prototype.value = function(v) {};
