/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/winjs v1/index.d.ts:
 /** @type {?} */
Element.prototype.winControl;
/**
 * @record
 * @struct
 */
function IOHelper() {}

/**
 * Determines whether the specified file exists in the folder.
 * @param {string} filename The name of the file.
 * @return {!WinJS.Promise<boolean>} A promise that completes with a value of either true (if the file exists) or false.
 * 
 */
IOHelper.prototype.exists = function(filename) {};

/**
 * Reads the specified file. If the file doesn't exist, the specified default value is returned.
 * @param {string} fileName The file to read from.
 * @param {string=} def The default value to be returned if the file failed to open.
 * @return {!WinJS.Promise<string>} A promise that completes with a value that is either the contents of the file, or the specified default value.
 * 
 */
IOHelper.prototype.readText = function(fileName, def) {};

/**
 * Deletes a file from the folder.
 * @param {string} fileName The file to be deleted.
 * @return {!WinJS.Promise<void>} A promise that is fulfilled when the file has been deleted.
 * 
 */
IOHelper.prototype.remove = function(fileName) {};

/**
 * Writes the specified text to the specified file.
 * @param {string} fileName The name of the file.
 * @param {string} text The content to be written to the file.
 * @return {!WinJS.Promise<number>} A promise that is completed when the file has been written.
 * 
 */
IOHelper.prototype.writeText = function(fileName, text) {};
/** @const */
var WinJS = {};
/** @const */
WinJS.Application = {};
 /** @type {!IOHelper} */
WinJS.Application.local;
 /** @type {!IOHelper} */
WinJS.Application.roaming;
 /** @type {!IOHelper} */
WinJS.Application.temp;
 /** @type {?} */
WinJS.Application.sessionState;

/**
 * Adds an event listener for application-level events: activated, checkpoint, error, loaded, ready, settings, and unload.
 * @param {string} type The type (name) of the event. You can use any of the following:"activated", "checkpoint", "error", "loaded", "ready", "settings", and" unload".
 * @param {!Function} listener The listener to invoke when the event is raised.
 * @param {boolean=} capture true to initiate capture, otherwise false.
 * 
 * @return {void}
 */
WinJS.Application.addEventListener = function(type, listener, capture) {};

/**
 * Queues a checkpoint event.
 * 
 * @return {void}
 */
WinJS.Application.checkpoint = function() {};

/**
 * Queues an event to be processed by the WinJS.Application event queue.
 * @param {?} eventRecord The event object is expected to have a type property that is used as the event name when dispatching on the WinJS.Application event queue. The entire object is provided to event listeners in the detail property of the event.
 * 
 * @return {void}
 */
WinJS.Application.queueEvent = function(eventRecord) {};

/**
 * Removes an event listener from the control.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The listener to remove.
 * @param {?=} useCapture Specifies whether or not to initiate capture.
 * 
 * @return {void}
 */
WinJS.Application.removeEventListener = function(type, listener, useCapture) {};

/**
 * Starts dispatching application events (the activated, checkpoint, error, loaded, ready, settings, and unload events).
 * 
 * @return {void}
 */
WinJS.Application.start = function() {};

/**
 * Stops application event processing and resets WinJS.Application to its initial state. All WinJS.Application event listeners (for the activated, checkpoint, error, loaded, ready, settings, and unload events) are removed.
 * 
 * @return {void}
 */
WinJS.Application.stop = function() {};

/**
 * Occurs when WinRT activation has occurred. The name of this event is "activated" (and also "mainwindowactivated"). This event occurs after the loaded event and before the ready event.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. For more information about event arguments, see the WinRT event argument classes: WebUICachedFileUpdaterActivatedEventArgs, WebUICameraSettingsActivatedEventArgs, WebUIContactPickerActivatedEventArgs, WebUIDeviceActivatedEventArgs, WebUIFileActivatedEventArgs, WebUIFileOpenPickerActivatedEventArgs, WebUIFileSavePickerActivatedEventArgs, WebUILaunchActivatedEventArgs, WebUIPrintTaskSettingsActivatedEventArgs, WebUIProtocolActivatedEventArgs, WebUISearchActivatedEventArgs, WebUIShareTargetActivatedEventArgs.
 * 
 * @return {void}
 */
WinJS.Application.onactivated = function(eventInfo) {};

/**
 * Occurs when receiving PLM notification or when the checkpoint function is called.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object includes the following subproperties: type, setPromise.
 * 
 * @return {void}
 */
WinJS.Application.oncheckpoint = function(eventInfo) {};

/**
 * Occurs when an unhandled error has been raised.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.Application.onerror = function(eventInfo) {};

/**
 * Occurs after the DOMContentLoaded event, which fires after the page has been parsed but before all the resources are loaded. This event occurs before the activated event and the ready event.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object includes the following subproperties: type, setPromise.
 * 
 * @return {void}
 */
WinJS.Application.onloaded = function(eventInfo) {};

/**
 * Occurs when the application is ready. This event occurs after the loaded event and the activated event.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object includes the following sub-properties: type, setPromise.
 * 
 * @return {void}
 */
WinJS.Application.onready = function(eventInfo) {};

/**
 * Occurs when the settings charm is invoked.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: type, applicationcommands.
 * 
 * @return {void}
 */
WinJS.Application.onsettings = function(eventInfo) {};

/**
 * Occurs when the application is about to be unloaded.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object includes the following sub-properties: type, setPromise.
 * 
 * @return {void}
 */
WinJS.Application.onunload = function(eventInfo) {};
/** @const */
WinJS.Binding = {};
 /** @type {boolean} */
WinJS.Binding.optimizeBindingReferences;
 /** @type {{addProperty: function(string, ?): void, bind: function(string, ?): !Function, getProperty: function(string): ?, notify: function(string, string, string): !WinJS.Promise<?>, removeProperty: function(string): ?, setProperty: function(string, ?): ?, unbind: function(string, !Function): ?, updateProperty: function(string, ?): !WinJS.Promise<?>}} */
WinJS.Binding.dynamicObservableMixin;
/**
 * @extends {WinJS.Binding.ListProjection}
 * @constructor
 * @struct
 */
WinJS.Binding.FilteredListProjection = function() {};
 /** @type {number} */
WinJS.Binding.FilteredListProjection.prototype.length;

/**
 * Returns a key/data pair for the specified index.
 * @param {number} index The index of the value to retrieve.
 * @return {!WinJS.Binding.IKeyDataPair<T>} An object that has two properties: key and data.
 * 
 */
WinJS.Binding.FilteredListProjection.prototype.getItem = function(index) {};

/**
 * Returns the index of the first occurrence of a key in a list.
 * @param {string} key The key to locate in the list.
 * @return {number} The index of the first occurrence of a key in a list, or -1 if not found.
 * 
 */
WinJS.Binding.FilteredListProjection.prototype.indexOfKey = function(key) {};

/**
 * Forces the list to send a itemmutated notification to any listeners for the value at the specified index.
 * @param {number} index The index of the value that was mutated.
 * 
 * @return {void}
 */
WinJS.Binding.FilteredListProjection.prototype.notifyMutated = function(index) {};

/**
 * Replaces the value at the specified index with a new value.
 * @param {number} index The index of the value that was replaced.
 * @param {T} newValue The new value.
 * 
 * @return {void}
 */
WinJS.Binding.FilteredListProjection.prototype.setAt = function(index, newValue) {};
/**
 * @extends {WinJS.Binding.ListBase}
 * @constructor
 * @struct
 */
WinJS.Binding.GroupsListProjection = function() {};
 /** @type {number} */
WinJS.Binding.GroupsListProjection.prototype.length;

/**
 * Gets a key/data pair for the specified index.
 * @param {number} index The index of the value to retrieve.
 * @return {!WinJS.Binding.IKeyDataPair<T>} An object that has two properties: key and data.
 * 
 */
WinJS.Binding.GroupsListProjection.prototype.getItem = function(index) {};

/**
 * Gets a key/data pair for the specified key.
 * @param {string} key The key of the value to retrieve.
 * @return {!WinJS.Binding.IKeyDataPair<T>} An object with two properties: key and data.
 * 
 */
WinJS.Binding.GroupsListProjection.prototype.getItemFromKey = function(key) {};

/**
 * Returns the index of the first occurrence of a key in a list.
 * @param {string} key The key to locate in the list.
 * @return {number} The index of the first occurrence of a key in a list, or -1 if not found.
 * 
 */
WinJS.Binding.GroupsListProjection.prototype.indexOfKey = function(key) {};
/**
 * @extends {WinJS.Binding.SortedListProjection}
 * @constructor
 * @struct
 */
WinJS.Binding.GroupedSortedListProjection = function() {};
 /** @type {!WinJS.Binding.GroupsListProjection<T>} */
WinJS.Binding.GroupedSortedListProjection.prototype.groups;

/**
 * Returns a key/data pair for the specified index.
 * @param {number} index The index of the value to retrieve.
 * @return {!WinJS.Binding.IGroupKeyDataPair<T>} An object that has two properties: key and data.
 * 
 */
WinJS.Binding.GroupedSortedListProjection.prototype.getItem = function(index) {};

/**
 * @constructor
 * @struct
 * Creates a List object.
 * @param {!Array<T>=} list The array containing the elements to initalize the list.
 * @param {?=} options You can set two Boolean options: binding and proxy. If options.binding is true, the list contains the result of calling as on the element values. If options.proxy is true, the list specified as the first parameter is used as the storage for the List. This option should be used with care, because uncoordinated edits to the data storage may result in errors.
 * 
 */
WinJS.Binding.List = function(list, options) {};
 /** @type {number} */
WinJS.Binding.List.prototype.length;

/**
 * Gets a key/data pair for the specified list index.
 * @param {number} index The index of value to retrieve.
 * @return {!WinJS.Binding.IKeyDataPair<T>} An object with .key and .data properties.
 * 
 */
WinJS.Binding.List.prototype.getItem = function(index) {};

/**
 * Gets a key/data pair for the list item key specified.
 * @param {string} key The key of the value to retrieve.
 * @return {!WinJS.Binding.IKeyDataPair<T>} An object with .key and .data properties.
 * 
 */
WinJS.Binding.List.prototype.getItemFromKey = function(key) {};

/**
 * Gets the index of the first occurrence of a key in a list.
 * @param {string} key The key to locate in the list.
 * @return {number} The index of the first occurrence of a key in a list, or -1 if not found.
 * 
 */
WinJS.Binding.List.prototype.indexOfKey = function(key) {};

/**
 * Moves the value at index to the specified position.
 * @param {number} index The original index of the value.
 * @param {number} newIndex The index of the value after the move.
 * 
 * @return {void}
 */
WinJS.Binding.List.prototype.move = function(index, newIndex) {};

/**
 * Forces the list to send a itemmutated notification to any listeners for the value at the specified index.
 * @param {number} index The index of the value that was mutated.
 * 
 * @return {void}
 */
WinJS.Binding.List.prototype.notifyMutated = function(index) {};

/**
 * Returns a list with the elements reversed. This method reverses the elements of a list object in place. It does not create a new list object during execution.
 * 
 * @return {void}
 */
WinJS.Binding.List.prototype.reverse = function() {};

/**
 * Replaces the value at the specified index with a new value.
 * @param {number} index The index of the value that was replaced.
 * @param {T} newValue The new value.
 * 
 * @return {void}
 */
WinJS.Binding.List.prototype.setAt = function(index, newValue) {};

/**
 * Returns a list with the elements sorted. This method sorts the elements of a list object in place. It does not create a new list object during execution.
 * @param {function(T, T): number=} sortFunction The function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order. This function must always return the same results, given the same inputs. The results should not depend on values that are subject to change. You must call notifyMutated each time an item changes. Do not batch change notifications.
 * 
 * @return {void}
 */
WinJS.Binding.List.prototype.sort = function(sortFunction) {};

/**
 * Removes elements from a list and, if necessary, inserts new elements in their place, returning the deleted elements.
 * @param {number} start The zero-based location in the list from which to start removing elements.
 * @param {number=} howMany The number of elements to remove.
 * @param {...T} item The elements to insert into the list in place of the deleted elements.
 * @return {!Array<T>} The deleted elements.
 * 
 */
WinJS.Binding.List.prototype.splice = function(start, howMany, item) {};
/**
 * @constructor
 * @struct
 */
WinJS.Binding.ListBase = function() {};
 /** @type {!WinJS.UI.IListDataSource<T>} */
WinJS.Binding.ListBase.prototype.dataSource;
 /** @type {boolean} */
WinJS.Binding.ListBase.supportedForProcessing;

/**
 * An item in the list has changed its value.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail contains the following information: index, key, newItem, newValue, oldItem, oldValue.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.onitemchanged = function(eventInfo) {};

/**
 * A new item has been inserted into the list.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail contains the following information: index, key, value.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.oniteminserted = function(eventInfo) {};

/**
 * An item has been changed locations in the list.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail contains the following information: index, key, value.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.onitemmoved = function(eventInfo) {};

/**
 * An item has been mutated. This event occurs as a result of calling the notifyMutated method.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail contains the following information: index, key, value.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.onitemmutated = function(eventInfo) {};

/**
 * An item has been removed from the list.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail contains the following information: index, key, value.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.onitemremoved = function(eventInfo) {};

/**
 * The list has been refreshed. Any references to items in the list may be incorrect.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object is null.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.onreload = function(eventInfo) {};

/**
 * Adds an event listener to the control.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The listener to invoke when the event gets raised.
 * @param {boolean=} useCapture If true, initiates capture, otherwise false.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Links the specified action to the property specified in the name parameter. This function is invoked when the value of the property may have changed. It is not guaranteed that the action will be called only when a value has actually changed, nor is it guaranteed that the action will be called for every value change. The implementation of this function coalesces change notifications, such that multiple updates to a property value may result in only a single call to the specified action.
 * @param {string} name The name of the property to which to bind the action.
 * @param {!Function} action The function to invoke asynchronously when the property may have changed.
 * @return {?} A reference to this observableMixin object.
 * 
 */
WinJS.Binding.ListBase.prototype.bind = function(name, action) {};

/**
 * Returns a new list consisting of a combination of two arrays.
 * @param {...T} item Additional items to add to the end of the list.
 * @return {!Array<T>} An array containing the concatenation of the list and any other supplied items.
 * 
 */
WinJS.Binding.ListBase.prototype.concat = function(item) {};

/**
 * Creates a live filtered projection over this list. As the list changes, the filtered projection reacts to those changes and may also change.
 * @param {function(T): boolean} predicate A function that accepts a single argument. The createFiltered function calls the callback with each element in the list. If the function returns true, that element will be included in the filtered list. This function must always return the same results, given the same inputs. The results should not depend on values that are subject to change. You must call notifyMutated each time an item changes. Do not batch change notifications.
 * @return {!WinJS.Binding.FilteredListProjection<T>} A filtered projection over the list.
 * 
 */
WinJS.Binding.ListBase.prototype.createFiltered = function(predicate) {};

/**
 * Creates a live grouped projection over this list. As the list changes, the grouped projection reacts to those changes and may also change. The grouped projection sorts all the elements of the list to be in group-contiguous order. The grouped projection also contains a .groups property, which is a List representing the groups that were found in the list.
 * @param {function(T): string} groupKey A function that accepts a single argument. The function is called with each element in the list, the function should return a string representing the group containing the element. This function must always return the same results, given the same inputs. The results should not depend on values that are subject to change. You must call notifyMutated each time an item changes. Do not batch change notifications.
 * @param {function(T): ?} groupData A function that accepts a single argument. The function is called once, on one element per group. It should return the value that should be set as the data of the .groups list element for this group. The data value usually serves as summary or header information for the group.
 * @param {function(string, string): number=} groupSorter A function that accepts two arguments. The function is called with pairs of group keys found in the list. It must return one of the following numeric values: negative if the first argument is less than the second (sorted before), zero if the two arguments are equivalent, positive if the first argument is greater than the second (sorted after).
 * @return {!WinJS.Binding.GroupedSortedListProjection<T>} A grouped projection over the list.
 * 
 */
WinJS.Binding.ListBase.prototype.createGrouped = function(groupKey, groupData, groupSorter) {};

/**
 * Creates a live sorted projection over this list. As the list changes, the sorted projection reacts to those changes and may also change.
 * @param {function(T, T): number} sorter A function that accepts two arguments. The function is called with elements in the list. It must return one of the following numeric values: negative if the first argument is less than the second, zero if the two arguments are equivalent, positive if the first argument is greater than the second. This function must always return the same results, given the same inputs. The results should not depend on values that are subject to change. You must call notifyMutated each time an item changes. Do not batch change notifications.
 * @return {!WinJS.Binding.SortedListProjection<T>} A sorted projection over the list.
 * 
 */
WinJS.Binding.ListBase.prototype.createSorted = function(sorter) {};

/**
 * Raises an event of the specified type and with the specified additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event.
 * 
 */
WinJS.Binding.ListBase.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Checks whether the specified callback function returns true for all elements in a list.
 * @param {function(T, number, !Array<T>): boolean} callback A function that accepts up to three arguments. This function is called for each element in the list until it returns false or the end of the list is reached.
 * @param {?=} thisArg An object to which the this keyword can refer in the callback function. If thisArg is omitted, undefined is used.
 * @return {boolean} true if the callback returns true for all elements in the list.
 * 
 */
WinJS.Binding.ListBase.prototype.every = function(callback, thisArg) {};

/**
 * Returns the elements of a list that meet the condition specified in a callback function.
 * @param {function(T, number, !Array<T>): ?} callback A function that accepts up to three arguments. The function is called for each element in the list. This function must always return the same results, given the same inputs. The results should not depend on values that are subject to change. You must call notifyMutated each time an item changes. Do not batch change notifications.
 * @param {?=} thisArg An object to which the this keyword can refer in the callback function. If thisArg is omitted, undefined is used.
 * @return {!Array<T>} An array containing the elements that meet the condition specified in the callback function.
 * 
 */
WinJS.Binding.ListBase.prototype.filter = function(callback, thisArg) {};

/**
 * Calls the specified callback function for each element in a list.
 * @param {function(T, number, !Array<T>): void} callback A function that accepts up to three arguments. The function is called for each element in the list. The arguments are as follows: value, index, array.
 * @param {?=} thisArg An object to which the this keyword can refer in the callback function. If thisArg is omitted, undefined is used.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.forEach = function(callback, thisArg) {};

/**
 * Gets the value at the specified index.
 * @param {number} index The index of the value to get.
 * @return {T} The value at the specified index.
 * 
 */
WinJS.Binding.ListBase.prototype.getAt = function(index) {};

/**
 * Gets the index of the first occurrence of the specified value in a list.
 * @param {T} searchElement The value to locate in the list.
 * @param {number=} fromIndex The index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
 * @return {number} The index of the first occurrence of a value in a list or -1 if not found.
 * 
 */
WinJS.Binding.ListBase.prototype.indexOf = function(searchElement, fromIndex) {};

/**
 * Returns a string consisting of all the elements of a list separated by the specified separator string.
 * @param {string=} separator A string used to separate the elements of a list. If this parameter is omitted, the list elements are separated with a comma.
 * @return {string} The elements of a list separated by the specified separator string.
 * 
 */
WinJS.Binding.ListBase.prototype.join = function(separator) {};

/**
 * Gets the index of the last occurrence of the specified value in a list.
 * @param {T} searchElement The value to locate in the list.
 * @param {number=} fromIndex The index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the list.
 * @return {number} The index of the last occurrence of a value in a list, or -1 if not found.
 * 
 */
WinJS.Binding.ListBase.prototype.lastIndexOf = function(searchElement, fromIndex) {};

/**
 * Calls the specified callback function on each element of a list, and returns an array that contains the results.
 * @template G
 * @param {function(T, number, !Array<T>): G} callback A function that accepts up to three arguments. The function is called for each element in the list.
 * @param {?=} thisArg n object to which the this keyword can refer in the callback function. If thisArg is omitted, undefined is used.
 * @return {!Array<G>} An array containing the result of calling the callback function on each element in the list.
 * 
 */
WinJS.Binding.ListBase.prototype.map = function(callback, thisArg) {};

/**
 * Notifies listeners that a property value was updated.
 * @param {string} name The name of the property that is being updated.
 * @param {?} newValue The new value for the property.
 * @param {?} oldValue The old value for the property.
 * @return {!WinJS.Promise<?>} A promise that is completed when the notifications are complete.
 * 
 */
WinJS.Binding.ListBase.prototype.notify = function(name, newValue, oldValue) {};

/**
 * Forces the list to send a reload notification to any listeners.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.notifyReload = function() {};

/**
 * Accumulates a single result by calling the specified callback function for all elements in a list. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
 * @param {function(?, ?, number, !Array<T>): T} callback A function that accepts up to four arguments. These arguments are: previousValue, currentValue, currentIndex, array. The function is called for each element in the list.
 * @param {T=} initiallValue If initialValue is specified, it is used as the value with which to start the accumulation. The first call to the function provides this value as an argument instead of a list value.
 * @return {T} The return value from the last call to the callback function.
 * 
 */
WinJS.Binding.ListBase.prototype.reduce = function(callback, initiallValue) {};

/**
 * Accumulates a single result by calling the specified callback function for all elements in a list, starting with the last member of the list. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
 * @param {function(?, ?, number, !Array<T>): T} callback A function that accepts up to four arguments. These arguments are: previousValue, currentValue, currentIndex, array. The function is called for each element in the list.
 * @param {T=} initialValue If initialValue is specified, it is used as the value with which to start the accumulation. The first call to the callback function provides this value as an argument instead of a list value.
 * @return {T} The return value from the last call to callback function.
 * 
 */
WinJS.Binding.ListBase.prototype.reduceRight = function(callback, initialValue) {};

/**
 * Removes an event listener from the control.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The listener to remove.
 * @param {boolean=} useCapture true if capture is to be initiated, otherwise false.
 * 
 * @return {void}
 */
WinJS.Binding.ListBase.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * Extracts a section of a list and returns a new list.
 * @param {number} begin The index that specifies the beginning of the section.
 * @param {number=} end The index that specifies the end of the section.
 * @return {!Array<T>} Returns a section of list.
 * 
 */
WinJS.Binding.ListBase.prototype.slice = function(begin, end) {};

/**
 * Checks whether the specified callback function returns true for any element of a list.
 * @param {function(T, number, !Array<T>): boolean} callback A function that accepts up to three arguments. The function is called for each element in the list until it returns true, or until the end of the list.
 * @param {?=} thisArg An object to which the this keyword can refer in the callback function. If thisArg is omitted, undefined is used.
 * @return {boolean} true if callback returns true for any element in the list.
 * 
 */
WinJS.Binding.ListBase.prototype.some = function(callback, thisArg) {};

/**
 * Removes one or more listeners from the notification list for a given property.
 * @param {string} name The name of the property to unbind. If this parameter is omitted, all listeners for all events are removed.
 * @param {!Function} action The function to remove from the listener list for the specified property. If this parameter is omitted, all listeners are removed for the specific property.
 * @return {?} This object is returned.
 * 
 */
WinJS.Binding.ListBase.prototype.unbind = function(name, action) {};
/**
 * @extends {WinJS.Binding.ListBase}
 * @constructor
 * @struct
 */
WinJS.Binding.ListBaseWithMutators = function() {};

/**
 * Removes the last element from a list and returns it.
 * @return {T} The last element from the list.
 * 
 */
WinJS.Binding.ListBaseWithMutators.prototype.pop = function() {};

/**
 * Appends new element(s) to a list, and returns the new length of the list.
 * @param {...T} value_or_values The element to insert at the end of the list.
 * @return {number} The new length of the list.
 * 
 */
WinJS.Binding.ListBaseWithMutators.prototype.push = function(value_or_values) {};

/**
 * Removes the first element from a list and returns it.
 * @return {T} The first element from the list.
 * 
 */
WinJS.Binding.ListBaseWithMutators.prototype.shift = function() {};

/**
 * Appends new element(s) to a list, and returns the new length of the list.
 * @param {...T} value_or_values The element to insert at the start of the list.
 * @return {number} The new length of the list.
 * 
 */
WinJS.Binding.ListBaseWithMutators.prototype.unshift = function(value_or_values) {};
/**
 * @extends {WinJS.Binding.ListBaseWithMutators}
 * @constructor
 * @struct
 */
WinJS.Binding.ListProjection = function() {};

/**
 * Disconnects a WinJS.Binding.List projection from its underlying WinJS.Binding.List. It's only important to call this method when the WinJS.Binding.List projection and the WinJS.Binding.List have different lifetimes. (Call this method on the WinJS.Binding.List projection, not the underlying WinJS.Binding.List.)
 * 
 * @return {void}
 */
WinJS.Binding.ListProjection.prototype.dispose = function() {};

/**
 * Gets a key/data pair for the specified key.
 * @param {string} key The key of the value to retrieve.
 * @return {!WinJS.Binding.IKeyDataPair<T>} An object with two properties: key and data.
 * 
 */
WinJS.Binding.ListProjection.prototype.getItemFromKey = function(key) {};

/**
 * Moves the value at index to position newIndex.
 * @param {number} index The original index of the value.
 * @param {number} newIndex The index of the value after the move.
 * 
 * @return {void}
 */
WinJS.Binding.ListProjection.prototype.move = function(index, newIndex) {};

/**
 * Removes elements from a list and, if necessary, inserts new elements in their place, returning the deleted elements.
 * @param {number} start The zero-based location in the list from which to start removing elements.
 * @param {number=} howMany The number of elements to remove.
 * @param {...T} item The elements to insert into the list in place of the deleted elements.
 * @return {!Array<T>} The deleted elements.
 * 
 */
WinJS.Binding.ListProjection.prototype.splice = function(start, howMany, item) {};
 /** @type {{addProperty: function(string, ?): ?, bind: function(string, ?): !Function, getProperty: function(string): ?, notify: function(string, string, string): !WinJS.Promise<?>, removeProperty: function(string): ?, setProperty: function(string, ?): ?, unbind: function(string, !Function): ?, updateProperty: function(string, ?): !WinJS.Promise<?>}} */
WinJS.Binding.mixin;
 /** @type {{bind: function(string, !Function): ?, notify: function(string, ?, ?): !WinJS.Promise<?>, unbind: function(string, !Function): ?}} */
WinJS.Binding.observableMixin;
/**
 * @extends {WinJS.Binding.ListProjection}
 * @constructor
 * @struct
 */
WinJS.Binding.SortedListProjection = function() {};
 /** @type {number} */
WinJS.Binding.SortedListProjection.prototype.length;

/**
 * Returns a key/data pair for the specified index.
 * @param {number} index The index of the value to retrieve.
 * @return {!WinJS.Binding.IKeyDataPair<T>} An object that has two properties: key and data.
 * 
 */
WinJS.Binding.SortedListProjection.prototype.getItem = function(index) {};

/**
 * Returns the index of the first occurrence of a key.
 * @param {string} key The key to locate in the list.
 * @return {number} The index of the first occurrence of a key in a list, or -1 if not found.
 * 
 */
WinJS.Binding.SortedListProjection.prototype.indexOfKey = function(key) {};

/**
 * Forces the list to send a itemmutated notification to any listeners for the value at the specified index.
 * @param {number} index The index of the value that was mutated.
 * 
 * @return {void}
 */
WinJS.Binding.SortedListProjection.prototype.notifyMutated = function(index) {};

/**
 * Replaces the value at the specified index with a new value.
 * @param {number} index The index of the value to be replaced.
 * @param {T} newValue The new value.
 * 
 * @return {void}
 */
WinJS.Binding.SortedListProjection.prototype.setAt = function(index, newValue) {};

/**
 * @constructor
 * @struct
 * Creates a template that provides a reusable declarative binding element.
 * @param {!HTMLElement} element The DOM element to convert to a template.
 * @param {?=} options If this parameter is supplied, the template is loaded from the URI and the content of the element parameter is ignored. You can add the following options: href.
 * 
 */
WinJS.Binding.Template = function(element, options) {};
 /** @type {!HTMLElement} */
WinJS.Binding.Template.prototype.element;

/**
 * Binds values from the specified data context to elements that are descendants of the specified root element that have the declarative binding attributes specified (data-win-bind).
 * @param {?} dataContext The object to use for default data binding.
 * @param {!HTMLElement=} container The element to which to add this rendered template. If this parameter is omitted, a new DIV is created.
 * @return {!WinJS.Promise<!HTMLElement>} A Promise that will be completed after binding has finished. The value is either container or the created DIV. promise that is completed after binding has finished.
 * 
 */
WinJS.Binding.Template.prototype.render = function(dataContext, container) {};

/**
 * Renders a template based on the specified URI (static method).
 * @param {string} href The URI from which to load the template.
 * @param {?} dataContext The object to use for default data binding.
 * @param {!HTMLElement=} container The element to which to add this rendered template. If this parameter is omitted, a new DIV is created.
 * @return {!WinJS.Promise<!HTMLElement>} A promise that is completed after binding has finished. The value is either the object in the container parameter or the created DIV.
 * 
 */
WinJS.Binding.Template.render = function(href, dataContext, container) {};

/**
 * Returns an observable object. This may be an observable proxy for the specified object, an existing proxy, or the specified object itself if it directly supports observation.
 * @template U
 * @param {U} data The object to observe.
 * @return {U} The observable object.
 * 
 */
WinJS.Binding.as = function(data) {};

/**
 * Binds to one or more properties on the observable object or or on child values of that object.
 * @param {?} observable The object to bind to.
 * @param {?} bindingDescriptor An object literal containing the binding declarations. Binding declarations take the form: { propertyName: (function | bindingDeclaration), ... }.
 * @return {?} An object that contains at least a "cancel" field, which is a function that removes all bindings associated with this bind request.
 * 
 */
WinJS.Binding.bind = function(observable, bindingDescriptor) {};

/**
 * Creates a default binding initializer for binding between a source property and a destination property with the specified converter function that is executed on the value of the source property.
 * @param {!Function} convert The conversion function that takes the source property and produces a value that is set to the destination property. This function must be accessible from the global namespace.
 * @return {!Function} The binding initializer.
 * 
 */
WinJS.Binding.converter = function(convert) {};

/**
 * Creates a one-way binding between the source object and the destination object. Warning Do not attempt to bind data to the ID of an HTML element.
 * @param {?} source The source object.
 * @param {?} sourceProperties The path on the source object to the source property.
 * @param {?} dest The destination object.
 * @param {?} destProperties The path on the destination object to the destination property.
 * @return {?} An object with a cancel method that is used to coalesce bindings.
 * 
 */
WinJS.Binding.defaultBind = function(source, sourceProperties, dest, destProperties) {};

/**
 * Creates a new constructor function that supports observability with the specified set of properties.
 * @param {?} data The object to use as the pattern for defining the set of properties.
 * @return {!Function} A constructor function with 1 optional argument that is the initial state of the properties.
 * 
 */
WinJS.Binding.define = function(data) {};

/**
 * Wraps the specified object so that all its properties are instrumented for binding. This is meant to be used in conjunction with the binding mixin.
 * @param {?} shape The specification for the bindable object.
 * @return {?} An object with a set of properties all of which are wired for binding.
 * 
 */
WinJS.Binding.expandProperties = function(shape) {};

/**
 * Marks a custom initializer function as being compatible with declarative data binding.
 * @param {!Function} customInitializer The custom initializer to be marked as compatible with declarative data binding.
 * @return {!Function} The input customInitializer.
 * 
 */
WinJS.Binding.initializer = function(customInitializer) {};

/**
 * Sets the destination property to the value of the source property.
 * @param {?} source The source object.
 * @param {?} sourceProperties The path on the source object to the source property.
 * @param {?} dest The destination object.
 * @param {?} destProperties The path on the destination object to the destination property.
 * @return {?} An object with a cancel method that is used to coalesce bindings.
 * 
 */
WinJS.Binding.oneTime = function(source, sourceProperties, dest, destProperties) {};

/**
 * Binds the values of an object to the values of a DOM element that has the data-win-bind attribute. If multiple DOM elements are to be bound, you must set the attribute on all of them. See the example below for details.
 * @param {!Element=} rootElement Optional. The element at which to start traversing to find elements to bind to. If this parameter is omitted, the entire document is searched.
 * @param {?=} dataContext The object that contains the values to which the DOM element should be bound.
 * @param {boolean=} skipRoot If true, specifies that only the children of rootElement should be bound, otherwise rootElement should be bound as well.
 * @param {?=} bindingCache The cached binding data.
 * @param {!Function=} defaultInitializer The binding initializer to use in the case that one is not specified in a binding expression. If not provided, the behavior is the same as Binding.defaultBind.
 * @return {!WinJS.Promise<void>} A Promise that completes when every item that contains the data-win-bind attribute has been processed and the update has started.
 * 
 */
WinJS.Binding.processAll = function(rootElement, dataContext, skipRoot, bindingCache, defaultInitializer) {};

/**
 * Creates a one-way binding between the source object and an attribute on the destination element.
 * @param {?} source The source object.
 * @param {!Array<?>} sourceProperties The path on the source object to the source property.
 * @param {!Element} dest The destination object.
 * @param {!Array<?>} destProperties The path on the destination object to the destination property. This must be a single name.
 * @return {?} An object with a cancel() method that is used to coalesce bindings.
 * 
 */
WinJS.Binding.setAttribute = function(source, sourceProperties, dest, destProperties) {};

/**
 * Sets an attribute on the destination element to the value of the source property.
 * @param {?} source The source object.
 * @param {!Array<?>} sourceProperties The path on the source object to the source property.
 * @param {!Element} dest The destination object.
 * @param {!Array<?>} destProperties The path on the destination object to the destination property. This must be a single name.
 * 
 * @return {void}
 */
WinJS.Binding.setAttributeOneTime = function(source, sourceProperties, dest, destProperties) {};

/**
 * Returns the original (non-observable) object is returned if the specified object is an observable proxy,
 * @param {?} data The object for which to retrieve the original value.
 * @return {?} If the specified object is an observable proxy, the original object is returned, otherwise the same object is returned.
 * 
 */
WinJS.Binding.unwrap = function(data) {};
/**
 * @record
 * @struct
 */
WinJS.Binding.IKeyDataPair = function() {};
 /** @type {string} */
WinJS.Binding.IKeyDataPair.prototype.key;
 /** @type {T} */
WinJS.Binding.IKeyDataPair.prototype.data;
/**
 * @extends {WinJS.Binding.IKeyDataPair}
 * @record
 * @struct
 */
WinJS.Binding.IGroupKeyDataPair = function() {};
 /** @type {number} */
WinJS.Binding.IGroupKeyDataPair.prototype.groupSize;
 /** @type {number} */
WinJS.Binding.IGroupKeyDataPair.prototype.firstItemIndexHint;
 /** @type {string} */
WinJS.Binding.IGroupKeyDataPair.prototype.firstItemKey;
/** @const */
WinJS.Class = {};

/**
 * Defines a class using the given constructor and the specified instance members.
 * @param {!Function=} constructor A constructor function that is used to instantiate this type.
 * @param {?=} instanceMembers The set of instance fields, properties, and methods made available on the type.
 * @param {?=} staticMembers The set of static fields, properties, and methods made available on the type.
 * @return {?} The newly-defined type.
 * 
 */
WinJS.Class.define = function(constructor, instanceMembers, staticMembers) {};

/**
 * Creates a sub-class based on the specified baseClass parameter, using prototype inheritance.
 * @param {?} baseClass The type to inherit from.
 * @param {!Function} constructor A constructor function that is used to instantiate this type.
 * @param {?=} instanceMembers The set of instance fields, properties, and methods to be made available on the type.
 * @param {?=} staticMembers The set of static fields, properties, and methods to be made available on the type.
 * @return {?} The newly-defined type.
 * 
 */
WinJS.Class.derive = function(baseClass, constructor, instanceMembers, staticMembers) {};

/**
 * Defines a class using the given constructor and the union of the set of instance members specified by all the mixin objects. The mixin parameter list is of variable length. For more information, see Adding functionality with WinJS mixins.
 * @param {!Function} constructor A constructor function that will be used to instantiate this class.
 * @param {...?} mixin An object declaring the set of instance members. The mixin parameter list is of variable length.
 * @return {?} The newly defined class.
 * 
 */
WinJS.Class.mix = function(constructor, mixin) {};
 /** @type {boolean} */
WinJS.validation;

/**
 * @constructor
 * @struct
 * Creates an Error object with the specified name and message properties.
 * @param {string} name The name of this error. The name is meant to be consumed programmatically and should not be localized.
 * @param {string=} message The message for this error. The message is meant to be consumed by humans and should be localized.
 * 
 */
WinJS.ErrorFromName = function(name, message) {};
/**
 * @record
 * @struct
 */
WinJS.IPromise = function() {};

/**
 * @return {void}
 */
WinJS.IPromise.prototype.cancel = function() {};

/**
 * @template U
 * @param {function(T): ?=} onComplete
 * @param {function(?): ?=} onError
 * @param {function(?): void=} onProgress
 * @return {void}
 */
WinJS.IPromise.prototype.done = function(onComplete, onError, onProgress) {};

/**
 * @template U
 * @param {function(T): !WinJS.IPromise<U>|function(T): U|function(T): void=} onComplete
 * @param {function(?): !WinJS.IPromise<U>|function(?): U|function(?): void=} onError
 * @param {function(?): void=} onProgress
 * @return {!WinJS.IPromise<U>}
 */
WinJS.IPromise.prototype.then = function(onComplete, onError, onProgress) {};

/**
 * @constructor
 * @struct
 * A promise provides a mechanism to schedule work to be done on a value that has not yet been computed. It is a convenient abstraction for managing interactions with asynchronous APIs. For more information about asynchronous programming, see Asynchronous programming. For more information about promises in JavaScript, see Asynchronous programming in JavaScript. For more information about using promises, see the WinJS Promise sample.
 * @param {function(?, ?, ?): void=} init The function that is called during construction of the Promise that contains the implementation of the operation that the Promise will represent. This can be synchronous or asynchronous, depending on the nature of the operation. Note that placing code within this function does not automatically run it asynchronously; that must be done explicitly with other asynchronous APIs such as setImmediate, setTimeout, requestAnimationFrame, and the Windows Runtime asynchronous APIs. The init function is given three arguments: completeDispatch, errorDispatch, progressDispatch. This parameter is optional.
 * @param {!Function=} onCancel The function to call if a consumer of this promise wants to cancel its undone work. Promises are not required to support cancellation.
 * 
 */
WinJS.Promise = function(init, onCancel) {};
 /** @type {!WinJS.IPromise<?>} */
WinJS.Promise.cancel;

/**
 * Occurs when there is an error in processing a promise.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.Promise.onerror = function(eventInfo) {};

/**
 * Adds an event listener for the promise.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The listener to invoke when the event is raised.
 * @param {boolean=} capture true to initiate capture, otherwise false.
 * 
 * @return {void}
 */
WinJS.Promise.addEventListener = function(type, listener, capture) {};

/**
 * Returns a promise that is fulfilled when one of the input promises has been fulfilled.
 * @param {!Array<!WinJS.IPromise<?>>|?} value An array that contains Promise objects or objects whose property values include Promise objects.
 * @return {!WinJS.IPromise<?>} A promise that on fulfillment yields the value of the input (complete or error).
 * 
 */
WinJS.Promise.any = function(value) {};

/**
 * Returns a promise. If the object is already a Promise it is returned; otherwise the object is wrapped in a Promise. You can use this function when you need to treat a non-Promise object like a Promise, for example when you are calling a function that expects a promise, but already have the value needed rather than needing to get it asynchronously.
 * @template U
 * @param {U=} value The value to be treated as a Promise.
 * @return {!WinJS.IPromise<U>} The promise.
 * 
 */
WinJS.Promise.as = function(value) {};

/**
 * Attempts to cancel the fulfillment of a promised value. If the promise hasn't already been fulfilled and cancellation is supported, the promise enters the error state with a value of Error("Canceled").
 * 
 * @return {void}
 */
WinJS.Promise.prototype.cancel = function() {};

/**
 * Raises an event of the specified type and properties.
 * @param {string} type The type (name) of the event.
 * @param {?} details The set of additional properties to be attached to the event object.
 * @return {boolean} true if preventDefault was called on the event; otherwise, false.
 * 
 */
WinJS.Promise.dispatchEvent = function(type, details) {};

/**
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. After the handlers have finished executing, this function throws any error that would have been returned from then as a promise in the error state. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * @template U
 * @param {function(T): ?=} onComplete The function to be called if the promise is fulfilled successfully with a value. The fulfilled value is passed as the single argument. If the value is null, the fulfilled value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while executing the function, the promise returned by then moves into the error state.
 * @param {function(?): ?=} onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. If it is null, the error is forwarded. The value returned from the function is the fulfilled value of the promise returned by then.
 * @param {function(?): void=} onProgress The function to be called if the promise reports progress. Data about the progress is passed as the single argument. Promises are not required to support progress.
 * 
 * @return {void}
 */
WinJS.Promise.prototype.done = function(onComplete, onError, onProgress) {};

/**
 * Determines whether a value fulfills the promise contract.
 * @param {?} value A value that may be a promise.
 * @return {boolean} true if the object conforms to the promise contract (has a then function), otherwise false.
 * 
 */
WinJS.Promise.is = function(value) {};

/**
 * Creates a Promise that is fulfilled when all the values are fulfilled.
 * @param {?} values An object whose members contain values, some of which may be promises.
 * @return {!WinJS.IPromise<?>} A Promise whose value is an object with the same field names as those of the object in the values parameter, where each field value is the fulfilled value of a promise.
 * 
 */
WinJS.Promise.join = function(values) {};

/**
 * Removes an event listener from the control.
 * @param {string} eventType The type (name) of the event.
 * @param {!Function} listener The listener to remove.
 * @param {boolean=} capture Specifies whether or not to initiate capture.
 * 
 * @return {void}
 */
WinJS.Promise.removeEventListener = function(eventType, listener, capture) {};

/**
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * Allows you to specify the work to be done on the fulfillment of the promised value, the error handling to be performed if the promise fails to fulfill a value, and the handling of progress notifications along the way. For more information about the differences between then and done, see the following topics: Quickstart: using promises in JavaScript How to handle errors when using promises in JavaScript Chaining promises in JavaScript.
 * @template U
 * @param {function(T): !WinJS.IPromise<U>|function(T): U|function(T): void=} onComplete The function to be called if the promise is fulfilled successfully with a value. The value is passed as the single argument. If the value is null, the value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while this function is being executed, the promise returned by then moves into the error state.
 * @param {function(?): !WinJS.IPromise<U>|function(?): U|function(?): void=} onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. In different cases this object may be of different types, so it is necessary to test the object for the properties you expect. If the error is null, it is forwarded. The value returned from the function becomes the value of the promise returned by the then function.
 * @param {function(?): void=} onProgress The function to be called if the promise reports progress. Data about the progress is passed as the single argument. Promises are not required to support progress.
 * @return {!WinJS.IPromise<U>} The promise whose value is the result of executing the onComplete function.
 * 
 */
WinJS.Promise.prototype.then = function(onComplete, onError, onProgress) {};

/**
 * A static helper that functions identically to then() off a promise instance.
 * @param {!WinJS.IPromise<?>} promise The promise to chain from.
 * @param {function(?): ?=} onComplete The function to be called if the promise is fulfilled successfully with a value. The value is passed as the single argument. If the value is null, the value is returned. The value returned from the function becomes the fulfilled value of the promise returned by then. If an exception is thrown while this function is being executed, the promise returned by then moves into the error state.
 * @param {function(?): ?=} onError The function to be called if the promise is fulfilled with an error. The error is passed as the single argument. In different cases this object may be of different types, so it is necessary to test the object for the properties you expect. If the error is null, it is forwarded. The value returned from the function becomes the value of the promise returned by the then function.
 * @param {function(?): void=} onProgress The function to be called if the promise reports progress. Data about the progress is passed as the single argument. Promises are not required to support progress.
 * @return {!WinJS.IPromise<?>} The promise whose value is the result of executing the onComplete function.
 * 
 */
WinJS.Promise.then = function(promise, onComplete, onError, onProgress) {};

/**
 * Performs an operation on all the input promises and returns a promise that has the shape of the input and contains the result of the operation that has been performed on each input.
 * @param {?} values A set of values (which could be either an array or an object) of which some or all are promises..
 * @param {function(?): void=} complete The function to be called if the promise is fulfilled with a value. This function takes a single argument, which is the fulfilled value of the promise.
 * @param {function(?): void=} error The function to be called if the promise is fulfilled with an error. This function takes a single argument, which is the error value of the promise.
 * @param {function(?): void=} progress The function to be called if the promise reports progress. This function takes a single argument, which is the data about the progress of the promise. Promises are not required to support progress.
 * @return {!WinJS.IPromise<?>} A Promise that is the result of calling join on the values parameter.
 * 
 */
WinJS.Promise.thenEach = function(values, complete, error, progress) {};

/**
 * This method has two forms: WinJS.Promise.timeout(timeout) and WinJS.Promise.timeout(timeout, promise). WinJS.Promise.timeout(timeout) creates a promise that is completed asynchronously after the specified timeout, essentially wrapping a call to setTimeout within a promise. WinJS.Promise.timeout(timeout, promise) sets a timeout period for completion of the specified promise, automatically canceling the promise if it is not completed within the timeout period.
 * @param {number=} timeout The timeout period in milliseconds. If this value is zero or not specified, msSetImmediate is called, otherwise setTimeout is called.
 * @param {!WinJS.IPromise<?>=} promise Optional. A promise that will be canceled if it doesn't complete within the timeout period.
 * @return {!WinJS.IPromise<?>} If the promise parameter is omitted, returns a promise that will be fulfilled after the timeout period. If the promise paramater is provided, the same promise is returned.
 * 
 */
WinJS.Promise.timeout = function(timeout, promise) {};

/**
 * Wraps a non-promise value in a promise. This method is like wrapError, which allows you to produce a Promise in error conditions, in that it allows you to return a Promise in success conditions.
 * @template U
 * @param {U=} value Some non-promise value to be wrapped in a promise.
 * @return {!WinJS.IPromise<U>} A promise that is successfully fulfilled with the specified value.
 * 
 */
WinJS.Promise.wrap = function(value) {};

/**
 * Wraps a non-promise error value in a promise. You can use this function if you need to pass an error to a function that requires a promise.
 * @template U
 * @param {U} error A non-promise error value to be wrapped in a promise.
 * @return {!WinJS.IPromise<U>} A promise that is in an error state with the specified value.
 * 
 */
WinJS.Promise.wrapError = function(error) {};

/**
 * You can provide an implementation of this method yourself, or use WinJS.Utilities.startLog to create one that logs to the JavaScript console.
 * @param {string|function(): string} message The message to log.
 * @param {string=} tags The tag or tags to categorize the message (winjs, winjs controls, etc.).
 * @param {string=} type The type of message (error, warning, info, etc.).
 * 
 * @return {void}
 */
WinJS.log = function(message, tags, type) {};

/**
 * This method has been deprecated. Strict processing is always on; you don't have to call this method to turn it on.
 * 
 * @return {void}
 */
WinJS.strictProcessing = function() {};

/**
 * Wraps calls to XMLHttpRequest in a promise.
 * @param {!WinJS.IXHROptions} options The options that are applied to the XMLHttpRequest object, as follows: type, url, user, password, responseType, headers, data, customRequestInitializer.
 * @return {!WinJS.Promise<!XMLHttpRequest>} A promise that returns the XMLHttpRequest object when it completes.
 * 
 */
WinJS.xhr = function(options) {};
/**
 * @record
 * @struct
 */
WinJS.IXHROptions = function() {};
 /** @type {string} */
WinJS.IXHROptions.prototype.type;
 /** @type {string} */
WinJS.IXHROptions.prototype.url;
 /** @type {string} */
WinJS.IXHROptions.prototype.user;
 /** @type {string} */
WinJS.IXHROptions.prototype.password;
 /** @type {?} */
WinJS.IXHROptions.prototype.headers;
 /** @type {?} */
WinJS.IXHROptions.prototype.data;
 /** @type {string} */
WinJS.IXHROptions.prototype.responseType;
 /** @type {function(!XMLHttpRequest): void} */
WinJS.IXHROptions.prototype.customRequestInitializer;
/** @const */
WinJS.Namespace = {};

/**
 * Defines a new namespace with the specified name. For more information, see Organizing your code with WinJS.Namespace.
 * @param {string=} name The name of the namespace. This could be a dot-separated name for nested namespaces.
 * @param {?=} members The members of the new namespace.
 * @return {?} The newly-defined namespace.
 * 
 */
WinJS.Namespace.define = function(name, members) {};

/**
 * Defines a new namespace with the specified name under the specified parent namespace. For more information, see Organizing your code with WinJS.Namespace.
 * @param {?=} parentNamespace The parent namespace.
 * @param {string=} name The name of the new namespace.
 * @param {?=} members The members of the new namespace.
 * @return {?} The newly-defined namespace.
 * 
 */
WinJS.Namespace.defineWithParent = function(parentNamespace, name, members) {};
/** @const */
WinJS.Navigation = {};
 /** @type {boolean} */
WinJS.Navigation.canGoBack;
 /** @type {boolean} */
WinJS.Navigation.canGoForward;
 /** @type {?} */
WinJS.Navigation.history;
 /** @type {string} */
WinJS.Navigation.location;
 /** @type {?} */
WinJS.Navigation.state;

/**
 * Adds an event listener to the control.
 * @param {string} eventType The type (name) of the event.
 * @param {!Function} listener The listener to invoke when the event gets raised.
 * @param {boolean=} capture If true, specifies that capture should be initiated, otherwise false.
 * 
 * @return {void}
 */
WinJS.Navigation.addEventListener = function(eventType, listener, capture) {};

/**
 * Navigates backwards.
 * @param {number=} distance The number of entries to go back into the history.
 * @return {!WinJS.Promise<boolean>} A promise that is completed with a value that indicates whether or not the navigation was successful.
 * 
 */
WinJS.Navigation.back = function(distance) {};

/**
 * Navigates forwards.
 * @param {number=} distance The number of entries to go forward.
 * @return {!WinJS.Promise<boolean>} A promise that is completed with a value that indicates whether or not the navigation was successful.
 * 
 */
WinJS.Navigation.forward = function(distance) {};

/**
 * Navigates to a location.
 * @param {?} location The location to navigate to. Generally the location is a string containing the URL, but it may be anything.
 * @param {?=} initialState A user-defined object that represents the navigation state that may be accessed through state.
 * @return {!WinJS.Promise<boolean>} A promise that is completed with a value that indicates whether or not the navigation was successful (true if successful, otherwise false).
 * 
 */
WinJS.Navigation.navigate = function(location, initialState) {};

/**
 * Removes an event listener from the control.
 * @param {string} eventType The type (name) of the event.
 * @param {!Function} listener The listener to remove.
 * @param {boolean=} useCapture Specifies whether or not to initiate capture.
 * 
 * @return {void}
 */
WinJS.Navigation.removeEventListener = function(eventType, listener, useCapture) {};

/**
 * Occurs before navigation.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: location, state.
 * 
 * @return {void}
 */
WinJS.Navigation.onbeforenavigate = function(eventInfo) {};

/**
 * Occurs after navigation has taken place.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: location, state.
 * 
 * @return {void}
 */
WinJS.Navigation.onnavigated = function(eventInfo) {};

/**
 * Occurs when navigation is taking place.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: location, state.
 * 
 * @return {void}
 */
WinJS.Navigation.onnavigating = function(eventInfo) {};
/** @const */
WinJS.Resources = {};

/**
 * Registers an event handler for the specified event. Use this method to register for events that are related to resources, such as when the app's language, scale, or contrast changes.
 * @param {string} type The name of the event to handle.
 * @param {!Function} listener The listener (event handler function) to associate with the event.
 * @param {boolean=} useCapture Set to true to register the listener for the capturing phase; otherwise, set to false to register the listener for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.Resources.addEventListener = function(type, listener, useCapture) {};

/**
 * Raises an event of the specified type and with the specified additional properties.
 * @param {string} type The name of the event to raise.
 * @param {?} details The set of additional properties to attach to the event object.
 * 
 * @return {void}
 */
WinJS.Resources.dispatchEvent = function(type, details) {};

/**
 * Retrieves the resource string that has the specified resource identifier.
 * @param {string} resourceId The resource ID of the string to retrieve.
 * @return {{value: string, empty: boolean, lang: string}} An object that can contain these properties: value, empty, lang.
 * 
 */
WinJS.Resources.getString = function(resourceId) {};

/**
 * Processes data-win-res attributes on elements and replaces attributes and properties with resource strings.
 * @param {!HTMLElement=} rootElement The element to process. The element and its child elements will be processed. If an element isn't specified, the entire document is processed.
 * 
 * @return {!WinJS.Promise<void>}
 */
WinJS.Resources.processAll = function(rootElement) {};

/**
 * Removes an event listener that the addEventListener method registered.
 * @param {string} type The name of the event that the event listener is registered for.
 * @param {!Function} listener The listener (event handler function) to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase listener; set to false to remove the bubbling phase listener.
 * 
 * @return {void}
 */
WinJS.Resources.removeEventListener = function(type, listener, useCapture) {};

/**
 * Occurs when the user changes the system's language or contrast, or the scale of the display, or when the user changes any of the items in the current context's qualifier values list. For more info about the current context's qualifier values list, see the Remarks section.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.qualifier, detail.changed.
 * 
 * @return {void}
 */
WinJS.Resources.oncontextchanged = function(eventInfo) {};
/** @const */
WinJS.UI = {};
/** @const */
WinJS.UI.Animation = {};

/**
 * Creates an object that performs an animation that adds an item or items to a list.
 * @param {?} added Element or elements to add to the list.
 * @param {?} affected Element or elements affected by the added items.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createAddToListAnimation = function(added, affected) {};

/**
 * Creates an object that performs an animation that adds an item or items to a list of search results.
 * @param {?} added Element or elements to add to the list.
 * @param {?} affected Element or elements affected by the added items.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createAddToSearchListAnimation = function(added, affected) {};

/**
 * Creates an object that performs an animation that collapses a list.
 * @param {?} hidden Element or elements hidden as a result of the collapse.
 * @param {?} affected Element or elements affected by the hidden items.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createCollapseAnimation = function(hidden, affected) {};

/**
 * Creates an object that performs an animation that removes an item or items from a list.
 * @param {?} deleted Element or elements to delete from the list.
 * @param {?} remaining Element or elements affected by the removal of the deleted items.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createDeleteFromListAnimation = function(deleted, remaining) {};

/**
 * Creates an object that performs an animation that removes an item or items from a list of search results.
 * @param {?} deleted Element or elements to delete from the list.
 * @param {?} remaining Element or elements affected by the removal of the deleted items.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createDeleteFromSearchListAnimation = function(deleted, remaining) {};

/**
 * Creates an object that performs an animation that expands a list.
 * @param {?} revealed Element or elements revealed by the expansion.
 * @param {?} affected Element or elements affected by the newly revealed items.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createExpandAnimation = function(revealed, affected) {};

/**
 * Creates an object that performs a peek animation.
 * @param {?} element Element or elements involved in the peek.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createPeekAnimation = function(element) {};

/**
 * Creates an object that performs an animation that moves an item or items.
 * @param {?} element Element or elements involved in the reposition.
 * @return {!WinJS.UI.Animation.IAnimationMethodResponse} An object whose execute method is used to execute the animation. The execute method returns a Promise object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.createRepositionAnimation = function(element) {};

/**
 * Performs an animation that fades an item or items in, fading out existing items that occupy the same space.
 * @param {?} incoming Element or elements being faded in.
 * @param {?} outgoing Element or elements being replaced.
 * @return {!WinJS.Promise<?>} An object that completes when the animation has finished.
 * 
 */
WinJS.UI.Animation.crossFade = function(incoming, outgoing) {};

/**
 * Performs an animation when a dragged object is moved such that dropping it in that position would move other items. The potentially affected items are animated out of the way to show where the object would be dropped.
 * @param {?} target Element or elements that the dragged object would cause to be moved if it were dropped.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Set this parameter to null to use the recommended default offset. Note When the incoming parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.dragBetweenEnter = function(target, offset) {};

/**
 * Performs an animation when a dragged object is moved away from items that it had previously involved in a dragBetweenEnter animation. The affected objects are animated back to their original positions.
 * @param {?} target Element or elements that the dragged object would no longer cause to be displaced, due to its moving away. This should be the same element or element collection passed as the target parameter in the dragBetweenEnter animation.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.dragBetweenLeave = function(target) {};

/**
 * Performs an animation when the user finishes dragging an object.
 * @param {?} dragSource Element or elements that were dragged.
 * @param {?=} offset Initial offset from the drop point. The dropped object begins at the offset and animates to its final position at the drop point. Note When the element parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @param {?=} affected Element or elements whose position the dropped object affects. Typically, this is all other items in a reorderable list. This should be the same element or element collection passed as the affected parameter in the dragSourceStart animation.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.dragSourceEnd = function(dragSource, offset, affected) {};

/**
 * Performs an animation when the user begins to drag an object.
 * @param {?} dragSource Element or elements being dragged.
 * @param {?=} affected Element or elements whose position is affected by the movement of the dragged object. Typically, this is all other items in a reorderable list.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.dragSourceStart = function(dragSource, affected) {};

/**
 * Performs an animation that displays one or more elements on a page.
 * @param {?} incoming Element or elements that compose the incoming content.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Set this parameter to null to use the recommended default offset. Note When the incoming parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @param {?=} options Optional. Set this value to { mechanism: "transition" } to play the animation using CSS transitions instead of the default CSS animations. In some cases this can result in improved performance.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.enterContent = function(incoming, offset, options) {};

/**
 * Performs an animation that shows a new page of content, either when transitioning between pages in a running app or when displaying the first content in a newly launched app.
 * @param {?} element Element or an array of elements that represent the content. If element refers to an array of elements, the elements enter in array order.
 * @param {?=} offset An initial offset where the element or elements begin relative to their final position at the end of the animation. Set this parameter to null to use the recommended default offset. Note When the element parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.enterPage = function(element, offset) {};

/**
 * Performs an animation that hides one or more elements on a page.
 * @param {?} outgoing Element or elements that compose the outgoing content.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Set this parameter to null to use the recommended default offset. Note When the incoming parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.exitContent = function(outgoing, offset) {};

/**
 * Performs an animation that dismisses the current page when transitioning between pages in an app.
 * @param {?} outgoing Element or elements that compose the outgoing page.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Set this parameter to null to use the recommended default offset. Note When the incoming parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.exitPage = function(outgoing, offset) {};

/**
 * Performs an animation that fades an item or set of items into view.
 * @param {?} shown Element or elements being faded in.
 * @return {!WinJS.Promise<?>} An object that completes when the animation has finished. Use this object when subsequent actions need this animation to finish before they take place.
 * 
 */
WinJS.UI.Animation.fadeIn = function(shown) {};

/**
 * Performs an animation that fades an item or set of items out of view.
 * @param {?} hidden Element or elements being faded out.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.fadeOut = function(hidden) {};

/**
 * Performs an animation that hides edge-based user interface (UI).
 * @param {?} element Element or elements that are being hidden.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Offsets should be the chosen so that the elements end the animation just off-screen. Note When the element parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @param {?=} options Optional. Set this value to { mechanism: "transition" } to play the animation using CSS transitions instead of the default CSS animations. In some cases this can result in improved performance.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.hideEdgeUI = function(element, offset, options) {};

/**
 * Performs an animation that hides a panel.
 * @param {?} element Element or elements that are being hidden.
 * @param {?} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Offsets should be the chosen so that the elements end the animation just off-screen. Note When the element parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.hidePanel = function(element, offset) {};

/**
 * Performs an animation that removes pop-up user interface (UI).
 * @param {?} element Element or elements that are being hidden.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.hidePopup = function(element) {};

/**
 * Performs an animation when a pointer is pressed on an object.
 * @param {?} element Element or elements on which the pointer is pressed.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.pointerDown = function(element) {};

/**
 * Performs an animation when a pointer is released.
 * @param {?} element Element or elements that the pointer was pressed on.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.pointerUp = function(element) {};

/**
 * Performs an animation that slides a narrow, edge-based user interface (UI) into view.
 * @param {?} element Element or elements that are being shown.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Offsets should be the chosen so that the elements begin the animation from just off-screen. Note When the element parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @param {?=} options Optional. Set this value to { mechanism: "transition" } to play the animation using CSS transitions instead of the default CSS animations. In some cases this can result in improved performance.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.showEdgeUI = function(element, offset, options) {};

/**
 * Performs an animation that slides a large panel user interface (UI) into view.
 * @param {?} element Element or elements that are being shown.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Offsets should be the chosen so that the elements begin the animation from just off-screen. Note When the element parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.showPanel = function(element, offset) {};

/**
 * Performs an animation that displays a pop-up user interface (UI).
 * @param {?} element Element or elements that are being shown.
 * @param {?=} offset Initial offsets where the animated objects begin relative to their final position at the end of the animation. Offsets should be the chosen so that the elements begin the animation from just off-screen. Set this parameter to null to use the recommended default offset. Note When the element parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.showPopup = function(element, offset) {};

/**
 * Performs a deselection animation in response to a swipe interaction.
 * @param {?} deselected Element or elements that become unselected.
 * @param {?} selection Element or elements that represent the selection, typically a check mark.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.swipeDeselect = function(deselected, selection) {};

/**
 * Performs an animation that reveals an item or items in response to a swipe interaction.
 * @param {?} target Element or elements being revealed.
 * @param {?=} offset An initial offset where the animated objects begin relative to their final position at the end of the animation. Set this parameter to null to use the recommended default offset. Note When the incoming parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.swipeReveal = function(target, offset) {};

/**
 * Performs a selection animation in response to a swipe interaction.
 * @param {?} selected Element or elements being selected.
 * @param {?} selection Element or elements that show that something is selected, typically a check mark.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.swipeSelect = function(selected, selection) {};

/**
 * Performs an animation that updates a badge.
 * @param {?} incoming Element or elements that comprise the new badge.
 * @param {?=} offset Initial offsets where incoming animated objects begin relative to their final position at the end of the animation. Set this parameter to null to use the recommended default offset. Note When the incoming parameter specifies an array of elements, the offset parameter can specify an offset array with each item specified for its corresponding element array item. If the array of offsets is smaller than the array of elements, the last offset is applied to all remaining elements.
 * @return {!WinJS.Promise<?>} An object that completes when the animation is finished.
 * 
 */
WinJS.UI.Animation.updateBadge = function(incoming, offset) {};
/**
 * @record
 * @struct
 */
WinJS.UI.Animation.IAnimationMethodResponse = function() {};

/**
 * @return {!WinJS.Promise<?>}
 */
WinJS.UI.Animation.IAnimationMethodResponse.prototype.execute = function() {};

/** @const */
WinJS.UI.AppBarIcon = {};
/** @const {number} */
WinJS.UI.AppBarIcon.previous;
/** @const {number} */
WinJS.UI.AppBarIcon.next;
/** @const {number} */
WinJS.UI.AppBarIcon.play;
/** @const {number} */
WinJS.UI.AppBarIcon.pause;
/** @const {number} */
WinJS.UI.AppBarIcon.edit;
/** @const {number} */
WinJS.UI.AppBarIcon.save;
/** @const {number} */
WinJS.UI.AppBarIcon.clear;
/** @const {number} */
WinJS.UI.AppBarIcon.delete;
/** @const {number} */
WinJS.UI.AppBarIcon.remove;
/** @const {number} */
WinJS.UI.AppBarIcon.add;
/** @const {number} */
WinJS.UI.AppBarIcon.cancel;
/** @const {number} */
WinJS.UI.AppBarIcon.accept;
/** @const {number} */
WinJS.UI.AppBarIcon.more;
/** @const {number} */
WinJS.UI.AppBarIcon.redo;
/** @const {number} */
WinJS.UI.AppBarIcon.undo;
/** @const {number} */
WinJS.UI.AppBarIcon.home;
/** @const {number} */
WinJS.UI.AppBarIcon.up;
/** @const {number} */
WinJS.UI.AppBarIcon.forward;
/** @const {number} */
WinJS.UI.AppBarIcon.right;
/** @const {number} */
WinJS.UI.AppBarIcon.back;
/** @const {number} */
WinJS.UI.AppBarIcon.left;
/** @const {number} */
WinJS.UI.AppBarIcon.favorite;
/** @const {number} */
WinJS.UI.AppBarIcon.camera;
/** @const {number} */
WinJS.UI.AppBarIcon.settings;
/** @const {number} */
WinJS.UI.AppBarIcon.video;
/** @const {number} */
WinJS.UI.AppBarIcon.sync;
/** @const {number} */
WinJS.UI.AppBarIcon.download;
/** @const {number} */
WinJS.UI.AppBarIcon.mail;
/** @const {number} */
WinJS.UI.AppBarIcon.find;
/** @const {number} */
WinJS.UI.AppBarIcon.help;
/** @const {number} */
WinJS.UI.AppBarIcon.upload;
/** @const {number} */
WinJS.UI.AppBarIcon.emoji;
/** @const {number} */
WinJS.UI.AppBarIcon.twopage;
/** @const {number} */
WinJS.UI.AppBarIcon.leavechat;
/** @const {number} */
WinJS.UI.AppBarIcon.mailforward;
/** @const {number} */
WinJS.UI.AppBarIcon.clock;
/** @const {number} */
WinJS.UI.AppBarIcon.send;
/** @const {number} */
WinJS.UI.AppBarIcon.crop;
/** @const {number} */
WinJS.UI.AppBarIcon.rotatecamera;
/** @const {number} */
WinJS.UI.AppBarIcon.people;
/** @const {number} */
WinJS.UI.AppBarIcon.closepane;
/** @const {number} */
WinJS.UI.AppBarIcon.openpane;
/** @const {number} */
WinJS.UI.AppBarIcon.world;
/** @const {number} */
WinJS.UI.AppBarIcon.flag;
/** @const {number} */
WinJS.UI.AppBarIcon.previewlink;
/** @const {number} */
WinJS.UI.AppBarIcon.globe;
/** @const {number} */
WinJS.UI.AppBarIcon.trim;
/** @const {number} */
WinJS.UI.AppBarIcon.attachcamera;
/** @const {number} */
WinJS.UI.AppBarIcon.zoomin;
/** @const {number} */
WinJS.UI.AppBarIcon.bookmarks;
/** @const {number} */
WinJS.UI.AppBarIcon.document;
/** @const {number} */
WinJS.UI.AppBarIcon.protecteddocument;
/** @const {number} */
WinJS.UI.AppBarIcon.page;
/** @const {number} */
WinJS.UI.AppBarIcon.bullets;
/** @const {number} */
WinJS.UI.AppBarIcon.comment;
/** @const {number} */
WinJS.UI.AppBarIcon.mail2;
/** @const {number} */
WinJS.UI.AppBarIcon.contactinfo;
/** @const {number} */
WinJS.UI.AppBarIcon.hangup;
/** @const {number} */
WinJS.UI.AppBarIcon.viewall;
/** @const {number} */
WinJS.UI.AppBarIcon.mappin;
/** @const {number} */
WinJS.UI.AppBarIcon.phone;
/** @const {number} */
WinJS.UI.AppBarIcon.videochat;
/** @const {number} */
WinJS.UI.AppBarIcon.switch;
/** @const {number} */
WinJS.UI.AppBarIcon.contact;
/** @const {number} */
WinJS.UI.AppBarIcon.rename;
/** @const {number} */
WinJS.UI.AppBarIcon.pin;
/** @const {number} */
WinJS.UI.AppBarIcon.musicinfo;
/** @const {number} */
WinJS.UI.AppBarIcon.go;
/** @const {number} */
WinJS.UI.AppBarIcon.keyboard;
/** @const {number} */
WinJS.UI.AppBarIcon.dockleft;
/** @const {number} */
WinJS.UI.AppBarIcon.dockright;
/** @const {number} */
WinJS.UI.AppBarIcon.dockbottom;
/** @const {number} */
WinJS.UI.AppBarIcon.remote;
/** @const {number} */
WinJS.UI.AppBarIcon.refresh;
/** @const {number} */
WinJS.UI.AppBarIcon.rotate;
/** @const {number} */
WinJS.UI.AppBarIcon.shuffle;
/** @const {number} */
WinJS.UI.AppBarIcon.list;
/** @const {number} */
WinJS.UI.AppBarIcon.shop;
/** @const {number} */
WinJS.UI.AppBarIcon.selectall;
/** @const {number} */
WinJS.UI.AppBarIcon.orientation;
/** @const {number} */
WinJS.UI.AppBarIcon.import;
/** @const {number} */
WinJS.UI.AppBarIcon.importall;
/** @const {number} */
WinJS.UI.AppBarIcon.browsephotos;
/** @const {number} */
WinJS.UI.AppBarIcon.webcam;
/** @const {number} */
WinJS.UI.AppBarIcon.pictures;
/** @const {number} */
WinJS.UI.AppBarIcon.savelocal;
/** @const {number} */
WinJS.UI.AppBarIcon.caption;
/** @const {number} */
WinJS.UI.AppBarIcon.stop;
/** @const {number} */
WinJS.UI.AppBarIcon.showresults;
/** @const {number} */
WinJS.UI.AppBarIcon.volume;
/** @const {number} */
WinJS.UI.AppBarIcon.repair;
/** @const {number} */
WinJS.UI.AppBarIcon.message;
/** @const {number} */
WinJS.UI.AppBarIcon.page2;
/** @const {number} */
WinJS.UI.AppBarIcon.calendarday;
/** @const {number} */
WinJS.UI.AppBarIcon.calendarweek;
/** @const {number} */
WinJS.UI.AppBarIcon.calendar;
/** @const {number} */
WinJS.UI.AppBarIcon.characters;
/** @const {number} */
WinJS.UI.AppBarIcon.mailreplyall;
/** @const {number} */
WinJS.UI.AppBarIcon.read;
/** @const {number} */
WinJS.UI.AppBarIcon.link;
/** @const {number} */
WinJS.UI.AppBarIcon.accounts;
/** @const {number} */
WinJS.UI.AppBarIcon.showbcc;
/** @const {number} */
WinJS.UI.AppBarIcon.hidebcc;
/** @const {number} */
WinJS.UI.AppBarIcon.cut;
/** @const {number} */
WinJS.UI.AppBarIcon.attach;
/** @const {number} */
WinJS.UI.AppBarIcon.paste;
/** @const {number} */
WinJS.UI.AppBarIcon.filter;
/** @const {number} */
WinJS.UI.AppBarIcon.copy;
/** @const {number} */
WinJS.UI.AppBarIcon.emoji2;
/** @const {number} */
WinJS.UI.AppBarIcon.important;
/** @const {number} */
WinJS.UI.AppBarIcon.mailreply;
/** @const {number} */
WinJS.UI.AppBarIcon.slideshow;
/** @const {number} */
WinJS.UI.AppBarIcon.sort;
/** @const {number} */
WinJS.UI.AppBarIcon.manage;
/** @const {number} */
WinJS.UI.AppBarIcon.allapps;
/** @const {number} */
WinJS.UI.AppBarIcon.disconnectdrive;
/** @const {number} */
WinJS.UI.AppBarIcon.mapdrive;
/** @const {number} */
WinJS.UI.AppBarIcon.newwindow;
/** @const {number} */
WinJS.UI.AppBarIcon.openwith;
/** @const {number} */
WinJS.UI.AppBarIcon.contactpresence;
/** @const {number} */
WinJS.UI.AppBarIcon.priority;
/** @const {number} */
WinJS.UI.AppBarIcon.uploadskydrive;
/** @const {number} */
WinJS.UI.AppBarIcon.gototoday;
/** @const {number} */
WinJS.UI.AppBarIcon.font;
/** @const {number} */
WinJS.UI.AppBarIcon.fontcolor;
/** @const {number} */
WinJS.UI.AppBarIcon.contact2;
/** @const {number} */
WinJS.UI.AppBarIcon.folder;
/** @const {number} */
WinJS.UI.AppBarIcon.audio;
/** @const {number} */
WinJS.UI.AppBarIcon.placeholder;
/** @const {number} */
WinJS.UI.AppBarIcon.view;
/** @const {number} */
WinJS.UI.AppBarIcon.setlockscreen;
/** @const {number} */
WinJS.UI.AppBarIcon.settile;
/** @const {number} */
WinJS.UI.AppBarIcon.cc;
/** @const {number} */
WinJS.UI.AppBarIcon.stopslideshow;
/** @const {number} */
WinJS.UI.AppBarIcon.permissions;
/** @const {number} */
WinJS.UI.AppBarIcon.highlight;
/** @const {number} */
WinJS.UI.AppBarIcon.disableupdates;
/** @const {number} */
WinJS.UI.AppBarIcon.unfavorite;
/** @const {number} */
WinJS.UI.AppBarIcon.unpin;
/** @const {number} */
WinJS.UI.AppBarIcon.openlocal;
/** @const {number} */
WinJS.UI.AppBarIcon.mute;
/** @const {number} */
WinJS.UI.AppBarIcon.italic;
/** @const {number} */
WinJS.UI.AppBarIcon.underline;
/** @const {number} */
WinJS.UI.AppBarIcon.bold;
/** @const {number} */
WinJS.UI.AppBarIcon.movetofolder;
/** @const {number} */
WinJS.UI.AppBarIcon.likedislike;
/** @const {number} */
WinJS.UI.AppBarIcon.dislike;
/** @const {number} */
WinJS.UI.AppBarIcon.like;
/** @const {number} */
WinJS.UI.AppBarIcon.alignright;
/** @const {number} */
WinJS.UI.AppBarIcon.aligncenter;
/** @const {number} */
WinJS.UI.AppBarIcon.alignleft;
/** @const {number} */
WinJS.UI.AppBarIcon.zoom;
/** @const {number} */
WinJS.UI.AppBarIcon.zoomout;
/** @const {number} */
WinJS.UI.AppBarIcon.openfile;
/** @const {number} */
WinJS.UI.AppBarIcon.otheruser;
/** @const {number} */
WinJS.UI.AppBarIcon.admin;
/** @const {number} */
WinJS.UI.AppBarIcon.street;
/** @const {number} */
WinJS.UI.AppBarIcon.map;
/** @const {number} */
WinJS.UI.AppBarIcon.clearselection;
/** @const {number} */
WinJS.UI.AppBarIcon.fontdecrease;
/** @const {number} */
WinJS.UI.AppBarIcon.fontincrease;
/** @const {number} */
WinJS.UI.AppBarIcon.fontsize;
/** @const {number} */
WinJS.UI.AppBarIcon.cellphone;
/** @const {number} */
WinJS.UI.AppBarIcon.reshare;
/** @const {number} */
WinJS.UI.AppBarIcon.tag;
/** @const {number} */
WinJS.UI.AppBarIcon.repeatone;
/** @const {number} */
WinJS.UI.AppBarIcon.repeatall;
/** @const {number} */
WinJS.UI.AppBarIcon.outlinestar;
/** @const {number} */
WinJS.UI.AppBarIcon.solidstar;
/** @const {number} */
WinJS.UI.AppBarIcon.calculator;
/** @const {number} */
WinJS.UI.AppBarIcon.directions;
/** @const {number} */
WinJS.UI.AppBarIcon.target;
/** @const {number} */
WinJS.UI.AppBarIcon.library;
/** @const {number} */
WinJS.UI.AppBarIcon.phonebook;
/** @const {number} */
WinJS.UI.AppBarIcon.memo;
/** @const {number} */
WinJS.UI.AppBarIcon.microphone;
/** @const {number} */
WinJS.UI.AppBarIcon.postupdate;
/** @const {number} */
WinJS.UI.AppBarIcon.backtowindow;
/** @const {number} */
WinJS.UI.AppBarIcon.fullscreen;
/** @const {number} */
WinJS.UI.AppBarIcon.newfolder;
/** @const {number} */
WinJS.UI.AppBarIcon.calendarreply;
/** @const {number} */
WinJS.UI.AppBarIcon.unsyncfolder;
/** @const {number} */
WinJS.UI.AppBarIcon.reporthacked;
/** @const {number} */
WinJS.UI.AppBarIcon.syncfolder;
/** @const {number} */
WinJS.UI.AppBarIcon.blockcontact;
/** @const {number} */
WinJS.UI.AppBarIcon.switchapps;
/** @const {number} */
WinJS.UI.AppBarIcon.addfriend;
/** @const {number} */
WinJS.UI.AppBarIcon.touchpointer;
/** @const {number} */
WinJS.UI.AppBarIcon.gotostart;
/** @const {number} */
WinJS.UI.AppBarIcon.zerobars;
/** @const {number} */
WinJS.UI.AppBarIcon.onebar;
/** @const {number} */
WinJS.UI.AppBarIcon.twobars;
/** @const {number} */
WinJS.UI.AppBarIcon.threebars;
/** @const {number} */
WinJS.UI.AppBarIcon.fourbars;
/** @const {number} */
WinJS.UI.AppBarIcon.scan;
/** @const {number} */
WinJS.UI.AppBarIcon.preview;

/** @const */
WinJS.UI.CountResult = {};
/** @const {number} */
WinJS.UI.CountResult.unknown;

/** @const */
WinJS.UI.CountError = {};
/** @const {number} */
WinJS.UI.CountError.noResponse;

/** @const */
WinJS.UI.DataSourceStatus = {};
/** @const {number} */
WinJS.UI.DataSourceStatus.ready;
/** @const {number} */
WinJS.UI.DataSourceStatus.waiting;
/** @const {number} */
WinJS.UI.DataSourceStatus.failure;

/** @const */
WinJS.UI.EditError = {};
/** @const {number} */
WinJS.UI.EditError.noResponse;
/** @const {number} */
WinJS.UI.EditError.notPermitted;
/** @const {number} */
WinJS.UI.EditError.noLongerMeaningful;

/** @const */
WinJS.UI.FetchError = {};
/** @const {number} */
WinJS.UI.FetchError.noResponse;
/** @const {number} */
WinJS.UI.FetchError.doesNotExist;

/** @const */
WinJS.UI.HeaderPosition = {};
/** @const {number} */
WinJS.UI.HeaderPosition.left;
/** @const {number} */
WinJS.UI.HeaderPosition.top;

/** @const */
WinJS.UI.ListViewAnimationType = {};
/** @const {number} */
WinJS.UI.ListViewAnimationType.entrance;
/** @const {number} */
WinJS.UI.ListViewAnimationType.contentTransition;

/** @const */
WinJS.UI.SelectionMode = {};
/** @const {number} */
WinJS.UI.SelectionMode.none;
/** @const {number} */
WinJS.UI.SelectionMode.single;
/** @const {number} */
WinJS.UI.SelectionMode.multi;

/** @const */
WinJS.UI.SwipeBehavior = {};
/** @const {number} */
WinJS.UI.SwipeBehavior.select;
/** @const {number} */
WinJS.UI.SwipeBehavior.none;

/** @const */
WinJS.UI.TapBehavior = {};
/** @const {number} */
WinJS.UI.TapBehavior.directSelect;
/** @const {number} */
WinJS.UI.TapBehavior.toggleSelect;
/** @const {number} */
WinJS.UI.TapBehavior.invokeOnly;
/** @const {number} */
WinJS.UI.TapBehavior.none;
/**
 * @record
 * @struct
 */
WinJS.UI.IFetchResult = function() {};
 /** @type {number} */
WinJS.UI.IFetchResult.prototype.absoluteIndex;
 /** @type {boolean} */
WinJS.UI.IFetchResult.prototype.atEnd;
 /** @type {boolean} */
WinJS.UI.IFetchResult.prototype.atStart;
 /** @type {!Array<T>} */
WinJS.UI.IFetchResult.prototype.items;
 /** @type {number} */
WinJS.UI.IFetchResult.prototype.offset;
 /** @type {number} */
WinJS.UI.IFetchResult.prototype.totalCount;
/**
 * @record
 * @struct
 */
WinJS.UI.IItem = function() {};
 /** @type {T} */
WinJS.UI.IItem.prototype.data;
 /** @type {string} */
WinJS.UI.IItem.prototype.groupKey;
 /** @type {string} */
WinJS.UI.IItem.prototype.handle;
 /** @type {number} */
WinJS.UI.IItem.prototype.index;
 /** @type {string} */
WinJS.UI.IItem.prototype.key;
/**
 * @extends {WinJS.IPromise}
 * @record
 * @struct
 */
WinJS.UI.IItemPromise = function() {};
 /** @type {string} */
WinJS.UI.IItemPromise.prototype.handle;
 /** @type {number} */
WinJS.UI.IItemPromise.prototype.index;

/**
 * Stops change notification tracking for the IItem that fulfills this IItemPromise.
 * 
 * @return {void}
 */
WinJS.UI.IItemPromise.prototype.release = function() {};

/**
 * Begins change notification tracking for the IItem that fulfills this IItemPromise.
 * 
 * @return {!WinJS.UI.IItemPromise}
 */
WinJS.UI.IItemPromise.prototype.retain = function() {};
/**
 * @record
 * @struct
 */
WinJS.UI.ILayout = function() {};
 /** @type {boolean} */
WinJS.UI.ILayout.prototype.horizontal;

/**
 * Calculates the index of the first visible item.
 * @param {number} beginScrollPosition The first visible pixel in the ListView. For horizontal layouts, this is the x-coordinate of the pixel. For vertical layouts, this is the y-coordinate.
 * @param {boolean} wholeItem true if the item must be completely visible; otherwise, false if its ok for the item to be partially visible. Promise.
 * @return {!WinJS.Promise<?>} A Promise for the index of the first visible item at the specified point.
 * 
 */
WinJS.UI.ILayout.prototype.calculateFirstVisible = function(beginScrollPosition, wholeItem) {};

/**
 * Calculates the index of the last visible item.
 * @param {number} endScrollPosition The last visible pixel in the ListView. For horizontal layouts, this is the x-coordinate of the pixel. For vertical layouts, this is the y-coordinate.
 * @param {boolean} wholeItem true if the item must be completely visible; otherwise, false if its ok for the item to be partially visible. Promise.
 * @return {!WinJS.Promise<?>} A Promise for the index of the last visible item at the specified point.
 * 
 */
WinJS.UI.ILayout.prototype.calculateLastVisible = function(endScrollPosition, wholeItem) {};

/**
 * Ends the layout process.
 * @return {?} A object that has these properties: animationPromise, newEndIndex.
 * 
 */
WinJS.UI.ILayout.prototype.endLayout = function() {};

/**
 * Calculates the dimensions of an item.
 * @param {number} itemIndex The index of the item.
 * @return {!WinJS.Promise<?>} A Promise that returns an object with these properties: left, top, contentWidth, contentHeight, totalWidth, totalHeight.
 * 
 */
WinJS.UI.ILayout.prototype.getItemPosition = function(itemIndex) {};

/**
 * Gets the index of the next item relatively to the supplied index and keypress.
 * @param {number} itemIndex The data source index of the current item.
 * @param {!HTMLElement} element The element for the current item.
 * @param {WinJS.Utilities.Key} keyPressed The key that was pressed. This function must check for the arrow keys (leftArrow, upArrow, rightArrow, downArrow), pageDown, and pageUp and determine which item the user navigated to.
 * @return {!WinJS.Promise<number>} A Promise that contains the index of the next item (This item becomes the current item).
 * 
 */
WinJS.UI.ILayout.prototype.getKeyboardNavigatedItem = function(itemIndex, element, keyPressed) {};

/**
 * Gets the scrollbar range.
 * @return {!WinJS.Promise<?>} A Promise that returns an object that has these properties: beginScrollPosition, endScrollPosition.
 * 
 */
WinJS.UI.ILayout.prototype.getScrollBarRange = function() {};

/**
 * This API supports the WinJS infrastructure and is not intended to be used directly from your code.
 * @param {number} x The x-coordinate to test.
 * @param {number} y The y-coordinate to test.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.hitTest = function(x, y) {};

/**
 * Notifies of items being added.
 * @param {!Array<!HTMLElement>} elements The elements that represent the items that were added.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.itemsAdded = function(elements) {};

/**
 * Notifies of items being moved.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.itemsMoved = function() {};

/**
 * Notifies of items being removed.
 * @param {!Array<!HTMLElement>} elements The elements that represent the items that were removed.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.itemsRemoved = function(elements) {};

/**
 * Lays out the specified header at the specified index.
 * @param {number} groupIndex The index of the group in the group data source.
 * @param {!HTMLElement} element The element to render for the group header.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.layoutHeader = function(groupIndex, element) {};

/**
 * Lays out the specified item at the speficied index.
 * @param {number} itemIndex The index of the item in the data source.
 * @param {!HTMLElement} element The element to render for the item.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.layoutItem = function(itemIndex, element) {};

/**
 * Prepares the header element.
 * @param {!HTMLElement} element The element that represents a header in the data source.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.prepareHeader = function(element) {};

/**
 * Prepares the item element.
 * @param {!HTMLElement} element An element that represents an item in the data source.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.prepareItem = function(element) {};

/**
 * Releases the item.
 * @param {!HTMLElement} element The element being released.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.releaseItem = function(element) {};

/**
 * Resets the layout.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.reset = function() {};

/**
 * Sets the ILayoutSite object.
 * @param {!WinJS.UI.ILayoutSite} site The layout site for the layout. You can use this object to query the hosting ListView for info you might need to lay out items.
 * 
 * @return {void}
 */
WinJS.UI.ILayout.prototype.setSite = function(site) {};

/**
 * Starts the layout.
 * @param {number} beginScrollPosition The starting pixel of the area to which the items are rendered.
 * @param {number} endScrollPosition The last pixel of the area to which the items are rendered.
 * @param {number} count The upper bound of the number of items to render.
 * @return {!WinJS.Promise<?>} A Promise that returns an object that has these properties: beginIndex, endIndex.
 * 
 */
WinJS.UI.ILayout.prototype.startLayout = function(beginScrollPosition, endScrollPosition, count) {};
/**
 * @record
 * @struct
 */
WinJS.UI.ILayoutSite = function() {};
 /** @type {boolean} */
WinJS.UI.ILayoutSite.prototype.animationsDisabled;
 /** @type {!HTMLElement} */
WinJS.UI.ILayoutSite.prototype.itemSurface;
 /** @type {boolean} */
WinJS.UI.ILayoutSite.prototype.rtl;
 /** @type {number} */
WinJS.UI.ILayoutSite.prototype.scrollbarPos;
 /** @type {!HTMLElement} */
WinJS.UI.ILayoutSite.prototype.surface;
 /** @type {!HTMLElement} */
WinJS.UI.ILayoutSite.prototype.viewport;
 /** @type {?} */
WinJS.UI.ILayoutSite.prototype.viewportSize;
/**
 * @record
 * @struct
 */
WinJS.UI.IListBinding = function() {};

/**
 * Retrieves the current item.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the current item. If the cursor has moved past the start or end of the list, the promise completes with a value of null. If the current item has been moved or deleted, the promise returns an error.
 * 
 */
WinJS.UI.IListBinding.prototype.current = function() {};

/**
 * Gets the first item from the IListDataSource and makes it the current item.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the requested IItem. If the list is empty, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.first = function() {};

/**
 * Retrieves the item from the IListDataSource that has the specified description and makes it the current item.
 * @param {string} description A domain-specific description, to be interpreted by the IListDataAdapter, that identifies the item to retrieve.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the requested IItem object. If the item wasn't found, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.fromDescription = function(description) {};

/**
 * Retrieves the item from the IListDataSource that has the specified index and makes it the current item.
 * @param {number} index A value greater than or equal to 0 that is the index of the item to retrieve.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the requested IItem. If the item wasn't found, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.fromIndex = function(index) {};

/**
 * Retrieves the item from the IListDataSource that has the specified key and makes it the current item.
 * @param {string} key The key that identifies the item to retrieve. This value must be a non-empty string.
 * @param {?=} hints Domain-specific information that provides additional information to the IListDataAdapter to improve retrieval time.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the requested IItem. If they item couldn't be found, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.fromKey = function(key, hints) {};

/**
 * Makes the specified IItem or IItemPromise the current item.
 * @param {!WinJS.UI.IItem<T>} item The IItem or IItemPromise that will become the current item.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the specified item, if it exists. If the specified item is not in the list, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.jumpToItem = function(item) {};

/**
 * Retrieves the last item in the IListDataSource and makes it the current item.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the requested IItem. f the list is empty, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.last = function() {};

/**
 * Retrieves the item after the current item and makes it the current item.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the item after the current item. If the cursor moves past the end of the list, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.next = function() {};

/**
 * Retrieves the item before the current item and makes it the current item.
 * @return {!WinJS.UI.IItemPromise<!WinJS.UI.IItem<T>>} An IItemPromise that contains the item before the current item. If the cursor moves past the start of the list, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListBinding.prototype.previous = function() {};

/**
 * Releases resources, stops notifications, and cancels outstanding promises for all tracked items returned by this IListBinding.
 * 
 * @return {void}
 */
WinJS.UI.IListBinding.prototype.release = function() {};

/**
 * Creates a request to stop change notifications for the specified item. The change notifications stop when the number of releaseItem calls matches the number of IIItemPromise.retain calls.
 * @param {!WinJS.UI.IItem<T>} item The IItem or IItemPromise that should stop receiving notifications.
 * 
 * @return {void}
 */
WinJS.UI.IListBinding.prototype.releaseItem = function(item) {};
/**
 * @record
 * @struct
 */
WinJS.UI.IListDataAdapter = function() {};
 /** @type {boolean} */
WinJS.UI.IListDataAdapter.prototype.compareByIdentity;

/**
 * Overwrites the data of the specified item.
 * @param {string} key The key of the item to overwrite.
 * @param {T} newData The new data for the item.
 * @param {number} indexHint The index of the item, if known.
 * @return {!WinJS.Promise<void>} A Promise that returns null or undefined when the operation completes.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.change = function(key, newData, indexHint) {};

/**
 * Gets the number of items in the IListDataAdapter object's data source.
 * @return {!WinJS.Promise<number>} A Promise that contains the number of items the IListDataAdapter contains, or an approximate value if the actual number is unknown.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.getCount = function() {};

/**
 * Inserts the specified data after the specified item.
 * @param {string} key A key that can be used to retrieve the new data.
 * @param {T} data The new data to add to the IListDataAdapter object's data source.
 * @param {string} previousKey The key of an item in the IListDataAdapter object's data source. The new data will be inserted after this item.
 * @param {number} previousIndexHint The index of the item to insert the new data after, if known.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.insertAfter = function(key, data, previousKey, previousIndexHint) {};

/**
 * Adds the specified key and data to the end of the IListDataAdapter object's data source.
 * @param {string} key A key that can be used to retrieve the new data.
 * @param {T} data The new data to add to the IListDataAdapter object's data source.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.insertAtEnd = function(key, data) {};

/**
 * Adds the specified key and data to the beginning of the IListDataAdapter object's data source.
 * @param {string} key A key that can be used to retrieve the new data.
 * @param {T} data The new data to add to the IListDataAdapter object's data source.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.insertAtStart = function(key, data) {};

/**
 * Inserts the specified data before the specified item.
 * @param {string} key A key that can be used to retrieve the new data.
 * @param {T} data The new data to add to the IListDataAdapter object's data source.
 * @param {string} nextKey The key of an item in the IListDataAdapter object's data source. The new data will be inserted before this item.
 * @param {number} nextIndexHint The index of the item to insert the new data before, if known.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.insertBefore = function(key, data, nextKey, nextIndexHint) {};

/**
 * Retrieves the item that matches the specified description and also retrieves the specified number of items before and after the matched item.
 * @param {string} description A description of the item to locate.
 * @param {number} countBefore The number of items before the matched item to retrieve.
 * @param {number} countAfter The number of items after the matched item to retrieve.
 * @return {!WinJS.Promise<!WinJS.UI.IFetchResult<T>>} A Promise that provides an IFetchResult that contains the selected items or a FetchError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.itemsFromDescription = function(description, countBefore, countAfter) {};

/**
 * Retrieves the specified number of items from the end of the IListDataAdapter object's data source.
 * @param {number} count The number of items to retrieve.
 * @return {!WinJS.Promise<!WinJS.UI.IFetchResult<T>>} A Promise that provides an IFetchResult that contains the selected items or a FetchError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.itemsFromEnd = function(count) {};

/**
 * Retrieves the item at the specified index and also retrieves the specified number of items before and after the selected item.
 * @param {number} index The index of the item to retrieve.
 * @param {number} countBefore The number of items to retrieve from before the selected item.
 * @param {number} countAfter The number of items to retrieve from after the selected item.
 * @return {!WinJS.Promise<!WinJS.UI.IFetchResult<T>>} A Promise that provides an IFetchResult that contains the selected items or a FetchError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.itemsFromIndex = function(index, countBefore, countAfter) {};

/**
 * Retrieves the item that has the specified key and also retrieves the specified number of items before and after the selected item.
 * @param {string} key The key of the item to retrieve.
 * @param {number} countBefore The number of items to retrieve from before the selected item.
 * @param {number} countAfter The number of items to retrieve from after the selected item.
 * @return {!WinJS.Promise<!WinJS.UI.IFetchResult<T>>} A Promise that provides an IFetchResult that contains the selected items or a FetchError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.itemsFromKey = function(key, countBefore, countAfter) {};

/**
 * Retrieves the specified number of items from the beginning of the IListDataAdapter object's data source.
 * @param {number} count The number of items to retrieve.
 * @return {!WinJS.Promise<!WinJS.UI.IFetchResult<T>>} A Promise that provides an IFetchResult that contains the selected items or a FetchError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.itemsFromStart = function(count) {};

/**
 * Returns a string representation of the specified item that can be used for comparisons.
 * @param {!WinJS.UI.IItem<T>} item The item for which to generate a signature.
 * @return {string} The signature representation of the specified item.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.itemSignature = function(item) {};

/**
 * Moves the specified item to just after another item.
 * @param {string} key A key of the item to move.
 * @param {?} previousKey The key of another item. The item to move will be moved to just after this item.
 * @param {string} indexHint The index of the item to move, if known.
 * @param {number} previousIndexHint The index to move the item after, if known.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.moveAfter = function(key, previousKey, indexHint, previousIndexHint) {};

/**
 * Moves the specified item to just before another item.
 * @param {string} key A key of the item to move.
 * @param {?} nextKey The key of another item. The item to move will be moved to just before this item.
 * @param {string} indexHint The index of the item to move, if known.
 * @param {number} nextIndexHint The index to move the item before, if known.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.moveBefore = function(key, nextKey, indexHint, nextIndexHint) {};

/**
 * Moves the specified item to the end of the IListDataAdapter object's data source.
 * @param {string} key The key for the item to move.
 * @param {number} indexHint The index of the item to move, if known.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.moveToEnd = function(key, indexHint) {};

/**
 * Moves the specified item to the beginning of the IListDataAdapter object's data source.
 * @param {string} key The key for the item to move.
 * @param {number} indexHint The index of the item to move, if known.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.moveToStart = function(key, indexHint) {};

/**
 * Removes the specified item from the IListDataAdapter object's data source.
 * @param {string} key The key of the item to remove.
 * @param {T} data The new data for the item.
 * @param {number} indexHint The index of the item.
 * @return {!WinJS.Promise<void>} A Promise that returns null or undefined when the operation completes.
 * 
 */
WinJS.UI.IListDataAdapter.prototype.remove = function(key, data, indexHint) {};

/**
 * Registers a notification handler. The IListDataAdapter uses the handler to notify listening objects when its data changes.
 * @param {!WinJS.UI.IListDataNotificationHandler<T>} notificationHandler The notification handler that the IListDataAdapter will use to provide change notifications. .
 * 
 * @return {void}
 */
WinJS.UI.IListDataAdapter.prototype.setNotificationHandler = function(notificationHandler) {};
/**
 * @record
 * @struct
 */
WinJS.UI.IListDataNotificationHandler = function() {};

/**
 * Indicates the start of a notification batch. Objects that are listening for notifications should defer making updates until endNotifications is called.
 * 
 * @return {void}
 */
WinJS.UI.IListDataNotificationHandler.prototype.beginNotifications = function() {};

/**
 * Raises a notification that an item in the IListDataAdapter object's data source has changed.
 * @param {!WinJS.UI.IItem<T>} item The item that changed.
 * 
 * @return {void}
 */
WinJS.UI.IListDataNotificationHandler.prototype.changed = function(item) {};

/**
 * Indicates the end of a notification batch. When the beginNotifications method is called, objects listening for notifications should defer making updates until endNotifications is called.
 * 
 * @return {void}
 */
WinJS.UI.IListDataNotificationHandler.prototype.endNotifications = function() {};

/**
 * Raises a notification that an item has been added to the IListDataAdapter object's data source.
 * @param {!WinJS.UI.IItem<T>} newItem The new item added to the IListDataAdapter object's data source.
 * @param {string} previousKey The key of the item that now precedes the new item, or null if the item was inserted at the start of the list. If nextKey is provided, this parameter may be null.
 * @param {string} nextKey The key of the item that now follows the new item, or null if the item was inserted at the end of the list. If previousKey is provided, this parameter may be null.
 * @param {number=} index The index of the new item.
 * 
 * @return {void}
 */
WinJS.UI.IListDataNotificationHandler.prototype.inserted = function(newItem, previousKey, nextKey, index) {};

/**
 * Indicates that all previous data obtained from the IListDataAdapter is invalid and should be refreshed.
 * @return {!WinJS.Promise<?>} A Promise that completes when the data has been completely refreshed and all change notifications have been sent.
 * 
 */
WinJS.UI.IListDataNotificationHandler.prototype.invalidateAll = function() {};

/**
 * Raises a notification that an item was moved within the IListDataAdapter object's data source.
 * @param {!WinJS.UI.IItem<T>} item The item that was moved.
 * @param {string} previousKey The key of the item that now precedes the new item, or null if the item was moved to the beginning of the list. If nextKey is provided, this parameter may be null.
 * @param {string} nextKey The key of the item that now follows the new item, or null if the item was moved to the end of the list. If previousKey is provided, this parameter may be null.
 * @param {number=} oldIndex The item's original index.
 * @param {number=} newIndex The item's new index.
 * 
 * @return {void}
 */
WinJS.UI.IListDataNotificationHandler.prototype.moved = function(item, previousKey, nextKey, oldIndex, newIndex) {};

/**
 * Reloads data from the IListDataAdapter.
 * 
 * @return {void}
 */
WinJS.UI.IListDataNotificationHandler.prototype.reload = function() {};

/**
 * Raises a notification that an item was removed from the IListDataAdapter object's data source.
 * @param {string} key The key of the item that was removed.
 * @param {number=} index The index of the item that was removed.
 * 
 * @return {void}
 */
WinJS.UI.IListDataNotificationHandler.prototype.removed = function(key, index) {};
/**
 * @record
 * @struct
 */
WinJS.UI.IListDataSource = function() {};

/**
 * Occurs when the status of the IListDataSource changes.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: status.
 * 
 * @return {void}
 */
WinJS.UI.IListDataSource.prototype.statuschanged = function(eventInfo) {};

/**
 * Notifies the IListDataSource that a sequence of edits is about to begin. The IListDataSource will defer notifications until endEdits is called.
 * 
 * @return {void}
 */
WinJS.UI.IListDataSource.prototype.beginEdits = function() {};

/**
 * Overwrites the data of the specified item.
 * @param {string} key The key for the item to replace.
 * @param {T} newData The new data for the item.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was updated or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.change = function(key, newData) {};

/**
 * Creates an IListBinding that can retrieve items from the IListDataSource, enumerate the contents of the IListDataSource object's data, and optionally register for change notifications.
 * @param {!WinJS.UI.IListNotificationHandler<T>=} notificationHandler Enables the IListBinding to register for change notifications for individual items obtained from the IListDataSource. If you omit this parameter, change notifications won't be available.
 * @return {!WinJS.UI.IListBinding<T>} The new IListBinding.
 * 
 */
WinJS.UI.IListDataSource.prototype.createListBinding = function(notificationHandler) {};

/**
 * Notifies the IListDataSource that the batch of edits that began with the last beginEdits call has completed. The IListDataSource will submit notifications for any changes that occurred between the beginEdits and endEdits calls as a batch and resume normal change notifications.
 * 
 * @return {void}
 */
WinJS.UI.IListDataSource.prototype.endEdits = function() {};

/**
 * Retrieves the number of items in the data source.
 * @return {!WinJS.Promise<number>} A Promise that provides a Number that is the number of items in the data source.
 * 
 */
WinJS.UI.IListDataSource.prototype.getCount = function() {};

/**
 * Inserts a new item after another item.
 * @param {string} key The key that can be used to retrieve the new item, if known.
 * @param {T} data The data for the item to add.
 * @param {string} previousKey The key for an item in the data source. The new item will be added after this item.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.insertAfter = function(key, data, previousKey) {};

/**
 * Adds an item to the end of the data source.
 * @param {string} key The key that can be used to retrieve the new item, if known.
 * @param {T} data The data for the item to add.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.insertAtEnd = function(key, data) {};

/**
 * Adds an item to the beginning of the data source.
 * @param {string} key The key that can be used to retrieve the new item, if known.
 * @param {T} data The data for the item to add.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.insertAtStart = function(key, data) {};

/**
 * Inserts an item before another item.
 * @param {string} key The key that can be used to retrieve the new item, if known.
 * @param {T} data The data for the item to add.
 * @param {string} nextKey The key of an item in the data source. The new item will be inserted before this item.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was added or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.insertBefore = function(key, data, nextKey) {};

/**
 * Indicates that all previous data obtained from the IListDataAdapter is invalid and should be refreshed.
 * @return {!WinJS.Promise<?>} A Promise that completes when the data has been completely refreshed and all notifications have been sent.
 * 
 */
WinJS.UI.IListDataSource.prototype.invalidateAll = function() {};

/**
 * Retrieves the item that has the specified description.
 * @param {?} description Domain-specific information, to be interpreted by the IListDataAdapter, that describes the item to retrieve.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that provides an IItem that contains the requested item or a FetchError if an error was encountered. If the item wasn't found, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListDataSource.prototype.itemFromDescription = function(description) {};

/**
 * Retrieves the item at the specified index.
 * @param {number} index A value that is greater than or equal to zero that is the index of the item to retrieve.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that provides an IItem that contains the requested item or a FetchError if an error was encountered. If the item wasn't found, the promise completes with a value of null.
 * 
 */
WinJS.UI.IListDataSource.prototype.itemFromIndex = function(index) {};

/**
 * Retrieves the item with the specified key.
 * @param {string} key The key of the item to retrieve. It must be a non-empty string.
 * @param {?=} description Domain-specific information that IListDataAdapter can use to improve the retrieval time.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that provides an IItem that contains the requested item or a FetchError if an error was encountered. If the item was not found, the promise completes with a null value.
 * 
 */
WinJS.UI.IListDataSource.prototype.itemFromKey = function(key, description) {};

/**
 * Moves an item to just after another item.
 * @param {string} key The key that identifies the item to move.
 * @param {string} previousKey The key of another item in the data source. The item specified by the key parameter will be moved after this item.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was moved or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.moveAfter = function(key, previousKey) {};

/**
 * Moves an item before another item.
 * @param {string} key The key that identifies the item to move.
 * @param {string} nextKey The key of another item in the data source. The item specified by the key parameter will be moved before this item.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was moved or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.moveBefore = function(key, nextKey) {};

/**
 * Moves an item to the end of the data source.
 * @param {string} key The key that identifies the item to move.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was moved or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.moveToEnd = function(key) {};

/**
 * Moves the specified item to the beginning of the data source.
 * @param {string} key The key that identifies the item to move.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains the IItem that was moved or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.moveToStart = function(key) {};

/**
 * Removes the specified item from the data source.
 * @param {string} key The key that identifies the item to remove.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<T>>} A Promise that contains nothing if the operation was successful or an EditError if an error was encountered.
 * 
 */
WinJS.UI.IListDataSource.prototype.remove = function(key) {};
/**
 * @record
 * @struct
 */
WinJS.UI.IListNotificationHandler = function() {};

/**
 * Indicates the start of a notification batch. Objects that are listening for notifications should defer making updates until endNotifications is called.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.beginNotifications = function() {};

/**
 * Indicates that an item changed.
 * @param {!WinJS.UI.IItem<T>} newItem The updated item.
 * @param {!WinJS.UI.IItem<T>} oldItem The original item.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.changed = function(newItem, oldItem) {};

/**
 * Indicates that the number of items in the IListDataSource has changed.
 * @param {number} newCount The updated count.
 * @param {number} oldCount The original count.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.countChanged = function(newCount, oldCount) {};

/**
 * Indicates the end of a notification batch. When the beginNotifications method is called, objects listening for notifications should defer making updates until endNotifications is called.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.endNotifications = function() {};

/**
 * Indicates that the index of an item changed.
 * @param {string} handle The temporary ID of the item.
 * @param {number} newIndex The new index.
 * @param {number} oldIndex The original index.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.indexChanged = function(handle, newIndex, oldIndex) {};

/**
 * Indicates that an item was added to the IListDataSource.
 * @param {!WinJS.UI.IItemPromise<T>} itemPromise A promise for the new IItem.
 * @param {string} previousHandle The temporary ID of the item that precedes the new item.
 * @param {string} nextHandle The temporary ID of the item that follows the new item.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.inserted = function(itemPromise, previousHandle, nextHandle) {};

/**
 * Indicates that an IItemPromise was fulfilled and that the item is now available.
 * @param {!WinJS.UI.IItem<T>} item The fulfilled item.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.itemAvailable = function(item) {};

/**
 * Indicates that an item was moved.
 * @param {!WinJS.UI.IItemPromise<T>} item A promise for the IItem that was moved.
 * @param {string} previousHandle The temporary ID of the item that now precedes the moved item.
 * @param {string} nextHandle The temporary ID of the item that now follows the moved item.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.moved = function(item, previousHandle, nextHandle) {};

/**
 * Indicates that an item was removed.
 * @param {string} handle The temporary ID of the item that was removed.
 * @param {boolean} mirage true if the item never actually existed; false if the item was actually present in the IListDataSource.
 * 
 * @return {void}
 */
WinJS.UI.IListNotificationHandler.prototype.removed = function(handle, mirage) {};
/**
 * @record
 * @struct
 */
WinJS.UI.IListViewItem = function() {};
 /** @type {number} */
WinJS.UI.IListViewItem.prototype.index;
 /** @type {string} */
WinJS.UI.IListViewItem.prototype.key;
 /** @type {boolean} */
WinJS.UI.IListViewItem.prototype.hasFocus;
 /** @type {boolean} */
WinJS.UI.IListViewItem.prototype.showFocus;
/**
 * @record
 * @struct
 */
WinJS.UI.ISelection = function() {};

/**
 * Adds one or more items to the selection.
 * @param {?} items The indexes or keys of the items to add. You can provide different types of objects for the items parameter: you can specify an index, a key, or a range of indexes. It can also be an array that contains one or more of these objects. For more info, see the Remarks section.
 * @return {!WinJS.Promise<?>} A Promise that is fulfilled when the operation completes.
 * 
 */
WinJS.UI.ISelection.prototype.add = function(items) {};

/**
 * Clears the selection.
 * @return {!WinJS.Promise<?>} A Promise that is fulfilled when the clear operation completes.
 * 
 */
WinJS.UI.ISelection.prototype.clear = function() {};

/**
 * Returns the number of items in the selection.
 * @return {number} The number of items in the selection.
 * 
 */
WinJS.UI.ISelection.prototype.count = function() {};

/**
 * Returns a list of the indexes for the items in the selection.
 * @return {!Array<number>} The list of indexes for the items in the selection as an array of Number objects.
 * 
 */
WinJS.UI.ISelection.prototype.getIndices = function() {};

/**
 * Returns an array that contains the items in the selection.
 * @return {!WinJS.Promise<!Array<!WinJS.UI.IItem<T>>>} A Promise that contains an array of the requested IItem objects.
 * 
 */
WinJS.UI.ISelection.prototype.getItems = function() {};

/**
 * Gets an array of the index ranges for the selected items.
 * @return {!Array<!WinJS.UI.ISelectionRange>} An array that contains an ISelectionRange object for each index range in the selection.
 * 
 */
WinJS.UI.ISelection.prototype.getRanges = function() {};

/**
 * Returns a value that indicates whether the selection contains every item in the data source.
 * @return {boolean} true if the selection contains every item in the data source; otherwise, false.
 * 
 */
WinJS.UI.ISelection.prototype.isEverything = function() {};

/**
 * Removes the specified items from the selection.
 * @param {?} items The indexes or keys of the items to remove. You can provide different types of objects for the items parameter: you can specify an index, a key, or a range of indexes. It can also be an array that contains one or more of these objects. For more info, see the Remarks section.
 * @return {!WinJS.Promise<?>} A Promise that is fulfilled when the operation completes.
 * 
 */
WinJS.UI.ISelection.prototype.remove = function(items) {};

/**
 * Adds all the items in the ListView to the selection.
 * 
 * @return {void}
 */
WinJS.UI.ISelection.prototype.selectAll = function() {};

/**
 * Clears the current selection and replaces it with the specified items.
 * @param {?} items The indexes or keys of the items that make up the selection. You can provide different types of objects for the items parameter: you can specify an index, a key, or a range of indexes. It can also be an array that contains one or more of these objects. For more info, see the Remarks section.
 * @return {!WinJS.Promise<?>} A Promise that is fulfilled when the operation completes.
 * 
 */
WinJS.UI.ISelection.prototype.set = function(items) {};
/**
 * @record
 * @struct
 */
WinJS.UI.ISelectionRange = function() {};
 /** @type {number} */
WinJS.UI.ISelectionRange.prototype.firstIndex;
 /** @type {?} */
WinJS.UI.ISelectionRange.prototype.firstKey;
 /** @type {number} */
WinJS.UI.ISelectionRange.prototype.lastIndex;
 /** @type {?} */
WinJS.UI.ISelectionRange.prototype.lastKey;
/**
 * @record
 * @struct
 */
WinJS.UI.IZoomableView = function() {};

/**
 * Initiates semantic zoom on the custom control.
 * 
 * @return {void}
 */
WinJS.UI.IZoomableView.prototype.beginZoom = function() {};

/**
 * Initializes the semantic zoom state for the custom control.
 * @param {boolean} isZoomedOut True if this is the zoomed out view; otherwise false.
 * @param {boolean} isCurrentView True if this is the current view; otherwise false.
 * @param {!Function} triggerZoom The function that manages semantic zoom behavior. Triggers a zoom in or zoom out if the control is the visible control.
 * @param {number} prefetchedPages The number of pages of content to pre-fetch for zooming. This value is dependent on the size of the semantic zoom container. More content can be displayed based on the zoom factor and the size of the container.
 * 
 * @return {void}
 */
WinJS.UI.IZoomableView.prototype.configureForZoom = function(isZoomedOut, isCurrentView, triggerZoom, prefetchedPages) {};

/**
 * Terminates semantic zoom on the zoomed in or zoomed out child of the custom control.
 * @param {boolean} isCurrentView True if the control is the visible control; otherwise false.
 * 
 * @return {void}
 */
WinJS.UI.IZoomableView.prototype.endZoom = function(isCurrentView) {};

/**
 * Retrieves the current item of the zoomed in or zoomed out child of the custom control.
 * @return {!WinJS.Promise<{item: T, position: !WinJS.Utilities.IPosition}>} An object that represents the selected item. This return value must be a Promise for the following: item, position.
 * 
 */
WinJS.UI.IZoomableView.prototype.getCurrentItem = function() {};

/**
 * Retrieves the panning axis of the zoomed-in or zoomed-out child of the custom control.
 * @return {string} Identifies the panning axis of the child control. Implementation specific.
 * 
 */
WinJS.UI.IZoomableView.prototype.getPanAxis = function() {};

/**
 * Manages pointer input for the custom control.
 * @param {string} pointerId The ID of the pointer.
 * 
 * @return {void}
 */
WinJS.UI.IZoomableView.prototype.handlePointer = function(pointerId) {};

/**
 * Positions the specified item within the viewport of the child control when panning or zooming begins.
 * @param {T} item The object to position within the viewport of the child control. item can be a number, a string, or an object with any number of properties.
 * @param {!WinJS.Utilities.IPosition} position An object that contains the position data of the item relative to the child control. position must be an object with four number properties: left, top, width, and height. These values specify a rectangle that is typically the bounding box of the current item, though the details are up to the control. The units of the position must be in pixels. And the coordinates must be relative to the top-left of the control viewport (which should occupy the same area as the semantic zoom viewport), except when in RTL mode. In RTL mode, return coordinates relative to the top-right off the control viewport. The rectangle is transformed from the coordinate system of one control to that of the other.
 * 
 * @return {void}
 */
WinJS.UI.IZoomableView.prototype.positionItem = function(item, position) {};

/**
 * Selects the item closest to the specified screen coordinates.
 * @param {number} x The x-coordinate in DIPs relative to the upper-left corner of the SemanticZoom viewport.
 * @param {number} y The y-coordinate in DIPs relative to the upper-left corner of the SemanticZoom viewport..
 * 
 * @return {void}
 */
WinJS.UI.IZoomableView.prototype.setCurrentItem = function(x, y) {};

/**
 * @constructor
 * @struct
 * Creates a new AppBar object.
 * @param {!HTMLElement=} element The DOM element that will host the control.
 * @param {?=} options The set of properties and values to apply to the new AppBar.
 * 
 */
WinJS.UI.AppBar = function(element, options) {};
 /** @type {!Array<!WinJS.UI.AppBarCommand>} */
WinJS.UI.AppBar.prototype.commands;
 /** @type {boolean} */
WinJS.UI.AppBar.prototype.disabled;
 /** @type {!HTMLElement} */
WinJS.UI.AppBar.prototype.element;
 /** @type {boolean} */
WinJS.UI.AppBar.prototype.hidden;
 /** @type {string} */
WinJS.UI.AppBar.prototype.layout;
 /** @type {string} */
WinJS.UI.AppBar.prototype.placement;
 /** @type {boolean} */
WinJS.UI.AppBar.prototype.sticky;

/**
 * Occurs immediately after the AppBar is hidden.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.onafterhide = function(eventInfo) {};

/**
 * Occurs after the AppBar is shown.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.onaftershow = function(eventInfo) {};

/**
 * Occurs before the AppBar is hidden.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.onbeforehide = function(eventInfo) {};

/**
 * Occurs before a hidden AppBar is shown.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.onbeforeshow = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} type The event type to register. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.AppBar.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Returns the AppBarCommand object identified by id.
 * @param {string} id The element idenitifier (ID) of the command to be returned.
 * @return {!WinJS.UI.AppBarCommand} The command identified by id. If multiple commands have the same ID, returns an array of all the commands matching the ID.
 * 
 */
WinJS.UI.AppBar.prototype.getCommandById = function(id) {};

/**
 * Hides the AppBar.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.hide = function() {};

/**
 * Hides the specified commands of the AppBar.
 * @param {!Array<?>} commands The commands to hide. The array elements may be AppBarCommand objects, or the string identifiers (IDs) of commands.
 * @param {boolean=} immediate The parameter immediate is not supported and may be altered or unavailable in the future. true to hide the commands immediately, without animating them; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.hideCommands = function(commands, immediate) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} type The event type to unregister. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * Shows the AppBar if it is not disabled.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.show = function() {};

/**
 * Shows the specified commands of the AppBar.
 * @param {!Array<?>} commands The commands to show. The array elements may be AppBarCommand objects, or the string identifiers (IDs) of commands.
 * @param {boolean=} immediate The parameter immediate is not supported and may be altered or unavailable in the future. true to show the commands immediately, without animating them; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.showCommands = function(commands, immediate) {};

/**
 * Shows the specified commands of the AppBar while hiding all other commands.
 * @param {!Array<?>} commands The commands to show. The array elements may be AppBarCommand objects, or the string identifiers (IDs) of commands.
 * @param {boolean=} immediate The parameter immediate is not supported and may be altered or unavailable in the future. true to show the specified commands (and hide the others) immediately, without animating them; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.AppBar.prototype.showOnlyCommands = function(commands, immediate) {};

/**
 * @constructor
 * @struct
 * Creates a new AppBarCommand object.
 * @param {!HTMLElement=} element The DOM element that will host the control.
 * @param {?=} options The set of properties and values to apply to the new AppBarCommand.
 * 
 */
WinJS.UI.AppBarCommand = function(element, options) {};
 /** @type {boolean} */
WinJS.UI.AppBarCommand.prototype.disabled;
 /** @type {!HTMLElement} */
WinJS.UI.AppBarCommand.prototype.element;
 /** @type {string} */
WinJS.UI.AppBarCommand.prototype.extraClass;
 /** @type {!WinJS.UI.Flyout} */
WinJS.UI.AppBarCommand.prototype.flyout;
 /** @type {boolean} */
WinJS.UI.AppBarCommand.prototype.hidden;
 /** @type {string} */
WinJS.UI.AppBarCommand.prototype.icon;
 /** @type {string} */
WinJS.UI.AppBarCommand.prototype.id;
 /** @type {string} */
WinJS.UI.AppBarCommand.prototype.label;
 /** @type {!Function} */
WinJS.UI.AppBarCommand.prototype.onclick;
 /** @type {string} */
WinJS.UI.AppBarCommand.prototype.section;
 /** @type {boolean} */
WinJS.UI.AppBarCommand.prototype.selected;
 /** @type {string} */
WinJS.UI.AppBarCommand.prototype.tooltip;
 /** @type {string} */
WinJS.UI.AppBarCommand.prototype.type;

/**
 * Registers an event handler for the specified event.
 * @param {string} type The event type to register.
 * @param {!Function} listener The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.AppBarCommand.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} type The event type to unregister. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.AppBarCommand.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the DatePicker control.
 * @param {!HTMLElement=} element The DOM element associated with the DatePicker control.
 * @param {?=} options The set of options to be applied initially to the DatePicker control. The options are the following: calendar, current, datePattern, disabled, maxYear, minYear, monthPattern, yearPattern.
 * 
 */
WinJS.UI.DatePicker = function(element, options) {};
 /** @type {string} */
WinJS.UI.DatePicker.prototype.calendar;
 /** @type {!Date} */
WinJS.UI.DatePicker.prototype.current;
 /** @type {string} */
WinJS.UI.DatePicker.prototype.datePattern;
 /** @type {boolean} */
WinJS.UI.DatePicker.prototype.disabled;
 /** @type {!HTMLElement} */
WinJS.UI.DatePicker.prototype.element;
 /** @type {number} */
WinJS.UI.DatePicker.prototype.maxYear;
 /** @type {number} */
WinJS.UI.DatePicker.prototype.minYear;
 /** @type {string} */
WinJS.UI.DatePicker.prototype.monthPattern;
 /** @type {string} */
WinJS.UI.DatePicker.prototype.yearPattern;

/**
 * Occurs when any of the controls are changed by the user.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.DatePicker.prototype.onchange = function(eventInfo) {};

/**
 * Adds an event listener.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The function that handles the event.
 * @param {boolean=} capture If true, specifies that capture should be initiated, otherwise false.
 * 
 * @return {void}
 */
WinJS.UI.DatePicker.prototype.addEventListener = function(type, listener, capture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.DatePicker.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.DatePicker.prototype.raiseEvent = function(type, eventProperties) {};

/**
 * Removes a listener for the specified event.
 * @param {string} type The name of the event for which to remove a listener.
 * @param {!Function} listener The listener.
 * @param {?=} useCapture Optional. The same value that was passed to addEventListener for this listener. It may be omitted if it was omitted when calling addEventListener.
 * 
 * @return {void}
 */
WinJS.UI.DatePicker.prototype.removeEventListener = function(type, listener, useCapture) {};
/**
 * @constructor
 * @struct
 */
WinJS.UI.DOMEventMixin = function() {};

/**
 * Adds an event listener to the control.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The listener to invoke when the event gets raised.
 * @param {boolean=} useCapture true to initiate capture; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.DOMEventMixin.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Raises an event of the specified type, adding the specified additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.DOMEventMixin.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Removes an event listener from the control.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The listener to remove.
 * @param {boolean=} useCapture true to initiate capture; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.DOMEventMixin.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * Adds the set of declaratively specified options (properties and events) to the specified control. If the name of the options property begins with "on", the property value is a function and the control supports addEventListener. This method calls the addEventListener method on the control.
 * @param {?} control The control on which the properties and events are to be applied.
 * @param {?} options The set of options that are specified declaratively.
 * 
 * @return {void}
 */
WinJS.UI.DOMEventMixin.prototype.setOptions = function(control, options) {};

/**
 * @constructor
 * @struct
 * Creates a new FlipView.
 * @param {!HTMLElement=} element The DOM element that hosts the control.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new control. Each property corresponds to one of the control's properties or events. Event names must begin with "on". For example, to provide a handler for the pageselected event, add a property named "onpageselected" and set its value to the event handler.
 * 
 */
WinJS.UI.FlipView = function(element, options) {};
 /** @type {number} */
WinJS.UI.FlipView.prototype.currentPage;
 /** @type {!HTMLElement} */
WinJS.UI.FlipView.prototype.element;
 /** @type {!WinJS.UI.IListDataSource<T>} */
WinJS.UI.FlipView.prototype.itemDataSource;
 /** @type {number} */
WinJS.UI.FlipView.prototype.itemSpacing;
 /** @type {?} */
WinJS.UI.FlipView.prototype.itemTemplate;
 /** @type {string} */
WinJS.UI.FlipView.prototype.orientation;

/**
 * Occurs when the datasource count changes.
 * @param {!Event} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: source.
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.ondatasourcecountchanged = function(eventInfo) {};

/**
 * Raised when the FlipView flips to a page and its renderer function completes.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.source.
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.onpagecompleted = function(eventInfo) {};

/**
 * Raised when the FlipView flips to a page.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.source.
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.onpageselected = function(eventInfo) {};

/**
 * Occurs when an item becomes invisible or visible.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.source, detail.visible.
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.onpagevisibilitychanged = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} eventName The name of the event to handle. For a list of events, see the FlipView object page.
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Returns the number of items in the FlipView control's itemDataSource.
 * @return {!WinJS.Promise<number>} A Promise that contains the number of items in the list or WinJS.UI.CountResult.unknown if the count is unavailable.
 * 
 */
WinJS.UI.FlipView.prototype.count = function() {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.FlipView.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Forces the FlipView to update its layout. Use this function when making the FlipView visible again after its style.display property had been set to "none".
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.forceLayout = function() {};

/**
 * Navigates to the next page.
 * @return {boolean} true if the FlipView begins navigating to the next page; false if the FlipView is already at the last item or is in the middle of another navigation animation.
 * 
 */
WinJS.UI.FlipView.prototype.next = function() {};

/**
 * Navigates to the previous item.
 * @return {boolean} true if the FlipView begins navigating to the previous page; nfalse if the FlipView is already at the first page or is in the middle of another navigation animation.
 * 
 */
WinJS.UI.FlipView.prototype.previous = function() {};

/**
 * Unregisters an event handler for the specified event.
 * @param {string} eventName The name of the event.
 * @param {!Function} eventHandler The event handler function to remove.
 * @param {boolean=} useCapture Set to true to unregister the event handler for the capturing phase; otherwise, set to false to unregister the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.removeEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Sets custom animations for the FlipView to use when navigating between pages.
 * @param {?} animations An object that contains up to three fields, one for each navigation action: next, previous, and jump. Each of those fields must be a function with this signature: function (outgoingPage, incomingPage) Each function must return a WinJS.Promise that completes once the animations are finished. If a field is null or undefined, the FlipView reverts to its default animation for that action.
 * 
 * @return {void}
 */
WinJS.UI.FlipView.prototype.setCustomAnimations = function(animations) {};

/**
 * @constructor
 * @struct
 * Creates a new Flyout object.
 * @param {!HTMLElement=} element The DOM element that will host the control.
 * @param {?=} options The set of properties and values to apply to the new Flyout.
 * 
 */
WinJS.UI.Flyout = function(element, options) {};
 /** @type {string} */
WinJS.UI.Flyout.prototype.alignment;
 /** @type {!HTMLElement} */
WinJS.UI.Flyout.prototype.anchor;
 /** @type {!HTMLElement} */
WinJS.UI.Flyout.prototype.element;
 /** @type {boolean} */
WinJS.UI.Flyout.prototype.hidden;
 /** @type {string} */
WinJS.UI.Flyout.prototype.placement;

/**
 * Raised immediately after a flyout is fully hidden.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.onafterhide = function(eventInfo) {};

/**
 * Raised immediately after a flyout is fully shown.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.onaftershow = function(eventInfo) {};

/**
 * Raised just before hiding a flyout.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.onbeforehide = function(eventInfo) {};

/**
 * Raised just before showing a flyout.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.onbeforeshow = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} type The event type to register. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Hides the Flyout, if visible, regardless of other states.
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.hide = function() {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} type The event type to unregister. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * Shows the Flyout, if hidden, regardless of other states.
 * @param {!HTMLElement} anchor Required. The DOM element to anchor the Flyout.
 * @param {string} placement The placement of the Flyout to the anchor: the string literal "top", "bottom", "left", or "right".
 * @param {string} alignment For "top" or "bottom" placement, the alignment of the Flyout to the anchor's edge: the string literal "center", "left", or "right".
 * 
 * @return {void}
 */
WinJS.UI.Flyout.prototype.show = function(anchor, placement, alignment) {};

/**
 * @constructor
 * @struct
 * Creates a new GridLayout object.
 * @param {?=} options The set of properties and values to apply to the new GridLayout.
 * 
 */
WinJS.UI.GridLayout = function(options) {};
 /** @type {string} */
WinJS.UI.GridLayout.prototype.backdropColor;
 /** @type {boolean} */
WinJS.UI.GridLayout.prototype.disableBackdrop;
 /** @type {WinJS.UI.HeaderPosition} */
WinJS.UI.GridLayout.prototype.groupHeaderPosition;
 /** @type {!Function} */
WinJS.UI.GridLayout.prototype.groupInfo;
 /** @type {boolean} */
WinJS.UI.GridLayout.prototype.horizontal;
 /** @type {!Function} */
WinJS.UI.GridLayout.prototype.itemInfo;
 /** @type {number} */
WinJS.UI.GridLayout.prototype.maxRows;

/**
 * Calculates the index of the first visible item.
 * @param {number} beginScrollPosition
 * @param {boolean} wholeItem 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.calculateFirstVisible = function(beginScrollPosition, wholeItem) {};

/**
 * Calculates the index of the last visible item.
 * @param {number} endScrollPosition
 * @param {boolean} wholeItem 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.calculateLastVisible = function(endScrollPosition, wholeItem) {};

/**
 * Ends the layout process.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.endLayout = function() {};

/**
 * Calculates the dimensions of an item.
 * @param {number} itemIndex 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.getItemPosition = function(itemIndex) {};

/**
 * Gets the index of the next item relatively to the supplied index and keypress.
 * @param {number} itemIndex
 * @param {?} element
 * @param {?} keyPressed 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.getKeyboardNavigatedItem = function(itemIndex, element, keyPressed) {};

/**
 * Gets the scrollbar range.
 * @param {number} beginScrollPosition
 * @param {number} endScrollPosition 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.getScrollbarRange = function(beginScrollPosition, endScrollPosition) {};

/**
 * This API supports the WinJS infrastructure and is not intended to be used directly from your code.
 * @param {number} x The x-coordinate, or the horizontal position on the screen.
 * @param {number} y The y-coordinate, or the vertical position on the screen.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.hitTest = function(x, y) {};

/**
 * Initializes this layout.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.init = function() {};

/**
 * Notifies of items being added.
 * @param {?} elements 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.itemsAdded = function(elements) {};

/**
 * This API supports the WinJS infrastructure and is not intended to be used directly from your code.
 * @param {number} firstPixel The first pixel the range of items falls between.
 * @param {number} lastPixel The last pixel the range of items falls between.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.itemsFromRange = function(firstPixel, lastPixel) {};

/**
 * Notifies of items being moved.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.itemsMoved = function() {};

/**
 * Notifies of items being removed.
 * @param {?} elements 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.itemsRemoved = function(elements) {};

/**
 * Lays out the specified header at the specified index.
 * @param {number} groupIndex
 * @param {?} element A DOM element.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.layoutHeader = function(groupIndex, element) {};

/**
 * Lays out the specified item at the speficied index.
 * @param {number} itemIndex
 * @param {?} element A DOM element.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.layoutItem = function(itemIndex, element) {};

/**
 * Prepares the header element.
 * @param {!HTMLElement} element 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.prepareHeader = function(element) {};

/**
 * Prepares the item element.
 * @param {number} itemIndex
 * @param {?} element A DOM element.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.prepareItem = function(itemIndex, element) {};

/**
 * Releases the item.
 * @param {?} item
 * @param {?} newItem 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.releaseItem = function(item, newItem) {};

/**
 * Resets the layout.
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.reset = function() {};

/**
 * Sets the ILayoutSite object.
 * @param {?} layoutSite 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.setSite = function(layoutSite) {};

/**
 * Starts the layout.
 * @param {number} beginScrollPosition
 * @param {number} endScrollPositionScrollPosition 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.startLayout = function(beginScrollPosition, endScrollPositionScrollPosition) {};

/**
 * Updates the backdrop count.
 * @param {number} count 
 * 
 * @return {void}
 */
WinJS.UI.GridLayout.prototype.updateBackdrop = function(count) {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of HtmlControl to define a new page control.
 * @param {!HTMLElement=} element The element that hosts the HtmlControl.
 * @param {?=} options The options for configuring the page. The uri option is required in order to specify the source document for the content of the page. Other options are the ones used by the WinJS.Pages.render method.
 * 
 */
WinJS.UI.HtmlControl = function(element, options) {};
/**
 * @constructor
 * @struct
 */
WinJS.UI.Layout = function() {};

/**
 * @constructor
 * @struct
 * Creates a new ListLayout.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new ListLayout. Each property of the options object corresponds to one of the object's properties or events. Event names must begin with "on".
 * 
 */
WinJS.UI.ListLayout = function(options) {};
 /** @type {string} */
WinJS.UI.ListLayout.prototype.backdropColor;
 /** @type {boolean} */
WinJS.UI.ListLayout.prototype.disableBackdrop;
 /** @type {WinJS.UI.HeaderPosition} */
WinJS.UI.ListLayout.prototype.groupHeaderPosition;
 /** @type {!Function} */
WinJS.UI.ListLayout.prototype.groupInfo;
 /** @type {boolean} */
WinJS.UI.ListLayout.prototype.horizontal;
 /** @type {!Function} */
WinJS.UI.ListLayout.prototype.itemInfo;

/**
 * Calculates the index of the first visible item.
 * @param {number} beginScrollPosition
 * @param {boolean} wholeItem 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.calculateFirstVisible = function(beginScrollPosition, wholeItem) {};

/**
 * Calculates the index of the last visible item.
 * @param {number} endScrollPosition
 * @param {boolean} wholeItem 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.calculateLastVisible = function(endScrollPosition, wholeItem) {};

/**
 * Ends the layout process.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.endLayout = function() {};

/**
 * Calculates the dimensions of an item.
 * @param {number} itemIndex 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.getItemPosition = function(itemIndex) {};

/**
 * Gets the index of the next item relatively to the supplied index and keypress.
 * @param {number} itemIndex
 * @param {!HTMLElement} element
 * @param {?} keyPressed 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.getKeyboardNavigatedItem = function(itemIndex, element, keyPressed) {};

/**
 * Gets the scrollbar range.
 * @param {number} beginScrollPosition
 * @param {number} endScrollPosition 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.getScrollbarRange = function(beginScrollPosition, endScrollPosition) {};

/**
 * This API supports the WinJS infrastructure and is not intended to be used directly from your code.
 * @param {number} x The x-coordinate, or the horizontal position on the screen.
 * @param {number} y The y-coordinate, or the vertical position on the screen.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.hitTest = function(x, y) {};

/**
 * Initializes this layout.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.init = function() {};

/**
 * Notifies of items being added.
 * @param {?} elements 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.itemsAdded = function(elements) {};

/**
 * This API supports the WinJS infrastructure and is not intended to be used directly from your code.
 * @param {number} firstPixel
 * @param {number} lastPixel 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.itemsFromRange = function(firstPixel, lastPixel) {};

/**
 * Notifies of items being moved.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.itemsMoved = function() {};

/**
 * Notifies of items being removed.
 * @param {?} elements 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.itemsRemoved = function(elements) {};

/**
 * Lays out the specified header at the specified index.
 * @param {number} groupIndex
 * @param {?} element A DOM element.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.layoutHeader = function(groupIndex, element) {};

/**
 * Lays out the specified item at the speficied index.
 * @param {number} itemIndex
 * @param {?} element A DOM element.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.layoutItem = function(itemIndex, element) {};

/**
 * Prepares the header element.
 * @param {!HTMLElement} element 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.prepareHeader = function(element) {};

/**
 * Prepares the item element.
 * @param {number} itemIndex
 * @param {?} element A DOM element.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.prepareItem = function(itemIndex, element) {};

/**
 * Releases the item.
 * @param {?} item
 * @param {?} newItem 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.releaseItem = function(item, newItem) {};

/**
 * Resets the layout.
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.reset = function() {};

/**
 * Sets the ILayoutSite object.
 * @param {!WinJS.UI.ILayoutSite} layoutSite 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.setSite = function(layoutSite) {};

/**
 * Starts the layout.
 * @param {number} beginScrollPosition
 * @param {number} endScrollPositionScrollPosition 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.startLayout = function(beginScrollPosition, endScrollPositionScrollPosition) {};

/**
 * Updates the backdrop count.
 * @param {number} count 
 * 
 * @return {void}
 */
WinJS.UI.ListLayout.prototype.updateBackdrop = function(count) {};

/**
 * @constructor
 * @struct
 * Creates a new ListView.
 * @param {!HTMLElement=} element The DOM element that hosts the ListView control.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new control. Each property of the options object corresponds to one of the control's properties or events. Event names must begin with "on". For example, to provide a handler for the selectionchanged event, add a property named "onselectionchanged" to the options object and set its value to the event handler.
 * 
 */
WinJS.UI.ListView = function(element, options) {};
 /** @type {boolean} */
WinJS.UI.ListView.prototype.automaticallyLoadPages;
 /** @type {!WinJS.UI.IListViewItem} */
WinJS.UI.ListView.prototype.currentItem;
 /** @type {!HTMLElement} */
WinJS.UI.ListView.prototype.element;
 /** @type {!WinJS.UI.IListDataSource<T>} */
WinJS.UI.ListView.prototype.groupDataSource;
 /** @type {?} */
WinJS.UI.ListView.prototype.groupHeaderTemplate;
 /** @type {number} */
WinJS.UI.ListView.prototype.indexOfFirstVisible;
 /** @type {number} */
WinJS.UI.ListView.prototype.indexOfLastVisible;
 /** @type {!WinJS.UI.IListDataSource<T>} */
WinJS.UI.ListView.prototype.itemDataSource;
 /** @type {?} */
WinJS.UI.ListView.prototype.itemTemplate;
 /** @type {!WinJS.UI.ILayout} */
WinJS.UI.ListView.prototype.layout;
 /** @type {string} */
WinJS.UI.ListView.prototype.loadingBehavior;
 /** @type {string} */
WinJS.UI.ListView.prototype.loadingState;
 /** @type {number} */
WinJS.UI.ListView.prototype.pagesToLoad;
 /** @type {number} */
WinJS.UI.ListView.prototype.pagesToLoadThreshold;
 /** @type {function(?, !HTMLElement): void} */
WinJS.UI.ListView.prototype.resetGroupHeader;
 /** @type {function(T, !HTMLElement): void} */
WinJS.UI.ListView.prototype.resetItem;
 /** @type {number} */
WinJS.UI.ListView.prototype.scrollPosition;
 /** @type {!WinJS.UI.ISelection<T>} */
WinJS.UI.ListView.prototype.selection;
 /** @type {WinJS.UI.SelectionMode} */
WinJS.UI.ListView.prototype.selectionMode;
 /** @type {WinJS.UI.SwipeBehavior} */
WinJS.UI.ListView.prototype.swipeBehavior;
 /** @type {WinJS.UI.TapBehavior} */
WinJS.UI.ListView.prototype.tapBehavior;
 /** @type {!WinJS.UI.IZoomableView<!WinJS.UI.ListView>} */
WinJS.UI.ListView.prototype.zoomableView;

/**
 * Occurs when the ListView is about to play an entrance or contentTransition animation.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.type, detail.setPromise.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.oncontentanimating = function(eventInfo) {};

/**
 * Occurs when the user taps or clicks an item.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.itemIndex.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.oniteminvoked = function(eventInfo) {};

/**
 * Raised when the focused item changes.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.oldFocus, detail.oldNewFocus.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.onkeyboardnavigating = function(eventInfo) {};

/**
 * Occurs when the ListView control's loadingState changes.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.scrolling.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.onloadingstatechanged = function(eventInfo) {};

/**
 * Occurs after the current selection changes.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object is null. To obtain the selected items, use the ListView.selection property.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.onselectionchanged = function(eventInfo) {};

/**
 * Occurs just before the current selection changes.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.newSelection, detail.preventTapBehavior.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.onselectionchanging = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} eventName The name of the event to handle. See the ListView object page for a list of events. Note that you drop the "on" when specifying the event name for the addEventListener method. For example, instead of specifying "onselectionchange", you specify "selectionchange".
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.ListView.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Returns the DOM element that represents the item at the specified index.
 * @param {number} itemIndex The index of the item.
 * @return {!HTMLElement} The DOM element that represents the item at the specified index.
 * 
 */
WinJS.UI.ListView.prototype.elementFromIndex = function(itemIndex) {};

/**
 * Makes the item at the specified index visible. If necessary, the ListView will scroll to the item.
 * @param {number} itemIndex The index of the item to scroll into view.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.ensureVisible = function(itemIndex) {};

/**
 * Forces the ListView to update its layout. Use this function when making the ListView visible again after its style.display property had been set to "none".
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.forceLayout = function() {};

/**
 * Returns the index of the item that the specified DOM element displays.
 * @param {!HTMLElement} element The DOM element that displays the item.
 * @return {number} The index of the item displayed by element.
 * 
 */
WinJS.UI.ListView.prototype.indexOfElement = function(element) {};

/**
 * Loads the next set of pages if the ListView control's loadingBehavior is set to "incremental" (otherwise, it does nothing). The number of pages to be loaded is determined by the pagesToLoad property.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.loadMorePages = function() {};

/**
 * Repositions all the visible items in the ListView to adjust for items whose sizes have changed. Most apps won’t ever need to call this method. For more info, see the Remarks section.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.recalculateItemPosition = function() {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} eventName The name of the event that the event handler is registered for.
 * @param {!Function} eventCallback The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.ListView.prototype.removeEventListener = function(eventName, eventCallback, useCapture) {};

/**
 * Triggers the ListView disposal service manually.
 * 
 * @return {void}
 */
WinJS.UI.ListView.triggerDispose = function() {};

/**
 * @constructor
 * @struct
 * Creates a new Menu object.
 * @param {!HTMLElement=} element The DOM element that will host the control.
 * @param {?=} options The set of properties and values to apply to the new Menu.
 * 
 */
WinJS.UI.Menu = function(element, options) {};
 /** @type {string} */
WinJS.UI.Menu.prototype.alignment;
 /** @type {!HTMLElement} */
WinJS.UI.Menu.prototype.anchor;
 /** @type {!Array<!WinJS.UI.MenuCommand>} */
WinJS.UI.Menu.prototype.commands;
 /** @type {!HTMLElement} */
WinJS.UI.Menu.prototype.element;
 /** @type {boolean} */
WinJS.UI.Menu.prototype.hidden;
 /** @type {string} */
WinJS.UI.Menu.prototype.placement;

/**
 * Occurs immediately after the Menu is hidden.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.onafterhide = function(eventInfo) {};

/**
 * Occurs after the Menu is shown.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.onaftershow = function(eventInfo) {};

/**
 * Occurs before the Menu is hidden.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.onbeforehide = function(eventInfo) {};

/**
 * Occurs before a hidden Menu is shown.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.onbeforeshow = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} type The event type to register. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Returns the MenuCommand object identified by id.
 * @param {string} id The element identifier (ID) of the command to be returned.
 * @return {!WinJS.UI.MenuCommand} The command identified by id.
 * 
 */
WinJS.UI.Menu.prototype.getCommandById = function(id) {};

/**
 * Hides the Menu.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.hide = function() {};

/**
 * Hides the specified commands of the Menu.
 * @param {!Array<?>} commands The commands to hide. The array elements may be MenuCommand objects, or the string identifiers (IDs) of commands.
 * @param {boolean} immediate The parameter immediate is not supported and may be altered or unavailable in the future. true to hide the commands immediately, without animating them; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.hideCommands = function(commands, immediate) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} type The event type to unregister. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * Shows the Menu, if hidden, regardless of other states.
 * @param {!HTMLElement} anchor Required. The DOM element to anchor the Menu.
 * @param {string=} placement The placement of the Menu to the anchor: top, bottom, left, or right.
 * @param {string=} alignment For top or bottom placement, the alignment of the Menu to the anchor's edge: center, left, or right.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.show = function(anchor, placement, alignment) {};

/**
 * Shows the specified commands of the Menu.
 * @param {!Array<?>} commands The commands to show. The array elements may be Menu objects, or the string identifiers (IDs) of commands.
 * @param {boolean} immediate The parameter immediate is not supported and may be altered or unavailable in the future. true to show the commands immediately, without animating them; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.showCommands = function(commands, immediate) {};

/**
 * Shows the specified commands of the Menu while hiding all other commands.
 * @param {!Array<?>} commands The commands to show. The array elements may be MenuCommand objects, or the string identifiers (IDs) of commands.
 * @param {boolean} immediate The parameter immediate is not supported and may be altered or unavailable in the future. true to show the specified commands (and hide the others) immediately, without animating them; otherwise, false.
 * 
 * @return {void}
 */
WinJS.UI.Menu.prototype.showOnlyCommands = function(commands, immediate) {};

/**
 * @constructor
 * @struct
 * Creates a new MenuCommand object.
 * @param {!HTMLElement=} element The DOM element that will host the control.
 * @param {?=} options The set of properties and values to apply to the new MenuCommand.
 * 
 */
WinJS.UI.MenuCommand = function(element, options) {};
 /** @type {boolean} */
WinJS.UI.MenuCommand.prototype.disabled;
 /** @type {!HTMLElement} */
WinJS.UI.MenuCommand.prototype.element;
 /** @type {string} */
WinJS.UI.MenuCommand.prototype.extraClass;
 /** @type {!WinJS.UI.Flyout} */
WinJS.UI.MenuCommand.prototype.flyout;
 /** @type {boolean} */
WinJS.UI.MenuCommand.prototype.hidden;
 /** @type {string} */
WinJS.UI.MenuCommand.prototype.id;
 /** @type {string} */
WinJS.UI.MenuCommand.prototype.label;
 /** @type {!Function} */
WinJS.UI.MenuCommand.prototype.onclick;
 /** @type {boolean} */
WinJS.UI.MenuCommand.prototype.selected;
 /** @type {string} */
WinJS.UI.MenuCommand.prototype.type;

/**
 * Registers an event handler for the specified event.
 * @param {string} type The event type to register. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.MenuCommand.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} type The event type to unregister. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.MenuCommand.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * @constructor
 * @struct
 * Creates a new Rating.
 * @param {!HTMLElement=} element The DOM element hosts the new Rating.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new control. Each property of the options object corresponds to one of the control's properties or events. Event names must begin with "on". For example, to provide a handler for the cancel event, add a property named "oncancel" to the options object and set its value to the event handler.
 * 
 */
WinJS.UI.Rating = function(element, options) {};
 /** @type {number} */
WinJS.UI.Rating.prototype.averageRating;
 /** @type {boolean} */
WinJS.UI.Rating.prototype.disabled;
 /** @type {!HTMLElement} */
WinJS.UI.Rating.prototype.element;
 /** @type {boolean} */
WinJS.UI.Rating.prototype.enableClear;
 /** @type {number} */
WinJS.UI.Rating.prototype.maxRating;
 /** @type {!Array<string>} */
WinJS.UI.Rating.prototype.tooltipStrings;
 /** @type {number} */
WinJS.UI.Rating.prototype.userRating;

/**
 * Raised when the user finishes interacting with the rating control without committing a tentative rating.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Rating.prototype.oncancel = function(eventInfo) {};

/**
 * Raised when the user commits a change to the userRating.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.tentativeRating.
 * 
 * @return {void}
 */
WinJS.UI.Rating.prototype.onchange = function(eventInfo) {};

/**
 * Raised when the user is choosing a new tentative Rating.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: detail.tentativeRating.
 * 
 * @return {void}
 */
WinJS.UI.Rating.prototype.onpreviewchange = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} eventName The name of the event to handle.
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.Rating.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} eventName The name of the event that the event handler is registered for.
 * @param {!Function} eventCallback The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.Rating.prototype.removeEventListener = function(eventName, eventCallback, useCapture) {};

/**
 * @constructor
 * @struct
 * Creates a new SemanticZoom.
 * @param {!HTMLElement=} element The DOM element that hosts the SemanticZoom.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new control. This object can contain these properties: initiallyZoomedOut Boolean, zoomFactor 0.2–0.85.
 * 
 */
WinJS.UI.SemanticZoom = function(element, options) {};
 /** @type {!HTMLElement} */
WinJS.UI.SemanticZoom.prototype.element;
 /** @type {boolean} */
WinJS.UI.SemanticZoom.prototype.enableButton;
 /** @type {boolean} */
WinJS.UI.SemanticZoom.prototype.isDeclarativeControlContainer;
 /** @type {boolean} */
WinJS.UI.SemanticZoom.prototype.locked;
 /** @type {boolean} */
WinJS.UI.SemanticZoom.prototype.zoomedOut;
 /** @type {number} */
WinJS.UI.SemanticZoom.prototype.zoomFactor;

/**
 * Occurs when the control zooms in or out.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object is true when the control is zoomed out. Otherwise, it's false.
 * 
 * @return {void}
 */
WinJS.UI.SemanticZoom.prototype.onzoomchanged = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} eventName The name of the event to handle.
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.SemanticZoom.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.SemanticZoom.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Forces the SemanticZoom to update its layout. Use this function when making the SemanticZoom visible again after its style.display property had been set to "none".
 * 
 * @return {void}
 */
WinJS.UI.SemanticZoom.prototype.forceLayout = function() {};

/**
 * Unregisters an event handler for the specified event.
 * @param {string} eventName The name of the event that the event handler is registered for.
 * @param {!Function} eventCallback The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.SemanticZoom.prototype.removeEventListener = function(eventName, eventCallback, useCapture) {};

/**
 * @constructor
 * @struct
 * Creates a new SettingsFlyout object.
 * @param {!HTMLElement=} element The DOM element that will host the control.
 * @param {?=} options The set of properties and values to apply to the new SettingsFlyout.
 * 
 */
WinJS.UI.SettingsFlyout = function(element, options) {};
 /** @type {!HTMLElement} */
WinJS.UI.SettingsFlyout.prototype.element;
 /** @type {boolean} */
WinJS.UI.SettingsFlyout.prototype.hidden;
 /** @type {string} */
WinJS.UI.SettingsFlyout.prototype.settingsCommandId;
 /** @type {string} */
WinJS.UI.SettingsFlyout.prototype.width;

/**
 * Raised immediately after the SettingsFlyout is completely hidden.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.onafterhide = function(eventInfo) {};

/**
 * Raised immediately after a SettingsFlyout is fully shown.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.onaftershow = function(eventInfo) {};

/**
 * Raised just before hiding a SettingsFlyout.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.onbeforehide = function(eventInfo) {};

/**
 * Raised just before showing a SettingsFlyout.
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.onbeforeshow = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} type The event type to register. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.addEventListener = function(type, listener, useCapture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.SettingsFlyout.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Hides the SettingsFlyout, if visible, regardless of other states.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.hide = function() {};

/**
 * Loads a fragment of the SettingsFlyout. Your app calls this when the user invokes a settings command and the WinJS.Application.onsettings event occurs.
 * @param {!CustomEvent} e An object that contains information about the event, received from the WinJS.Application.onsettings event. The detail property of this object contains the applicationcommands sub-property that you set to an array of settings commands. You then populate the SettingsFlyout with these commands by a call to populateSettings.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.populateSettings = function(e) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} type The event type to unregister. It must be beforeshow, beforehide, aftershow, or afterhide.
 * @param {!Function} listener The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * Shows the SettingsPane UI, if hidden.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.prototype.show = function() {};

/**
 * Shows the SettingsPane UI, if hidden, regardless of other state.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.show = function() {};

/**
 * Show the Settings flyout using the Settings element identifier (ID) and the path of the page that contains the Settings element.
 * @param {string} id The ID of the Settings element.
 * @param {?} path The path of the page that contains the Settings element.
 * 
 * @return {void}
 */
WinJS.UI.SettingsFlyout.showSettings = function(id, path) {};

/**
 * @constructor
 * @struct
 * Creates a new StorageDataSource object.
 * @param {?} query The IStorageQueryResultBase that the StorageDataSource obtains its items from. Instead of IStorageQueryResultBase, you can also pass one of these string values: Music, Pictures, Videos, Documents.
 * @param {?=} options The set of properties and values to apply to the new StorageDataSource. Properties on this object may include: mode , requestedThumbnailSize , thumbnailOptions , synchronous .
 * 
 */
WinJS.UI.StorageDataSource = function(query, options) {};

/**
 * Draws the thumbnail for the specified item to the specified img element.
 * @param {!WinJS.UI.IItem<T>} item The item to retrieve the thumbnail for.
 * @param {!HTMLImageElement} image The img element that will display the thumbnail.
 * @return {!WinJS.Promise<void>} A Promise that completes when the full-quality thumbnail is visible.
 * 
 */
WinJS.UI.StorageDataSource.prototype.loadThumbnail = function(item, image) {};

/**
 * @constructor
 * @struct
 * Creates a new TabContainer.
 * @param {!HTMLElement} element The DOM element that hosts the TabContainer control.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new control. Each property of the options object corresponds to one of the control's properties.
 * 
 */
WinJS.UI.TabContainer = function(element, options) {};
 /** @type {!HTMLElement} */
WinJS.UI.TabContainer.prototype.childFocus;
 /** @type {number} */
WinJS.UI.TabContainer.prototype.tabIndex;

/**
 * @constructor
 * @struct
 * Initializes a new instance of a TimePicker control.
 * @param {!HTMLElement=} element The DOM element associated with the TimePicker control.
 * @param {?=} options The set of options to be applied initially to the TimePicker control. The options are the following: clock.
 * 
 */
WinJS.UI.TimePicker = function(element, options) {};
 /** @type {string} */
WinJS.UI.TimePicker.prototype.clock;
 /** @type {!Date} */
WinJS.UI.TimePicker.prototype.current;
 /** @type {boolean} */
WinJS.UI.TimePicker.prototype.disabled;
 /** @type {!HTMLElement} */
WinJS.UI.TimePicker.prototype.element;
 /** @type {string} */
WinJS.UI.TimePicker.prototype.hourPattern;
 /** @type {number} */
WinJS.UI.TimePicker.prototype.minuteIncrement;
 /** @type {string} */
WinJS.UI.TimePicker.prototype.minutePattern;
 /** @type {string} */
WinJS.UI.TimePicker.prototype.periodPattern;

/**
 * Occurs when any of the controls are changed by the user.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.TimePicker.prototype.onchange = function(eventInfo) {};

/**
 * Adds an event listener.
 * @param {string} type The type (name) of the event.
 * @param {!Function} listener The function that handles the event.
 * @param {boolean=} capture If true, specifies that capture should be initiated, otherwise false.
 * 
 * @return {void}
 */
WinJS.UI.TimePicker.prototype.addEventListener = function(type, listener, capture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.TimePicker.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.TimePicker.prototype.raiseEvent = function(type, eventProperties) {};

/**
 * Removes a listener for the specified event.
 * @param {string} type The name of the event for which to remove a listener.
 * @param {!Function} listener The listener.
 * @param {?=} useCapture Optional. The same value that was passed to addEventListener for this listener. It may be omitted if it was omitted when calling addEventListener.
 * 
 * @return {void}
 */
WinJS.UI.TimePicker.prototype.removeEventListener = function(type, listener, useCapture) {};

/**
 * @constructor
 * @struct
 * Creates a new ToggleSwitch.
 * @param {!HTMLElement=} element The DOM that hosts the control.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new control. Each property of the options object corresponds to one of the control's properties or events. Event names must begin with "on". For example, to provide a handler for the change event, add a property named "onchange" to the options object and set its value to the event handler.
 * 
 */
WinJS.UI.ToggleSwitch = function(element, options) {};
 /** @type {boolean} */
WinJS.UI.ToggleSwitch.prototype.checked;
 /** @type {boolean} */
WinJS.UI.ToggleSwitch.prototype.disabled;
 /** @type {!HTMLElement} */
WinJS.UI.ToggleSwitch.prototype.element;
 /** @type {string} */
WinJS.UI.ToggleSwitch.prototype.labelOff;
 /** @type {string} */
WinJS.UI.ToggleSwitch.prototype.labelOn;
 /** @type {string} */
WinJS.UI.ToggleSwitch.prototype.title;

/**
 * Occurs when the ToggleSwitch control is flipped to on (checked == true) or off (checked == false).
 * @param {!Event} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.ToggleSwitch.prototype.onchange = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} eventName The name of the event to handle.
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.ToggleSwitch.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.ToggleSwitch.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Handles the specified event.
 * @param {?} event The event.
 * 
 * @return {void}
 */
WinJS.UI.ToggleSwitch.prototype.handleEvent = function(event) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.ToggleSwitch.prototype.raiseEvent = function(type, eventProperties) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} eventName The name of the event that the event handler is registered for.
 * @param {!Function} eventCallback The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.ToggleSwitch.prototype.removeEventListener = function(eventName, eventCallback, useCapture) {};

/**
 * @constructor
 * @struct
 * Creates a new Tooltip.
 * @param {!HTMLElement=} element The DOM element associated that hosts the Tooltip.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new control. Each property of the options object corresponds to one of the control's properties or events. Event names must begin with "on". For example, to provide a handler for the opened event, add a property named "onopened" to the options object and set its value to the event handler.
 * 
 */
WinJS.UI.Tooltip = function(element, options) {};
 /** @type {!HTMLElement} */
WinJS.UI.Tooltip.prototype.contentElement;
 /** @type {!HTMLElement} */
WinJS.UI.Tooltip.prototype.element;
 /** @type {string} */
WinJS.UI.Tooltip.prototype.extraClass;
 /** @type {boolean} */
WinJS.UI.Tooltip.prototype.infotip;
 /** @type {string} */
WinJS.UI.Tooltip.prototype.innerHTML;
 /** @type {string} */
WinJS.UI.Tooltip.prototype.placement;

/**
 * Raised just before the Tooltip is hidden.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.onbeforeclose = function(eventInfo) {};

/**
 * Raised just before the Tooltip appears.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.onbeforeopen = function(eventInfo) {};

/**
 * Raised when the Tooltip is no longer displayed.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.onclosed = function(eventInfo) {};

/**
 * Raised when the Tooltip is shown.
 * @param {!CustomEvent} eventInfo An object that contains information about the event.
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.onopened = function(eventInfo) {};

/**
 * Adds an event handler for the specified event.
 * @param {string} eventName The name of the event to handle.
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Hides the Tooltip.
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.close = function() {};

/**
 * Shows the Tooltip.
 * @param {string=} type A value that specifies when to show the Tooltip. The default value is "mousedown".
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.open = function(type) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} eventName The name of the event that the event handler is registered for.
 * @param {!Function} eventCallback The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.Tooltip.prototype.removeEventListener = function(eventName, eventCallback, useCapture) {};

/**
 * @constructor
 * @struct
 * Initializes a new instance of the ViewBox control.
 * @param {!HTMLElement=} element The DOM element that functions as the scaling box. This element fills 100% of the width and height allotted to it.
 * @param {?=} options The set of options to be applied initially to the ViewBox control. There are currently no options on this control, and any options included in this parameter are ignored.
 * 
 */
WinJS.UI.ViewBox = function(element, options) {};
 /** @type {!HTMLElement} */
WinJS.UI.ViewBox.prototype.element;

/**
 * Adds an event handler for the specified event.
 * @param {string} eventName The name of the event to handle.
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.ViewBox.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Forces the ViewBox to update its layout. Use this function when making the ViewBox visible again after its style.display property had been set to "none".
 * 
 * @return {void}
 */
WinJS.UI.ViewBox.prototype.forceLayout = function() {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} eventName The name of the event that the event handler is registered for.
 * @param {!Function} eventCallback The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.ViewBox.prototype.removeEventListener = function(eventName, eventCallback, useCapture) {};
/**
 * @extends {WinJS.UI.IListDataSource}
 * @record
 * @struct
 */
WinJS.UI.IListGroupDataSource = function() {};
 /** @type {!WinJS.UI.IListDataSource<T>} */
WinJS.UI.IListGroupDataSource.prototype.groups;

/**
 * @constructor
 * @struct
 * Initializes the VirtualizedDataSource base class of a custom data source.
 * @param {!WinJS.UI.IListDataAdapter<T>} listDataAdapter The object that supplies data to the VirtualizedDataSource.
 * @param {?=} options An object that can contain properties that specify additional options for the VirtualizedDataSource. It supports these properties: cacheSize.
 * 
 */
WinJS.UI.VirtualizedDataSource = function(listDataAdapter, options) {};

/**
 * Occurs when the status of the VirtualizedDataSource changes.
 * @param {!CustomEvent} eventInfo An object that contains information about the event. The detail property of this object contains the following sub-properties: status.
 * 
 * @return {void}
 */
WinJS.UI.VirtualizedDataSource.prototype.statuschanged = function(eventInfo) {};

/**
 * Registers an event handler for the specified event.
 * @param {string} eventName The name of the event to handle. See the VirtualizedDataSource object page for a list of events. Note that you drop the "on" when specifying the event name for the addEventListener method. For example, instead of specifying "onstatuschanged", you specify "statuschanged".
 * @param {!Function} eventHandler The event handler function to associate with the event.
 * @param {boolean=} useCapture Set to true to register the event handler for the capturing phase; otherwise, set to false to register the event handler for the bubbling phase.
 * 
 * @return {void}
 */
WinJS.UI.VirtualizedDataSource.prototype.addEventListener = function(eventName, eventHandler, useCapture) {};

/**
 * Raises an event of the specified type and with additional properties.
 * @param {string} type The type (name) of the event.
 * @param {?} eventProperties The set of additional properties to be attached to the event object when the event is raised.
 * @return {boolean} true if preventDefault was called on the event, otherwise false.
 * 
 */
WinJS.UI.VirtualizedDataSource.prototype.dispatchEvent = function(type, eventProperties) {};

/**
 * Removes an event handler that the addEventListener method registered.
 * @param {string} eventName The name of the event that the event handler is registered for. See the VirtualizedDataSource object page for a list of events.
 * @param {!Function} eventCallback The event handler function to remove.
 * @param {boolean=} useCapture Set to true to remove the capturing phase event handler; set to false to remove the bubbling phase event handler.
 * 
 * @return {void}
 */
WinJS.UI.VirtualizedDataSource.prototype.removeEventListener = function(eventName, eventCallback, useCapture) {};

/**
 * Returns a new IListDataSource that adds group information to the items of another IListDataSource.
 * @template T
 * @param {!WinJS.UI.IListDataSource<T>} listDataSource The data source for the individual items to group.
 * @param {!Function} groupKey A callback function that accepts a single argument: an item in the IListDataSource. The function is called for each item in the list and must return the group key for that item as a string.
 * @param {!Function} groupData A callback function that accepts a single argument: an item in the IListDataSource. The function is called on one IListDataSource item for each group and must return an object that represents the header of that group.
 * @param {?=} options An object that can contain properties that specify additional options: groupCountEstimate, batchSize.
 * @return {!WinJS.UI.IListGroupDataSource<T>} An IListGroupDataSource that contains the items in the original data source and provides additional group information in the form of a "groups" property. The "groups" property returns another IListDataSource that enumerates the different groups in the list.
 * 
 */
WinJS.UI.computeDataSourceGroups = function(listDataSource, groupKey, groupData, options) {};

/**
 * Used to disables all Animations Library and ListView animations. Calling this function does not guarantee that the animations will be disabled, as the determination is made based on several factors.
 * 
 * @return {void}
 */
WinJS.UI.disableAnimations = function() {};

/**
 * Used to enable all Animations Library and ListView animations. Calling this function does not guarantee that the animations will be enabled, as the determination is made based on several factors.
 * 
 * @return {void}
 */
WinJS.UI.enableAnimations = function() {};

/**
 * Marks a event handler function as being compatible with declarative processing.
 * @param {?} handler The handler to be marked as compatible with declarative processing.
 * @return {?} The handler, marked as compatible with declarative processing.
 * 
 */
WinJS.UI.eventHandler = function(handler) {};

/**
 * Asynchronously executes a collection of CSS animations on a collection of elements. This is the underlying animation mechanism used by the Animations Library. Apps are encouraged to use the Animations Library to conform with the standard look and feel of the rest of the system, rather than calling this function directly.
 * @param {!HTMLElement} element Element or elements to be animated. This parameter can be expressed in several ways: As the special value "undefined", which means that the animation has no target, As a single object, As a JavaScript array (possibly empty), in which each element of the array can be a single element or a JavaScript array of elements., As a NodeList (for example, the result of querySelectorAll), As an HTMLCollection.
 * @param {?} animation The animation description or an array of animation descriptions to apply to element. An animation description is a JavaScript object with specific properties, listed below. There are two types of animation descriptions: one for keyframe-based animations and one for explicit animations. These types are distinguished by whether the keyframe property has a defined value. The following properties are required for both types of animation descriptions: property (string), delay (number), duration (number), timing (string). If an animation has a keyframe property with a defined, non-null value, then the animation is a keyframe-based animation. A keyframe-based animation description requires the following property in addition to those mentioned above: keyframe (string). If an animation does not have a keyframe property, or if the value of the property is null or undefined, then the animation is an explicit animation. An explicit animation description requires the following properties in addition to the common properties mentioned above: from, to. The values given in the from and to properties must be valid for the CSS property specified by the property property. For example, if the CSS property is "opacity", then the from and to properties must be numbers between 0 and 1 (inclusive).
 * @return {!WinJS.Promise<?>} Returns a Promise object that completes when the CSS animation is complete.
 * 
 */
WinJS.UI.executeAnimation = function(element, animation) {};

/**
 * Asynchronously executes a collection of CSS transitions on a collection of elements. This is the underlying animation mechanism used by the Animations Library. Apps are encouraged to use the Animations Library to conform with the standard look and feel of the rest of the system, rather than calling this function directly.
 * @param {!HTMLElement} element Element or elements on which to perform the transition. This parameter can be expressed in several ways: As the special value "undefined", which means that the transition has no target, As a single object, As a JavaScript array (possibly empty), in which each element of the array can be a single element or a JavaScript array of elements., As a NodeList (for example, the result of querySelectorAll), As an HTMLCollection.
 * @param {?} transition The transition description or an array of transition descriptions to apply to element. A transition description is a JavaScript object with these properties: property (string), delay (number), duration (number), timing (string), from (optional), to. The values given in the from and to properties must be valid for the CSS property specified by the property property. For example, if the CSS property is "opacity", then the from and to properties must be numbers between 0 and 1 (inclusive).
 * @return {!WinJS.Promise<?>} Returns a Promise that completes when the transition is finished.
 * 
 */
WinJS.UI.executeTransition = function(element, transition) {};

/**
 * Retrieves the items in the specified index range.
 * @template U
 * @param {!WinJS.UI.IListDataSource<U>} dataSource The data source that contains the items to retrieve.
 * @param {!Array<!WinJS.UI.ISelectionRange>} ranges An array of ISelectionRange objects that have firstIndex and lastIndex values.
 * @return {!WinJS.Promise<!WinJS.UI.IItem<U>>} A Promise that contains an array of the requested IItem objects.
 * 
 */
WinJS.UI.getItemsFromRanges = function(dataSource, ranges) {};

/**
 * Determines whether the Animations Library and ListView animations will be performed if called.
 * @return {boolean} Returns true if animations will be performed; otherwise false.
 * 
 */
WinJS.UI.isAnimationEnabled = function() {};

/**
 * Applies declarative control binding to all elements, starting at the specified root element.
 * @param {!Element=} rootElement The element at which to start applying the binding. If this parameter is not specified, the binding is applied to the entire document.
 * @param {boolean=} skipRoot If true, the elements to be bound skip the specified root element and include only the children.
 * @return {!WinJS.Promise<?>} A promise that is fulfilled when binding has been applied to all the controls.
 * 
 */
WinJS.UI.processAll = function(rootElement, skipRoot) {};

/**
 * Applies declarative control binding to the specified element.
 * @param {!Element} element The element to bind.
 * @return {!WinJS.Promise<?>} A promise that is fulfilled after the control is activated. The value of the promise is the control that is attached to element.
 * 
 */
WinJS.UI.process = function(element) {};

/**
 * Walks the DOM tree from the given element to the root of the document. Whenever a selector scope is encountered, this method performs a lookup within that scope for the specified selector string. The first matching element is returned.
 * @param {string} selector The selector string.
 * @param {!HTMLElement} element The element to begin walking to the root of the document from.
 * @return {!HTMLElement} The target element, if found.
 * 
 */
WinJS.UI.scopedSelect = function(selector, element) {};

/**
 * Adds the set of declaratively specified options (properties and events) to the specified control. If name of the options property begins with "on", the property value is a function and the control supports addEventListener. setControl calls addEventListener on the control.
 * @param {?} control The control on which the properties and events are to be applied.
 * @param {?=} options The set of options that are specified declaratively.
 * 
 * @return {void}
 */
WinJS.UI.setOptions = function(control, options) {};
/** @const */
WinJS.UI.Fragments = {};

/**
 * Starts loading the fragment at the specified location. The returned promise completes when the fragment is ready to be copied.
 * @param {string} href The URI that contains the fragment to be copied.
 * @return {!WinJS.Promise<?>} A promise that is fulfilled when the fragment has been prepared for copying.
 * 
 */
WinJS.UI.Fragments.cache = function(href) {};

/**
 * Removes any cached information about the specified fragment. This method does not unload any scripts or styles that are referenced by the fragment.
 * @param {string|!HTMLElement} href The URI that contains the fragment to be cleared. If no URI is provided, the entire contents of the cache are cleared.
 * 
 * @return {void}
 */
WinJS.UI.Fragments.clearCache = function(href) {};

/**
 * Loads the contents of the specified URI into the specified element without copying it.
 * @param {string} href The URI that contains the fragment to copy.
 * @param {!HTMLElement=} element Optional. The element to which the fragment is appended.
 * @return {!WinJS.Promise<!HTMLElement>} A promise that is fulfilled when the fragment has been loaded. If a target element is not specified, the copied fragment is the completed value. The element is not added to the cache. See also rendercopy, where the element is added to the cache.
 * 
 */
WinJS.UI.Fragments.render = function(href, element) {};

/**
 * Loads and copies the contents of the specified URI into the specified element.
 * @param {string|!HTMLElement} href The URI that contains the fragment to copy.
 * @param {!HTMLElement=} target The element to which the fragment is appended.
 * @return {!WinJS.Promise<!HTMLElement>} A promise that is fulfilled when the fragment has been loaded. If a target element is not specified, the copied fragment is the completed value. The fragment is added to the cache. See also render, where the element is not added to the cache.
 * 
 */
WinJS.UI.Fragments.renderCopy = function(href, target) {};
/** @const */
WinJS.UI.Pages = {};
/**
 * @record
 * @struct
 */
WinJS.UI.Pages.IPageControlMembers = function() {};

/**
 * Called if any error occurs during the processing of the page.
 * @param {?} err The error that occurred.
 * @return {?} Nothing if the error was handled, or an error promise if the error was not handled.
 * 
 */
WinJS.UI.Pages.IPageControlMembers.prototype.error = function(err) {};

/**
 * Initializes the control before the content of the control is set. Use the processed method for any initialization that should be done after the content of the control has been set.
 * @param {!HTMLElement} element The DOM element that will contain all the content for the page.
 * @param {?} options The options passed to the constructor of the page.
 * @return {?} A promise that is fulfilled when initialization is complete, if asynchronous processing is necessary. If not, returns nothing.
 * 
 */
WinJS.UI.Pages.IPageControlMembers.prototype.init = function(element, options) {};

/**
 * Creates DOM objects from the content in the specified URI. This method is called after the PageControl is defined and before the init method is called.
 * @param {string} uri The URI from which to create DOM objects.
 * @return {?} A promise whose fulfilled value is the set of unparented DOM objects.
 * 
 */
WinJS.UI.Pages.IPageControlMembers.prototype.load = function(uri) {};

/**
 * Initializes the control after the content of the control is set.
 * @param {!HTMLElement} element The DOM element that will contain all the content for the page.
 * @param {?} options The options that are to be passed to the constructor of the page.
 * @return {?} A promise that is fulfilled when initialization is complete, if asynchronous processing is necessary. If not, returns nothing.
 * 
 */
WinJS.UI.Pages.IPageControlMembers.prototype.processed = function(element, options) {};

/**
 * Called after all initialization and rendering is complete. At this time, the element is ready for use.
 * @param {!HTMLElement} element The DOM element that contains all the content for the page.
 * @param {?} options An object that contains one or more property/value pairs to apply to the PageControl. How these property/value pairs are used (or not used) depends on the implementation of that particular PageControl.
 * @return {?} A promise that is fulfilled when the element is ready for use, if asynchronous processing is necessary. If not, returns nothing.
 * 
 */
WinJS.UI.Pages.IPageControlMembers.prototype.ready = function(element, options) {};

/**
 * Takes the elements returned by the load method and attaches them to the specified element.
 * @param {!HTMLElement} element The DOM element to which the loadResult elements are appended.
 * @param {?} options An object that contains one or more property/value pairs to apply to the PageControl. How these property/value pairs are used (or not used) depends on the implementation of that particular PageControl.
 * @param {!WinJS.Promise<?>} loadResult A Promise that contains the elements returned from the load method.
 * 
 * @return {void}
 */
WinJS.UI.Pages.IPageControlMembers.prototype.render = function(element, options, loadResult) {};

/**
 * Creates a new PageControl from the specified URI that contains the specified members. Multiple calls to this method for the same URI are allowed, and all members will be merged.
 * @param {string} uri The URI for the content that defines the page.
 * @param {!WinJS.UI.Pages.IPageControlMembers} members An object that defines the members that the control will have.
 * @return {function(!HTMLElement, ?, function(?): void, !WinJS.Promise<?>): void} A constructor function that creates the PageControl.
 * 
 */
WinJS.UI.Pages.define = function(uri, members) {};

/**
 * Gets an already-defined page control for the specified URI, or creates a new one.
 * @param {string} uri The URI for the content that defines the page.
 * @return {function(!HTMLElement, ?, function(?): void, !WinJS.Promise<?>): void} A constructor function that creates the page.
 * 
 */
WinJS.UI.Pages.get = function(uri) {};

/**
 * Creates a PageControl from the specified URI and inserts it inside the specified element.
 * @param {string} uri The URI for the content that defines the page.
 * @param {!HTMLElement=} element The DOM element to which the PageControl is appended.
 * @param {?=} options An object that contains one or more property/value pairs to apply to the new PageControl. How these property/value pairs are used (or not used) depends on the implementation of that particular PageControl.
 * @param {!WinJS.Promise<?>=} parentedPromise A Promise that is fulfilled when the new PageControl is done rendering and its contents becomes the child of element.
 * @return {!WinJS.Promise<?>} A promise that is fulfilled when rendering is complete, if asynchronous processing is necessary. If not, returns nothing.
 * 
 */
WinJS.UI.Pages.render = function(uri, element, options, parentedPromise) {};
/** @const */
WinJS.UI.TrackTabBehavior = {};

/**
 * Sets the tab order for the specified element within its container.
 * @param {!HTMLElement} element The element to update.
 * @param {number} tabIndex The index value of the element within its container.
 * 
 * @return {void}
 */
WinJS.UI.TrackTabBehavior.attach = function(element, tabIndex) {};

/**
 * Removes the tab order information from the specified element.
 * @param {!HTMLElement} element The element to remove tab information from.
 * 
 * @return {void}
 */
WinJS.UI.TrackTabBehavior.detatch = function(element) {};
/** @const */
WinJS.Utilities = {};

/** @const */
WinJS.Utilities.Key = {};
/** @const {number} */
WinJS.Utilities.Key.backspace;
/** @const {number} */
WinJS.Utilities.Key.tab;
/** @const {number} */
WinJS.Utilities.Key.enter;
/** @const {number} */
WinJS.Utilities.Key.shift;
/** @const {number} */
WinJS.Utilities.Key.ctrl;
/** @const {number} */
WinJS.Utilities.Key.alt;
/** @const {number} */
WinJS.Utilities.Key.pause;
/** @const {number} */
WinJS.Utilities.Key.capsLock;
/** @const {number} */
WinJS.Utilities.Key.escape;
/** @const {number} */
WinJS.Utilities.Key.space;
/** @const {number} */
WinJS.Utilities.Key.pageUp;
/** @const {number} */
WinJS.Utilities.Key.pageDown;
/** @const {number} */
WinJS.Utilities.Key.end;
/** @const {number} */
WinJS.Utilities.Key.home;
/** @const {number} */
WinJS.Utilities.Key.leftArrow;
/** @const {number} */
WinJS.Utilities.Key.upArrow;
/** @const {number} */
WinJS.Utilities.Key.rightArrow;
/** @const {number} */
WinJS.Utilities.Key.downArrow;
/** @const {number} */
WinJS.Utilities.Key.insert;
/** @const {number} */
WinJS.Utilities.Key.deleteKey;
/** @const {number} */
WinJS.Utilities.Key.num0;
/** @const {number} */
WinJS.Utilities.Key.num1;
/** @const {number} */
WinJS.Utilities.Key.num2;
/** @const {number} */
WinJS.Utilities.Key.num3;
/** @const {number} */
WinJS.Utilities.Key.num4;
/** @const {number} */
WinJS.Utilities.Key.num5;
/** @const {number} */
WinJS.Utilities.Key.num6;
/** @const {number} */
WinJS.Utilities.Key.num7;
/** @const {number} */
WinJS.Utilities.Key.num8;
/** @const {number} */
WinJS.Utilities.Key.num9;
/** @const {number} */
WinJS.Utilities.Key.a;
/** @const {number} */
WinJS.Utilities.Key.b;
/** @const {number} */
WinJS.Utilities.Key.c;
/** @const {number} */
WinJS.Utilities.Key.d;
/** @const {number} */
WinJS.Utilities.Key.e;
/** @const {number} */
WinJS.Utilities.Key.f;
/** @const {number} */
WinJS.Utilities.Key.g;
/** @const {number} */
WinJS.Utilities.Key.h;
/** @const {number} */
WinJS.Utilities.Key.i;
/** @const {number} */
WinJS.Utilities.Key.j;
/** @const {number} */
WinJS.Utilities.Key.k;
/** @const {number} */
WinJS.Utilities.Key.l;
/** @const {number} */
WinJS.Utilities.Key.m;
/** @const {number} */
WinJS.Utilities.Key.n;
/** @const {number} */
WinJS.Utilities.Key.o;
/** @const {number} */
WinJS.Utilities.Key.p;
/** @const {number} */
WinJS.Utilities.Key.q;
/** @const {number} */
WinJS.Utilities.Key.r;
/** @const {number} */
WinJS.Utilities.Key.s;
/** @const {number} */
WinJS.Utilities.Key.t;
/** @const {number} */
WinJS.Utilities.Key.u;
/** @const {number} */
WinJS.Utilities.Key.v;
/** @const {number} */
WinJS.Utilities.Key.w;
/** @const {number} */
WinJS.Utilities.Key.x;
/** @const {number} */
WinJS.Utilities.Key.y;
/** @const {number} */
WinJS.Utilities.Key.z;
/** @const {number} */
WinJS.Utilities.Key.leftWindows;
/** @const {number} */
WinJS.Utilities.Key.rightWindows;
/** @const {number} */
WinJS.Utilities.Key.menu;
/** @const {number} */
WinJS.Utilities.Key.numPad0;
/** @const {number} */
WinJS.Utilities.Key.numPad1;
/** @const {number} */
WinJS.Utilities.Key.numPad2;
/** @const {number} */
WinJS.Utilities.Key.numPad3;
/** @const {number} */
WinJS.Utilities.Key.numPad4;
/** @const {number} */
WinJS.Utilities.Key.numPad5;
/** @const {number} */
WinJS.Utilities.Key.numPad6;
/** @const {number} */
WinJS.Utilities.Key.numPad7;
/** @const {number} */
WinJS.Utilities.Key.numPad8;
/** @const {number} */
WinJS.Utilities.Key.numPad9;
/** @const {number} */
WinJS.Utilities.Key.multiply;
/** @const {number} */
WinJS.Utilities.Key.add;
/** @const {number} */
WinJS.Utilities.Key.subtract;
/** @const {number} */
WinJS.Utilities.Key.decimalPoint;
/** @const {number} */
WinJS.Utilities.Key.divide;
/** @const {number} */
WinJS.Utilities.Key.F1;
/** @const {number} */
WinJS.Utilities.Key.F2;
/** @const {number} */
WinJS.Utilities.Key.F3;
/** @const {number} */
WinJS.Utilities.Key.F4;
/** @const {number} */
WinJS.Utilities.Key.F5;
/** @const {number} */
WinJS.Utilities.Key.F6;
/** @const {number} */
WinJS.Utilities.Key.F7;
/** @const {number} */
WinJS.Utilities.Key.F8;
/** @const {number} */
WinJS.Utilities.Key.F9;
/** @const {number} */
WinJS.Utilities.Key.F10;
/** @const {number} */
WinJS.Utilities.Key.F11;
/** @const {number} */
WinJS.Utilities.Key.F12;
/** @const {number} */
WinJS.Utilities.Key.numLock;
/** @const {number} */
WinJS.Utilities.Key.scrollLock;
/** @const {number} */
WinJS.Utilities.Key.browserBack;
/** @const {number} */
WinJS.Utilities.Key.browserForward;
/** @const {number} */
WinJS.Utilities.Key.semicolon;
/** @const {number} */
WinJS.Utilities.Key.equal;
/** @const {number} */
WinJS.Utilities.Key.comma;
/** @const {number} */
WinJS.Utilities.Key.dash;
/** @const {number} */
WinJS.Utilities.Key.period;
/** @const {number} */
WinJS.Utilities.Key.forwardSlash;
/** @const {number} */
WinJS.Utilities.Key.graveAccent;
/** @const {number} */
WinJS.Utilities.Key.openBracket;
/** @const {number} */
WinJS.Utilities.Key.backSlash;
/** @const {number} */
WinJS.Utilities.Key.closeBracket;
/** @const {number} */
WinJS.Utilities.Key.singleQuote;
 /** @type {{addEventListener: function(string, !Function, boolean): void, dispatchEvent: function(string, ?): boolean, removeEventListener: function(string, !Function, boolean): void}} */
WinJS.Utilities.eventMixin;
/**
 * @record
 * @struct
 */
WinJS.Utilities.QueryCollection = function() {};

/**
 * Adds the specified class to all the elements in the collection.
 * @param {string} name The name of the class to add.
 * @return {?} This QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.addClass = function(name) {};

/**
 * Creates a QueryCollection that contains the children of the specified parent element.
 * @param {!HTMLElement} element The parent element.
 * @return {?} The QueryCollection that contains the children of the element.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.children = function(element) {};

/**
 * Clears the specified style property for all the elements in the collection.
 * @param {string} name The name of the style property to be cleared.
 * @return {?} This QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.clearStyle = function(name) {};

/**
 * Creates controls that are attached to the elements in this QueryCollection, if the ctor parameter is a function, or configures the controls that are attached to the elements in this QueryCollection, if the ctor parameter is an object.
 * @param {?} ctor If this parameter is a function, it is a constructor function that is used to create controls to attach to the elements. If it is an object, it is the set of options passed to the controls.
 * @param {?=} options The options passed to the newly-created controls.
 * @return {?} This QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.control = function(ctor, options) {};

/**
 * Performs an action on each item in the QueryCollection.
 * @param {function(T, number, !Array<T>): void} callbackFn The action to perform on each item.
 * @param {?=} thisArg The argument to bind to callbackFn.
 * @return {?} The QueryCollection.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.forEach = function(callbackFn, thisArg) {};

/**
 * Gets an item from the QueryCollection.
 * @param {number} index The index of the item to return.
 * @return {T} A single item from the collection.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.get = function(index) {};

/**
 * Gets an attribute value from the first element in the collection.
 * @param {string} name The name of the attribute.
 * @return {?} The value of the attribute.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.getAttribute = function(name) {};

/**
 * Determines whether the specified class exists on the first element of the collection.
 * @param {string} name The name of the class.
 * @return {boolean} true if the element has the specified class; otherwise, false.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.hasClass = function(name) {};

/**
 * Looks up an element by ID and wraps the result in a QueryCollection.
 * @param {string} id The ID of the element.
 * @return {?} A QueryCollection that contains the element, if it is found.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.id = function(id) {};

/**
 * Adds a set of items to this QueryCollection.
 * Adds a set of items to this QueryCollection.
 * Adds a set of items to this QueryCollection.
 * @param {T|!Array<T>|!HTMLCollection} items The items to add to the QueryCollection. This may be an array-like object, a document fragment, or a single item.
 * 
 * @return {void}
 */
WinJS.Utilities.QueryCollection.prototype.include = function(items) {};

/**
 * Registers the listener for the specified event on all the elements in the collection.
 * @param {string} eventType The name of the event.
 * @param {!Function} listener The event handler function to be called when the event occurs.
 * @param {boolean=} capture true if capture == true is to be passed to addEventListener; otherwise, false.
 * 
 * @return {void}
 */
WinJS.Utilities.QueryCollection.prototype.listen = function(eventType, listener, capture) {};

/**
 * Executes a query selector on all the elements in the collection and aggregates the result into a QueryCollection.
 * @param {?} query The query selector string.
 * @return {?} A QueryCollection object containing the aggregate results of executing the query on all the elements in the collection.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.query = function(query) {};

/**
 * Removes the specified class from all the elements in the collection.
 * @param {string} name The name of the class to be removed.
 * @return {?} his QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.removeClass = function(name) {};

/**
 * Unregisters the listener for the specified event on all the elements in the collection.
 * @param {string} eventType The name of the event.
 * @param {!Function} listener The event handler function.
 * @param {boolean=} capture true if capture == true; otherwise, false.
 * @return {?} This QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.removeEventListener = function(eventType, listener, capture) {};

/**
 * Sets an attribute value on all the items in the collection.
 * @param {string} name The name of the attribute to be set.
 * @param {?} value The value of the attribute to be set.
 * @return {?} This QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.setAttribute = function(name, value) {};

/**
 * Sets the specified style property for all the elements in the collection.
 * @param {string} name The name of the style property.
 * @param {?} value The value for the property.
 * @return {?} This QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.setStyle = function(name, value) {};

/**
 * Renders a template that is bound to the given data and parented to the elements included in the QueryCollection. If the QueryCollection contains multiple elements, the template is rendered multiple times, once at each element in the QueryCollection per item of data passed.
 * @param {!HTMLElement} templateElement The DOM element to which the template control is attached.
 * @param {?} data The data to render. If the data is an array (or any other object that has a forEach method) then the template is rendered multiple times, once for each item in the collection.
 * @param {!Function=} renderDonePromiseCallback If supplied, this function is called each time the template gets rendered, and is passed a promise that is fulfilled when the template rendering is complete.
 * @return {?} The QueryCollection.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.template = function(templateElement, data, renderDonePromiseCallback) {};

/**
 * Toggles (adds or removes) the specified class on all the elements in the collection. If the class is present, it is removed; if it is absent, it is added.
 * @param {string} name The name of the class to be toggled.
 * @return {?} This QueryCollection object.
 * 
 */
WinJS.Utilities.QueryCollection.prototype.toggleClass = function(name) {};
 /** @type {function(new: (?<T>), !Array<T>): ?} */
WinJS.Utilities.QueryCollection;

/**
 * Adds the specified class to the specified element.
 * @template T
 * @param {T} e The element to which to add the class.
 * @param {string} name The name of the class to add.
 * @return {T} The element.
 * 
 */
WinJS.Utilities.addClass = function(e, name) {};

/**
 * Gets a collection of elements that are the direct children of the specified element.
 * @param {!HTMLElement} element The parent element.
 * @return {?<!HTMLElement>} The collection of children of the element.
 * 
 */
WinJS.Utilities.children = function(element) {};

/**
 * Converts a CSS positioning string for the specified element to pixels.
 * @param {!HTMLElement} element The element.
 * @param {string} value The CSS positioning string.
 * @return {number} The number of pixels.
 * 
 */
WinJS.Utilities.convertToPixels = function(element, value) {};

/**
 * Creates an object that has one event for each name passed to the function.
 * @param {...string} events A variable list of property names.
 * @return {?} The object with the specified properties. The names of the properties are prefixed with 'on'.
 * 
 */
WinJS.Utilities.createEventProperties = function(events) {};

/**
 * Gets the data value associated with the specified element.
 * @param {!HTMLElement} element The element.
 * @return {?} The value associated with the element.
 * 
 */
WinJS.Utilities.data = function(element) {};

/**
 * Removes all the child nodes from the specified element.
 * @template T
 * @param {T} element The element.
 * @return {T} The element.
 * 
 */
WinJS.Utilities.empty = function(element) {};

/**
 * Determines whether the specified event occurred within the specified element.
 * @param {!HTMLElement} element The element.
 * @param {!Event} event The event.
 * @return {boolean} true if the event occurred within the element; otherwise, false.
 * 
 */
WinJS.Utilities.eventWithinElement = function(element, event) {};

/**
 * Adds tags and type to a logging message.
 * @param {string} message The message to be formatted.
 * @param {string} tag The tag(s) to be applied to the message. Multiple tags should be separated by spaces.
 * @param {string} type The type of the message.
 * @return {string} The formatted message.
 * 
 */
WinJS.Utilities.formatLog = function(message, tag, type) {};

/**
 * Gets the height of the content of the specified element. The content height does not include borders or padding.
 * @param {!HTMLElement} element The element.
 * @return {number} The content height of the element.
 * 
 */
WinJS.Utilities.getContentHeight = function(element) {};

/**
 * Gets the width of the content of the specified element. The content width does not include borders or padding.
 * @param {!HTMLElement} element The element.
 * @return {number} The content width of the element.
 * 
 */
WinJS.Utilities.getContentWidth = function(element) {};

/**
 * Gets the leaf-level type or namespace specified by the name parameter.
 * @param {string} name The name of the member.
 * @param {?=} root The root to start in. Defaults to the global object.
 * @return {?} The leaf-level type or namespace in the specified parent namespace.
 * 
 */
WinJS.Utilities.getMember = function(name, root) {};

/**
 * Gets the position of the specified element.
 * @param {!HTMLElement} element The element.
 * @return {!WinJS.Utilities.IPosition} An object that contains the left, top, width and height properties of the element.
 * 
 */
WinJS.Utilities.getPosition = function(element) {};

/**
 * Gets the left coordinate of the specified element relative to the specified parent.
 * @param {!HTMLElement=} element The element.
 * @param {!HTMLElement=} parent The parent element.
 * @return {number} The relative left coordinate.
 * 
 */
WinJS.Utilities.getRelativeLeft = function(element, parent) {};

/**
 * Gets the top coordinate of the element relative to the specified parent.
 * @param {!HTMLElement=} element The element.
 * @param {!HTMLElement=} parent The parent element.
 * @return {number} The relative top coordinate.
 * 
 */
WinJS.Utilities.getRelativeTop = function(element, parent) {};

/**
 * Gets the height of the element, including its margins.
 * @param {!HTMLElement} element The element.
 * @return {number} The height of the element including margins.
 * 
 */
WinJS.Utilities.getTotalHeight = function(element) {};

/**
 * Gets the width of the element, including margins.
 * @param {!HTMLElement} element The element.
 * @return {number} The width of the element including margins.
 * 
 */
WinJS.Utilities.getTotalWidth = function(element) {};

/**
 * Determines whether the specified element has the specified class.
 * @param {!HTMLElement} e The element.
 * @param {string} name The name of the class.
 * @return {boolean} true if the element has the class, otherwise false.
 * 
 */
WinJS.Utilities.hasClass = function(e, name) {};

/**
 * Returns a collection with zero or one elements matching the specified id.
 * @param {string} id The ID of the element (or elements).
 * @return {?<!HTMLElement>} A collection of elements whose id matches the id parameter.
 * 
 */
WinJS.Utilities.id = function(id) {};

/**
 * Calls insertAdjacentHTML on the specified element.
 * @param {!HTMLElement} element The element on which insertAdjacentHTML is to be called.
 * @param {string} position The position relative to the element at which to insert the HTML. Possible values are: beforebegin, afterbegin, beforeend, afterend.
 * @param {string} text The text to insert.
 * 
 * @return {void}
 */
WinJS.Utilities.insertAdjacentHTML = function(element, position, text) {};

/**
 * Calls insertAdjacentHTML on the specified element in the context of MSApp.execUnsafeLocalFunction.
 * @param {!HTMLElement} element The element on which insertAdjacentHTML is to be called.
 * @param {string} position The position relative to the element at which to insert the HTML. Possible values are: beforebegin, afterbegin, beforeend, afterend.
 * @param {string} text Value to be provided to insertAdjacentHTML.
 * 
 * @return {void}
 */
WinJS.Utilities.insertAdjacentHTMLUnsafe = function(element, position, text) {};

/**
 * Marks a function as being compatible with declarative processing. Declarative processing is performed by WinJS.UI.processAll or WinJS.Binding.processAll.
 * @template U
 * @param {U} func The function to be marked as compatible with declarative processing.
 * @return {U} The input function, marked as compatible with declarative processing.
 * 
 */
WinJS.Utilities.markSupportedForProcessing = function(func) {};

/**
 * Returns a QueryCollection with zero or one elements matching the specified selector query.
 * @param {?} query The CSS selector to use. See Selectors for more information.
 * @param {!HTMLElement=} element Optional. The root element at which to start the query. If this parameter is omitted, the scope of the query is the entire document.
 * @return {?<!HTMLElement>} A QueryCollection with zero or one elements matching the specified selector query.
 * 
 */
WinJS.Utilities.query = function(query, element) {};

/**
 * Ensures that the specified function executes only after the DOMContentLoaded event has fired for the current page. The DOMContentLoaded event occurs after the page has been parsed but before all the resources are loaded.
 * @param {!Function=} callback A function that executes after the DOMContentLoaded event has occurred.
 * @param {boolean=} async If true, the callback should be executed asynchronously.
 * @return {!WinJS.Promise<?>} A promise that completes after the DOMContentLoaded event has occurred.
 * 
 */
WinJS.Utilities.ready = function(callback, async) {};

/**
 * Removes the specified class from the specified element.
 * @template T
 * @param {T} e The element from which to remove the class.
 * @param {string} name The name of the class to remove.
 * @return {T} The element.
 * 
 */
WinJS.Utilities.removeClass = function(e, name) {};

/**
 * Asserts that the value is compatible with declarative processing. Declarative processing is performed by WinJS.UI.processAll or WinJS.Binding.processAll. If the value is not compatible, and strictProcessing is on, an exception is thrown. All functions that have been declared using WinJS.Class.define, WinJS.Class.derive, WinJS.UI.Pages.define, or WinJS.Binding.converter are automatically marked as supported for declarative processing. Any other function that you use from a declarative context (that is, a context in which an HTML element has a data-win-control or data-win-options attribute) must be marked manually by calling this function. When you mark a function as supported for declarative processing, you are guaranteeing that the code in the function is secure from injection of third-party content.
 * @template T
 * @param {T} value The value to be tested for compatibility with declarative processing. If the value is a function it must be marked with a property supportedForProcessing with a value of true when strictProcessing is on. For more information, see WinJS.Utilities.markSupportedForProcessing.
 * @return {T} The input value.
 * 
 */
WinJS.Utilities.requireSupportedForProcessing = function(value) {};

/**
 * Sets the innerHTML property of the specified element to the specified text.
 * @param {!HTMLElement} element The element on which the innerHTML property is to be set.
 * @param {string} text The value to be set to the innerHTML property.
 * 
 * @return {void}
 */
WinJS.Utilities.setInnerHTML = function(element, text) {};

/**
 * Sets the innerHTML property of the specified element to the specified text.
 * @param {!HTMLElement} element The element on which the innerHTML property is to be set.
 * @param {string} text The value to be set to the innerHTML property.
 * 
 * @return {void}
 */
WinJS.Utilities.setInnerHTMLUnsafe = function(element, text) {};

/**
 * Sets the outerHTML property of the specified element to the specified text.
 * @param {!HTMLElement} element The element on which the outerHTML property is to be set.
 * @param {string} text The value to be set to the outerHTML property.
 * 
 * @return {void}
 */
WinJS.Utilities.setOuterHTML = function(element, text) {};

/**
 * Sets the outerHTML property of the specified element to the specified text in the context of MSApp.execUnsafeLocalFunction.
 * @param {!HTMLElement} element The element on which the outerHTML property is to be set.
 * @param {string} text The value to be set to the outerHTML property.
 * 
 * @return {void}
 */
WinJS.Utilities.setOuterHTMLUnsafe = function(element, text) {};

/**
 * Configures a logger that writes messages containing the specified tags to the JavaScript console.
 * @param {!WinJS.Utilities.ILogOptions|string=} options_or_tags The tags for messages to log. Multiple tags should be separated by spaces. May contain type, tags, excludeTags and action properties.
 * 
 * @return {void}
 */
WinJS.Utilities.startLog = function(options_or_tags) {};

/**
 * Removes the WinJS logger that had previously been set up.
 * 
 * @return {void}
 */
WinJS.Utilities.stopLog = function() {};

/**
 * Toggles (adds or removes) the specified class on the specified element. If the class is present, it is removed; if it is absent, it is added.
 * @template T
 * @param {T} e The element on which to toggle the class.
 * @param {string} name The name of the class to toggle.
 * @return {T} The element.
 * 
 */
WinJS.Utilities.toggleClass = function(e, name) {};
 /** @type {boolean} */
WinJS.Utilities.hasWinRT;
/**
 * @record
 * @struct
 */
WinJS.Utilities.ILogOptions = function() {};
 /** @type {string} */
WinJS.Utilities.ILogOptions.prototype.type;
 /** @type {function(string, string, string): void} */
WinJS.Utilities.ILogOptions.prototype.action;
 /** @type {string} */
WinJS.Utilities.ILogOptions.prototype.excludeTags;
 /** @type {string} */
WinJS.Utilities.ILogOptions.prototype.tags;
/**
 * @record
 * @struct
 */
WinJS.Utilities.IPosition = function() {};
 /** @type {number} */
WinJS.Utilities.IPosition.prototype.left;
 /** @type {number} */
WinJS.Utilities.IPosition.prototype.top;
 /** @type {number} */
WinJS.Utilities.IPosition.prototype.width;
 /** @type {number} */
WinJS.Utilities.IPosition.prototype.height;
