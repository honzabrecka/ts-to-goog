/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/payment/index.d.ts:
/**
 * @record
 * @struct
 */
function Fns() {}

/**
 * Validates a card number:
 * * Validates numbers
 * * Validates Luhn algorithm
 * * Validates length
 * @param {string} cardNumber
 * @return {boolean}
 */
Fns.prototype.validateCardNumber = function(cardNumber) {};

/**
 * Validates a card expiry:
 * * Validates numbers
 * * Validates in the future
 * * Supports year shorthand
 * * Supports formatted as formatCardExpiry input value
 * @param {string} monthYear
 * @param {string=} year
 * @return {boolean}
 */
Fns.prototype.validateCardExpiry = function(monthYear, year) {};

/**
 * Validates a card CVC:
 * * Validates number
 * * Validates length to 4
 * @param {string} cvc
 * @param {string=} type
 * @return {boolean}
 */
Fns.prototype.validateCardCVC = function(cvc, type) {};

/**
 * Returns a card type. Either:
 * * visa
 * * mastercard
 * * discover
 * * amex
 * * jcb
 * * dinersclub
 * * maestro
 * * laser
 * * unionpay
 * * elo
 * 
 * The function will return null if the card type can't be determined.
 * @param {string} cardNumber
 * @return {string}
 */
Fns.prototype.cardType = function(cardNumber) {};

/**
 * Parses a credit card expiry in the form of MM/YYYY, returning an object containing the `month` and `year`.
 * Shorthand years, such as `13` are also supported (and converted into the longhand, e.g. `2013`).
 * @param {(string|!HTMLInputElement)} monthYear
 * @return {?}
 */
Fns.prototype.cardExpiryVal = function(monthYear) {};
/**
 * @record
 * @struct
 */
function MonthYear() {}
 /** @type {number} */
MonthYear.prototype.month;
 /** @type {number} */
MonthYear.prototype.year;
 /** @type {{formatCardNumber: function(!HTMLInputElement): !HTMLInputElement, formatCardExpiry: function(!HTMLInputElement): !HTMLInputElement, formatCardCVC: function(!HTMLInputElement): !HTMLInputElement, restrictNumeric: function(!HTMLInputElement): !HTMLInputElement, fns: ?}} */
var Payment;

/* TODO: ExportAssignment in  */
