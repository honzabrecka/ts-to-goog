/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/vinyl/index.d.ts:

/* TODO: ImportDeclaration in  */
/**
 * @record
 * @struct
 */
function ConstructorOptions() {}
 /** @type {string} */
ConstructorOptions.prototype.cwd;
 /** @type {string} */
ConstructorOptions.prototype.base;
 /** @type {string} */
ConstructorOptions.prototype.path;
 /** @type {!Array<string>} */
ConstructorOptions.prototype.history;
 /** @type {!Stats} */
ConstructorOptions.prototype.stat;
 /** @type {(?|!NodeJS.ReadableStream)} */
ConstructorOptions.prototype.contents;

/* TODO: IndexSignature:  */
/**
 * @record
 * @struct
 */
function FileConstructor() {}

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */
 /** @type {?} */
FileConstructor.prototype.prototype;

/**
 * Checks if a given object is a vinyl file.
 * @param {?} obj
 * @return {boolean}
 */
FileConstructor.prototype.isVinyl = function(obj) {};

/**
 * Checks if a property is not managed internally.
 * @param {string} name
 * @return {boolean}
 */
FileConstructor.prototype.isCustomProp = function(name) {};

/* TODO: ExportAssignment in  */
 /** @type {?} */
var File;
 /** @type {(?|!NodeJS.ReadableStream)} */
File.prototype.contents;
 /** @type {string} */
File.prototype.cwd;
 /** @type {string} */
File.prototype.base;
 /** @type {string} */
File.prototype.path;
 /** @type {!ReadonlyArray<string>} */
File.prototype.history;
 /** @type {string} */
File.prototype.relative;
 /** @type {string} */
File.prototype.dirname;
 /** @type {string} */
File.prototype.basename;
 /** @type {string} */
File.prototype.stem;
 /** @type {string} */
File.prototype.extname;
 /** @type {string} */
File.prototype.symlink;
 /** @type {!Stats} */
File.prototype.stat;

/* TODO: IndexSignature:  */

/**
 * Returns `true` if the file contents are a `Buffer`, otherwise `false`.
 * @return {boolean}
 */
File.prototype.isBuffer = function() {};

/**
 * Returns `true` if the file contents are a `Stream`, otherwise `false`.
 * @return {boolean}
 */
File.prototype.isStream = function() {};

/**
 * Returns `true` if the file contents are `null`, otherwise `false`.
 * @return {boolean}
 */
File.prototype.isNull = function() {};

/**
 * Returns `true` if the file represents a directory, otherwise `false`.
 * 
 * A file is considered a directory when:
 * 
 * - `file.isNull()` is `true`
 * - `file.stat` is an object
 * - `file.stat.isDirectory()` returns `true`
 * 
 * When constructing a Vinyl object, pass in a valid `fs.Stats` object via `options.stat`.
 * If you are mocking the `fs.Stats` object, you may need to stub the `isDirectory()` method.
 * @return {boolean}
 */
File.prototype.isDirectory = function() {};

/**
 * Returns `true` if the file represents a symbolic link, otherwise `false`.
 * 
 * A file is considered symbolic when:
 * 
 * - `file.isNull()` is `true`
 * - `file.stat` is an object
 * - `file.stat.isSymbolicLink()` returns `true`
 * 
 * When constructing a Vinyl object, pass in a valid `fs.Stats` object via `options.stat`.
 * If you are mocking the `fs.Stats` object, you may need to stub the `isSymbolicLink()` method.
 * @return {boolean}
 */
File.prototype.isSymbolic = function() {};

/**
 * Returns a new Vinyl object with all attributes cloned.
 * 
 * __By default custom attributes are cloned deeply.__
 * 
 * If `options` or `options.deep` is `false`, custom attributes will not be cloned deeply.
 * 
 * If `file.contents` is a `Buffer` and `options.contents` is `false`, the `Buffer` reference
 * will be reused instead of copied.
 * @param {(boolean|?)=} opts
 * @return {File}
 */
File.prototype.clone = function(opts) {};

/**
 * Returns a formatted-string interpretation of the Vinyl object.
 * Automatically called by node's `console.log`.
 * @return {string}
 */
File.prototype.inspect = function() {};

/**
 * @deprecated This method was removed in v2.0.
 * If file.contents is a Buffer, it will write it to the stream.
 * If file.contents is a Stream, it will pipe it to the stream.
 * If file.contents is null, it will do nothing.
 * @template T
 * @param {?} stream
 * @param {?=} opts
 * @return {?}
 */
File.prototype.pipe = function(stream, opts) {};
/**
 * @record
 * @struct
 */
function BufferFile() {}
 /** @type {?} */
BufferFile.prototype.contents;

/**
 * @return {boolean}
 */
BufferFile.prototype.isStream = function() {};

/**
 * @return {boolean}
 */
BufferFile.prototype.isBuffer = function() {};

/**
 * @return {boolean}
 */
BufferFile.prototype.isNull = function() {};

/**
 * @return {boolean}
 */
BufferFile.prototype.isDirectory = function() {};

/**
 * @return {boolean}
 */
BufferFile.prototype.isSymbolic = function() {};
/**
 * @record
 * @struct
 */
function StreamFile() {}
 /** @type {!NodeJS.ReadableStream} */
StreamFile.prototype.contents;

/**
 * @return {boolean}
 */
StreamFile.prototype.isStream = function() {};

/**
 * @return {boolean}
 */
StreamFile.prototype.isBuffer = function() {};

/**
 * @return {boolean}
 */
StreamFile.prototype.isNull = function() {};

/**
 * @return {boolean}
 */
StreamFile.prototype.isDirectory = function() {};

/**
 * @return {boolean}
 */
StreamFile.prototype.isSymbolic = function() {};
/**
 * @record
 * @struct
 */
function NullFile() {}
 /** @type {null} */
NullFile.prototype.contents;

/**
 * @return {boolean}
 */
NullFile.prototype.isStream = function() {};

/**
 * @return {boolean}
 */
NullFile.prototype.isBuffer = function() {};

/**
 * @return {boolean}
 */
NullFile.prototype.isNull = function() {};

/**
 * @return {boolean}
 */
NullFile.prototype.isDirectory = function() {};

/**
 * @return {boolean}
 */
NullFile.prototype.isSymbolic = function() {};
/**
 * @extends {NullFile}
 * @record
 * @struct
 */
function DirectoryFile() {}

/**
 * @return {boolean}
 */
DirectoryFile.prototype.isDirectory = function() {};

/**
 * @return {boolean}
 */
DirectoryFile.prototype.isSymbolic = function() {};
/**
 * @extends {NullFile}
 * @record
 * @struct
 */
function SymbolicFile() {}

/**
 * @return {boolean}
 */
SymbolicFile.prototype.isDirectory = function() {};

/**
 * @return {boolean}
 */
SymbolicFile.prototype.isSymbolic = function() {};
