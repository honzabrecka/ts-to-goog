/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jquery.mmenu/index.d.ts:
/** @const */
var JQueryMmenu = {};
/**
 * @record
 * @struct
 */
JQueryMmenu.NavbarOptions = function() {};
 /** @type {boolean} */
JQueryMmenu.NavbarOptions.prototype.add;
 /** @type {string} */
JQueryMmenu.NavbarOptions.prototype.title;
 /** @type {string} */
JQueryMmenu.NavbarOptions.prototype.titleLink;
/**
 * @record
 * @struct
 */
JQueryMmenu.OnclickOptions = function() {};
 /** @type {?} */
JQueryMmenu.OnclickOptions.prototype.close;
 /** @type {?} */
JQueryMmenu.OnclickOptions.prototype.preventDefault;
 /** @type {?} */
JQueryMmenu.OnclickOptions.prototype.setSelected;
/**
 * @record
 * @struct
 */
JQueryMmenu.Options = function() {};
 /** @type {!Array<!Object>} */
JQueryMmenu.Options.prototype.extensions;
 /** @type {!JQueryMmenu.NavbarOptions} */
JQueryMmenu.Options.prototype.navbar;
 /** @type {!JQueryMmenu.OnclickOptions} */
JQueryMmenu.Options.prototype.onClick;
 /** @type {boolean} */
JQueryMmenu.Options.prototype.slidingSubmenus;
/**
 * @record
 * @struct
 */
JQueryMmenu.ClassnamesConfigurations = function() {};
 /** @type {string} */
JQueryMmenu.ClassnamesConfigurations.prototype.divider;
 /** @type {string} */
JQueryMmenu.ClassnamesConfigurations.prototype.inset;
 /** @type {string} */
JQueryMmenu.ClassnamesConfigurations.prototype.panel;
 /** @type {string} */
JQueryMmenu.ClassnamesConfigurations.prototype.selected;
 /** @type {string} */
JQueryMmenu.ClassnamesConfigurations.prototype.vertical;
/**
 * @record
 * @struct
 */
JQueryMmenu.Configurations = function() {};
 /** @type {!JQueryMmenu.ClassnamesConfigurations} */
JQueryMmenu.Configurations.prototype.classNames;
 /** @type {boolean} */
JQueryMmenu.Configurations.prototype.clone;
 /** @type {number} */
JQueryMmenu.Configurations.prototype.openingInterval;
 /** @type {string} */
JQueryMmenu.Configurations.prototype.panelNodetype;
 /** @type {number} */
JQueryMmenu.Configurations.prototype.transitionDuration;
/**
 * @record
 * @struct
 */
JQueryMmenu.API = function() {};

/**
 * Trigger non-specialized signature method
 * @see closeAllPanels()
 * @see closePanel()
 * @see getInstance()
 * @see init()
 * @see openPanel()
 * @see setSelected()
 * @see update()
 * @param {string} methodName
 * @param {function(!Array<?>): void|function(): void|function(?<!HTMLElement>): void|function(?<!HTMLElement>, boolean): void} callback
 * @return {?|?<!HTMLElement>|void}
 */
JQueryMmenu.API.prototype.bind = function(methodName, callback) {};

/**
 * Trigger this method to close all opened panels and go back to the first panel.
 * @return {?<!HTMLElement>}
 */
JQueryMmenu.API.prototype.closeAllPanels = function() {};

/**
 * Trigger this method to close a panel
 * (only available if the "slidingSubmenus" option is set to false).
 * @param {?<!HTMLElement>} panel
 * @return {void}
 */
JQueryMmenu.API.prototype.closePanel = function(panel) {};

/**
 * Trigger this method to get the class instance for the menu.
 * @return {void}
 */
JQueryMmenu.API.prototype.getInstance = function() {};

/**
 * Trigger this method to (re)initialize a newly added panel.
 * @param {?<!HTMLElement>} panel The panel to (re)initialize.
 * @return {void}
 */
JQueryMmenu.API.prototype.init = function(panel) {};

/**
 * Trigger this method to open a panel.
 * @param {?<!HTMLElement>} panel The panel to open.
 * @return {void}
 */
JQueryMmenu.API.prototype.openPanel = function(panel) {};

/**
 * Trigger this method to set or unset a list item as "selected".
 * @param {?<!HTMLElement>} li The list item to set or unset as "selected".
 * @param {boolean=} selected Whether to set or unset the list item as "selected". Default: true
 * @return {void}
 */
JQueryMmenu.API.prototype.setSelected = function(li, selected) {};

/**
 * Trigger this method to update the appearance for the menu.
 * @return {void}
 */
JQueryMmenu.API.prototype.update = function() {};

/**
 * Create mmenu component
 * @param {!JQueryMmenu.Options=} options
 * @param {!JQueryMmenu.Configurations=} configurations
 * @return {?<!HTMLElement>}
 */
JQuery.prototype.mmenu = function(options, configurations) {};

/**
 * Return the mmenu object
 * @param {string} element
 * @return {!JQueryMmenu.API}
 */
JQuery.prototype.data = function(element) {};
