/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/artyom.js/index.d.ts:
/**
 * @record
 * @struct
 */
function ArtyomWindow() {}
 /** @type {?} */
ArtyomWindow.prototype.webkitSpeechRecognition;
 /** @type {?} */
ArtyomWindow.prototype.SpeechRecognition;
 /** @type {?} */
ArtyomWindow.prototype.SpeechSynthesisUtterance;
/**
 * @record
 * @struct
 */
function SpeechRecognition() {}
 /** @type {?} */
SpeechRecognition.prototype.grammars;
 /** @type {string} */
SpeechRecognition.prototype.lang;
 /** @type {boolean} */
SpeechRecognition.prototype.continuous;
 /** @type {boolean} */
SpeechRecognition.prototype.interimResults;
 /** @type {number} */
SpeechRecognition.prototype.maxAlternatives;
 /** @type {string} */
SpeechRecognition.prototype.serviceURI;

/**
 * @return {void}
 */
SpeechRecognition.prototype.start = function() {};

/**
 * @return {void}
 */
SpeechRecognition.prototype.stop = function() {};

/**
 * @return {void}
 */
SpeechRecognition.prototype.abort = function() {};

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechRecognition.prototype.onaudiostart = function(ev) {};

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechRecognition.prototype.onsoundstart = function(ev) {};

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechRecognition.prototype.onspeechstart = function(ev) {};

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechRecognition.prototype.onspeechend = function(ev) {};

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechRecognition.prototype.onsoundend = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechRecognition.prototype.onresult = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechRecognition.prototype.onnomatch = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechRecognition.prototype.onerror = function(ev) {};

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechRecognition.prototype.onstart = function(ev) {};

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechRecognition.prototype.onend = function(ev) {};
/**
 * @record
 * @struct
 */
function SpeechRecognitionStatic() {}
 /** @type {?} */
SpeechRecognitionStatic.prototype.prototype;

/* TODO: ConstructSignature:  */
 /** @type {?} */
var SpeechRecognition;
 /** @type {?} */
var webkitSpeechRecognition;
/**
 * @record
 * @struct
 */
function SpeechRecognitionError() {}
 /** @type {string} */
SpeechRecognitionError.prototype.error;
 /** @type {string} */
SpeechRecognitionError.prototype.message;
/**
 * @record
 * @struct
 */
function SpeechRecognitionAlternative() {}
 /** @type {string} */
SpeechRecognitionAlternative.prototype.transcript;
 /** @type {number} */
SpeechRecognitionAlternative.prototype.confidence;
/**
 * @record
 * @struct
 */
function SpeechRecognitionResult() {}
 /** @type {number} */
SpeechRecognitionResult.prototype.length;

/* TODO: IndexSignature:  */
 /** @type {boolean} */
SpeechRecognitionResult.prototype.isFinal;

/**
 * @param {number} index
 * @return {?}
 */
SpeechRecognitionResult.prototype.item = function(index) {};
/**
 * @record
 * @struct
 */
function SpeechRecognitionResultList() {}
 /** @type {number} */
SpeechRecognitionResultList.prototype.length;

/* TODO: IndexSignature:  */

/**
 * @param {number} index
 * @return {?}
 */
SpeechRecognitionResultList.prototype.item = function(index) {};
/**
 * @record
 * @struct
 */
function SpeechRecognitionEvent() {}
 /** @type {number} */
SpeechRecognitionEvent.prototype.resultIndex;
 /** @type {?} */
SpeechRecognitionEvent.prototype.results;
 /** @type {?} */
SpeechRecognitionEvent.prototype.interpretation;
 /** @type {!Document} */
SpeechRecognitionEvent.prototype.emma;
/**
 * @record
 * @struct
 */
function SpeechGrammar() {}
 /** @type {string} */
SpeechGrammar.prototype.src;
 /** @type {number} */
SpeechGrammar.prototype.weight;
/**
 * @record
 * @struct
 */
function SpeechGrammarStatic() {}
 /** @type {?} */
SpeechGrammarStatic.prototype.prototype;

/* TODO: ConstructSignature:  */
 /** @type {?} */
var SpeechGrammar;
 /** @type {?} */
var webkitSpeechGrammar;
/**
 * @record
 * @struct
 */
function SpeechGrammarList() {}
 /** @type {number} */
SpeechGrammarList.prototype.length;

/* TODO: IndexSignature:  */

/**
 * @param {number} index
 * @return {?}
 */
SpeechGrammarList.prototype.item = function(index) {};

/**
 * @param {string} src
 * @param {number} weight
 * @return {void}
 */
SpeechGrammarList.prototype.addFromURI = function(src, weight) {};

/**
 * @param {string} string
 * @param {number} weight
 * @return {void}
 */
SpeechGrammarList.prototype.addFromString = function(string, weight) {};
/**
 * @record
 * @struct
 */
function SpeechGrammarListStatic() {}
 /** @type {?} */
SpeechGrammarListStatic.prototype.prototype;

/* TODO: ConstructSignature:  */
 /** @type {?} */
var SpeechGrammarList;
 /** @type {?} */
var webkitSpeechGrammarList;
/**
 * @record
 * @struct
 */
function SpeechSynthesis() {}
 /** @type {boolean} */
SpeechSynthesis.prototype.pending;
 /** @type {boolean} */
SpeechSynthesis.prototype.speaking;
 /** @type {boolean} */
SpeechSynthesis.prototype.paused;

/**
 * @param {!Event} ev
 * @return {?}
 */
SpeechSynthesis.prototype.onvoiceschanged = function(ev) {};

/**
 * @param {?} utterance
 * @return {void}
 */
SpeechSynthesis.prototype.speak = function(utterance) {};

/**
 * @return {void}
 */
SpeechSynthesis.prototype.cancel = function() {};

/**
 * @return {void}
 */
SpeechSynthesis.prototype.pause = function() {};

/**
 * @return {void}
 */
SpeechSynthesis.prototype.resume = function() {};

/**
 * @return {!Array<?>}
 */
SpeechSynthesis.prototype.getVoices = function() {};
/**
 * @record
 * @struct
 */
function SpeechSynthesisGetter() {}
 /** @type {?} */
SpeechSynthesisGetter.prototype.speechSynthesis;
 /** @type {?} */
var speechSynthesis;
/**
 * @record
 * @struct
 */
function SpeechSynthesisUtterance() {}
 /** @type {string} */
SpeechSynthesisUtterance.prototype.text;
 /** @type {string} */
SpeechSynthesisUtterance.prototype.lang;
 /** @type {?} */
SpeechSynthesisUtterance.prototype.voice;
 /** @type {number} */
SpeechSynthesisUtterance.prototype.volume;
 /** @type {number} */
SpeechSynthesisUtterance.prototype.rate;
 /** @type {number} */
SpeechSynthesisUtterance.prototype.pitch;

/**
 * @param {?} ev
 * @return {?}
 */
SpeechSynthesisUtterance.prototype.onstart = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechSynthesisUtterance.prototype.onend = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechSynthesisUtterance.prototype.onerror = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechSynthesisUtterance.prototype.onpause = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechSynthesisUtterance.prototype.onresume = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechSynthesisUtterance.prototype.onmark = function(ev) {};

/**
 * @param {?} ev
 * @return {?}
 */
SpeechSynthesisUtterance.prototype.onboundary = function(ev) {};
/**
 * @record
 * @struct
 */
function SpeechSynthesisUtteranceStatic() {}
 /** @type {?} */
SpeechSynthesisUtteranceStatic.prototype.prototype;

/* TODO: ConstructSignature:  */
 /** @type {?} */
var SpeechSynthesisUtterance;
/**
 * @record
 * @struct
 */
function SpeechSynthesisEvent() {}
 /** @type {?} */
SpeechSynthesisEvent.prototype.utterance;
 /** @type {number} */
SpeechSynthesisEvent.prototype.charIndex;
 /** @type {number} */
SpeechSynthesisEvent.prototype.elapsedTime;
 /** @type {string} */
SpeechSynthesisEvent.prototype.name;
/**
 * @extends {SpeechSynthesisEvent}
 * @record
 * @struct
 */
function SpeechSynthesisErrorEvent() {}
 /** @type {string} */
SpeechSynthesisErrorEvent.prototype.error;
/**
 * @record
 * @struct
 */
function SpeechSynthesisVoice() {}
 /** @type {string} */
SpeechSynthesisVoice.prototype.voiceURI;
 /** @type {string} */
SpeechSynthesisVoice.prototype.name;
 /** @type {string} */
SpeechSynthesisVoice.prototype.lang;
 /** @type {boolean} */
SpeechSynthesisVoice.prototype.localService;
 /** @type {boolean} */
SpeechSynthesisVoice.prototype.default;
/** @const */
var Artyom = {};
/**
 * @record
 * @struct
 */
Artyom.ArtyomDevice = function() {};

/**
 * @return {boolean}
 */
Artyom.ArtyomDevice.prototype.isChrome = function() {};

/**
 * @return {boolean}
 */
Artyom.ArtyomDevice.prototype.isMobile = function() {};
/**
 * @record
 * @struct
 */
Artyom.ArtyomBrowserVoiceObject = function() {};
 /** @type {boolean} */
Artyom.ArtyomBrowserVoiceObject.prototype.default;
 /** @type {string} */
Artyom.ArtyomBrowserVoiceObject.prototype.lang;
 /** @type {boolean} */
Artyom.ArtyomBrowserVoiceObject.prototype.localService;
 /** @type {string} */
Artyom.ArtyomBrowserVoiceObject.prototype.name;
 /** @type {string} */
Artyom.ArtyomBrowserVoiceObject.prototype.voiceURI;
/**
 * @record
 * @struct
 */
Artyom.ArtyomConfigProperties = function() {};
 /** @type {string} */
Artyom.ArtyomConfigProperties.prototype.lang;
 /** @type {boolean} */
Artyom.ArtyomConfigProperties.prototype.recognizing;
 /** @type {boolean} */
Artyom.ArtyomConfigProperties.prototype.continuous;
 /** @type {number} */
Artyom.ArtyomConfigProperties.prototype.speed;
 /** @type {number} */
Artyom.ArtyomConfigProperties.prototype.volume;
 /** @type {boolean} */
Artyom.ArtyomConfigProperties.prototype.listen;
 /** @type {string} */
Artyom.ArtyomConfigProperties.prototype.mode;
 /** @type {boolean} */
Artyom.ArtyomConfigProperties.prototype.debug;
 /** @type {{redirectRecognizedTextOutput: ?, remoteProcessorHandler: ?, lastSay: ?}} */
Artyom.ArtyomConfigProperties.prototype.helpers;
 /** @type {string} */
Artyom.ArtyomConfigProperties.prototype.executionKeyword;
 /** @type {string} */
Artyom.ArtyomConfigProperties.prototype.obeyKeyword;
 /** @type {boolean} */
Artyom.ArtyomConfigProperties.prototype.speaking;
 /** @type {boolean} */
Artyom.ArtyomConfigProperties.prototype.obeying;
 /** @type {boolean} */
Artyom.ArtyomConfigProperties.prototype.soundex;
/**
 * @record
 * @struct
 */
Artyom.ArtyomCommand = function() {};
 /** @type {!Array<string>} */
Artyom.ArtyomCommand.prototype.indexes;
 /** @type {string} */
Artyom.ArtyomCommand.prototype.description;
 /** @type {boolean} */
Artyom.ArtyomCommand.prototype.smart;

/**
 * Logic to execute when the command is triggered
 * @param {number} i
 * @param {string=} wildcard
 * @param {string=} full
 * @return {void}
 */
Artyom.ArtyomCommand.prototype.action = function(i, wildcard, full) {};
/**
 * @record
 * @struct
 */
Artyom.ArtyomFlags = function() {};
 /** @type {boolean} */
Artyom.ArtyomFlags.prototype.restartRecognition;
/**
 * @record
 * @struct
 */
Artyom.ArtyomRecognizer = function() {};
 /** @type {string} */
Artyom.ArtyomRecognizer.prototype.lang;
 /** @type {boolean} */
Artyom.ArtyomRecognizer.prototype.continuous;
 /** @type {boolean} */
Artyom.ArtyomRecognizer.prototype.interimResults;

/**
 * @return {void}
 */
Artyom.ArtyomRecognizer.prototype.start = function() {};

/**
 * @return {void}
 */
Artyom.ArtyomRecognizer.prototype.stop = function() {};

/**
 * @return {void}
 */
Artyom.ArtyomRecognizer.prototype.onstart = function() {};

/**
 * @param {?} event
 * @return {void}
 */
Artyom.ArtyomRecognizer.prototype.onresult = function(event) {};

/**
 * @param {?} event
 * @return {void}
 */
Artyom.ArtyomRecognizer.prototype.onerror = function(event) {};

/**
 * @return {void}
 */
Artyom.ArtyomRecognizer.prototype.onend = function() {};
/**
 * @record
 * @struct
 */
Artyom.ArtyomJS = function() {};
 /** @type {!Artyom.ArtyomDevice} */
Artyom.ArtyomJS.prototype.device;
 /** @type {!Artyom.ArtyomRecognizer} */
Artyom.ArtyomJS.prototype.artyomWSR;

/**
 * Artyom can return inmediately the voices available in your browser.
 * @see http://ourcodeworld.com/projects/projects-documentation/14/read-doc/artyom-getvoices/artyom-js
 * @return {!Array<?>}
 */
Artyom.ArtyomJS.prototype.getVoices = function() {};

/**
 * Returns an array with all the available commands for artyom.
 * @see http://ourcodeworld.com/projects/projects-documentation/10/read-doc/artyom-getavailablecommands/artyom-js
 * @return {!Array<!Artyom.ArtyomCommand>}
 */
Artyom.ArtyomJS.prototype.getAvailableCommands = function() {};

/**
 * Set up artyom for the application. This function will set the default language used by artyom
 * or notice the user if artyom is not supported in the actual browser.
 * @see http://ourcodeworld.com/projects/projects-documentation/15/read-doc/artyom-initialize/artyom-js
 * @param {!Artyom.ArtyomConfigProperties} config
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.initialize = function(config) {};

/**
 * Force artyom to stop listen even if is in continuos mode.
 * @see http://ourcodeworld.com/projects/projects-documentation/9/read-doc/artyom-fatality/artyom-js
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.fatality = function() {};

/**
 * Add dinamically commands to artyom using. You can even add commands while artyom is active.
 * @see http://ourcodeworld.com/projects/projects-documentation/4/read-doc/artyom-addcommands/artyom-js
 * @param {(!Artyom.ArtyomCommand|!Array<!Artyom.ArtyomCommand>)} newCommand
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.addCommands = function(newCommand) {};

/**
 * Remove the commands of artyom with indexes that matches with the given text.
 * @see http://ourcodeworld.com/projects/projects-documentation/19/read-doc/artyom-removecommands/artyom-js
 * @param {string} identifier
 * @return {!Array<number>}
 */
Artyom.ArtyomJS.prototype.removeCommands = function(identifier) {};

/**
 * Removes all the added commands of artyom.
 * @see http://ourcodeworld.com/projects/projects-documentation/7/read-doc/artyom-emptycommands/artyom-js
 * @return {!Array<!Artyom.ArtyomCommand>}
 */
Artyom.ArtyomJS.prototype.emptyCommands = function() {};

/**
 * Stops the actual and pendings messages that artyom have to say.
 * @see http://ourcodeworld.com/projects/projects-documentation/23/read-doc/artyom-shutup/artyom-js
 * @return {void}
 */
Artyom.ArtyomJS.prototype.shutUp = function() {};

/**
 * Returns an object with the actual properties of artyom.
 * @see http://ourcodeworld.com/projects/projects-documentation/12/read-doc/artyom-getproperties/artyom-js
 * @return {!Artyom.ArtyomConfigProperties}
 */
Artyom.ArtyomJS.prototype.getProperties = function() {};

/**
 * Create a listener when an artyom action is called.
 * @see http://ourcodeworld.com/projects/projects-documentation/24/read-doc/artyom-when/artyom-js
 * @param {?} event
 * @param {?} action
 * @return {?}
 */
Artyom.ArtyomJS.prototype.when = function(event, action) {};

/**
 * Returns the code language of artyom according to initialize function.
 * @see http://ourcodeworld.com/projects/projects-documentation/11/read-doc/artyom-getlanguage/artyom-js
 * @return {string}
 */
Artyom.ArtyomJS.prototype.getLanguage = function() {};

/**
 * Talks a text according to the given parameters (private function).
 * @param {?} text
 * @param {?} actualChunk
 * @param {?} totalChunks
 * @param {?} callbacks
 * @return {?}
 */
Artyom.ArtyomJS.prototype.artyomTalk = function(text, actualChunk, totalChunks, callbacks) {};

/**
 * Splits a string into an array of strings with a limited size (chunk_length).
 * @param {?} input
 * @param {?} chunk_length
 * @return {!Array<string>}
 */
Artyom.ArtyomJS.prototype.splitStringByChunks = function(input, chunk_length) {};

/**
 * Process the given text into chunks and execute the private function artyom_talk.
 * @see http://ourcodeworld.com/projects/projects-documentation/20/read-doc/artyom-say/artyom-js
 * @param {?} message
 * @param {?} callbacks
 * @return {void}
 */
Artyom.ArtyomJS.prototype.say = function(message, callbacks) {};

/**
 * Repeats the last sentence that artyom said. Useful in noisy environments.
 * @see http://ourcodeworld.com/projects/projects-documentation/25/read-doc/artyom-repeatlastsay/artyom-js
 * @param {?} returnObject
 * @return {void}
 */
Artyom.ArtyomJS.prototype.repeatLastSay = function(returnObject) {};

/**
 * Verify if the browser supports speechSynthesis.
 * @see http://ourcodeworld.com/projects/projects-documentation/40/read-doc/artyom-speechsupported/artyom-js
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.speechSupported = function() {};

/**
 * Verify if the browser supports webkitSpeechRecognition.
 * @see http://ourcodeworld.com/projects/projects-documentation/39/read-doc/artyom-recognizingsupported/artyom-js
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.recognizingSupported = function() {};

/**
 * Simulate a voice command via JS.
 * @see http://ourcodeworld.com/projects/projects-documentation/22/read-doc/artyom-simulateinstruction/artyom-js
 * @param {string} sentence
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.simulateInstruction = function(sentence) {};

/**
 * Returns an object with data of the matched element.
 * @param {string} voiceCommand
 * @return {?}
 */
Artyom.ArtyomJS.prototype.artyomExecute = function(voiceCommand) {};

/**
 * Displays a message in the console if the artyom propery DEBUG is set to true.
 * @see http://ourcodeworld.com/projects/projects-documentation/38/read-doc/artyom-debug/artyom-js
 * @param {string} stringEvent
 * @param {string} traceLevel
 * @return {void}
 */
Artyom.ArtyomJS.prototype.debug = function(stringEvent, traceLevel) {};

/**
 * Allows to retrieve the recognized spoken text of artyom and do something with it everytime something is recognized.
 * @param {function(): void} action
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.redirectRecognizedTextOutput = function(action) {};

/**
 * Says a random quote and returns it's object.
 * @param {?} data
 * @return {?}
 */
Artyom.ArtyomJS.prototype.sayRandom = function(data) {};

/**
 * Artyom provide an easy way to create a dictation for your user. Just create an instance and start and stop when you want.
 * @param {?} settings
 * @return {?}
 */
Artyom.ArtyomJS.prototype.newDictation = function(settings) {};

/**
 * A voice prompt will be executed.
 * @param {?} config
 * @return {?}
 */
Artyom.ArtyomJS.prototype.newPrompt = function(config) {};

/**
 * Artyom awaits for orders when this function is executed. If artyom gets a first parameter the instance will be stopped.
 * @return {?}
 */
Artyom.ArtyomJS.prototype.artyomHey = function() {};

/**
 * This function will return the webkitSpeechRecognition object used by artyom retrieve it only to debug on it or get some
 * values, do not make changes directly.
 * @return {?}
 */
Artyom.ArtyomJS.prototype.getNativeApi = function() {};

/**
 * This function returns a boolean according to the SpeechRecognition status if artyom is listening, will return true.
 * Note: This is not a feature of SpeechRecognition, therefore this value hangs on the fiability of the onStart and onEnd
 * events of the SpeechRecognition
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.isRecognizing = function() {};

/**
 * This function returns a boolean according to the speechSynthesis status if artyom is speaking, will return true.
 * Note: This is not a feature of speechSynthesis, therefore this value hangs on the fiability of the onStart and onEnd
 * events of the speechSynthesis.
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.isSpeaking = function() {};

/**
 * The SpeechSynthesisUtterance objects are stored in the artyom_garbage_collector variable to prevent the wrong behaviour
 * of artyom.say. Use this method to clear all spoken SpeechSynthesisUtterance unused objects.
 * @return {?}
 */
Artyom.ArtyomJS.prototype.clearGarbageCollection = function() {};

/**
 * Returns the SpeechSynthesisUtterance garbageobjects.
 * @return {?}
 */
Artyom.ArtyomJS.prototype.getGarbageCollection = function() {};

/**
 * Pause the processing of commands. Artyom still listening in the background and it can be resumed after a couple of seconds.
 * @return {?}
 */
Artyom.ArtyomJS.prototype.dontObey = function() {};

/**
 * Allow artyom to obey commands again.
 * @return {?}
 */
Artyom.ArtyomJS.prototype.obey = function() {};

/**
 * A boolean to check if artyom is obeying commands or not.
 * @return {boolean}
 */
Artyom.ArtyomJS.prototype.isObeying = function() {};

/**
 * Process the recognized text if artyom is active in remote mode.
 * @param {?} action
 * @return {?}
 */
Artyom.ArtyomJS.prototype.remoteProcessorService = function(action) {};

/**
 * Returns a string with the actual version of Artyom script.
 * @return {string}
 */
Artyom.ArtyomJS.prototype.getVersion = function() {};

/**
 * Add commands like an artisan. If you use artyom for simple
 * tasks then probably you don't like to write a lot to achieve it.
 * Use the artisan syntax to write less, but with the same accuracy.
 * \@disclaimer Not a promise-based implementation, just syntax.
 * @param {?} indexes
 * @param {?} smart
 * @return {?}
 */
Artyom.ArtyomJS.prototype.on = function(indexes, smart) {};
/**
 * @constructor
 * @struct
 */
Artyom.ArtyomBuilder = function() {};

/**
 * Method to bla, bla, bla...
 * @return {!Artyom.ArtyomJS}
 */
Artyom.ArtyomBuilder.getInstance = function() {};

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
