/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/chartist/index.d.ts:
/** @const */
var Chartist = {};
/**
 * @record
 * @struct
 */
Chartist.ChartistStatic = function() {};
 /** @type {number} */
Chartist.ChartistStatic.prototype.precision;
 /** @type {!Chartist.IChartistEscapeMap} */
Chartist.ChartistStatic.prototype.escapingMap;
 /** @type {!Chartist.IChartistPieChart} */
Chartist.ChartistStatic.prototype.Pie;
 /** @type {!Chartist.IChartistBarChart} */
Chartist.ChartistStatic.prototype.Bar;
 /** @type {!Chartist.IChartistLineChart} */
Chartist.ChartistStatic.prototype.Line;
 /** @type {!Chartist.IChartistCandleChart} */
Chartist.ChartistStatic.prototype.Candle;
 /** @type {!Chartist.IFixedScaleAxisStatic} */
Chartist.ChartistStatic.prototype.FixedScaleAxis;
 /** @type {!Chartist.IAutoScaleAxisStatic} */
Chartist.ChartistStatic.prototype.AutoScaleAxis;
 /** @type {!Chartist.IStepAxisStatic} */
Chartist.ChartistStatic.prototype.StepAxis;
 /** @type {!Chartist.ChartistSvgStatic} */
Chartist.ChartistStatic.prototype.Svg;
 /** @type {!Chartist.ChartistInterpolationStatic} */
Chartist.ChartistStatic.prototype.Interpolation;
 /** @type {!Function} */
Chartist.ChartistStatic.prototype.noop;
 /** @type {?} */
Chartist.ChartistStatic.prototype.plugins;

/**
 * @param {number} n
 * @return {string}
 */
Chartist.ChartistStatic.prototype.alphaNumerate = function(n) {};

/**
 * @param {!Object} target
 * @param {...!Object} sources
 * @return {!Object}
 */
Chartist.ChartistStatic.prototype.extend = function(target, sources) {};

/**
 * @param {string} str
 * @param {string} subStr
 * @param {string} newSubStr
 * @return {string}
 */
Chartist.ChartistStatic.prototype.replaceAll = function(str, subStr, newSubStr) {};

/**
 * @param {number} value
 * @param {string} unit
 * @return {string}
 */
Chartist.ChartistStatic.prototype.ensureUnit = function(value, unit) {};

/**
 * @param {(string|number)} input
 * @return {!Object}
 */
Chartist.ChartistStatic.prototype.quantity = function(input) {};

/**
 * @param {(string|!Node)} query
 * @return {!Node}
 */
Chartist.ChartistStatic.prototype.query = function(query) {};

/**
 * @param {number} length
 * @return {!Array<?>}
 */
Chartist.ChartistStatic.prototype.times = function(length) {};

/**
 * @param {number} previous
 * @param {number} current
 * @return {number}
 */
Chartist.ChartistStatic.prototype.sum = function(previous, current) {};

/**
 * @param {number} factor
 * @return {function(number): number}
 */
Chartist.ChartistStatic.prototype.mapMultiply = function(factor) {};

/**
 * @param {number} addend
 * @return {function(number): number}
 */
Chartist.ChartistStatic.prototype.mapAdd = function(addend) {};

/**
 * @param {!Array<?>} arr
 * @param {!Function} cb
 * @return {!Array<?>}
 */
Chartist.ChartistStatic.prototype.serialMap = function(arr, cb) {};

/**
 * @param {number} value
 * @param {number=} digits
 * @return {number}
 */
Chartist.ChartistStatic.prototype.roundWithPrecision = function(value, digits) {};

/**
 * @param {?} value
 * @param {?=} dimension
 * @return {number}
 */
Chartist.ChartistStatic.prototype.getMultiValue = function(value, dimension) {};

/**
 * @param {(string|number|!Object)} data
 * @return {string}
 */
Chartist.ChartistStatic.prototype.serialize = function(data) {};

/**
 * @param {string} data
 * @return {(string|number|!Object)}
 */
Chartist.ChartistStatic.prototype.deserialize = function(data) {};

/**
 * @param {!Node} container
 * @param {string} width
 * @param {string} height
 * @param {string} className
 * @return {!Object}
 */
Chartist.ChartistStatic.prototype.createSvg = function(container, width, height, className) {};
/**
 * @record
 * @struct
 */
Chartist.IChartistEscapeMap = function() {};

/* TODO: IndexSignature: Chartist */
/**
 * @record
 * @struct
 */
Chartist.IResponsiveOptionTuple = function() {};

/* TODO: PropertySignature: Chartist.0 */

/* TODO: PropertySignature: Chartist.1 */
/**
 * @record
 * @struct
 */
Chartist.IFixedScaleAxisStatic = function() {};
/**
 * @record
 * @struct
 */
Chartist.IAutoScaleAxisStatic = function() {};
/**
 * @record
 * @struct
 */
Chartist.IStepAxisStatic = function() {};
/**
 * @record
 * @struct
 */
Chartist.IChartistData = function() {};
 /** @type {(!Array<string>|!Array<number>|!Array<!Date>)} */
Chartist.IChartistData.prototype.labels;
 /** @type {(!Array<number>|!Array<!Chartist.IChartistSeriesData>|!Array<!Array<number>>)} */
Chartist.IChartistData.prototype.series;
/**
 * @record
 * @struct
 */
Chartist.IChartistSeriesData = function() {};
 /** @type {string} */
Chartist.IChartistSeriesData.prototype.name;
 /** @type {number} */
Chartist.IChartistSeriesData.prototype.value;
 /** @type {!Array<number>} */
Chartist.IChartistSeriesData.prototype.data;
 /** @type {string} */
Chartist.IChartistSeriesData.prototype.className;
 /** @type {string} */
Chartist.IChartistSeriesData.prototype.meta;
/**
 * @record
 * @struct
 */
Chartist.IChartistBase = function() {};
 /** @type {?} */
Chartist.IChartistBase.prototype.container;
 /** @type {!Chartist.IChartistData} */
Chartist.IChartistBase.prototype.data;
 /** @type {T} */
Chartist.IChartistBase.prototype.defaultOptions;
 /** @type {T} */
Chartist.IChartistBase.prototype.options;
 /** @type {!Array<!Chartist.IResponsiveOptionTuple<T>>} */
Chartist.IChartistBase.prototype.responsiveOptions;
 /** @type {?} */
Chartist.IChartistBase.prototype.eventEmitter;
 /** @type {boolean} */
Chartist.IChartistBase.prototype.supportsForeignObject;
 /** @type {boolean} */
Chartist.IChartistBase.prototype.supportsAnimations;
 /** @type {?} */
Chartist.IChartistBase.prototype.resizeListener;
 /** @type {!Array<?>} */
Chartist.IChartistBase.prototype.plugins;

/**
 * @param {!Object} data
 * @param {T=} options
 * @param {boolean=} override
 * @return {void}
 */
Chartist.IChartistBase.prototype.update = function(data, options, override) {};

/**
 * @return {void}
 */
Chartist.IChartistBase.prototype.detach = function() {};

/**
 * Use this function to register event handlers. The handler callbacks are synchronous and will run in the main thread rather than the event loop.
 * 
 * \@method on
 * @param {string} event {string} Name of the event. Check the examples for supported events.
 * @param {!Function} handler {Function} The handler function that will be called when an event with the given name was emitted. This function will receive a data argument which contains event data. See the example for more details.
 * @return {!Chartist.IChartistBase}
 */
Chartist.IChartistBase.prototype.on = function(event, handler) {};

/**
 * Use this function to un-register event handlers. If the handler function parameter is omitted all handlers for the given event will be un-registered.
 * 
 * \@method off
 * @param {string} event {string} Name of the event for which a handler should be removed
 * @param {!Function=} handler {Function} The handler function that that was previously used to register a new event handler. This handler will be removed from the event handler list. If this parameter is omitted then all event handlers for the given event are removed from the list.
 * @return {!Chartist.IChartistBase}
 */
Chartist.IChartistBase.prototype.off = function(event, handler) {};
/**
 * @extends {Chartist.IChartistBase}
 * @record
 * @struct
 */
Chartist.IChartistPieChart = function() {};

/* TODO: ConstructSignature: Chartist */
/**
 * @extends {Chartist.IChartistBase}
 * @record
 * @struct
 */
Chartist.IChartistLineChart = function() {};

/* TODO: ConstructSignature: Chartist */
/**
 * @extends {Chartist.IChartistBase}
 * @record
 * @struct
 */
Chartist.IChartistBarChart = function() {};

/* TODO: ConstructSignature: Chartist */
/**
 * @extends {Chartist.IChartistBase}
 * @record
 * @struct
 */
Chartist.IChartistCandleChart = function() {};

/* TODO: ConstructSignature: Chartist */
/**
 * @record
 * @struct
 */
Chartist.IChartOptions = function() {};
 /** @type {boolean} */
Chartist.IChartOptions.prototype.reverseData;
 /** @type {!Array<?>} */
Chartist.IChartOptions.prototype.plugins;
/**
 * @extends {Chartist.IChartOptions}
 * @record
 * @struct
 */
Chartist.IPieChartOptions = function() {};
 /** @type {(string|number)} */
Chartist.IPieChartOptions.prototype.width;
 /** @type {(string|number)} */
Chartist.IPieChartOptions.prototype.height;
 /** @type {(number|!Chartist.IChartPadding)} */
Chartist.IPieChartOptions.prototype.chartPadding;
 /** @type {!Chartist.IPieChartClasses} */
Chartist.IPieChartOptions.prototype.classNames;
 /** @type {number} */
Chartist.IPieChartOptions.prototype.startAngle;
 /** @type {number} */
Chartist.IPieChartOptions.prototype.total;
 /** @type {boolean} */
Chartist.IPieChartOptions.prototype.donut;
 /** @type {number} */
Chartist.IPieChartOptions.prototype.donutWidth;
 /** @type {boolean} */
Chartist.IPieChartOptions.prototype.showLabel;
 /** @type {number} */
Chartist.IPieChartOptions.prototype.labelOffset;
 /** @type {string} */
Chartist.IPieChartOptions.prototype.labelPosition;
 /** @type {!Function} */
Chartist.IPieChartOptions.prototype.labelInterpolationFnc;
 /** @type {string} */
Chartist.IPieChartOptions.prototype.labelDirection;
/**
 * @record
 * @struct
 */
Chartist.IChartPadding = function() {};
 /** @type {number} */
Chartist.IChartPadding.prototype.top;
 /** @type {number} */
Chartist.IChartPadding.prototype.right;
 /** @type {number} */
Chartist.IChartPadding.prototype.bottom;
 /** @type {number} */
Chartist.IChartPadding.prototype.left;
/**
 * @record
 * @struct
 */
Chartist.IPieChartClasses = function() {};
 /** @type {string} */
Chartist.IPieChartClasses.prototype.chartPie;
 /** @type {string} */
Chartist.IPieChartClasses.prototype.chartDonut;
 /** @type {string} */
Chartist.IPieChartClasses.prototype.series;
 /** @type {string} */
Chartist.IPieChartClasses.prototype.slicePie;
 /** @type {string} */
Chartist.IPieChartClasses.prototype.sliceDonut;
 /** @type {string} */
Chartist.IPieChartClasses.prototype.label;
/**
 * @extends {Chartist.IChartOptions}
 * @record
 * @struct
 */
Chartist.IBarChartOptions = function() {};
 /** @type {!Chartist.IBarChartAxis} */
Chartist.IBarChartOptions.prototype.axisX;
 /** @type {!Chartist.IBarChartAxis} */
Chartist.IBarChartOptions.prototype.axisY;
 /** @type {(string|number)} */
Chartist.IBarChartOptions.prototype.width;
 /** @type {(string|number)} */
Chartist.IBarChartOptions.prototype.height;
 /** @type {number} */
Chartist.IBarChartOptions.prototype.high;
 /** @type {number} */
Chartist.IBarChartOptions.prototype.low;
 /** @type {!Array<(string|number)>} */
Chartist.IBarChartOptions.prototype.ticks;
 /** @type {boolean} */
Chartist.IBarChartOptions.prototype.onlyInteger;
 /** @type {!Chartist.IChartPadding} */
Chartist.IBarChartOptions.prototype.chartPadding;
 /** @type {number} */
Chartist.IBarChartOptions.prototype.seriesBarDistance;
 /** @type {boolean} */
Chartist.IBarChartOptions.prototype.stackBars;
 /** @type {boolean} */
Chartist.IBarChartOptions.prototype.horizontalBars;
 /** @type {boolean} */
Chartist.IBarChartOptions.prototype.distributeSeries;
/**
 * @record
 * @struct
 */
Chartist.IBarChartAxis = function() {};
 /** @type {number} */
Chartist.IBarChartAxis.prototype.offset;
 /** @type {string} */
Chartist.IBarChartAxis.prototype.position;
 /** @type {{x: number, y: number}} */
Chartist.IBarChartAxis.prototype.labelOffset;
 /** @type {boolean} */
Chartist.IBarChartAxis.prototype.showLabel;
 /** @type {boolean} */
Chartist.IBarChartAxis.prototype.showGrid;
 /** @type {!Function} */
Chartist.IBarChartAxis.prototype.labelInterpolationFnc;
 /** @type {number} */
Chartist.IBarChartAxis.prototype.scaleMinSpace;
 /** @type {boolean} */
Chartist.IBarChartAxis.prototype.onlyInteger;
/**
 * @record
 * @struct
 */
Chartist.IBarChartClasses = function() {};
 /** @type {string} */
Chartist.IBarChartClasses.prototype.chart;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.horizontalBars;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.label;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.labelGroup;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.series;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.bar;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.grid;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.gridGroup;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.vertical;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.horizontal;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.start;
 /** @type {string} */
Chartist.IBarChartClasses.prototype.end;
/**
 * @extends {Chartist.IChartOptions}
 * @record
 * @struct
 */
Chartist.ILineChartOptions = function() {};
 /** @type {(!Chartist.IChartistStepAxis|!Chartist.IChartistFixedScaleAxis|!Chartist.IChartistAutoScaleAxis)} */
Chartist.ILineChartOptions.prototype.axisX;
 /** @type {(!Chartist.IChartistStepAxis|!Chartist.IChartistFixedScaleAxis|!Chartist.IChartistAutoScaleAxis)} */
Chartist.ILineChartOptions.prototype.axisY;
 /** @type {(string|number)} */
Chartist.ILineChartOptions.prototype.width;
 /** @type {(string|number)} */
Chartist.ILineChartOptions.prototype.height;
 /** @type {boolean} */
Chartist.ILineChartOptions.prototype.showLine;
 /** @type {boolean} */
Chartist.ILineChartOptions.prototype.showPoint;
 /** @type {boolean} */
Chartist.ILineChartOptions.prototype.showArea;
 /** @type {number} */
Chartist.ILineChartOptions.prototype.areaBase;
 /** @type {(boolean|!Function)} */
Chartist.ILineChartOptions.prototype.lineSmooth;
 /** @type {number} */
Chartist.ILineChartOptions.prototype.low;
 /** @type {number} */
Chartist.ILineChartOptions.prototype.high;
 /** @type {!Array<(string|number)>} */
Chartist.ILineChartOptions.prototype.ticks;
 /** @type {!Chartist.IChartPadding} */
Chartist.ILineChartOptions.prototype.chartPadding;
 /** @type {boolean} */
Chartist.ILineChartOptions.prototype.fullWidth;
 /** @type {!Chartist.ILineChartClasses} */
Chartist.ILineChartOptions.prototype.classNames;
/**
 * @record
 * @struct
 */
Chartist.ILineChartAxis = function() {};
 /** @type {number} */
Chartist.ILineChartAxis.prototype.offset;
 /** @type {string} */
Chartist.ILineChartAxis.prototype.position;
 /** @type {{x: number, y: number}} */
Chartist.ILineChartAxis.prototype.labelOffset;
 /** @type {boolean} */
Chartist.ILineChartAxis.prototype.showLabel;
 /** @type {boolean} */
Chartist.ILineChartAxis.prototype.showGrid;
 /** @type {!Function} */
Chartist.ILineChartAxis.prototype.labelInterpolationFnc;
/**
 * @extends {Chartist.ILineChartAxis}
 * @record
 * @struct
 */
Chartist.IChartistStepAxis = function() {};
 /** @type {!Chartist.IStepAxisStatic} */
Chartist.IChartistStepAxis.prototype.type;
 /** @type {(!Array<string>|!Array<number>)} */
Chartist.IChartistStepAxis.prototype.ticks;
 /** @type {boolean} */
Chartist.IChartistStepAxis.prototype.stretch;
/**
 * @extends {Chartist.ILineChartAxis}
 * @record
 * @struct
 */
Chartist.IChartistFixedScaleAxis = function() {};
 /** @type {!Chartist.IFixedScaleAxisStatic} */
Chartist.IChartistFixedScaleAxis.prototype.type;
 /** @type {number} */
Chartist.IChartistFixedScaleAxis.prototype.high;
 /** @type {number} */
Chartist.IChartistFixedScaleAxis.prototype.low;
 /** @type {number} */
Chartist.IChartistFixedScaleAxis.prototype.divisor;
 /** @type {(!Array<string>|!Array<number>)} */
Chartist.IChartistFixedScaleAxis.prototype.ticks;
/**
 * @extends {Chartist.ILineChartAxis}
 * @record
 * @struct
 */
Chartist.IChartistAutoScaleAxis = function() {};
 /** @type {number} */
Chartist.IChartistAutoScaleAxis.prototype.high;
 /** @type {number} */
Chartist.IChartistAutoScaleAxis.prototype.low;
 /** @type {number} */
Chartist.IChartistAutoScaleAxis.prototype.scaleMinSpace;
 /** @type {boolean} */
Chartist.IChartistAutoScaleAxis.prototype.onlyInteger;
 /** @type {number} */
Chartist.IChartistAutoScaleAxis.prototype.referenceValue;
 /** @type {!Chartist.IAutoScaleAxisStatic} */
Chartist.IChartistAutoScaleAxis.prototype.type;
/**
 * @record
 * @struct
 */
Chartist.ILineChartClasses = function() {};
 /** @type {string} */
Chartist.ILineChartClasses.prototype.chart;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.label;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.labelGroup;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.series;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.line;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.point;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.area;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.grid;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.gridGroup;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.vertical;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.horizontal;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.start;
 /** @type {string} */
Chartist.ILineChartClasses.prototype.end;
/**
 * @extends {Chartist.IChartOptions}
 * @record
 * @struct
 */
Chartist.ICandleChartOptions = function() {};
 /** @type {!Chartist.ICandleChartAxis} */
Chartist.ICandleChartOptions.prototype.axisX;
 /** @type {!Chartist.ICandleChartAxis} */
Chartist.ICandleChartOptions.prototype.axisY;
 /** @type {(string|number)} */
Chartist.ICandleChartOptions.prototype.width;
 /** @type {(string|number)} */
Chartist.ICandleChartOptions.prototype.height;
 /** @type {(string|number)} */
Chartist.ICandleChartOptions.prototype.hight;
 /** @type {(string|number)} */
Chartist.ICandleChartOptions.prototype.low;
 /** @type {(string|number)} */
Chartist.ICandleChartOptions.prototype.candleWidth;
 /** @type {(string|number)} */
Chartist.ICandleChartOptions.prototype.candleWickWidth;
 /** @type {(string|boolean)} */
Chartist.ICandleChartOptions.prototype.useStepLengthAsCandleWidth;
 /** @type {(string|boolean)} */
Chartist.ICandleChartOptions.prototype.useOneThirdAsCandleWickWidth;
 /** @type {(number|!Chartist.IChartPadding)} */
Chartist.ICandleChartOptions.prototype.chartPadding;
 /** @type {(string|boolean)} */
Chartist.ICandleChartOptions.prototype.fullWidth;
 /** @type {!Chartist.ICandleChartClasses} */
Chartist.ICandleChartOptions.prototype.classNames;
/**
 * @record
 * @struct
 */
Chartist.ICandleChartAxis = function() {};
 /** @type {number} */
Chartist.ICandleChartAxis.prototype.offset;
 /** @type {string} */
Chartist.ICandleChartAxis.prototype.position;
 /** @type {{x: number, y: number}} */
Chartist.ICandleChartAxis.prototype.labelOffset;
 /** @type {boolean} */
Chartist.ICandleChartAxis.prototype.showLabel;
 /** @type {boolean} */
Chartist.ICandleChartAxis.prototype.showGrid;
 /** @type {!Function} */
Chartist.ICandleChartAxis.prototype.labelInterpolationFnc;
 /** @type {?} */
Chartist.ICandleChartAxis.prototype.type;
/**
 * @record
 * @struct
 */
Chartist.ICandleChartClasses = function() {};
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.chart;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.label;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.labelGroup;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.series;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.candlePositive;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.candleNegative;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.grid;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.gridGroup;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.gridBackground;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.vertical;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.horizontal;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.start;
 /** @type {string} */
Chartist.ICandleChartClasses.prototype.end;
/**
 * @record
 * @struct
 */
Chartist.ChartistSvgStatic = function() {};

/* TODO: ConstructSignature: Chartist */
 /** @type {!Chartist.ChartistEasingStatic} */
Chartist.ChartistSvgStatic.prototype.Easing;

/**
 * This method checks for support of a given SVG feature like Extensibility, SVG-animation or the like. Check http://www.w3.org/TR/SVG11/feature for a detailed list.
 * @param {string} feature
 * @return {boolean}
 */
Chartist.ChartistSvgStatic.prototype.isSupported = function(feature) {};
/**
 * @record
 * @struct
 */
Chartist.IChartistSvg = function() {};

/**
 * Set attributes on the current SVG element of the wrapper you're currently working on.
 * @param {(string|!Object)} attributes
 * @param {string} ns
 * @return {(string|!Object)}
 */
Chartist.IChartistSvg.prototype.attr = function(attributes, ns) {};

/**
 * Create a new SVG element whose wrapper object will be selected for further operations. This way you can also create nested groups easily.
 * @param {string} name
 * @param {!Object=} attributes
 * @param {string=} className
 * @param {boolean=} insertFirst
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.elem = function(name, attributes, className, insertFirst) {};

/**
 * Returns the parent Chartist.SVG wrapper object
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.parent = function() {};

/**
 * This method returns a Chartist.Svg wrapper around the root SVG element of the current tree.
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.root = function() {};

/**
 * Find the first child SVG element of the current element that matches a CSS selector. The returned object is a Chartist.Svg wrapper.
 * @param {string} selector
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.querySelector = function(selector) {};

/**
 * Find the all child SVG elements of the current element that match a CSS selector. The returned object is a Chartist.Svg.List wrapper.
 * @param {string} selector
 * @return {?}
 */
Chartist.IChartistSvg.prototype.querySelectorAll = function(selector) {};

/**
 * This method creates a foreignObject (see https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject) that allows to embed HTML content into a SVG graphic. With the help of foreignObjects you can enable the usage of regular HTML elements inside of SVG where they are subject for SVG positioning and transformation but the Browser will use the HTML rendering capabilities for the containing DOM.
 * @param {?} content
 * @param {!Object=} attributes
 * @param {string=} className
 * @param {boolean=} insertFirst
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.foreignObject = function(content, attributes, className, insertFirst) {};

/**
 * This method adds a new text element to the current Chartist.Svg wrapper.
 * @param {string} t
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.text = function(t) {};

/**
 * This method will clear all child nodes of the current wrapper object.
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.empty = function() {};

/**
 * This method will cause the current wrapper to remove itself from its parent wrapper. Use this method if you'd like to get rid of an element in a given DOM structure.
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.remove = function() {};

/**
 * This method will replace the element with a new element that can be created outside of the current DOM.
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.replace = function() {};

/**
 * This method will append an element to the current element as a child.
 * @param {!Chartist.IChartistSvg} element
 * @param {boolean=} insertFirst
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.append = function(element, insertFirst) {};

/**
 * Returns an array of class names that are attached to the current wrapper element. This method can not be chained further.
 * @return {!Array<string>}
 */
Chartist.IChartistSvg.prototype.classes = function() {};

/**
 * Adds one or a space separated list of classes to the current element and ensures the classes are only existing once.
 * 
 * \@method addClass
 * @param {string} names {string} A white space separated list of class names
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.addClass = function(names) {};

/**
 * Removes one or a space separated list of classes from the current element.
 * 
 * \@method removeClass
 * @param {string} names {string} A white space separated list of class names
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.removeClass = function(names) {};

/**
 * Removes all classes from the current element.
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.removeAllClasses = function() {};

/**
 * Get element height with fallback to svg BoundingBox or parent container dimensions
 * @return {number}
 */
Chartist.IChartistSvg.prototype.height = function() {};

/**
 * The animate function lets you animate the current element with SMIL animations. You can add animations for multiple attributes at the same time by using an animation definition object. This object should contain SMIL animation attributes.
 * @param {!Chartist.IChartistAnimations} animations
 * @param {boolean} guided
 * @param {!Object} eventEmitter
 * @return {!Chartist.IChartistSvg}
 */
Chartist.IChartistSvg.prototype.animate = function(animations, guided, eventEmitter) {};

/**
 * "Safe" way to get property value from svg BoundingBox. This is a workaround. Firefox throws an NS_ERROR_FAILURE error if getBBox() is called on an invisible node.
 * THIS IS A WORKAROUND
 * @param {!SVGElement} node
 * @param {string} prop
 * @return {string}
 */
Chartist.IChartistSvg.prototype.getBBoxProperty = function(node, prop) {};
/**
 * @record
 * @struct
 */
Chartist.IChartistAnimations = function() {};

/* TODO: IndexSignature: Chartist */
/**
 * @record
 * @struct
 */
Chartist.IChartistAnimationOptions = function() {};
 /** @type {string} */
Chartist.IChartistAnimationOptions.prototype.id;
 /** @type {(string|number)} */
Chartist.IChartistAnimationOptions.prototype.dur;
 /** @type {(string|number)} */
Chartist.IChartistAnimationOptions.prototype.from;
 /** @type {(string|number)} */
Chartist.IChartistAnimationOptions.prototype.to;
 /** @type {(string|!Chartist.IChartistEasingDefinition)} */
Chartist.IChartistAnimationOptions.prototype.easing;
 /** @type {string} */
Chartist.IChartistAnimationOptions.prototype.fill;
 /** @type {string} */
Chartist.IChartistAnimationOptions.prototype.begin;
/**
 * @record
 * @struct
 */
Chartist.IChartistEasingDefinition = function() {};

/* TODO: PropertySignature: Chartist.0 */

/* TODO: PropertySignature: Chartist.1 */

/* TODO: PropertySignature: Chartist.2 */

/* TODO: PropertySignature: Chartist.3 */
/**
 * @record
 * @struct
 */
Chartist.ChartistEasingStatic = function() {};
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInSine;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutSine;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutSine;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInQuad;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutQuad;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutQuad;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInCubic;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutCubic;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutCubic;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInQuart;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutQuart;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutQuart;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInQuint;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutQuint;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutQuint;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInExpo;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutExpo;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutExpo;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInCirc;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutCirc;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutCirc;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInBack;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeOutBack;
 /** @type {!Chartist.IChartistEasingDefinition} */
Chartist.ChartistEasingStatic.prototype.easeInOutBack;
/**
 * @record
 * @struct
 */
Chartist.ChartistInterpolationStatic = function() {};

/**
 * This interpolation function does not smooth the path and the result is only containing lines and no curves.
 * @param {!Chartist.IChartistInterpolationOptions=} options
 * @return {!Function}
 */
Chartist.ChartistInterpolationStatic.prototype.none = function(options) {};

/**
 * Simple smoothing creates horizontal handles that are positioned with a fraction of the length between two data points. You can use the divisor option to specify the amount of smoothing.
 * @param {!Chartist.IChartistSimpleInterpolationOptions=} options
 * @return {!Function}
 */
Chartist.ChartistInterpolationStatic.prototype.simple = function(options) {};

/**
 * Cardinal / Catmull-Rome spline interpolation is the default smoothing function in Chartist. It produces nice results where the splines will always meet the points. It produces some artifacts though when data values are increased or decreased rapidly. The line may not follow a very accurate path and if the line should be accurate this smoothing function does not produce the best results.
 * @param {!Chartist.IChartistCardinalInterpolationOptions=} options
 * @return {!Function}
 */
Chartist.ChartistInterpolationStatic.prototype.cardinal = function(options) {};

/**
 * Step interpolation will cause the line chart to move in steps rather than diagonal or smoothed lines. This interpolation will create additional points that will also be drawn when the showPoint option is enabled.
 * @param {!Chartist.IChartistStepInterpolationOptions=} options
 * @return {!Function}
 */
Chartist.ChartistInterpolationStatic.prototype.step = function(options) {};
/**
 * @record
 * @struct
 */
Chartist.IChartistInterpolationOptions = function() {};
 /** @type {boolean} */
Chartist.IChartistInterpolationOptions.prototype.fillHoles;
/**
 * @extends {Chartist.IChartistInterpolationOptions}
 * @record
 * @struct
 */
Chartist.IChartistSimpleInterpolationOptions = function() {};
 /** @type {number} */
Chartist.IChartistSimpleInterpolationOptions.prototype.divisor;
/**
 * @extends {Chartist.IChartistInterpolationOptions}
 * @record
 * @struct
 */
Chartist.IChartistCardinalInterpolationOptions = function() {};
 /** @type {number} */
Chartist.IChartistCardinalInterpolationOptions.prototype.tension;
/**
 * @extends {Chartist.IChartistInterpolationOptions}
 * @record
 * @struct
 */
Chartist.IChartistStepInterpolationOptions = function() {};
 /** @type {boolean} */
Chartist.IChartistStepInterpolationOptions.prototype.postpone;
 /** @type {!Chartist.ChartistStatic} */
var Chartist;

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
