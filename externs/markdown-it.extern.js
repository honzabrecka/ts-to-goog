/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/markdown-it/index.d.ts:
/**
 * @record
 * @struct
 */
function MarkdownItStatic() {}

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/* TODO: ConstructSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {?} */
var MarkdownIt;

/* TODO: ExportAssignment in  */
/**
 * @record
 * @struct
 */
MarkdownIt.MarkdownIt = function() {};
 /** @type {{assign: function(?): ?, isString: function(?): boolean, has: function(?, string): boolean, unescapeMd: function(string): string, unescapeAll: function(string): string, isValidEntityCode: function(?): boolean, fromCodePoint: function(string): string, escapeHtml: function(string): string, arrayReplaceAt: function(!Array<?>, number, !Array<?>): !Array<?>, isSpace: function(?): boolean, isWhiteSpace: function(?): boolean, isMdAsciiPunct: function(?): boolean, isPunctChar: function(?): boolean, escapeRE: function(string): string, normalizeReference: function(string): string}} */
MarkdownIt.MarkdownIt.prototype.utils;
 /** @type {!MarkdownIt.ParserBlock} */
MarkdownIt.MarkdownIt.prototype.block;
 /** @type {!MarkdownIt.Core} */
MarkdownIt.MarkdownIt.prototype.core;
 /** @type {?} */
MarkdownIt.MarkdownIt.prototype.helpers;
 /** @type {!MarkdownIt.ParserInline} */
MarkdownIt.MarkdownIt.prototype.inline;
 /** @type {!MarkdownIt.LinkifyIt} */
MarkdownIt.MarkdownIt.prototype.linkify;
 /** @type {!MarkdownIt.Renderer} */
MarkdownIt.MarkdownIt.prototype.renderer;

/**
 * @param {string} md
 * @param {?=} env
 * @return {string}
 */
MarkdownIt.MarkdownIt.prototype.render = function(md, env) {};

/**
 * @param {string} md
 * @param {?=} env
 * @return {string}
 */
MarkdownIt.MarkdownIt.prototype.renderInline = function(md, env) {};

/**
 * @param {string} src
 * @param {?} env
 * @return {!Array<!MarkdownIt.Token>}
 */
MarkdownIt.MarkdownIt.prototype.parse = function(src, env) {};

/**
 * @param {string} src
 * @param {?} env
 * @return {!Array<!MarkdownIt.Token>}
 */
MarkdownIt.MarkdownIt.prototype.parseInline = function(src, env) {};

/**
 * @param {?} plugin
 * @param {...?} params
 * @return {!MarkdownIt.MarkdownIt}
 */
MarkdownIt.MarkdownIt.prototype.use = function(plugin, params) {};

/**
 * @param {(string|!Array<string>)} rules
 * @param {boolean=} ignoreInvalid
 * @return {!MarkdownIt.MarkdownIt}
 */
MarkdownIt.MarkdownIt.prototype.disable = function(rules, ignoreInvalid) {};

/**
 * @param {(string|!Array<string>)} rules
 * @param {boolean=} ignoreInvalid
 * @return {!MarkdownIt.MarkdownIt}
 */
MarkdownIt.MarkdownIt.prototype.enable = function(rules, ignoreInvalid) {};

/**
 * @param {!MarkdownIt.Options} options
 * @return {!MarkdownIt.MarkdownIt}
 */
MarkdownIt.MarkdownIt.prototype.set = function(options) {};

/**
 * @param {string} url
 * @return {string}
 */
MarkdownIt.MarkdownIt.prototype.normalizeLink = function(url) {};

/**
 * @param {string} url
 * @return {string}
 */
MarkdownIt.MarkdownIt.prototype.normalizeLinkText = function(url) {};

/**
 * @param {string} url
 * @return {boolean}
 */
MarkdownIt.MarkdownIt.prototype.validateLink = function(url) {};
/**
 * @record
 * @struct
 */
MarkdownIt.Options = function() {};
 /** @type {boolean} */
MarkdownIt.Options.prototype.html;
 /** @type {boolean} */
MarkdownIt.Options.prototype.xhtmlOut;
 /** @type {boolean} */
MarkdownIt.Options.prototype.breaks;
 /** @type {string} */
MarkdownIt.Options.prototype.langPrefix;
 /** @type {boolean} */
MarkdownIt.Options.prototype.linkify;
 /** @type {boolean} */
MarkdownIt.Options.prototype.typographer;
 /** @type {string} */
MarkdownIt.Options.prototype.quotes;
 /** @type {function(string, string): void} */
MarkdownIt.Options.prototype.highlight;
/**
 * @record
 * @struct
 */
MarkdownIt.LinkifyIt = function() {};

/**
 * @param {string} lang
 * @param {boolean} linkified
 * @return {void}
 */
MarkdownIt.LinkifyIt.prototype.tlds = function(lang, linkified) {};
/**
 * @record
 * @struct
 */
MarkdownIt.Renderer = function() {};
 /** @type {!Object<string,function(!Array<!MarkdownIt.Token>, number, ?, ?, !MarkdownIt.Renderer): void>} */
MarkdownIt.Renderer.prototype.rules;

/**
 * @param {!Array<!MarkdownIt.Token>} tokens
 * @param {?} options
 * @param {?} env
 * @return {string}
 */
MarkdownIt.Renderer.prototype.render = function(tokens, options, env) {};

/**
 * @param {!MarkdownIt.Token} token
 * @return {string}
 */
MarkdownIt.Renderer.prototype.renderAttrs = function(token) {};

/**
 * @param {!Array<!MarkdownIt.Token>} tokens
 * @param {?} options
 * @param {?} env
 * @return {string}
 */
MarkdownIt.Renderer.prototype.renderInline = function(tokens, options, env) {};

/**
 * @param {!Array<!MarkdownIt.Token>} tokens
 * @param {number} idx
 * @param {?} options
 * @return {string}
 */
MarkdownIt.Renderer.prototype.renderToken = function(tokens, idx, options) {};
/**
 * @record
 * @struct
 */
MarkdownIt.Token = function() {};
 /** @type {function(string): string} */
MarkdownIt.Token.prototype.attrGet;
 /** @type {function(string): number} */
MarkdownIt.Token.prototype.attrIndex;
 /** @type {function(string, string): void} */
MarkdownIt.Token.prototype.attrJoin;
 /** @type {function(!Array<string>): void} */
MarkdownIt.Token.prototype.attrPush;
 /** @type {function(string, string): void} */
MarkdownIt.Token.prototype.attrSet;
 /** @type {!Array<!Array<string>>} */
MarkdownIt.Token.prototype.attrs;
 /** @type {boolean} */
MarkdownIt.Token.prototype.block;
 /** @type {!Array<!MarkdownIt.Token>} */
MarkdownIt.Token.prototype.children;
 /** @type {string} */
MarkdownIt.Token.prototype.content;
 /** @type {boolean} */
MarkdownIt.Token.prototype.hidden;
 /** @type {string} */
MarkdownIt.Token.prototype.info;
 /** @type {number} */
MarkdownIt.Token.prototype.level;
 /** @type {!Array<number>} */
MarkdownIt.Token.prototype.map;
 /** @type {string} */
MarkdownIt.Token.prototype.markup;
 /** @type {?} */
MarkdownIt.Token.prototype.meta;
 /** @type {number} */
MarkdownIt.Token.prototype.nesting;
 /** @type {string} */
MarkdownIt.Token.prototype.tag;
 /** @type {string} */
MarkdownIt.Token.prototype.type;

/** @typedef {function(!Array<!MarkdownIt.Token>, number, ?, ?, !MarkdownIt.Renderer): void} */
MarkdownIt.TokenRender;
/**
 * @record
 * @struct
 */
MarkdownIt.Rule = function() {};

/* TODO: CallSignature: MarkdownIt */
/**
 * @record
 * @struct
 */
MarkdownIt.Ruler = function() {};

/**
 * @param {string} afterName
 * @param {string} ruleName
 * @param {!MarkdownIt.Rule} rule
 * @param {?=} options
 * @return {void}
 */
MarkdownIt.Ruler.prototype.after = function(afterName, ruleName, rule, options) {};

/**
 * @param {string} name
 * @param {!MarkdownIt.Rule} rule
 * @param {?=} options
 * @return {void}
 */
MarkdownIt.Ruler.prototype.at = function(name, rule, options) {};

/**
 * @param {string} beforeName
 * @param {string} ruleName
 * @param {!MarkdownIt.Rule} rule
 * @param {?=} options
 * @return {void}
 */
MarkdownIt.Ruler.prototype.before = function(beforeName, ruleName, rule, options) {};

/**
 * @param {(string|!Array<string>)} rules
 * @param {boolean=} ignoreInvalid
 * @return {!Array<string>}
 */
MarkdownIt.Ruler.prototype.disable = function(rules, ignoreInvalid) {};

/**
 * @param {(string|!Array<string>)} rules
 * @param {boolean=} ignoreInvalid
 * @return {!Array<string>}
 */
MarkdownIt.Ruler.prototype.enable = function(rules, ignoreInvalid) {};

/**
 * @param {string} rule
 * @param {boolean=} ignoreInvalid
 * @return {void}
 */
MarkdownIt.Ruler.prototype.enableOnly = function(rule, ignoreInvalid) {};

/**
 * @param {string} chain
 * @return {!Array<!MarkdownIt.Rule>}
 */
MarkdownIt.Ruler.prototype.getRules = function(chain) {};

/**
 * @param {string} ruleName
 * @param {!MarkdownIt.Rule} rule
 * @param {?=} options
 * @return {void}
 */
MarkdownIt.Ruler.prototype.push = function(ruleName, rule, options) {};
/**
 * @record
 * @struct
 */
MarkdownIt.ParserBlock = function() {};
 /** @type {!MarkdownIt.Ruler} */
MarkdownIt.ParserBlock.prototype.ruler;

/**
 * @param {string} src
 * @param {!MarkdownIt.MarkdownIt} md
 * @param {?} env
 * @param {!Array<!MarkdownIt.Token>} outTokens
 * @return {void}
 */
MarkdownIt.ParserBlock.prototype.parse = function(src, md, env, outTokens) {};
/**
 * @record
 * @struct
 */
MarkdownIt.Core = function() {};
 /** @type {!MarkdownIt.Ruler} */
MarkdownIt.Core.prototype.ruler;

/**
 * @param {?} state
 * @return {void}
 */
MarkdownIt.Core.prototype.process = function(state) {};
/**
 * @record
 * @struct
 */
MarkdownIt.ParserInline = function() {};
 /** @type {!MarkdownIt.Ruler} */
MarkdownIt.ParserInline.prototype.ruler;
 /** @type {!MarkdownIt.Ruler} */
MarkdownIt.ParserInline.prototype.ruler2;

/**
 * @param {string} src
 * @param {!MarkdownIt.MarkdownIt} md
 * @param {?} env
 * @param {!Array<!MarkdownIt.Token>} outTokens
 * @return {void}
 */
MarkdownIt.ParserInline.prototype.parse = function(src, md, env, outTokens) {};
