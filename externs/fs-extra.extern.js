/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/fs-extra/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ExportDeclaration in  */

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function copy(src, dest, options_or_callback, callback) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} options
 * @return {void}
 */
function copySync(src, dest, options) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function move(src, dest, options_or_callback, callback) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} options
 * @return {void}
 */
function moveSync(src, dest, options) {}

/**
 * @param {string} file
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function createFile(file, callback) {}

/**
 * @param {string} file
 * @return {void}
 */
function createFileSync(file) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function ensureDir(path, callback) {}

/**
 * @param {string} path
 * @return {void}
 */
function ensureDirSync(path) {}

/**
 * @param {string} dir
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function mkdirs(dir, callback) {}

/**
 * @param {string} dir
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function mkdirp(dir, callback) {}

/**
 * @param {string} dir
 * @return {void}
 */
function mkdirsSync(dir) {}

/**
 * @param {string} dir
 * @return {void}
 */
function mkdirpSync(dir) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function outputFile(file, data, callback) {}

/**
 * @param {string} file
 * @param {?} data
 * @return {void}
 */
function outputFileSync(file, data) {}

/**
 * @param {string} file
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
function readJson(file, options_or_callback, callback) {}

/**
 * @param {string} file
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<?>|void}
 */
function readJSON(file, options_or_callback, callback) {}

/**
 * @param {string} file
 * @param {?=} options
 * @return {?}
 */
function readJsonSync(file, options) {}

/**
 * @param {string} file
 * @param {?=} options
 * @return {?}
 */
function readJSONSync(file, options) {}

/**
 * @param {string} dir
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function remove(dir, callback) {}

/**
 * @param {string} dir
 * @return {void}
 */
function removeSync(dir) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function outputJSON(file, data, options_or_callback, callback) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function outputJson(file, data, options_or_callback, callback) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} options
 * @return {void}
 */
function outputJsonSync(file, data, options) {}

/**
 * @param {string} file
 * @param {?} data
 * @param {?=} options
 * @return {void}
 */
function outputJSONSync(file, data, options) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function writeJSON(file, object, options_or_callback, callback) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function writeJson(file, object, options_or_callback, callback) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {void}
 */
function writeJsonSync(file, object, options) {}

/**
 * @param {string} file
 * @param {?} object
 * @param {?=} options
 * @return {void}
 */
function writeJSONSync(file, object, options) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function ensureFile(path, callback) {}

/**
 * @param {string} path
 * @return {void}
 */
function ensureFileSync(path) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function ensureLink(src, dest, callback) {}

/**
 * @param {string} src
 * @param {string} dest
 * @return {void}
 */
function ensureLinkSync(src, dest) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {string|?=} type_or_callback
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function ensureSymlink(src, dest, type_or_callback, callback) {}

/**
 * @param {string} src
 * @param {string} dest
 * @param {string=} type
 * @return {void}
 */
function ensureSymlinkSync(src, dest, type) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function emptyDir(path, callback) {}

/**
 * @param {string} path
 * @return {void}
 */
function emptyDirSync(path) {}

/**
 * @param {string} path
 * @param {?=} callback
 * @return {!Promise<boolean>|void}
 */
function pathExists(path, callback) {}

/**
 * @param {string} path
 * @return {boolean}
 */
function pathExistsSync(path) {}

/**
 * Tests a user's permissions for the file specified by path.
 * @param {(string|?)} path
 * @param {?|number=} callback_or_mode
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function access(path, callback_or_mode, callback) {}

/**
 * @param {(string|number|?)} file
 * @param {?} data
 * @param {?=} options_or_callback
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function appendFile(file, data, options_or_callback, callback) {}

/**
 * @param {(string|?)} path
 * @param {(string|number)} mode
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function chmod(path, mode, callback) {}

/**
 * @param {(string|?)} path
 * @param {number} uid
 * @param {number} gid
 * @param {?=} callback
 * @return {!Promise<void>|void}
 */
function chown(path, uid, gid, callback) {}

/**
 * @param {number} fd
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function close(fd, callback) {}

/**
 * @param {number} fd
 * @param {(string|number)} mode
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function fchmod(fd, mode, callback) {}

/**
 * @param {number} fd
 * @param {number} uid
 * @param {number} gid
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function fchown(fd, uid, gid, callback) {}

/**
 * @param {number} fd
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function fdatasync(fd, callback) {}

/**
 * @param {number} fd
 * @param {?=} callback
 * @return {void|!Promise<!Stats>}
 */
function fstat(fd, callback) {}

/**
 * @param {number} fd
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function fsync(fd, callback) {}

/**
 * @param {number} fd
 * @param {?|number=} callback_or_len
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function ftruncate(fd, callback_or_len, callback) {}

/**
 * @param {number} fd
 * @param {number|!Date} atime
 * @param {number|!Date} mtime
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function futimes(fd, atime, mtime, callback) {}

/**
 * @param {(string|?)} path
 * @param {number} uid
 * @param {number} gid
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function lchown(path, uid, gid, callback) {}

/**
 * @param {(string|?)} srcpath
 * @param {(string|?)} dstpath
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function link(srcpath, dstpath, callback) {}

/**
 * @param {(string|?)} path
 * @param {?=} callback
 * @return {void|!Promise<!Stats>}
 */
function lstat(path, callback) {}

/**
 * Asynchronous mkdir - creates the directory specified in {path}.  Parameter {mode} defaults to 0777.
 * 
 * Asynchronous mkdir - creates the directory specified in {path}.  Parameter {mode} defaults to 0777.
 * 
 * @param {(string|?)} path
 * @param {?|(string|number)=} callback_or_mode No arguments other than a possible exception are given to the completion callback.
 * @param {?=} callback No arguments other than a possible exception are given to the completion callback.
 * @return {void|!Promise<void>}
 */
function mkdir(path, callback_or_mode, callback) {}

/**
 * @param {(string|?)} path
 * @param {(string|number)} flags
 * @param {?|number=} callback_or_mode
 * @param {?=} callback
 * @return {void|!Promise<number>}
 */
function open(path, flags, callback_or_mode, callback) {}

/**
 * @param {number} fd
 * @param {?} buffer
 * @param {number} offset
 * @param {number} length
 * @param {number} position
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
function read(fd, buffer, offset, length, position, callback) {}

/**
 * @param {(string|number|?)} file
 * @param {?|string=} callback_or_encoding_or_options
 * @param {?=} callback
 * @return {void|!Promise<string>|!Promise<?>}
 */
function readFile(file, callback_or_encoding_or_options, callback) {}

/**
 * @param {(string|?)} path
 * @param {?=} callback
 * @return {void|!Promise<!Array<string>>}
 */
function readdir(path, callback) {}

/**
 * @param {(string|?)} path
 * @param {?=} callback
 * @return {void|!Promise<string>}
 */
function readlink(path, callback) {}

/**
 * @param {(string|?)} path
 * @param {?=} callback_or_cache
 * @param {?=} callback
 * @return {void|!Promise<string>}
 */
function realpath(path, callback_or_cache, callback) {}

/**
 * @param {string} oldPath
 * @param {string} newPath
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function rename(oldPath, newPath, callback) {}

/**
 * Asynchronous rmdir - removes the directory specified in {path}
 * 
 * @param {(string|?)} path
 * @param {?=} callback No arguments other than a possible exception are given to the completion callback.
 * @return {void|!Promise<void>}
 */
function rmdir(path, callback) {}

/**
 * @param {(string|?)} path
 * @param {?=} callback
 * @return {void|!Promise<!Stats>}
 */
function stat(path, callback) {}

/**
 * @param {(string|?)} srcpath
 * @param {(string|?)} dstpath
 * @param {string=} type
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function symlink(srcpath, dstpath, type, callback) {}

/**
 * @param {(string|?)} path
 * @param {?|number=} callback_or_len
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function truncate(path, callback_or_len, callback) {}

/**
 * Asynchronous unlink - deletes the file specified in {path}
 * 
 * @param {(string|?)} path
 * @param {?=} callback No arguments other than a possible exception are given to the completion callback.
 * @return {void|!Promise<void>}
 */
function unlink(path, callback) {}

/**
 * @param {(string|?)} path
 * @param {number|!Date} atime
 * @param {number|!Date} mtime
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function utimes(path, atime, mtime, callback) {}

/**
 * @param {number} fd
 * @param {?} buffer_or_data
 * @param {number|?} offset_or_callback
 * @param {number|?|string=} length_or_callback_or_encoding
 * @param {number|?=} position_or_callback
 * @param {?=} callback
 * @return {void|!Promise<?>}
 */
function write(fd, buffer_or_data, offset_or_callback, length_or_callback_or_encoding, position_or_callback, callback) {}

/**
 * @param {(string|number|?)} file
 * @param {?} data
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {void|!Promise<void>}
 */
function writeFile(file, data, callback_or_options, callback) {}

/**
 * Asynchronous mkdtemp - Creates a unique temporary directory. Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
 * 
 * @param {string} prefix
 * @param {?=} callback
 * @return {!Promise<string>|void}
 */
function mkdtemp(prefix, callback) {}
/**
 * @record
 * @struct
 */
function PathEntry() {}
 /** @type {string} */
PathEntry.prototype.path;
 /** @type {!Stats} */
PathEntry.prototype.stats;
/**
 * @record
 * @struct
 */
function PathEntryStream() {}

/**
 * @return {?}
 */
PathEntryStream.prototype.read = function() {};

/** @typedef {(!RegExp|?)} */
var CopyFilter;

/** @typedef {string} */
var SymlinkType;
/**
 * @record
 * @struct
 */
function CopyOptions() {}
 /** @type {boolean} */
CopyOptions.prototype.dereference;
 /** @type {boolean} */
CopyOptions.prototype.overwrite;
 /** @type {boolean} */
CopyOptions.prototype.preserveTimestamps;
 /** @type {boolean} */
CopyOptions.prototype.errorOnExist;
 /** @type {(!RegExp|?)} */
CopyOptions.prototype.filter;
 /** @type {boolean} */
CopyOptions.prototype.recursive;
/**
 * @record
 * @struct
 */
function MoveOptions() {}
 /** @type {boolean} */
MoveOptions.prototype.overwrite;
 /** @type {number} */
MoveOptions.prototype.limit;
/**
 * @record
 * @struct
 */
function ReadOptions() {}
 /** @type {boolean} */
ReadOptions.prototype.throws;
 /** @type {!Object} */
ReadOptions.prototype.fs;
 /** @type {?} */
ReadOptions.prototype.reviver;
 /** @type {string} */
ReadOptions.prototype.encoding;
 /** @type {string} */
ReadOptions.prototype.flag;
/**
 * @record
 * @struct
 */
function WriteOptions() {}
 /** @type {!Object} */
WriteOptions.prototype.fs;
 /** @type {?} */
WriteOptions.prototype.replacer;
 /** @type {number} */
WriteOptions.prototype.spaces;
 /** @type {string} */
WriteOptions.prototype.encoding;
 /** @type {string} */
WriteOptions.prototype.flag;
 /** @type {number} */
WriteOptions.prototype.mode;
/**
 * @record
 * @struct
 */
function ReadResult() {}
 /** @type {number} */
ReadResult.prototype.bytesRead;
 /** @type {?} */
ReadResult.prototype.buffer;
/**
 * @record
 * @struct
 */
function WriteResult() {}
 /** @type {number} */
WriteResult.prototype.bytesWritten;
 /** @type {?} */
WriteResult.prototype.buffer;
