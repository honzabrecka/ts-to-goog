/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/msnodesql/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * @param {string} connectionString
 * @param {?=} callback
 * @return {?}
 */
function open(connectionString, callback) {}

/**
 * @template T
 * @param {string} connectionString
 * @param {string} query
 * @param {?|!Array<?>=} callback_or_params
 * @param {?=} callback
 * @return {?}
 */
function query(connectionString, query, callback_or_params, callback) {}

/**
 * @param {string} connectionString
 * @param {string} query
 * @param {?|!Array<?>=} callback_or_params
 * @param {?=} callback
 * @return {?}
 */
function queryRaw(connectionString, query, callback_or_params, callback) {}
/**
 * @record
 * @struct
 */
function OpenCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function QueryCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function QueryRawCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function QueryRawResult() {}
 /** @type {!Array<?>} */
QueryRawResult.prototype.meta;
 /** @type {!Array<!Array<?>>} */
QueryRawResult.prototype.rows;
/**
 * @record
 * @struct
 */
function QueryRawColumn() {}
 /** @type {string} */
QueryRawColumn.prototype.name;
/**
 * @record
 * @struct
 */
function ErrorCallback() {}

/* TODO: CallSignature:  */
/**
 * @record
 * @struct
 */
function Connection() {}

/**
 * @template T
 * @param {string} query
 * @param {?|!Array<?>=} callback_or_params
 * @param {?=} callback
 * @return {?}
 */
Connection.prototype.query = function(query, callback_or_params, callback) {};

/**
 * @param {string} query
 * @param {?|!Array<?>=} callback_or_params
 * @param {?=} callback
 * @return {?}
 */
Connection.prototype.queryRaw = function(query, callback_or_params, callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
Connection.prototype.beginTransaction = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
Connection.prototype.commit = function(callback) {};

/**
 * @param {?=} callback
 * @return {?}
 */
Connection.prototype.rollback = function(callback) {};

/**
 * @param {?|boolean=} callback_or_immediately
 * @param {?=} callback
 * @return {?}
 */
Connection.prototype.close = function(callback_or_immediately, callback) {};
/**
 * @record
 * @struct
 */
function StreamEvents() {}
