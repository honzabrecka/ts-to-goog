/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/protractor-helpers/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var protractor = {};
/**
 * @record
 * @struct
 */
protractor.ElementArrayFinder = function() {};

/**
 * @param {string} text
 * @return {!protractor.ElementFinder}
 */
protractor.ElementArrayFinder.prototype.getByText = function(text) {};

/**
 * @param {string} hook
 * @return {!protractor.ElementArrayFinder}
 */
protractor.ElementArrayFinder.prototype.$$data = function(hook) {};
/**
 * @record
 * @struct
 */
protractor.ElementFinder = function() {};

/**
 * @param {string} hook
 * @return {!protractor.ElementFinder}
 */
protractor.ElementFinder.prototype.$data = function(hook) {};

/**
 * @param {string} hook
 * @return {!protractor.ElementFinder}
 */
function $data(hook) {}

/**
 * @param {string} hook
 * @return {!protractor.ElementArrayFinder}
 */
function $$data(hook) {}
/**
 * @record
 * @struct
 */
protractor.IProtractorLocatorStrategy = function() {};

/**
 * @param {string} hook
 * @param {!protractor.ElementFinder=} optParentElement
 * @param {string=} optRootSelector
 * @return {(!Function|?)}
 */
protractor.IProtractorLocatorStrategy.prototype.dataHook = function(hook, optParentElement, optRootSelector) {};

/**
 * @param {string} hook
 * @param {!protractor.ElementFinder=} optParentElement
 * @param {string=} optRootSelector
 * @return {(!Function|?)}
 */
protractor.IProtractorLocatorStrategy.prototype.dataHookAll = function(hook, optParentElement, optRootSelector) {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBePresent = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeDisplayed = function() {};

/**
 * @param {number} expectedCount
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveCountOf = function(expectedCount) {};

/**
 * @param {string} expectedText
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveText = function(expectedText) {};

/**
 * @param {!RegExp} regex
 * @return {boolean}
 */
jasmine.Matchers.prototype.toMatchRegex = function(regex) {};

/**
 * @param {number} expectedValue
 * @param {string=} currencySymbol
 * @return {boolean}
 */
jasmine.Matchers.prototype.toMatchMoney = function(expectedValue, currencySymbol) {};

/**
 * @param {number} expectedValue
 * @param {string=} currencySymbol
 * @return {boolean}
 */
jasmine.Matchers.prototype.toMatchMoneyWithFraction = function(expectedValue, currencySymbol) {};

/**
 * @param {(string|number)} actual
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveValue = function(actual) {};

/**
 * @param {string} className
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveClass = function(className) {};

/**
 * @param {string} url
 * @return {boolean}
 */
jasmine.Matchers.prototype.toHaveUrl = function(url) {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeDisabled = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeChecked = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeValid = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeInvalid = function() {};

/**
 * @return {boolean}
 */
jasmine.Matchers.prototype.toBeInvalidRequired = function() {};

/**
 * @param {string|!Array<string>} translationId
 * @param {?=} interpolateParams
 * @return {boolean}
 */
jasmine.Matchers.prototype.toMatchTranslated = function(translationId, interpolateParams) {};

/**
 * @param {?} arg
 * @return {?}
 */
function not(arg) {}

/**
 * @param {string|!Array<string>} translationId
 * @param {?=} interpolateParams
 * @return {?}
 */
function translate(translationId, interpolateParams) {}

/**
 * @param {string} url
 * @return {void}
 */
function safeGet(url) {}

/**
 * @param {number=} width
 * @param {number=} height
 * @return {void}
 */
function maximizeWindow(width, height) {}

/**
 * @return {void}
 */
function resetPosition() {}

/**
 * @param {string} hook
 * @return {void}
 */
function moveToElement(hook) {}

/**
 * @param {!protractor.ElementFinder} element
 * @return {void}
 */
function displayHover(element) {}

/**
 * @param {!protractor.ElementFinder} element
 * @param {number=} timeout
 * @return {void}
 */
function waitForElement(element, timeout) {}

/**
 * @param {!protractor.ElementFinder} element
 * @param {number=} timeout
 * @return {void}
 */
function waitForElementToDisappear(element, timeout) {}

/**
 * @param {!protractor.ElementFinder} select
 * @param {string} text
 * @return {void}
 */
function selectOptionByText(select, text) {}

/**
 * @param {!protractor.ElementFinder} select
 * @param {number} index
 * @return {void}
 */
function selectOptionByIndex(select, index) {}

/**
 * @param {!protractor.ElementFinder} option
 * @return {void}
 */
function selectOption(option) {}

/**
 * @return {boolean}
 */
function isFirefox() {}

/**
 * @return {boolean}
 */
function isIE() {}

/**
 * @param {string|!protractor.ElementFinder|!protractor.ElementArrayFinder} actual
 * @param {string} message
 * @param {?} isNot
 * @return {string}
 */
function createMessage(actual, message, isNot) {}

/**
 * @param {!protractor.ElementFinder} input
 * @param {string} value
 * @return {void}
 */
function clearAndSetValue(input, value) {}

/**
 * @param {!protractor.ElementFinder} element
 * @param {string} className
 * @return {?}
 */
function hasClass(element, className) {}

/**
 * @param {!protractor.ElementFinder} element
 * @param {string|number} expectedValue
 * @return {?}
 */
function hasValue(element, expectedValue) {}

/**
 * @param {!protractor.ElementFinder} element
 * @param {string} url
 * @return {?}
 */
function hasLink(element, url) {}

/**
 * @param {!protractor.ElementFinder} element
 * @return {?}
 */
function isDisabled(element) {}

/**
 * @param {!protractor.ElementFinder} element
 * @return {?}
 */
function isChecked(element) {}

/**
 * @return {?}
 */
function getFilteredConsoleErrors() {}
