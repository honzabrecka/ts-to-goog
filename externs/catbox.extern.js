/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/catbox/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var CallBackNoResult;

/** @typedef {?} */
var CallBackWithResult;

/**
 * @constructor
 * @struct
 * @param {?} engine
 * @param {?} options
 */
function Client(engine, options) {}

/**
 * start(callback) - creates a connection to the cache server. Must be called before any other method is available. The callback signature is function(err).
 * @param {?} callback
 * @return {void}
 */
Client.prototype.start = function(callback) {};

/**
 * stop() - terminates the connection to the cache server.
 * @return {void}
 */
Client.prototype.stop = function() {};

/**
 * get(key, callback) - retrieve an item from the cache engine if found where:
 *  * key - a cache key object (see [ICacheKey]).
 *  * callback - a function with the signature function(err, cached). If the item is not found, both err and cached are null. If found, the cached object is returned
 * @param {?} key
 * @param {?} callback
 * @return {?}
 */
Client.prototype.get = function(key, callback) {};

/**
 * set(key, value, ttl, callback) - store an item in the cache for a specified length of time, where:
 *  * key - a cache key object (see [ICacheKey]).
 *  * value - the string or object value to be stored.
 *  * ttl - a time-to-live value in milliseconds after which the item is automatically removed from the cache (or is marked invalid).
 *  * callback - a function with the signature function(err).
 * @param {?} key
 * @param {?} value
 * @param {number} ttl
 * @param {?} callback
 * @return {void}
 */
Client.prototype.set = function(key, value, ttl, callback) {};

/**
 * drop(key, callback) - remove an item from cache where:
 *  * key - a cache key object (see [ICacheKey]).
 *  * callback - a function with the signature function(err).
 * @param {?} key
 * @param {?} callback
 * @return {void}
 */
Client.prototype.drop = function(key, callback) {};

/**
 * isReady() - returns true if cache engine determines itself as ready, false if it is not ready.
 * @return {boolean}
 */
Client.prototype.isReady = function() {};

/**
 * validateSegmentName(segment) - returns null if the segment name is valid (see below), otherwise should return an instance of Error with an appropriate message.
 * @param {string} segment
 * @return {!Boom.BoomError<?>}
 */
Client.prototype.validateSegmentName = function(segment) {};

/** @typedef {?} */
var EnginePrototypeOrObject;
/**
 * @record
 * @struct
 */
function EnginePrototype() {}

/* TODO: ConstructSignature:  */
/**
 * @record
 * @struct
 */
function ClientApi() {}

/**
 * start(callback) - creates a connection to the cache server. Must be called before any other method is available. The callback signature is function(err).
 * @param {?} callback
 * @return {void}
 */
ClientApi.prototype.start = function(callback) {};

/**
 * stop() - terminates the connection to the cache server.
 * @return {void}
 */
ClientApi.prototype.stop = function() {};

/**
 * get(key, callback) - retrieve an item from the cache engine if found where:
 *  * key - a cache key object (see [ICacheKey]).
 *  * callback - a function with the signature function(err, cached). If the item is not found, both err and cached are null. If found, the cached object is returned
 * @param {?} key
 * @param {?} callback
 * @return {?}
 */
ClientApi.prototype.get = function(key, callback) {};

/**
 * set(key, value, ttl, callback) - store an item in the cache for a specified length of time, where:
 *  * key - a cache key object (see [ICacheKey]).
 *  * value - the string or object value to be stored.
 *  * ttl - a time-to-live value in milliseconds after which the item is automatically removed from the cache (or is marked invalid).
 *  * callback - a function with the signature function(err).
 * @param {?} key
 * @param {?} value
 * @param {number} ttl
 * @param {?} callback
 * @return {void}
 */
ClientApi.prototype.set = function(key, value, ttl, callback) {};

/**
 * drop(key, callback) - remove an item from cache where:
 *  * key - a cache key object (see [ICacheKey]).
 *  * callback - a function with the signature function(err).
 * @param {?} key
 * @param {?} callback
 * @return {void}
 */
ClientApi.prototype.drop = function(key, callback) {};

/**
 * isReady() - returns true if cache engine determines itself as ready, false if it is not ready.
 * @return {boolean}
 */
ClientApi.prototype.isReady = function() {};

/**
 * validateSegmentName(segment) - returns null if the segment name is valid (see below), otherwise should return an instance of Error with an appropriate message.
 * @param {string} segment
 * @return {!Boom.BoomError<?>}
 */
ClientApi.prototype.validateSegmentName = function(segment) {};
/**
 * @record
 * @struct
 */
function CacheKey() {}
 /** @type {string} */
CacheKey.prototype.segment;
 /** @type {string} */
CacheKey.prototype.id;
/**
 * @record
 * @struct
 */
function CachedObject() {}
 /** @type {?} */
CachedObject.prototype.item;
 /** @type {number} */
CachedObject.prototype.stored;
 /** @type {number} */
CachedObject.prototype.ttl;

/** @typedef {?} */
var CacheItem;
/**
 * @record
 * @struct
 */
function ClientOptions() {}
 /** @type {string} */
ClientOptions.prototype.partition;

/**
 * @constructor
 * @struct
 * @param {?} options
 * @param {?} cache
 * @param {string} segment
 */
function Policy(options, cache, segment) {}

/**
 * get(id, callback) - retrieve an item from the cache. If the item is not found and the generateFunc method was provided,
 * a new value is generated, stored in the cache, and returned. Multiple concurrent requests are queued and processed once. The method arguments are:
 *  * id - the unique item identifier (within the policy segment). Can be a string or an object with the required 'id' key.
 *  * callback - the return function.
 * @param {(string|?)} id
 * @param {?} callback
 * @return {?}
 */
Policy.prototype.get = function(id, callback) {};

/**
 * set(id, value, ttl, callback) - store an item in the cache where:
 *  * id - the unique item identifier (within the policy segment).
 *  * value - the string or object value to be stored.
 *  * ttl - a time-to-live override value in milliseconds after which the item is automatically removed from the cache (or is marked invalid).
 *    This should be set to 0 in order to use the caching rules configured when creating the Policy object.
 *  * callback - a function with the signature function(err).
 * @param {(string|?)} id
 * @param {?} value
 * @param {number} ttl
 * @param {?} callback
 * @return {void}
 */
Policy.prototype.set = function(id, value, ttl, callback) {};

/**
 * drop(id, callback) - remove the item from cache where:
 *  * id - the unique item identifier (within the policy segment).
 *  * callback - a function with the signature function(err).
 * @param {(string|?)} id
 * @param {?} callback
 * @return {void}
 */
Policy.prototype.drop = function(id, callback) {};

/**
 * ttl(created) - given a created timestamp in milliseconds, returns the time-to-live left based on the configured rules.
 * @param {number} created
 * @return {number}
 */
Policy.prototype.ttl = function(created) {};

/**
 * rules(options) - changes the policy rules after construction (note that items already stored will not be affected)
 * @param {?} options
 * @return {void}
 */
Policy.prototype.rules = function(options) {};

/**
 * isReady() - returns true if cache engine determines itself as ready, false if it is not ready or if there is no cache engine set.
 * @return {boolean}
 */
Policy.prototype.isReady = function() {};

/**
 * stats - an object with cache statistics
 * @return {?}
 */
Policy.prototype.stats = function() {};
/**
 * @record
 * @struct
 */
function PolicyAPI() {}

/**
 * get(id, callback) - retrieve an item from the cache. If the item is not found and the generateFunc method was provided,
 * a new value is generated, stored in the cache, and returned. Multiple concurrent requests are queued and processed once. The method arguments are:
 *  * id - the unique item identifier (within the policy segment). Can be a string or an object with the required 'id' key.
 *  * callback - the return function.
 * @param {(string|?)} id
 * @param {?} callback
 * @return {?}
 */
PolicyAPI.prototype.get = function(id, callback) {};

/**
 * set(id, value, ttl, callback) - store an item in the cache where:
 *  * id - the unique item identifier (within the policy segment).
 *  * value - the string or object value to be stored.
 *  * ttl - a time-to-live override value in milliseconds after which the item is automatically removed from the cache (or is marked invalid).
 *    This should be set to 0 in order to use the caching rules configured when creating the Policy object.
 *  * callback - a function with the signature function(err).
 * @param {(string|?)} id
 * @param {?} value
 * @param {number} ttl
 * @param {?} callback
 * @return {void}
 */
PolicyAPI.prototype.set = function(id, value, ttl, callback) {};

/**
 * drop(id, callback) - remove the item from cache where:
 *  * id - the unique item identifier (within the policy segment).
 *  * callback - a function with the signature function(err).
 * @param {(string|?)} id
 * @param {?} callback
 * @return {void}
 */
PolicyAPI.prototype.drop = function(id, callback) {};

/**
 * ttl(created) - given a created timestamp in milliseconds, returns the time-to-live left based on the configured rules.
 * @param {number} created
 * @return {number}
 */
PolicyAPI.prototype.ttl = function(created) {};

/**
 * rules(options) - changes the policy rules after construction (note that items already stored will not be affected)
 * @param {?} options
 * @return {void}
 */
PolicyAPI.prototype.rules = function(options) {};

/**
 * isReady() - returns true if cache engine determines itself as ready, false if it is not ready or if there is no cache engine set.
 * @return {boolean}
 */
PolicyAPI.prototype.isReady = function() {};

/**
 * stats - an object with cache statistics
 * @return {?}
 */
PolicyAPI.prototype.stats = function() {};

/** @typedef {?} */
var PolicyGetCallback;
/**
 * @record
 * @struct
 */
function PolicyGetCallbackCachedOptions() {}
 /** @type {?} */
PolicyGetCallbackCachedOptions.prototype.item;
 /** @type {number} */
PolicyGetCallbackCachedOptions.prototype.stored;
 /** @type {number} */
PolicyGetCallbackCachedOptions.prototype.ttl;
 /** @type {boolean} */
PolicyGetCallbackCachedOptions.prototype.isStale;
/**
 * @record
 * @struct
 */
function PolicyOptions() {}
 /** @type {number} */
PolicyOptions.prototype.expiresIn;
 /** @type {string} */
PolicyOptions.prototype.expiresAt;
 /** @type {?} */
PolicyOptions.prototype.generateFunc;
 /** @type {(number|?)} */
PolicyOptions.prototype.staleIn;
 /** @type {number} */
PolicyOptions.prototype.staleTimeout;
 /** @type {(number|boolean)} */
PolicyOptions.prototype.generateTimeout;
 /** @type {boolean} */
PolicyOptions.prototype.dropOnError;
 /** @type {boolean} */
PolicyOptions.prototype.generateOnReadError;
 /** @type {boolean} */
PolicyOptions.prototype.generateIgnoreWriteError;
 /** @type {number} */
PolicyOptions.prototype.pendingGenerateTimeout;

/** @typedef {?} */
var GenerateFunc;
/**
 * @record
 * @struct
 */
function PolicyGetCallbackReportLog() {}
 /** @type {number} */
PolicyGetCallbackReportLog.prototype.msec;
 /** @type {number} */
PolicyGetCallbackReportLog.prototype.stored;
 /** @type {boolean} */
PolicyGetCallbackReportLog.prototype.isStale;
 /** @type {number} */
PolicyGetCallbackReportLog.prototype.ttl;
 /** @type {!Boom.BoomError<?>} */
PolicyGetCallbackReportLog.prototype.error;
/**
 * @record
 * @struct
 */
function CacheStatisticsObject() {}
 /** @type {number} */
CacheStatisticsObject.prototype.sets;
 /** @type {number} */
CacheStatisticsObject.prototype.gets;
 /** @type {number} */
CacheStatisticsObject.prototype.hits;
 /** @type {number} */
CacheStatisticsObject.prototype.stales;
 /** @type {number} */
CacheStatisticsObject.prototype.generates;
 /** @type {number} */
CacheStatisticsObject.prototype.errors;
