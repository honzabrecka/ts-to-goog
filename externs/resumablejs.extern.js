/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/resumablejs/index.d.ts:
/** @const */
var Resumable = {};
/**
 * @record
 * @struct
 */
Resumable.ConfigurationHash = function() {};
 /** @type {string} */
Resumable.ConfigurationHash.prototype.target;
 /** @type {number} */
Resumable.ConfigurationHash.prototype.chunkSize;
 /** @type {boolean} */
Resumable.ConfigurationHash.prototype.forceChunkSize;
 /** @type {number} */
Resumable.ConfigurationHash.prototype.simultaneousUploads;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.fileParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.chunkNumberParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.totalChunksParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.chunkSizeParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.totalSizeParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.identifierParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.fileNameParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.relativePathParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.currentChunkSizeParameterName;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.typeParameterName;
 /** @type {!Object} */
Resumable.ConfigurationHash.prototype.query;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.testMethod;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.uploadMethod;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.parameterNamespace;
 /** @type {(!Object|function(!Resumable.ResumableFile): !Object)} */
Resumable.ConfigurationHash.prototype.headers;
 /** @type {string} */
Resumable.ConfigurationHash.prototype.method;
 /** @type {boolean} */
Resumable.ConfigurationHash.prototype.prioritizeFirstAndLastChunk;
 /** @type {boolean} */
Resumable.ConfigurationHash.prototype.testChunks;
 /** @type {function(!Resumable.ResumableChunk): !Resumable.ResumableChunk} */
Resumable.ConfigurationHash.prototype.preprocess;
 /** @type {function(): string} */
Resumable.ConfigurationHash.prototype.generateUniqueIdentifier;
 /** @type {number} */
Resumable.ConfigurationHash.prototype.maxFiles;
 /** @type {function(!Resumable.ResumableFile, number): void} */
Resumable.ConfigurationHash.prototype.maxFilesErrorCallback;
 /** @type {boolean} */
Resumable.ConfigurationHash.prototype.minFileSize;
 /** @type {function(!Resumable.ResumableFile, number): void} */
Resumable.ConfigurationHash.prototype.minFileSizeErrorCallback;
 /** @type {boolean} */
Resumable.ConfigurationHash.prototype.maxFileSize;
 /** @type {function(!Resumable.ResumableFile, number): void} */
Resumable.ConfigurationHash.prototype.maxFileSizeErrorCallback;
 /** @type {!Array<string>} */
Resumable.ConfigurationHash.prototype.fileType;
 /** @type {function(!Resumable.ResumableFile, number): void} */
Resumable.ConfigurationHash.prototype.fileTypeErrorCallback;
 /** @type {number} */
Resumable.ConfigurationHash.prototype.maxChunkRetries;
 /** @type {number} */
Resumable.ConfigurationHash.prototype.chunkRetryInterval;
 /** @type {boolean} */
Resumable.ConfigurationHash.prototype.withCredentials;

/**
 * @constructor
 * @struct
 * @param {!Resumable.ConfigurationHash} options
 */
Resumable.Resumable = function(options) {};
 /** @type {boolean} */
Resumable.Resumable.prototype.support;
 /** @type {!Resumable.ConfigurationHash} */
Resumable.Resumable.prototype.opts;
 /** @type {!Array<!Resumable.ResumableFile>} */
Resumable.Resumable.prototype.files;
 /** @type {!Resumable.ConfigurationHash} */
Resumable.Resumable.prototype.defaults;
 /** @type {!Array<!Event>} */
Resumable.Resumable.prototype.events;
 /** @type {number} */
Resumable.Resumable.prototype.version;

/**
 * Assign a browse action to one or more DOM nodes. Pass in true to allow directories to be selected (Chrome only).
 * 
 * @param {!Element|!Array<!Element>} domNode_or_domNodes
 * @param {boolean} isDirectory
 * @return {void}
 */
Resumable.Resumable.prototype.assignBrowse = function(domNode_or_domNodes, isDirectory) {};

/**
 * Assign one or more DOM nodes as a drop target.
 * 
 * @param {!Element|!Array<!Element>} domNode_or_domNodes
 * @return {void}
 */
Resumable.Resumable.prototype.assignDrop = function(domNode_or_domNodes) {};

/**
 * @param {!Element|!Array<!Element>} domNode_or_domNodes
 * @return {void}
 */
Resumable.Resumable.prototype.unAssignDrop = function(domNode_or_domNodes) {};

/**
 * Start or resume uploading.
 * 
 * @return {void}
 */
Resumable.Resumable.prototype.upload = function() {};

/**
 * @return {void}
 */
Resumable.Resumable.prototype.uploadNextChunk = function() {};

/**
 * Pause uploading.
 * 
 * @return {void}
 */
Resumable.Resumable.prototype.pause = function() {};

/**
 * Cancel upload of all ResumableFile objects and remove them from the list.
 * 
 * @return {void}
 */
Resumable.Resumable.prototype.cancel = function() {};

/**
 * @return {void}
 */
Resumable.Resumable.prototype.fire = function() {};

/**
 * Returns a float between 0 and 1 indicating the current upload progress of all files.
 * 
 * @return {number}
 */
Resumable.Resumable.prototype.progress = function() {};

/**
 * Returns a boolean indicating whether or not the instance is currently uploading anything.
 * 
 * @return {boolean}
 */
Resumable.Resumable.prototype.isUploading = function() {};

/**
 * Add a HTML5 File object to the list of files.
 * 
 * @param {!File} file
 * @param {!Event} event
 * @return {void}
 */
Resumable.Resumable.prototype.addFile = function(file, event) {};

/**
 * Cancel upload of a specific ResumableFile object on the list from the list.
 * 
 * @param {!Resumable.ResumableFile} file
 * @return {void}
 */
Resumable.Resumable.prototype.removeFile = function(file) {};

/**
 * Look up a ResumableFile object by its unique identifier.
 * 
 * @param {string} uniqueIdentifier
 * @return {void}
 */
Resumable.Resumable.prototype.getFromUniqueIdentifier = function(uniqueIdentifier) {};

/**
 * Returns the total size of the upload in bytes.
 * 
 * @return {number}
 */
Resumable.Resumable.prototype.getSize = function() {};

/**
 * @param {string} o
 * @return {?}
 */
Resumable.Resumable.prototype.getOpt = function(o) {};

/**
 * Change event handler
 * 
 * @param {!Event} e
 * @return {void}
 */
Resumable.Resumable.prototype.handleChangeEvent = function(e) {};

/**
 * Drop event handler
 * 
 * @param {!Event} e
 * @return {void}
 */
Resumable.Resumable.prototype.handleDropEvent = function(e) {};

/**
 *  A specific file was completed.
 * 
 *  Uploading progressed for a specific file.
 * 
 *  A new file was added. Optionally, you can use the browser event object from when the file was added.
 * 
 *  New files were added.
 * 
 *  Something went wrong during upload of a specific file, uploading is being retried.
 * 
 *  An error occurred during upload of a specific file.
 * 
 *  Upload has been started on the Resumable object.
 * 
 *  Uploading completed.
 * 
 *  Uploading progress.
 * 
 *  An error, including fileError, occurred.
 * 
 *  Uploading was paused.
 * 
 *  Triggers before the items are cancelled allowing to do any processing on uploading files.
 * 
 *  Uploading was canceled.
 * 
 *  Started preparing file for upload
 * 
 *  Show progress in file preparation
 * 
 *  File is ready for upload
 * 
 * Listen to all the events listed above with the same callback function.
 * 
 * Listen for event from Resumable.js (see below)
 * 
 * @param {string} event
 * @param {function(!Resumable.ResumableFile): void|function(!Resumable.ResumableFile, !DragEvent): void|function(!Array<!Resumable.ResumableFile>): void|function(!Resumable.ResumableFile, string): void|function(): void|function(string, !Resumable.ResumableFile): void|function(!Resumable.ResumableFile, number): void|!Function} callback
 * @return {void}
 */
Resumable.Resumable.prototype.on = function(event, callback) {};
/**
 * @record
 * @struct
 */
Resumable.ResumableFile = function() {};
 /** @type {!Resumable.Resumable} */
Resumable.ResumableFile.prototype.resumableObj;
 /** @type {!File} */
Resumable.ResumableFile.prototype.file;
 /** @type {string} */
Resumable.ResumableFile.prototype.fileName;
 /** @type {string} */
Resumable.ResumableFile.prototype.relativePath;
 /** @type {number} */
Resumable.ResumableFile.prototype.size;
 /** @type {string} */
Resumable.ResumableFile.prototype.uniqueIdentifier;
 /** @type {!Array<!Resumable.ResumableChunk>} */
Resumable.ResumableFile.prototype.chunks;
 /** @type {function(boolean): number} */
Resumable.ResumableFile.prototype.progress;
 /** @type {function(): void} */
Resumable.ResumableFile.prototype.abort;
 /** @type {function(): void} */
Resumable.ResumableFile.prototype.cancel;
 /** @type {function(): void} */
Resumable.ResumableFile.prototype.retry;
 /** @type {function(): void} */
Resumable.ResumableFile.prototype.bootstrap;
 /** @type {function(): boolean} */
Resumable.ResumableFile.prototype.isUploading;
 /** @type {function(): boolean} */
Resumable.ResumableFile.prototype.isComplete;
/**
 * @record
 * @struct
 */
Resumable.ResumableChunk = function() {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "resumablejs"
/** @const */
tsickle_declare_module.resumablejs = {};

/* TODO: ExportAssignment in tsickle_declare_module.resumablejs */
