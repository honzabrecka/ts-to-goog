/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ecurve/index.d.ts:

/* TODO: ImportEqualsDeclaration in  */

/**
 * @constructor
 * @struct
 * @param {!bigi} p
 * @param {!bigi} a
 * @param {!bigi} b
 * @param {!bigi} Gx
 * @param {!bigi} Gy
 * @param {!bigi} n
 * @param {!bigi} h
 */
function Curve(p, a, b, Gx, Gy, n, h) {}
 /** @type {!bigi} */
Curve.prototype.p;
 /** @type {!bigi} */
Curve.prototype.a;
 /** @type {!bigi} */
Curve.prototype.b;
 /** @type {?} */
Curve.prototype.G;
 /** @type {!bigi} */
Curve.prototype.n;
 /** @type {!bigi} */
Curve.prototype.h;

/**
 * @param {?} Q
 * @return {boolean}
 */
Curve.prototype.isInfinity = function(Q) {};

/**
 * @param {?} Q
 * @return {boolean}
 */
Curve.prototype.isOnCurve = function(Q) {};

/**
 * @param {boolean} isOdd
 * @param {?} x
 * @return {?}
 */
Curve.prototype.pointFromX = function(isOdd, x) {};

/**
 * @param {?} Q
 * @return {boolean}
 */
Curve.prototype.validate = function(Q) {};

/**
 * @constructor
 * @struct
 * @param {?} curve
 * @param {!bigi} x
 * @param {!bigi} y
 * @param {!bigi} z
 */
function Point(curve, x, y, z) {}
 /** @type {!bigi} */
Point.prototype.x;
 /** @type {!bigi} */
Point.prototype.y;
 /** @type {!bigi} */
Point.prototype.z;
 /** @type {!bigi} */
Point.prototype.affineX;
 /** @type {!bigi} */
Point.prototype.affineY;

/**
 * @param {?} b
 * @return {?}
 */
Point.prototype.add = function(b) {};

/**
 * @param {?} other
 * @return {boolean}
 */
Point.prototype.equals = function(other) {};

/**
 * @param {boolean=} compressed
 * @return {?}
 */
Point.prototype.getEncoded = function(compressed) {};

/**
 * @param {?} k
 * @return {?}
 */
Point.prototype.multiply = function(k) {};

/**
 * @param {?} j
 * @param {?} x
 * @param {?} k
 * @return {?}
 */
Point.prototype.multiplyTwo = function(j, x, k) {};

/**
 * @return {?}
 */
Point.prototype.negate = function() {};

/**
 * @return {string}
 */
Point.prototype.toString = function() {};

/**
 * @return {?}
 */
Point.prototype.twice = function() {};

/**
 * @param {?} curve
 * @param {?} buffer
 * @return {?}
 */
Point.decodeFrom = function(curve, buffer) {};

/**
 * @param {?} curve
 * @param {!bigi} x
 * @param {!bigi} y
 * @return {?}
 */
Point.fromAffine = function(curve, x, y) {};

/**
 * @param {string} name
 * @return {?}
 */
function getCurveByName(name) {}
