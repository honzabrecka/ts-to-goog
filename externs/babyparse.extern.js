/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/babyparse/index.d.ts:
/** @const */
var BabyParse = {};
/**
 * @record
 * @struct
 */
BabyParse.Static = function() {};
 /** @type {!Array<string>} */
BabyParse.Static.prototype.BAD_DELIMETERS;
 /** @type {string} */
BabyParse.Static.prototype.RECORD_SEP;
 /** @type {string} */
BabyParse.Static.prototype.UNIT_SEP;
 /** @type {boolean} */
BabyParse.Static.prototype.WORKERS_SUPPORTED;
 /** @type {string} */
BabyParse.Static.prototype.SCRIPT_PATH;
 /** @type {string} */
BabyParse.Static.prototype.LocalChunkSize;
 /** @type {string} */
BabyParse.Static.prototype.RemoteChunkSize;
 /** @type {string} */
BabyParse.Static.prototype.DefaultDelimiter;
 /** @type {!BabyParse.ParserConstructor} */
BabyParse.Static.prototype.Parser;

/**
 * Parse a csv string or a csv file
 * @param {string} csvString
 * @param {!BabyParse.ParseConfig=} config
 * @return {!BabyParse.ParseResult}
 */
BabyParse.Static.prototype.parse = function(csvString, config) {};

/**
 * Parse single file or multiple files
 * @param {(string|!Array<string>|!BabyParse.FileObject|!Array<!BabyParse.FileObject>)} input
 * @param {!BabyParse.ParseConfig=} config
 * @return {!BabyParse.ParseResult}
 */
BabyParse.Static.prototype.parseFiles = function(input, config) {};

/**
 * Unparses javascript data objects and returns a csv string
 * @param {!Array<!Object>|!Array<!Array<?>>|!BabyParse.UnparseObject} data
 * @param {!BabyParse.UnparseConfig=} config
 * @return {string}
 */
BabyParse.Static.prototype.unparse = function(data, config) {};
/**
 * @record
 * @struct
 */
BabyParse.ParseConfig = function() {};
 /** @type {string} */
BabyParse.ParseConfig.prototype.delimiter;
 /** @type {string} */
BabyParse.ParseConfig.prototype.newline;
 /** @type {boolean} */
BabyParse.ParseConfig.prototype.header;
 /** @type {boolean} */
BabyParse.ParseConfig.prototype.dynamicTyping;
 /** @type {number} */
BabyParse.ParseConfig.prototype.preview;
 /** @type {string} */
BabyParse.ParseConfig.prototype.encoding;
 /** @type {boolean} */
BabyParse.ParseConfig.prototype.worker;
 /** @type {boolean} */
BabyParse.ParseConfig.prototype.comments;
 /** @type {boolean} */
BabyParse.ParseConfig.prototype.download;
 /** @type {boolean} */
BabyParse.ParseConfig.prototype.skipEmptyLines;
 /** @type {boolean} */
BabyParse.ParseConfig.prototype.fastMode;

/**
 * @param {!BabyParse.ParseResult} results
 * @param {!BabyParse.Parser} parser
 * @return {void}
 */
BabyParse.ParseConfig.prototype.step = function(results, parser) {};

/**
 * @param {!BabyParse.ParseResult} results
 * @return {void}
 */
BabyParse.ParseConfig.prototype.complete = function(results) {};
/**
 * @record
 * @struct
 */
BabyParse.UnparseConfig = function() {};
 /** @type {(boolean|!Array<boolean>)} */
BabyParse.UnparseConfig.prototype.quotes;
 /** @type {string} */
BabyParse.UnparseConfig.prototype.delimiter;
 /** @type {string} */
BabyParse.UnparseConfig.prototype.newline;
/**
 * @record
 * @struct
 */
BabyParse.UnparseObject = function() {};
 /** @type {!Array<?>} */
BabyParse.UnparseObject.prototype.fields;
 /** @type {(string|!Array<?>)} */
BabyParse.UnparseObject.prototype.data;
/**
 * @record
 * @struct
 */
BabyParse.FileObject = function() {};
 /** @type {string} */
BabyParse.FileObject.prototype.file;
 /** @type {!BabyParse.ParseConfig} */
BabyParse.FileObject.prototype.config;
/**
 * @record
 * @struct
 */
BabyParse.ParseError = function() {};
 /** @type {string} */
BabyParse.ParseError.prototype.type;
 /** @type {string} */
BabyParse.ParseError.prototype.code;
 /** @type {string} */
BabyParse.ParseError.prototype.message;
 /** @type {number} */
BabyParse.ParseError.prototype.row;
/**
 * @record
 * @struct
 */
BabyParse.ParseMeta = function() {};
 /** @type {string} */
BabyParse.ParseMeta.prototype.delimiter;
 /** @type {string} */
BabyParse.ParseMeta.prototype.linebreak;
 /** @type {boolean} */
BabyParse.ParseMeta.prototype.aborted;
 /** @type {!Array<string>} */
BabyParse.ParseMeta.prototype.fields;
 /** @type {boolean} */
BabyParse.ParseMeta.prototype.truncated;
/**
 * @record
 * @struct
 */
BabyParse.ParseResult = function() {};
 /** @type {!Array<?>} */
BabyParse.ParseResult.prototype.data;
 /** @type {!Array<!BabyParse.ParseError>} */
BabyParse.ParseResult.prototype.errors;
 /** @type {!BabyParse.ParseMeta} */
BabyParse.ParseResult.prototype.meta;
/**
 * @record
 * @struct
 */
BabyParse.ParserConstructor = function() {};

/* TODO: ConstructSignature: BabyParse */
/**
 * @record
 * @struct
 */
BabyParse.Parser = function() {};

/**
 * @param {string} input
 * @return {?}
 */
BabyParse.Parser.prototype.parse = function(input) {};

/**
 * @return {void}
 */
BabyParse.Parser.prototype.abort = function() {};

/**
 * @return {number}
 */
BabyParse.Parser.prototype.getCharIndex = function() {};
 /** @type {!BabyParse.Static} */
var Baby;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "babyparse"
/** @const */
tsickle_declare_module.babyparse = {};
 /** @type {!BabyParse.Static} */
tsickle_declare_module.babyparse.Baby;

/* TODO: ExportAssignment in tsickle_declare_module.babyparse */
