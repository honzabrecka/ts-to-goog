/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/d3-chord/index.d.ts:
/**
 * @record
 * @struct
 */
function ChordSubgroup() {}
 /** @type {number} */
ChordSubgroup.prototype.startAngle;
 /** @type {number} */
ChordSubgroup.prototype.endAngle;
 /** @type {number} */
ChordSubgroup.prototype.value;
 /** @type {number} */
ChordSubgroup.prototype.index;
 /** @type {number} */
ChordSubgroup.prototype.subindex;
/**
 * @record
 * @struct
 */
function Chord() {}
 /** @type {?} */
Chord.prototype.source;
 /** @type {?} */
Chord.prototype.target;
/**
 * @record
 * @struct
 */
function ChordGroup() {}
 /** @type {number} */
ChordGroup.prototype.startAngle;
 /** @type {number} */
ChordGroup.prototype.endAngle;
 /** @type {number} */
ChordGroup.prototype.value;
 /** @type {number} */
ChordGroup.prototype.index;
/**
 * @record
 * @struct
 */
function Chords() {}
 /** @type {!Array<?>} */
Chords.prototype.groups;
/**
 * @record
 * @struct
 */
function ChordLayout() {}

/* TODO: CallSignature:  */

/**
 * Returns the current pad angle in radians, which defaults to zero.
 * Sets the pad angle between adjacent groups to the specified number in radians and returns this chord layout.
 * 
 * The default is zero.
 * 
 * @param {number=} angle Pad angle between adjecent groups in radians.
 * @return {number|?}
 */
ChordLayout.prototype.padAngle = function(angle) {};

/**
 * Returns the current group comparator, which defaults to null.
 * Removes the current group comparator and returns this chord layout.
 * 
 * Sets the group comparator to the specified function and returns this chord layout.
 * 
 * If the group comparator is non-null, it is used to sort the groups by their total outflow. See also d3.ascending and d3.descending.
 * 
 * @param {null|?=} compare Use null to remove the current comparator function, if any. / A comparator function, e.g. d3.ascending or d3.descending.
 * @return {?}
 */
ChordLayout.prototype.sortGroups = function(compare) {};

/**
 * Returns the current subgroup comparator, which defaults to null.
 * Removes the current subgroup comparator and returns this chord layout.
 * 
 * Sets the subgroup comparator to the specified function and returns this chord layout.
 * 
 * If the subgroup comparator is non-null, it is used to sort the subgroups corresponding to matrix[i][0 â€¦ n - 1]
 * for a given group i by their total outflow. See also d3.ascending and d3.descending.
 * 
 * @param {null|?=} compare Use null to remove the current comparator function, if any. / A comparator function, e.g. d3.ascending or d3.descending.
 * @return {?}
 */
ChordLayout.prototype.sortSubgroups = function(compare) {};

/**
 * Returns the current chord comparator, which defaults to null.
 * Removes the current chord comparator and returns this chord layout.
 * 
 * Sets the chord comparator to the specified function and returns this chord layout.
 * 
 * If the chord comparator is non-null, it is used to sort the chords by their combined flow; this only affects the z-order of the chords.
 * See also d3.ascending and d3.descending.
 * 
 * @param {null|?=} compare Use null to remove the current comparator function, if any. / A comparator function, e.g. d3.ascending or d3.descending.
 * @return {?}
 */
ChordLayout.prototype.sortChords = function(compare) {};

/**
 * Constructs a new chord diagram layout with the default settings.
 * @return {?}
 */
function chord() {}
/**
 * @record
 * @struct
 */
function RibbonSubgroup() {}
 /** @type {number} */
RibbonSubgroup.prototype.startAngle;
 /** @type {number} */
RibbonSubgroup.prototype.endAngle;
 /** @type {number} */
RibbonSubgroup.prototype.radius;
/**
 * @record
 * @struct
 */
function Ribbon() {}
 /** @type {?} */
Ribbon.prototype.source;
 /** @type {?} */
Ribbon.prototype.target;
/**
 * @record
 * @struct
 */
function RibbonGenerator() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * Returns the current source accessor, which defaults to a function returning the "source" property of the first argument passed into the accessor.
 * Sets the source accessor to the specified function and returns this ribbon generator.
 * 
 * @param {?=} source An accessor function returning the source datum of the chord. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the ribbon generator.
 * @return {?}
 */
RibbonGenerator.prototype.source = function(source) {};

/**
 * Returns the current target accessor, which defaults to a function returning the "target" property of the first argument passed into the accessor.
 * Sets the target accessor to the specified function and returns this ribbon generator.
 * 
 * @param {?=} target An accessor function returning the target datum of the chord. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives the same arguments that were passed into the ribbon generator.
 * @return {?}
 */
RibbonGenerator.prototype.target = function(target) {};

/**
 * Returns the current radius accessor, which defaults to a function returning the "radius" property (assumed to be a number) of the source or
 * target object returned by the source or target accessor, respectively.
 * Sets the radius to a fixed number and returns this ribbon generator.
 * 
 * Sets the radius accessor to the specified function and returns this ribbon generator.
 * 
 * @param {number|?=} radius A fixed numeric value for the radius. / An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.
 * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.
 * The function returns the radius value.
 * @return {?}
 */
RibbonGenerator.prototype.radius = function(radius) {};

/**
 * Returns the current start angle accessor, which defaults to a function returning the "startAngle" property (assumed to be a number in radians) of the source or
 * target object returned by the source or target accessor, respectively.
 * Sets the start angle to a fixed number in radians and returns this ribbon generator.
 * 
 * Sets the start angle accessor to the specified function and returns this ribbon generator.
 * 
 * @param {number|?=} angle A fixed numeric value for the start angle in radians. / An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.
 * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.
 * The function returns the start angle in radians.
 * @return {?}
 */
RibbonGenerator.prototype.startAngle = function(angle) {};

/**
 * Returns the current end angle accessor, which defaults to a function returning the "endAngle" property (assumed to be a number in radians) of the source or
 * target object returned by the source or target accessor, respectively.
 * Sets the end angle to a fixed number in radians and returns this ribbon generator.
 * 
 * Sets the end angle accessor to the specified function and returns this ribbon generator.
 * 
 * @param {number|?=} angle A fixed numeric value for the end angle in radians. / An accessor function which is invoked for the source and target of the chord. The accessor function is invoked in the same "this" context as the generator was invoked in and
 * receives as the first argument the source or target object returned by the respective source or target accessor function of the generator.
 * It is also passed any additional arguments that were passed into the generator, with the exception of the first element representing the chord datum itself.
 * The function returns the end angle in radians.
 * @return {?}
 */
RibbonGenerator.prototype.endAngle = function(angle) {};

/**
 * Returns the current rendering context, which defaults to null.
 * Sets the rendering context and returns this ribbon generator.
 * 
 * If the context is not null, then the generated ribbon is rendered to this context as a sequence of path method calls.
 * 
 * Sets the rendering context to null and returns this ribbon generator.
 * 
 * A path data string representing the generated ribbon will be returned when the generator is invoked with data. See also d3-path.
 * 
 * @param {!CanvasRenderingContext2D|null=} context The rendering context. / null, to remove rendering context.
 * @return {!CanvasRenderingContext2D|?}
 */
RibbonGenerator.prototype.context = function(context) {};

/**
 * Creates a new ribbon generator with the default settings.
 * Creates a new ribbon generator with the default settings.
 * 
 * Accessor functions must be configured for the ribbon generator, should the datum types differ from the defaults.
 * 
 * The first generic corresponds to the datum type representing a chord for which the ribbon is to be generated. The default type is Chord.
 * 
 * The second generic corresponds to the datum type of the chord subgroup, i.e. source or target of the cord. The default type is ChordSubgroup.
 * Creates a new ribbon generator with the default settings.
 * 
 * Accessor functions must be configured for the ribbon generator, should the datum types differ from the defaults.
 * 
 * The first generic corresponds to the type of the "this" context within which the ribbon generator and its accessor functions will be invoked.
 * 
 * The second generic corresponds to the datum type representing a chord for which the ribbon is to be generated. The default type is Chord.
 * 
 * The third generic corresponds to the datum type of the chord subgroup, i.e. source or target of the cord. The default type is ChordSubgroup.
 * @template Datum, SubgroupDatum, This
 * @return {?}
 */
function ribbon() {}
