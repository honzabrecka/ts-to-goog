/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/phonegap/index.d.ts:
/**
 * @record
 * @struct
 */
function GeolocationError() {}
 /** @type {number} */
GeolocationError.prototype.code;
 /** @type {string} */
GeolocationError.prototype.message;
/**
 * @record
 * @struct
 */
function Acceleration() {}
 /** @type {number} */
Acceleration.prototype.x;
 /** @type {number} */
Acceleration.prototype.y;
 /** @type {number} */
Acceleration.prototype.z;
 /** @type {number} */
Acceleration.prototype.timestamp;
 /** @type {function(new: (?)): ?} */
var Acceleration;
/**
 * @record
 * @struct
 */
function AccelerometerOptions() {}
 /** @type {number} */
AccelerometerOptions.prototype.frequency;
/**
 * @record
 * @struct
 */
function Accelerometer() {}

/**
 * @param {function(?): void} accelerometerSuccess
 * @param {function(): void} accelerometerError
 * @return {void}
 */
Accelerometer.prototype.getCurrentAcceleration = function(accelerometerSuccess, accelerometerError) {};

/**
 * @param {function(?): void} accelerometerSuccess
 * @param {function(): void} accelerometerError
 * @param {!AccelerometerOptions=} accelerometerOptions
 * @return {void}
 */
Accelerometer.prototype.watchAcceleration = function(accelerometerSuccess, accelerometerError, accelerometerOptions) {};

/**
 * @param {number} watchID
 * @return {void}
 */
Accelerometer.prototype.clearWatch = function(watchID) {};
/**
 * @record
 * @struct
 */
function CameraPopoverOptions() {}
 /** @type {number} */
CameraPopoverOptions.prototype.x;
 /** @type {number} */
CameraPopoverOptions.prototype.y;
 /** @type {number} */
CameraPopoverOptions.prototype.width;
 /** @type {number} */
CameraPopoverOptions.prototype.height;
 /** @type {number} */
CameraPopoverOptions.prototype.arrowDir;
 /** @type {function(new: (?), number, number, number, number, number): ?} */
var CameraPopoverOptions;
/**
 * @record
 * @struct
 */
function CameraOptions() {}
 /** @type {number} */
CameraOptions.prototype.quality;
 /** @type {number} */
CameraOptions.prototype.destinationType;
 /** @type {number} */
CameraOptions.prototype.sourceType;
 /** @type {boolean} */
CameraOptions.prototype.allowEdit;
 /** @type {number} */
CameraOptions.prototype.encodingType;
 /** @type {number} */
CameraOptions.prototype.targetWidth;
 /** @type {number} */
CameraOptions.prototype.targetHeight;
 /** @type {number} */
CameraOptions.prototype.mediaType;
 /** @type {boolean} */
CameraOptions.prototype.correctOrientation;
 /** @type {boolean} */
CameraOptions.prototype.saveToPhotoAlbum;
 /** @type {?} */
CameraOptions.prototype.popoverOptions;
/**
 * @record
 * @struct
 */
function CameraPictureSourceTypeObject() {}
 /** @type {number} */
CameraPictureSourceTypeObject.prototype.CAMERA;
 /** @type {number} */
CameraPictureSourceTypeObject.prototype.PHOTOLIBRARY;
 /** @type {number} */
CameraPictureSourceTypeObject.prototype.SAVEDPHOTOALBUM;
/**
 * @record
 * @struct
 */
function CameraDestinationTypeObject() {}
 /** @type {number} */
CameraDestinationTypeObject.prototype.FILE_URI;
 /** @type {number} */
CameraDestinationTypeObject.prototype.DATA_URL;
/**
 * @record
 * @struct
 */
function CameraEncodingTypeObject() {}
 /** @type {number} */
CameraEncodingTypeObject.prototype.JPEG;
 /** @type {number} */
CameraEncodingTypeObject.prototype.PNG;
/**
 * @record
 * @struct
 */
function CameraMediaTypeObject() {}
 /** @type {number} */
CameraMediaTypeObject.prototype.PICTURE;
 /** @type {number} */
CameraMediaTypeObject.prototype.VIDEO;
 /** @type {number} */
CameraMediaTypeObject.prototype.ALLMEDIA;
/**
 * @record
 * @struct
 */
function CameraPopoverArrowDirectionObject() {}
 /** @type {number} */
CameraPopoverArrowDirectionObject.prototype.ARROW_UP;
 /** @type {number} */
CameraPopoverArrowDirectionObject.prototype.ARROW_DOWN;
 /** @type {number} */
CameraPopoverArrowDirectionObject.prototype.ARROW_LEFT;
 /** @type {number} */
CameraPopoverArrowDirectionObject.prototype.ARROW_RIGHT;
 /** @type {number} */
CameraPopoverArrowDirectionObject.prototype.ARROW_ANY;
/**
 * @record
 * @struct
 */
function Camera() {}
 /** @type {?} */
Camera.prototype.sourceType;
 /** @type {!CameraPictureSourceTypeObject} */
Camera.prototype.PictureSourceType;
 /** @type {!CameraDestinationTypeObject} */
Camera.prototype.DestinationType;
 /** @type {!CameraEncodingTypeObject} */
Camera.prototype.EncodingType;
 /** @type {!CameraMediaTypeObject} */
Camera.prototype.MediaType;
 /** @type {!CameraPopoverArrowDirectionObject} */
Camera.prototype.PopoverArrowDirection;

/**
 * @param {function(string): void} cameraSuccess
 * @param {function(string): void} cameraError
 * @param {!CameraOptions=} cameraOptions
 * @return {void}
 */
Camera.prototype.getPicture = function(cameraSuccess, cameraError, cameraOptions) {};

/**
 * @param {function(string): void} cameraSuccess
 * @param {function(string): void} cameraError
 * @return {void}
 */
Camera.prototype.cleanup = function(cameraSuccess, cameraError) {};
/**
 * @record
 * @struct
 */
function CaptureAudioOptions() {}
 /** @type {number} */
CaptureAudioOptions.prototype.limit;
 /** @type {number} */
CaptureAudioOptions.prototype.duration;
 /** @type {number} */
CaptureAudioOptions.prototype.mode;
/**
 * @record
 * @struct
 */
function CaptureImageOptions() {}
 /** @type {number} */
CaptureImageOptions.prototype.limit;
 /** @type {number} */
CaptureImageOptions.prototype.mode;
/**
 * @record
 * @struct
 */
function MediaFile() {}
 /** @type {string} */
MediaFile.prototype.name;
 /** @type {string} */
MediaFile.prototype.fullPath;
 /** @type {string} */
MediaFile.prototype.type;
 /** @type {!Date} */
MediaFile.prototype.lastModifiedDate;
 /** @type {number} */
MediaFile.prototype.size;

/**
 * @param {!Function} successCallback
 * @param {!Function=} errorCallback
 * @return {void}
 */
MediaFile.prototype.getFormatData = function(successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function CaptureError() {}
 /** @type {number} */
CaptureError.prototype.code;
 /** @type {string} */
CaptureError.prototype.message;
/**
 * @record
 * @struct
 */
function Capture() {}

/**
 * @param {function(!Array<!MediaFile>): void} captureSuccess
 * @param {function(!CaptureError): void} captureError
 * @param {!CaptureAudioOptions=} options
 * @return {void}
 */
Capture.prototype.captureAudio = function(captureSuccess, captureError, options) {};

/**
 * @param {function(!Array<!MediaFile>): void} captureSuccess
 * @param {function(!CaptureError): void} captureError
 * @param {!CaptureImageOptions=} options
 * @return {void}
 */
Capture.prototype.captureImage = function(captureSuccess, captureError, options) {};

/**
 * @param {function(!Array<!MediaFile>): void} captureSuccess
 * @param {function(!CaptureError): void} captureError
 * @param {!CaptureImageOptions=} options
 * @return {void}
 */
Capture.prototype.captureVideo = function(captureSuccess, captureError, options) {};
/**
 * @record
 * @struct
 */
function Connection() {}
 /** @type {number} */
Connection.prototype.UNKNOWN;
 /** @type {number} */
Connection.prototype.ETHERNET;
 /** @type {number} */
Connection.prototype.WIFI;
 /** @type {number} */
Connection.prototype.CELL_2G;
 /** @type {number} */
Connection.prototype.CELL_3G;
 /** @type {number} */
Connection.prototype.CELL_4G;
 /** @type {number} */
Connection.prototype.NONE;
 /** @type {?} */
var Connection;
/**
 * @record
 * @struct
 */
function CompassOptions() {}
 /** @type {number} */
CompassOptions.prototype.frequency;
 /** @type {number} */
CompassOptions.prototype.filter;
/**
 * @record
 * @struct
 */
function CompassHeading() {}
 /** @type {number} */
CompassHeading.prototype.magneticHeading;
 /** @type {number} */
CompassHeading.prototype.trueHeading;
 /** @type {number} */
CompassHeading.prototype.headingAccuracy;
 /** @type {number} */
CompassHeading.prototype.timestamp;
/**
 * @record
 * @struct
 */
function CompassError() {}
 /** @type {number} */
CompassError.prototype.code;
 /** @type {{COMPASS_INTERNAL_ERR: number, COMPASS_NOT_SUPPORTED: number}} */
var CompassError;
/**
 * @record
 * @struct
 */
function Compass() {}

/**
 * @param {function(!CompassHeading): void} compassSuccess
 * @param {function(?): void} compassError
 * @param {!CompassOptions=} compassOptions
 * @return {void}
 */
Compass.prototype.getCurrentHeading = function(compassSuccess, compassError, compassOptions) {};

/**
 * @param {function(!CompassHeading): void} compassSuccess
 * @param {function(?): void} compassError
 * @param {!CompassOptions=} compassOptions
 * @return {void}
 */
Compass.prototype.watchHeading = function(compassSuccess, compassError, compassOptions) {};

/**
 * @param {number} watchID
 * @return {void}
 */
Compass.prototype.clearWatch = function(watchID) {};
 /** @type {number} */
Connection.prototype.type;
/**
 * @record
 * @struct
 */
function ContactAddress() {}
 /** @type {boolean} */
ContactAddress.prototype.pref;
 /** @type {string} */
ContactAddress.prototype.type;
 /** @type {string} */
ContactAddress.prototype.formatted;
 /** @type {string} */
ContactAddress.prototype.streetAddress;
 /** @type {string} */
ContactAddress.prototype.locality;
 /** @type {string} */
ContactAddress.prototype.region;
 /** @type {string} */
ContactAddress.prototype.postalCode;
 /** @type {string} */
ContactAddress.prototype.country;
/**
 * @record
 * @struct
 */
function ContactField() {}
 /** @type {string} */
ContactField.prototype.type;
 /** @type {string} */
ContactField.prototype.value;
 /** @type {boolean} */
ContactField.prototype.pref;
 /** @type {function(new: (?), string, string, boolean): ?} */
var ContactField;
/**
 * @record
 * @struct
 */
function Contact() {}
 /** @type {string} */
Contact.prototype.id;
 /** @type {string} */
Contact.prototype.displayName;
 /** @type {?} */
Contact.prototype.name;
 /** @type {string} */
Contact.prototype.nickname;
 /** @type {!Array<?>} */
Contact.prototype.phoneNumbers;
 /** @type {!Array<?>} */
Contact.prototype.emails;
 /** @type {!Array<!ContactAddress>} */
Contact.prototype.addresses;
 /** @type {!Array<?>} */
Contact.prototype.ims;
 /** @type {!Array<!ContactOrganization>} */
Contact.prototype.organizations;
 /** @type {!Date} */
Contact.prototype.birthday;
 /** @type {string} */
Contact.prototype.note;
 /** @type {!Array<?>} */
Contact.prototype.photos;
 /** @type {!Array<?>} */
Contact.prototype.categories;
 /** @type {!Array<?>} */
Contact.prototype.urls;

/**
 * @param {function(!Contacts): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
Contact.prototype.save = function(onSuccess, onError) {};

/**
 * @param {function(!Contacts): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
Contact.prototype.remove = function(onSuccess, onError) {};

/**
 * @return {!Contact}
 */
Contact.prototype.clone = function() {};
/**
 * @record
 * @struct
 */
function ContactFindOptions() {}
 /** @type {string} */
ContactFindOptions.prototype.filter;
 /** @type {boolean} */
ContactFindOptions.prototype.multiple;
 /** @type {function(new: (?)): ?} */
var ContactFindOptions;
/**
 * @record
 * @struct
 */
function ContactName() {}
 /** @type {string} */
ContactName.prototype.formatted;
 /** @type {string} */
ContactName.prototype.familyName;
 /** @type {string} */
ContactName.prototype.givenName;
 /** @type {string} */
ContactName.prototype.middleName;
 /** @type {string} */
ContactName.prototype.honorificPrefix;
 /** @type {string} */
ContactName.prototype.honorificSuffix;
 /** @type {function(new: (?)): ?} */
var ContactName;
/**
 * @record
 * @struct
 */
function ContactOrganization() {}
 /** @type {boolean} */
ContactOrganization.prototype.pref;
 /** @type {string} */
ContactOrganization.prototype.type;
 /** @type {string} */
ContactOrganization.prototype.name;
 /** @type {string} */
ContactOrganization.prototype.department;
 /** @type {string} */
ContactOrganization.prototype.title;
/**
 * @record
 * @struct
 */
function ContactError() {}
 /** @type {number} */
ContactError.prototype.code;
 /** @type {{UNKNOWN_ERROR: number, INVALID_ARGUMENT_ERROR: number, TIMEOUT_ERROR: number, PENDING_OPERATION_ERROR: number, IO_ERROR: number, NOT_SUPPORTED_ERROR: number, PERMISSION_DENIED_ERROR: number}} */
var ContactError;
/**
 * @record
 * @struct
 */
function Contacts() {}

/**
 * @param {?=} properties
 * @return {!Contact}
 */
Contacts.prototype.create = function(properties) {};

/**
 * @param {!Array<string>} contactFields
 * @param {function(!Array<!Contact>): void} contactSuccess
 * @param {function(?): void} contactError
 * @param {?=} contactFindOptions
 * @return {void}
 */
Contacts.prototype.find = function(contactFields, contactSuccess, contactError, contactFindOptions) {};
/**
 * @record
 * @struct
 */
function Device() {}
 /** @type {boolean} */
Device.prototype.available;
 /** @type {string} */
Device.prototype.name;
 /** @type {string} */
Device.prototype.cordova;
 /** @type {string} */
Device.prototype.platform;
 /** @type {string} */
Device.prototype.uuid;
 /** @type {string} */
Device.prototype.version;
 /** @type {string} */
Device.prototype.model;
 /** @type {!Capture} */
Device.prototype.capture;
/**
 * @record
 * @struct
 */
function FileWriter() {}
 /** @type {?} */
FileWriter.prototype.readyState;
 /** @type {string} */
FileWriter.prototype.fileName;
 /** @type {number} */
FileWriter.prototype.length;
 /** @type {number} */
FileWriter.prototype.position;
 /** @type {?} */
FileWriter.prototype.error;
 /** @type {!Function} */
FileWriter.prototype.onwritestart;
 /** @type {!Function} */
FileWriter.prototype.onprogress;
 /** @type {!Function} */
FileWriter.prototype.onwrite;
 /** @type {!Function} */
FileWriter.prototype.onabort;
 /** @type {!Function} */
FileWriter.prototype.onerror;
 /** @type {!Function} */
FileWriter.prototype.onwriteend;

/**
 * @return {void}
 */
FileWriter.prototype.abort = function() {};

/**
 * @param {number} arg
 * @return {void}
 */
FileWriter.prototype.seek = function(arg) {};

/**
 * @param {number} arg
 * @return {void}
 */
FileWriter.prototype.truncate = function(arg) {};

/**
 * @param {?} arg
 * @return {void}
 */
FileWriter.prototype.write = function(arg) {};
/**
 * @record
 * @struct
 */
function FileSystem() {}
 /** @type {string} */
FileSystem.prototype.name;
 /** @type {?} */
FileSystem.prototype.root;
 /** @type {function(new: (?), string, ?): ?} */
var DirectoryEntry;
/**
 * @record
 * @struct
 */
function FileSystemEntry() {}
 /** @type {boolean} */
FileSystemEntry.prototype.isFile;
 /** @type {boolean} */
FileSystemEntry.prototype.isDirectory;
 /** @type {string} */
FileSystemEntry.prototype.name;
 /** @type {string} */
FileSystemEntry.prototype.fullPath;
 /** @type {!FileSystem} */
FileSystemEntry.prototype.filesystem;

/**
 * @param {function(!Metadata): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
FileSystemEntry.prototype.getMetadata = function(onSuccess, onError) {};

/**
 * @param {function(!Metadata): void=} onSuccess
 * @param {function(?): void=} onError
 * @param {?=} options
 * @return {void}
 */
FileSystemEntry.prototype.setMetadata = function(onSuccess, onError, options) {};

/**
 * @return {string}
 */
FileSystemEntry.prototype.toURL = function() {};

/**
 * @param {function(): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
FileSystemEntry.prototype.remove = function(onSuccess, onError) {};

/**
 * @param {function(?): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
FileSystemEntry.prototype.getParent = function(onSuccess, onError) {};
/**
 * @extends {FileSystemEntry}
 * @record
 * @struct
 */
function FileEntry() {}

/**
 * @param {?} parentEntry
 * @param {string} file
 * @param {function(?): void} onSuccess
 * @param {function(?): void} onError
 * @return {void}
 */
FileEntry.prototype.moveTo = function(parentEntry, file, onSuccess, onError) {};

/**
 * @param {?} parentEntry
 * @param {string} file
 * @param {function(?): void} onSuccess
 * @param {function(?): void} onError
 * @return {void}
 */
FileEntry.prototype.copyTo = function(parentEntry, file, onSuccess, onError) {};

/**
 * @param {function(!FileWriter): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
FileEntry.prototype.createWriter = function(onSuccess, onError) {};

/**
 * @param {function(!File): void=} onSuccess
 * @param {function(?): void=} onError
 * @return {void}
 */
FileEntry.prototype.file = function(onSuccess, onError) {};

/**
 * @return {!DirectoryReader}
 */
DirectoryEntry.prototype.createReader = function() {};

/**
 * @param {string} path
 * @param {!Flags} options
 * @param {function(?): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
DirectoryEntry.prototype.getDirectory = function(path, options, successCallback, errorCallback) {};

/**
 * @param {string} path
 * @param {!Flags} options
 * @param {function(!FileEntry): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
DirectoryEntry.prototype.getFile = function(path, options, successCallback, errorCallback) {};

/**
 * @param {function(): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
DirectoryEntry.prototype.removeRecursively = function(successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function DirectoryReader() {}

/**
 * @param {function(!FileSystemEntry): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
DirectoryReader.prototype.readEntries = function(successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function FileTransfer() {}
 /** @type {!Function} */
FileTransfer.prototype.onprogress;

/**
 * @param {string} filePath
 * @param {string} server
 * @param {function(!FileUploadResult): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {?=} options
 * @return {void}
 */
FileTransfer.prototype.upload = function(filePath, server, successCallback, errorCallback, options) {};

/**
 * @param {string} source
 * @param {string} target
 * @param {function(!FileEntry): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {?=} options
 * @return {void}
 */
FileTransfer.prototype.download = function(source, target, successCallback, errorCallback, options) {};

/**
 * @return {void}
 */
FileTransfer.prototype.abort = function() {};
 /** @type {function(new: (?)): ?} */
var FileTransfer;
/**
 * @record
 * @struct
 */
function FileUploadOptions() {}
 /** @type {string} */
FileUploadOptions.prototype.fileKey;
 /** @type {string} */
FileUploadOptions.prototype.fileName;
 /** @type {string} */
FileUploadOptions.prototype.mimeType;
 /** @type {?} */
FileUploadOptions.prototype.params;
 /** @type {boolean} */
FileUploadOptions.prototype.chunkedMode;
 /** @type {?} */
FileUploadOptions.prototype.headers;
 /** @type {function(new: (?)): ?} */
var FileUploadOptions;
/**
 * @record
 * @struct
 */
function FileUploadResult() {}
 /** @type {number} */
FileUploadResult.prototype.bytesSent;
 /** @type {number} */
FileUploadResult.prototype.responseCode;
 /** @type {string} */
FileUploadResult.prototype.response;
/**
 * @record
 * @struct
 */
function Flags() {}
 /** @type {boolean} */
Flags.prototype.create;
 /** @type {boolean} */
Flags.prototype.exclusive;
/**
 * @record
 * @struct
 */
function LocalFileSystem() {}
 /** @type {number} */
LocalFileSystem.prototype.PERSISTENT;
 /** @type {number} */
LocalFileSystem.prototype.TEMPORARY;
 /** @type {?} */
var LocalFileSystem;
/**
 * @record
 * @struct
 */
function Metadata() {}
 /** @type {!Date} */
Metadata.prototype.modificationTime;
/**
 * @record
 * @struct
 */
function FileError() {}
 /** @type {number} */
FileError.prototype.code;
 /** @type {{NOT_FOUND_ERR: number, SECURITY_ERR: number, ABORT_ERR: number, NOT_READABLE_ERR: number, ENCODING_ERR: number, NO_MODIFICATION_ALLOWED_ERR: number, INVALID_STATE_ERR: number, SYNTAX_ERR: number, INVALID_MODIFICATION_ERR: number, QUOTA_EXCEEDED_ERR: number, TYPE_MISMATCH_ERR: number, PATH_EXISTS_ERR: number}} */
var FileError;
/**
 * @record
 * @struct
 */
function FileTransferError() {}
 /** @type {number} */
FileTransferError.prototype.code;
 /** @type {string} */
FileTransferError.prototype.source;
 /** @type {string} */
FileTransferError.prototype.target;
 /** @type {number} */
FileTransferError.prototype.http_status;
 /** @type {{FILE_NOT_FOUND_ERR: number, INVALID_URL_ERR: number, CONNECTION_ERR: number, ABORT_ERR: number}} */
var FileTransferError;
/**
 * @record
 * @struct
 */
function GeolocationOptions() {}
 /** @type {boolean} */
GeolocationOptions.prototype.enableHighAccuracy;
 /** @type {number} */
GeolocationOptions.prototype.timeout;
 /** @type {number} */
GeolocationOptions.prototype.maximumAge;
/**
 * @record
 * @struct
 */
function GlobalizationError() {}
 /** @type {number} */
GlobalizationError.prototype.code;
 /** @type {string} */
GlobalizationError.prototype.message;
 /** @type {{UNKNOWN_ERROR: number, FORMATTING_ERROR: number, PARSING_ERROR: number, PATTERN_ERROR: number}} */
var GlobalizationError;
/**
 * @record
 * @struct
 */
function GlobalizationDate() {}
 /** @type {number} */
GlobalizationDate.prototype.year;
 /** @type {number} */
GlobalizationDate.prototype.month;
 /** @type {number} */
GlobalizationDate.prototype.day;
 /** @type {number} */
GlobalizationDate.prototype.hour;
 /** @type {number} */
GlobalizationDate.prototype.minute;
 /** @type {number} */
GlobalizationDate.prototype.second;
 /** @type {number} */
GlobalizationDate.prototype.millisecond;
/**
 * @record
 * @struct
 */
function GlobalizationDateOptions() {}
 /** @type {string} */
GlobalizationDateOptions.prototype.formatLength;
 /** @type {string} */
GlobalizationDateOptions.prototype.selector;
/**
 * @record
 * @struct
 */
function GlobalizationDatePattern() {}
 /** @type {string} */
GlobalizationDatePattern.prototype.pattern;
 /** @type {string} */
GlobalizationDatePattern.prototype.timezone;
 /** @type {number} */
GlobalizationDatePattern.prototype.utc_offset;
 /** @type {number} */
GlobalizationDatePattern.prototype.dst_offset;
/**
 * @record
 * @struct
 */
function GlobalizationDateNameOptions() {}
 /** @type {string} */
GlobalizationDateNameOptions.prototype.type;
 /** @type {string} */
GlobalizationDateNameOptions.prototype.item;
/**
 * @record
 * @struct
 */
function GlobalizationNumberOptions() {}
 /** @type {string} */
GlobalizationNumberOptions.prototype.type;
/**
 * @record
 * @struct
 */
function GlobalizationNumberPattern() {}
 /** @type {string} */
GlobalizationNumberPattern.prototype.pattern;
 /** @type {string} */
GlobalizationNumberPattern.prototype.symbol;
 /** @type {number} */
GlobalizationNumberPattern.prototype.fraction;
 /** @type {number} */
GlobalizationNumberPattern.prototype.rounding;
 /** @type {string} */
GlobalizationNumberPattern.prototype.positive;
 /** @type {string} */
GlobalizationNumberPattern.prototype.negative;
 /** @type {string} */
GlobalizationNumberPattern.prototype.decimal;
 /** @type {string} */
GlobalizationNumberPattern.prototype.grouping;
/**
 * @record
 * @struct
 */
function GlobalizationCurrencyPattern() {}
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.pattern;
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.code;
 /** @type {number} */
GlobalizationCurrencyPattern.prototype.fraction;
 /** @type {number} */
GlobalizationCurrencyPattern.prototype.rounding;
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.decimal;
 /** @type {string} */
GlobalizationCurrencyPattern.prototype.grouping;
/**
 * @record
 * @struct
 */
function Globalization() {}

/**
 * @param {function({value: string}): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
Globalization.prototype.getPreferredLanguage = function(successCallback, errorCallback) {};

/**
 * @param {function({value: string}): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
Globalization.prototype.getLocaleName = function(successCallback, errorCallback) {};

/**
 * @param {!Date} date
 * @param {function({value: string}): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {!GlobalizationDateOptions=} options
 * @return {void}
 */
Globalization.prototype.dateToString = function(date, successCallback, errorCallback, options) {};

/**
 * @param {string} dateString
 * @param {function(!GlobalizationDate): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {!GlobalizationDateOptions=} options
 * @return {void}
 */
Globalization.prototype.stringToDate = function(dateString, successCallback, errorCallback, options) {};

/**
 * @param {function(!GlobalizationDatePattern): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {!GlobalizationDateOptions=} options
 * @return {void}
 */
Globalization.prototype.getDatePattern = function(successCallback, errorCallback, options) {};

/**
 * @param {function({value: !Array<string>}): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {!GlobalizationDateNameOptions=} options
 * @return {void}
 */
Globalization.prototype.getDateNames = function(successCallback, errorCallback, options) {};

/**
 * @param {!Date} date
 * @param {function({dst: boolean}): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
Globalization.prototype.isDayLightSavingsTime = function(date, successCallback, errorCallback) {};

/**
 * @param {function({value: number}): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
Globalization.prototype.getFirstDayOfWeek = function(successCallback, errorCallback) {};

/**
 * @param {number} number
 * @param {function({value: string}): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {!GlobalizationNumberOptions=} options
 * @return {void}
 */
Globalization.prototype.numberToString = function(number, successCallback, errorCallback, options) {};

/**
 * @param {string} string
 * @param {function({value: number}): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {!GlobalizationNumberOptions=} options
 * @return {void}
 */
Globalization.prototype.stringToNumber = function(string, successCallback, errorCallback, options) {};

/**
 * @param {function(!GlobalizationNumberPattern): void} successCallback
 * @param {function(?): void} errorCallback
 * @param {!GlobalizationNumberOptions=} options
 * @return {void}
 */
Globalization.prototype.getNumberPattern = function(successCallback, errorCallback, options) {};

/**
 * @param {string} currencyCode
 * @param {function(!GlobalizationCurrencyPattern): void} successCallback
 * @param {function(?): void} errorCallback
 * @return {void}
 */
Globalization.prototype.getCurrencyPattern = function(currencyCode, successCallback, errorCallback) {};
/**
 * @record
 * @struct
 */
function Media() {}

/* TODO: ConstructSignature:  */

/**
 * @param {!Function} mediaSuccess
 * @param {function(!MediaError): ?=} mediaError
 * @return {void}
 */
Media.prototype.getCurrentPosition = function(mediaSuccess, mediaError) {};

/**
 * @return {?}
 */
Media.prototype.getDuration = function() {};

/**
 * @return {void}
 */
Media.prototype.play = function() {};

/**
 * @return {void}
 */
Media.prototype.pause = function() {};

/**
 * @return {void}
 */
Media.prototype.release = function() {};

/**
 * @param {number} milliseconds
 * @return {void}
 */
Media.prototype.seekTo = function(milliseconds) {};

/**
 * @return {void}
 */
Media.prototype.startRecord = function() {};

/**
 * @return {void}
 */
Media.prototype.stopRecord = function() {};

/**
 * @return {void}
 */
Media.prototype.stop = function() {};
 /** @type {function(new: (?), string, function(?): ?, function(?): ?): ?} */
var Media;

/**
 * @param {string} message
 * @param {!Function} alertCallback
 * @param {string=} title
 * @param {string=} buttonName
 * @return {void}
 */
Notification.prototype.alert = function(message, alertCallback, title, buttonName) {};

/**
 * @param {string} message
 * @param {!Function} confirmCallback
 * @param {string=} title
 * @param {string|!Array<string>=} buttonLabels
 * @return {void}
 */
Notification.prototype.confirm = function(message, confirmCallback, title, buttonLabels) {};

/**
 * @param {number} times
 * @return {void}
 */
Notification.prototype.beep = function(times) {};

/**
 * @param {number} milliseconds
 * @return {void}
 */
Notification.prototype.vibrate = function(milliseconds) {};
/**
 * @record
 * @struct
 */
function Splashscreen() {}

/**
 * @return {void}
 */
Splashscreen.prototype.show = function() {};

/**
 * @return {void}
 */
Splashscreen.prototype.hide = function() {};
/**
 * @record
 * @struct
 */
function Database() {}

/**
 * @param {function(!SQLTransaction): ?=} populateDB
 * @param {function(?): ?=} errorCB
 * @param {function(): ?=} successCB
 * @return {void}
 */
Database.prototype.transaction = function(populateDB, errorCB, successCB) {};

/**
 * @param {string} var1
 * @param {string} var2
 * @return {void}
 */
Database.prototype.changeVersion = function(var1, var2) {};
/**
 * @record
 * @struct
 */
function SQLResultSetRowList() {}
 /** @type {number} */
SQLResultSetRowList.prototype.length;

/**
 * @param {number} index
 * @return {?}
 */
SQLResultSetRowList.prototype.item = function(index) {};
/**
 * @record
 * @struct
 */
function SQLError() {}
 /** @type {number} */
SQLError.prototype.code;
 /** @type {string} */
SQLError.prototype.message;
/**
 * @record
 * @struct
 */
function SQLResultSet() {}
 /** @type {number} */
SQLResultSet.prototype.insertId;
 /** @type {number} */
SQLResultSet.prototype.rowsAffected;
 /** @type {!SQLResultSetRowList} */
SQLResultSet.prototype.rows;
/**
 * @record
 * @struct
 */
function SQLTransaction() {}

/**
 * @param {string} sql
 * @return {!SQLResultSet}
 */
SQLTransaction.prototype.executeSql = function(sql) {};
/**
 * @record
 * @struct
 */
function StatusBar() {}
 /** @type {boolean} */
StatusBar.prototype.isVisible;

/**
 * @param {boolean} doOverlay
 * @return {void}
 */
StatusBar.prototype.overlaysWebView = function(doOverlay) {};

/**
 * @return {void}
 */
StatusBar.prototype.styleDefault = function() {};

/**
 * @return {void}
 */
StatusBar.prototype.styleLightContent = function() {};

/**
 * @return {void}
 */
StatusBar.prototype.styleBlackTranslucent = function() {};

/**
 * @return {void}
 */
StatusBar.prototype.styleBlackOpaque = function() {};

/**
 * @param {string} colorname
 * @return {void}
 */
StatusBar.prototype.backgroundColorByName = function(colorname) {};

/**
 * @param {string} hexString
 * @return {void}
 */
StatusBar.prototype.backgroundColorByHexString = function(hexString) {};

/**
 * @return {void}
 */
StatusBar.prototype.hide = function() {};

/**
 * @return {void}
 */
StatusBar.prototype.show = function() {};
 /** @type {?} */
var StatusBar;
/**
 * @record
 * @struct
 */
function Keyboard() {}
 /** @type {boolean} */
Keyboard.prototype.automaticScrollToTopOnHiding;
 /** @type {boolean} */
Keyboard.prototype.isVisible;
 /** @type {!Function} */
Keyboard.prototype.onshow;
 /** @type {!Function} */
Keyboard.prototype.onhide;
 /** @type {!Function} */
Keyboard.prototype.onshowing;
 /** @type {!Function} */
Keyboard.prototype.onhiding;

/**
 * @param {boolean} disable
 * @return {void}
 */
Keyboard.prototype.disableScrollingInShrinkView = function(disable) {};

/**
 * @param {boolean} hide
 * @return {void}
 */
Keyboard.prototype.hideFormAccessoryBar = function(hide) {};

/**
 * @param {boolean} shrink
 * @return {void}
 */
Keyboard.prototype.shrinkView = function(shrink) {};
 /** @type {?} */
var Keyboard;
 /** @type {!Accelerometer} */
Navigator.prototype.accelerometer;
 /** @type {!Camera} */
Navigator.prototype.camera;
 /** @type {!Capture} */
Navigator.prototype.capture;
 /** @type {!Compass} */
Navigator.prototype.compass;
 /** @type {?} */
Navigator.prototype.connection;
 /** @type {!Contacts} */
Navigator.prototype.contacts;
 /** @type {!Device} */
Navigator.prototype.device;
 /** @type {!Globalization} */
Navigator.prototype.globalization;
 /** @type {!Notification} */
Navigator.prototype.notification;
 /** @type {!Splashscreen} */
Navigator.prototype.splashscreen;
 /** @type {?} */
Window.prototype.requestFileSystem;

/**
 * @param {string} database_name
 * @param {string} database_version
 * @param {string} database_displayname
 * @param {number} database_size
 * @return {!Database}
 */
Window.prototype.openDatabase = function(database_name, database_version, database_displayname, database_size) {};
 /** @type {!Device} */
var device;
 /** @type {!Navigator} */
var phoneGapNavigator;
