/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/angular-meteor/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.meteor = {};
/**
 * @extends {angular.IRootScopeService}
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.IRootScopeService = function() {};
 /** @type {!Meteor.User} */
tsickle_declare_module.angular.meteor.IRootScopeService.prototype.currentUser;
 /** @type {boolean} */
tsickle_declare_module.angular.meteor.IRootScopeService.prototype.loggingIn;
/**
 * @extends {angular.IScope}
 * @extends {meteor.IRootScopeService}
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.IScope = function() {};

/**
 * A method to get a $scope variable and watch it reactivly
 * 
 * @param {string} scopeVariableName - The name of the scope's variable to bind to
 * @param {boolean=} objectEquality
 * @return {!meteor.ReactiveResult}
 */
tsickle_declare_module.angular.meteor.IScope.prototype.getReactively = function(scopeVariableName, objectEquality) {};

/**
 * A service which is a wrapper for Meteor.subscribe. It subscribes to a Meteor.publish method in the client and returns a AngularJS promise when ready.
 * Calling $scope.subscribe will automatically stop the subscription when the scope is destroyed.
 * 
 * @param {string} name - Name of the subscription. Matches the name of the server's publish() call.
 * @param {...?} publisherArguments - Optional arguments passed to publisher function on server.
 * 
 * @return {!angular.IPromise<!Meteor.SubscriptionHandle>} The promise solved successfully when subscription is ready. The success promise holds the subscription handle.
 */
tsickle_declare_module.angular.meteor.IScope.prototype.subscribe = function(name, publisherArguments) {};

/**
 * The helpers method is part of the ReactiveContext, and available on every context and $scope.
 * These method are defined as Object, where each key is the name of the variable that will be available on the context we run, and each value is a function with a return value.
 * Under the hood, each helper starts a new Tracker.autorun. When its reactive dependencies change, the helper is rerun.
 * To trigger a rerun every time an specific Angular variable change, use getReactively](/api/1.3.1/get-reactively) to make your Angular variable reactive inside the helper its used in.
 * Each helper function should return a MongoDB Cursor and the helpers will expose it as a normal array to the context.
 * 
 * @param {!Object<string,function(): ?<?>>} definitions - Object containing `name` => `function` definition, where each name is a string and each function is the helper function. Should return a [MongoDB Cursor](http://docs.meteor.com/#/full/mongo_cursor)
 * @return {!meteor.IScope} This method returns this, which the the reactive context, in order to provide the ability to chain the logic.
 */
tsickle_declare_module.angular.meteor.IScope.prototype.helpers = function(definitions) {};

/**
 * This method is a wrapper of Tracker.autorun and shares exactly the same API.
 * The autorun method is part of the ReactiveContext, and available on every context and $scope.
 * The argument of this method is a callback, which will be called each time Autorun will be used.
 * The Autorun will stop automatically when when it's context ($scope) is destroyed.
 * 
 * @param {function(): void} runFunc - The function to run. It receives one argument: the Computation object that will be returned.
 * @return {?}
 */
tsickle_declare_module.angular.meteor.IScope.prototype.autorun = function(runFunc) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.IMeteorService = function() {};
 /** @type {!meteor.ILoginWithExternalService} */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.loginWithFacebook;
 /** @type {!meteor.ILoginWithExternalService} */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.loginWithTwitter;
 /** @type {!meteor.ILoginWithExternalService} */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.loginWithGoogle;
 /** @type {!meteor.ILoginWithExternalService} */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.loginWithGithub;
 /** @type {!meteor.ILoginWithExternalService} */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.loginWithMeetup;
 /** @type {!meteor.ILoginWithExternalService} */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.loginWithWeibo;

/**
 * A service that wraps the Meteor collections to enable reactivity within AngularJS.
 * 
 * A service that wraps the Meteor collections to enable reactivity within AngularJS.
 * 
 * @template T, U
 * @param {(!Function|!meteor.ReactiveResult|?<T>|function(): T)} collection - A Meteor Collection or a reactive function to bind to.
 *                   - Reactive function can be used with $scope.getReactively to add $scope variable as reactive variable to the cursor.
 * @param {boolean=} autoClientSave
 * @param {?<U>=} updateCollection
 * @return {!meteor.AngularMeteorCollection<T>|!meteor.AngularMeteorCollection2<T, U>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.collection = function(collection, autoClientSave, updateCollection) {};

/**
 * A service that wraps a Meteor object to enable reactivity within AngularJS.
 * Finds the first document that matches the selector, as ordered by sort and skip options. Wraps collection.findOne
 * 
 * @template T
 * @param {?<T>} collection - A Meteor Collection to bind to.
 * @param {(string|!Mongo.Selector|?)} selector - A query describing the documents to find or just the ID of the document.
 *                 - $meteor.object will find the first document that matches the selector,
 *                 - as ordered by sort and skip options, exactly like Meteor's collection.findOne
 * @param {boolean=} autoClientSave
 * @return {!meteor.AngularMeteorObject<T>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.object = function(collection, selector, autoClientSave) {};

/**
 * A service which is a wrapper for Meteor.subscribe. It subscribes to a Meteor.publish method in the client and returns a AngularJS promise when ready.
 * 
 * @param {string} name - Name of the subscription. Matches the name of the server's publish() call.
 * @param {...?} publisherArguments - Optional arguments passed to publisher function on server.
 * 
 * @return {!angular.IPromise<!Meteor.SubscriptionHandle>} The promise solved successfully when subscription is ready. The success promise holds the subscription handle.
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.subscribe = function(name, publisherArguments) {};

/**
 * A service service which wraps up Meteor.methods with AngularJS promises.
 * 
 * @template T
 * @param {string} name - Name of method to invoke
 * @param {...?} methodArguments - Optional method arguments
 * 
 * @return {!angular.IPromise<T>} The promise solves successfully with the return value of the method or return reject with the error from the method.
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.call = function(name, methodArguments) {};

/**
 * Returns a promise fulfilled with the currentUser when the user subscription is ready.
 * This is useful when you want to grab the current user before the route is rendered.
 * If there is no logged in user, it will return null.
 * See the “Authentication with Routers” section of our tutorial for more information and a full example.
 * @return {!angular.IPromise<!Meteor.User>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.waitForUser = function() {};

/**
 * Resolves the promise successfully if a user is authenticated and rejects otherwise.
 * This is useful in cases where you want to require a route to have an authenticated user.
 * You can catch the rejected promise and redirect the unauthenticated user to a different page, such as the login page.
 * See the “Authentication with Routers” section of our tutorial for more information and a full example.
 * @return {!angular.IPromise<!Meteor.User>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.requireUser = function() {};

/**
 * Resolves the promise successfully if a user is authenticated and the validatorFn returns true; rejects otherwise.
 * This is useful in cases where you want to require a route to have an authenticated user and do extra validation like the user's role or group.
 * You can catch the rejected promise and redirect the unauthenticated user to a different page, such as the login page.
 * See the “Authentication with Routers” section of our tutorial for more information and a full example.
 * 
 * The mandatory validator function will be called with the authenticated user as the single param and it's expected to return true in order to resolve.
 * If it returns a string, the promise will be rejected using said string as the reason.
 * Any other return (false, null, undefined) will be rejected with the default "FORBIDDEN" reason.
 * @param {function(!Meteor.User): (string|boolean)} validatorFn
 * @return {!angular.IPromise<!Meteor.User>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.requireValidUser = function(validatorFn) {};

/**
 * Log the user in with a password.
 * 
 * @param {(string|{email: string}|{username: string}|{id: string})} user - Either a string interpreted as a username or an email; or an object with a single key: email, username or id.
 * @param {string} password - The user's password.
 * @return {!angular.IPromise<void>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.loginWithPassword = function(user, password) {};

/**
 * Create a new user. More information: http://docs.meteor.com/#/full/accounts_createuser
 * 
 * @param {{username: string, email: string, password: string, profile: !Object}} options
 * @return {!angular.IPromise<void>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.createUser = function(options) {};

/**
 * Change the current user's password. Must be logged in.
 * 
 * @param {string} oldPassword - The user's current password. This is not sent in plain text over the wire.
 * @param {string} newPassword - A new password for the user. This is not sent in plain text over the wire.
 * @return {!angular.IPromise<void>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.changePassword = function(oldPassword, newPassword) {};

/**
 * Request a forgot password email.
 * 
 * @param {{email: string}} options
 * @return {!angular.IPromise<void>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.forgotPassword = function(options) {};

/**
 * Reset the password for a user using a token received in email. Logs the user in afterwards.
 * 
 * @param {string} token - The token retrieved from the reset password URL.
 * @param {string} newPassword - A new password for the user. This is not sent in plain text over the wire.
 * @return {!angular.IPromise<void>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.resetPassword = function(token, newPassword) {};

/**
 * Marks the user's email address as verified. Logs the user in afterwards.
 * 
 * @param {string} token - The token retrieved from the reset password URL.
 * @return {!angular.IPromise<void>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.verifyEmail = function(token) {};

/**
 * Log the user out.
 * 
 * @return {!angular.IPromise<void>} Resolves with no arguments on success, or reject with a Error argument on failure.
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.logout = function() {};

/**
 * Log out other clients logged in as the current user, but does not log out the client that calls this function.
 * For example, when called in a user's browser, connections in that browser remain logged in,
 * but any other browsers or DDP clients logged in as that user will be logged out.
 * 
 * @return {!angular.IPromise<void>} Resolves with no arguments on success, or reject with a Error argument on failure.
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.logoutOtherClients = function() {};

/**
 * @param {!angular.IScope} scope - The AngularJS scope you use the autorun on.
 * @param {!Function} fn - The function that will re-run every time a reactive variable changes inside it.
 * @return {void}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.autorun = function(scope, fn) {};

/**
 * @template T
 * @param {string} collectionName - The name of the collection you want to get back
 * @return {?<T>}
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.getCollectionByName = function(collectionName) {};

/**
 * A helper service for taking pictures across platforms.
 * Must add mdg:camera package to use! (meteor add mdg:camera)
 * 
 * @param {{width: number, height: number, quality: number}=} options
 * @return {!angular.IPromise<?>} The promise solved successfully when the picture is taken with the data as a parameter or rejected with an error as a parameter in case of error.
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.getPicture = function(options) {};

/**
 * A service that binds a scope variable to a Meteor Session variable.
 * 
 * @param {string} sessionKey - The name of the session variable
 * @return {{bind: function(!meteor.IScope, string): void}} An object with a single function bind - to bind to that variable.
 */
tsickle_declare_module.angular.meteor.IMeteorService.prototype.session = function(sessionKey) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.AngularMeteorObject = function() {};

/**
 * @param {T=} doc
 * @return {!angular.IPromise<number>} Returns a promise with an error in case for an error or a number of successful docs changed in case of success.
 */
tsickle_declare_module.angular.meteor.AngularMeteorObject.prototype.save = function(doc) {};

/**
 * Reset the current value of the object to the one in the server.
 * @return {void}
 */
tsickle_declare_module.angular.meteor.AngularMeteorObject.prototype.reset = function() {};

/**
 * Returns a copy of the AngularMeteorObject with all the AngularMeteor-specific internal properties removed.
 * The returned object is then safe to use as a parameter for method calls, or anywhere else where the data needs to be converted to JSON.
 * @return {T}
 */
tsickle_declare_module.angular.meteor.AngularMeteorObject.prototype.getRawObject = function() {};

/**
 * A shorten (Syntactic sugar) function for the $meteor.subscribe function.
 * Takes only one parameter and not returns a promise like $meteor.subscribe does.
 * 
 * @param {string} subscriptionName - The subscription name to subscribe to. Exactly like the first parameter in $meteor.subscribe service.
 * @return {!meteor.AngularMeteorObject}
 */
tsickle_declare_module.angular.meteor.AngularMeteorObject.prototype.subscribe = function(subscriptionName) {};
/**
 * @extends {meteor.AngularMeteorCollection2}
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.AngularMeteorCollection = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.AngularMeteorCollection2 = function() {};

/**
 * @param {(U|!Array<U>)=} docs
 * @return {void}
 */
tsickle_declare_module.angular.meteor.AngularMeteorCollection2.prototype.save = function(docs) {};

/**
 * @param {(string|number|U|!Array<string>|!Array<number>)=} keys
 * @return {void}
 */
tsickle_declare_module.angular.meteor.AngularMeteorCollection2.prototype.remove = function(keys) {};

/**
 * A shorten (Syntactic sugar) function for the $meteor.subscribe function.
 * Takes only one parameter and not returns a promise like $meteor.subscribe does.
 * 
 * @param {string} subscriptionName - The subscription name to subscribe to. Exactly like the first parameter in $meteor.subscribe service.
 * @return {!meteor.AngularMeteorCollection2}
 */
tsickle_declare_module.angular.meteor.AngularMeteorCollection2.prototype.subscribe = function(subscriptionName) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.ILoginWithExternalService = function() {};

/* TODO: CallSignature: tsickle_declare_module.angular.meteor */
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.meteor.ReactiveResult = function() {};
