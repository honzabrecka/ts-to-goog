/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/polymer-ts/index.d.ts:
/** @const */
var polymer = {};
/**
 * @constructor
 * @struct
 */
polymer.PolymerBase = function() {};
 /** @type {?} */
polymer.PolymerBase.prototype.$;
 /** @type {?} */
polymer.PolymerBase.prototype.$$;
 /** @type {!HTMLElement} */
polymer.PolymerBase.prototype.root;
 /** @type {!HTMLElement} */
polymer.PolymerBase.prototype.shadyRoot;
 /** @type {!CSSStyleDeclaration} */
polymer.PolymerBase.prototype.style;
 /** @type {!Object<string,string>} */
polymer.PolymerBase.prototype.customStyle;

/**
 * @param {string} path
 * @param {?} item
 * @return {?}
 */
polymer.PolymerBase.prototype.arrayDelete = function(path, item) {};

/**
 * @param {!Function} callback
 * @param {number=} waitTime
 * @return {?}
 */
polymer.PolymerBase.prototype.async = function(callback, waitTime) {};

/**
 * @return {void}
 */
polymer.PolymerBase.prototype.attachedCallback = function() {};

/**
 * @param {string} name
 * @param {!HTMLElement} toElement
 * @param {!HTMLElement} fromElement
 * @return {void}
 */
polymer.PolymerBase.prototype.attributeFollows = function(name, toElement, fromElement) {};

/**
 * @param {number} handle
 * @return {void}
 */
polymer.PolymerBase.prototype.cancelAsync = function(handle) {};

/**
 * @param {string} jobName
 * @return {void}
 */
polymer.PolymerBase.prototype.cancelDebouncer = function(jobName) {};

/**
 * @param {string} name
 * @param {!HTMLElement} toElement
 * @param {!HTMLElement} fromElement
 * @return {void}
 */
polymer.PolymerBase.prototype.classFollows = function(name, toElement, fromElement) {};

/**
 * @param {string} tag
 * @param {!Object=} props
 * @return {!HTMLElement}
 */
polymer.PolymerBase.prototype.create = function(tag, props) {};

/**
 * @param {string} jobName
 * @param {!Function} callback
 * @param {number=} wait
 * @return {void}
 */
polymer.PolymerBase.prototype.debounce = function(jobName, callback, wait) {};

/**
 * @param {string} value
 * @param {?} type
 * @return {?}
 */
polymer.PolymerBase.prototype.deserialize = function(value, type) {};

/**
 * @return {void}
 */
polymer.PolymerBase.prototype.distributeContent = function() {};

/**
 * @return {void}
 */
polymer.PolymerBase.prototype.domHost = function() {};

/**
 * @param {string} selector
 * @param {!polymer.Element} node
 * @return {?}
 */
polymer.PolymerBase.prototype.elementMatches = function(selector, node) {};

/**
 * @param {string} type
 * @param {!Object=} detail
 * @param {!polymer.FireOptions=} options
 * @return {?}
 */
polymer.PolymerBase.prototype.fire = function(type, detail, options) {};

/**
 * @param {string} jobName
 * @return {void}
 */
polymer.PolymerBase.prototype.flushDebouncer = function(jobName) {};

/**
 * @param {(string|!Array<(string|number)>)} path
 * @return {?}
 */
polymer.PolymerBase.prototype.get = function(path) {};

/**
 * @param {string} slctr
 * @return {?}
 */
polymer.PolymerBase.prototype.getContentChildNodes = function(slctr) {};

/**
 * @param {string} slctr
 * @return {?}
 */
polymer.PolymerBase.prototype.getContentChildren = function(slctr) {};

/**
 * @param {string} tag
 * @return {?}
 */
polymer.PolymerBase.prototype.getNativePrototype = function(tag) {};

/**
 * @param {string} property
 * @return {?}
 */
polymer.PolymerBase.prototype.getPropertyInfo = function(property) {};

/**
 * @param {string} href
 * @param {!Function=} onload
 * @param {!Function=} onerror
 * @param {boolean=} optAsync
 * @return {?}
 */
polymer.PolymerBase.prototype.importHref = function(href, onload, onerror, optAsync) {};

/**
 * @param {?} template
 * @return {?}
 */
polymer.PolymerBase.prototype.instanceTemplate = function(template) {};

/**
 * @param {string} jobName
 * @return {?}
 */
polymer.PolymerBase.prototype.isDebouncerActive = function(jobName) {};

/**
 * @param {string} to
 * @param {string} from
 * @return {void}
 */
polymer.PolymerBase.prototype.linkPaths = function(to, from) {};

/**
 * @param {!polymer.Element} node
 * @param {string} eventName
 * @param {string} methodName
 * @return {void}
 */
polymer.PolymerBase.prototype.listen = function(node, eventName, methodName) {};

/**
 * @param {!Object} target
 * @param {!Object} source
 * @return {void}
 */
polymer.PolymerBase.prototype.mixin = function(target, source) {};

/**
 * @param {string} path
 * @param {?} value
 * @param {?=} fromAbove
 * @return {void}
 */
polymer.PolymerBase.prototype.notifyPath = function(path, value, fromAbove) {};

/**
 * @param {string} path
 * @param {{index: number, removed: !Array<?>, addedCount: number, object: !Array<?>, type: string}} splices
 * @return {void}
 */
polymer.PolymerBase.prototype.notifySplices = function(path, splices) {};

/**
 * @param {string} path
 * @return {?}
 */
polymer.PolymerBase.prototype.pop = function(path) {};

/**
 * @param {string} path
 * @param {?} value
 * @return {?}
 */
polymer.PolymerBase.prototype.push = function(path, value) {};

/**
 * @param {string} name
 * @return {void}
 */
polymer.PolymerBase.prototype.reflectPropertyToAttribute = function(name) {};

/**
 * @param {string} url
 * @return {?}
 */
polymer.PolymerBase.prototype.resolveUrl = function(url) {};

/**
 * @param {!polymer.Element} container
 * @param {boolean} shouldObserve
 * @return {void}
 */
polymer.PolymerBase.prototype.scopeSubtree = function(container, shouldObserve) {};

/**
 * @param {string} value
 * @return {?}
 */
polymer.PolymerBase.prototype.serialize = function(value) {};

/**
 * @param {?} value
 * @param {string} attribute
 * @param {!polymer.Element} node
 * @return {void}
 */
polymer.PolymerBase.prototype.serializeValueToAttribute = function(value, attribute, node) {};

/**
 * @param {(string|!Array<(string|number)>)} path
 * @param {?} value
 * @param {!Object=} root
 * @return {?}
 */
polymer.PolymerBase.prototype.set = function(path, value, root) {};

/**
 * @param {string} direction
 * @param {!HTMLElement} node
 * @return {void}
 */
polymer.PolymerBase.prototype.setScrollDirection = function(direction, node) {};

/**
 * @param {string} path
 * @param {?} value
 * @return {?}
 */
polymer.PolymerBase.prototype.shift = function(path, value) {};

/**
 * @param {string} path
 * @param {number} start
 * @param {number} deleteCount
 * @param {...?} items
 * @return {?}
 */
polymer.PolymerBase.prototype.splice = function(path, start, deleteCount, items) {};

/**
 * @param {string} name
 * @param {boolean} bool
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.PolymerBase.prototype.toggleAttribute = function(name, bool, node) {};

/**
 * @param {string} name
 * @param {boolean} bool
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.PolymerBase.prototype.toggleClass = function(name, bool, node) {};

/**
 * @param {string} transform
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.PolymerBase.prototype.transform = function(transform, node) {};

/**
 * @param {?} x
 * @param {?} y
 * @param {?} z
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.PolymerBase.prototype.translate3d = function(x, y, z, node) {};

/**
 * @param {string} path
 * @return {void}
 */
polymer.PolymerBase.prototype.unlinkPaths = function(path) {};

/**
 * @param {string} path
 * @param {?} value
 * @return {?}
 */
polymer.PolymerBase.prototype.unshift = function(path, value) {};

/**
 * @return {void}
 */
polymer.PolymerBase.prototype.updateStyles = function() {};
/**
 * @record
 * @struct
 */
polymer.dom = function() {};

/* TODO: CallSignature: polymer */

/* TODO: CallSignature: polymer */

/**
 * @return {?}
 */
polymer.dom.prototype.flush = function() {};
/**
 * @record
 * @struct
 */
polymer.FireOptions = function() {};
 /** @type {(!HTMLElement|!polymer.Base)} */
polymer.FireOptions.prototype.node;
 /** @type {boolean} */
polymer.FireOptions.prototype.bubbles;
 /** @type {boolean} */
polymer.FireOptions.prototype.cancelable;
/**
 * @record
 * @struct
 */
polymer.Element = function() {};
 /** @type {!Object} */
polymer.Element.prototype.properties;
 /** @type {!Object} */
polymer.Element.prototype.listeners;
 /** @type {!Array<!Object>} */
polymer.Element.prototype.behaviors;
 /** @type {!Array<!String>} */
polymer.Element.prototype.observers;
 /** @type {!Object} */
polymer.Element.prototype.prototype;

/**
 * @param {...?} args
 * @return {void}
 */
polymer.Element.prototype.factoryImpl = function(args) {};

/**
 * @return {void}
 */
polymer.Element.prototype.ready = function() {};

/**
 * @return {void}
 */
polymer.Element.prototype.created = function() {};

/**
 * @return {void}
 */
polymer.Element.prototype.attached = function() {};

/**
 * @return {void}
 */
polymer.Element.prototype.detached = function() {};

/**
 * @param {string} attrName
 * @param {?} oldVal
 * @param {?} newVal
 * @return {void}
 */
polymer.Element.prototype.attributeChanged = function(attrName, oldVal, newVal) {};
/**
 * @record
 * @struct
 */
polymer.PolymerTSElement = function() {};
 /** @type {!FunctionConstructor} */
polymer.PolymerTSElement.prototype.$custom_cons;
 /** @type {!Array<?>} */
polymer.PolymerTSElement.prototype.$custom_cons_args;
 /** @type {string} */
polymer.PolymerTSElement.prototype.template;
 /** @type {string} */
polymer.PolymerTSElement.prototype.style;
/**
 * @record
 * @struct
 */
polymer.Property = function() {};
 /** @type {string} */
polymer.Property.prototype.name;
 /** @type {?} */
polymer.Property.prototype.type;
 /** @type {?} */
polymer.Property.prototype.value;
 /** @type {boolean} */
polymer.Property.prototype.reflectToAttribute;
 /** @type {boolean} */
polymer.Property.prototype.readOnly;
 /** @type {boolean} */
polymer.Property.prototype.notify;
 /** @type {string} */
polymer.Property.prototype.computed;
 /** @type {string} */
polymer.Property.prototype.observer;
/**
 * @extends {polymer.Element}
 * @record
 * @struct
 */
polymer.Base = function() {};
 /** @type {string} */
polymer.Base.prototype.is;

/**
 * @template T
 * @param {...?} args
 * @return {T}
 */
polymer.Base.create = function(args) {};

/**
 * @return {void}
 */
polymer.Base.register = function() {};

/**
 * @return {void}
 */
polymer.createEs6PolymerBase = function() {};

/**
 * @param {!Function} elementClass
 * @return {!polymer.Element}
 */
polymer.prepareForRegistration = function(elementClass) {};

/**
 * @param {!polymer.Element} definition
 * @return {void}
 */
polymer.createDomModule = function(definition) {};

/**
 * @template T
 * @param {function(new: (T), !Array<?>): ?} element
 * @return {function(new: (T), !Array<?>): ?}
 */
polymer.createElement = function(element) {};

/**
 * @template T
 * @param {function(new: (T), !Array<?>): ?} element
 * @return {function(new: (T), !Array<?>): ?}
 */
polymer.createClass = function(element) {};

/**
 * @param {!polymer.Element} element
 * @return {boolean}
 */
polymer.isRegistered = function(element) {};
 /** @type {?} */
var Polymer;

/**
 * @param {string} tagname
 * @param {string=} extendsTag
 * @return {function(!Function): void}
 */
function component(tagname, extendsTag) {}

/**
 * @param {string} tagname
 * @return {function(!Function): void}
 */
function extend(tagname) {}

/**
 * @param {string} templateString
 * @return {function(!Function): void}
 */
function template(templateString) {}

/**
 * @param {string} styleString
 * @return {function(!Function): void}
 */
function style(styleString) {}

/**
 * @param {!Object} attributes
 * @return {function(!Function): void}
 */
function hostAttributes(attributes) {}

/**
 * @param {!polymer.Property=} ob
 * @return {function(!polymer.Element, string): void}
 */
function property(ob) {}

/**
 * @param {!polymer.Property=} ob
 * @return {function(!polymer.Element, string): void}
 */
function computed(ob) {}

/**
 * @param {string} eventName
 * @return {function(!polymer.Element, string): void}
 */
function listen(eventName) {}

/**
 * @param {?} behaviorObject
 * @return {?}
 */
function behavior(behaviorObject) {}

/**
 * @param {string} observedProps
 * @return {function(!polymer.Element, string): void}
 */
function observe(observedProps) {}
