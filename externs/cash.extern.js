/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cash/index.d.ts:
/**
 * @record
 * @struct
 */
function OffsetType() {}
 /** @type {number} */
OffsetType.prototype.top;
 /** @type {number} */
OffsetType.prototype.left;
/**
 * @record
 * @struct
 */
function CashStatic() {}
 /** @type {?} */
CashStatic.prototype.fn;

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/**
 * isArray
 * Check if the argument is an array.
 * @argument any
 * @param {?} n
 * @return {boolean} boolean
 */
CashStatic.prototype.isArray = function(n) {};

/**
 * isFunction
 * Check if the argument is a function.
 * @argument any
 * @param {?} n
 * @return {boolean} boolean
 */
CashStatic.prototype.isFunction = function(n) {};

/**
 * isNumeric
 * Check if the argument is numeric.
 * @argument any
 * @param {?} n
 * @return {boolean} boolean
 */
CashStatic.prototype.isNumeric = function(n) {};

/**
 * isString
 * Check if the argument is a string.
 * @argument str any
 * @param {?} str
 * @return {boolean} boolean
 */
CashStatic.prototype.isString = function(str) {};

/**
 * extend
 * Extends target object with properties from the source object. If no target is provided, cash itself will be extended.
 * @argument target any, source any
 * @param {?} target
 * @param {?} source
 * @return {?}
 */
CashStatic.prototype.extend = function(target, source) {};

/**
 * matches
 * Checks a selector against an element, returning a boolean value for match.
 * @argument element Cash, selector string
 * @param {!Cash} element
 * @param {string} selector
 * @return {boolean} boolean
 */
CashStatic.prototype.matches = function(element, selector) {};

/**
 * parseHTML
 * Returns a collection from an HTML string.
 * @argument htmlString string
 * @param {string} htmlString
 * @return {!Cash} Cash
 */
CashStatic.prototype.parseHTML = function(htmlString) {};

/**
 * each
 * Iterates through a collection and calls the callback method on each.
 * @argument collection Array, callback Function
 * @param {!Array<?>} collection
 * @param {!Function} callback
 * @return {!Array<?>} Array
 */
CashStatic.prototype.each = function(collection, callback) {};
/**
 * @record
 * @struct
 */
function Cash() {}

/**
 * add
 * Returns a new collection with the element(s) added to the end.
 * @param {(string|!Cash|!Element)} selector
 * @param {!Element=} context
 * @return {!Cash}
 */
Cash.prototype.add = function(selector, context) {};

/**
 * addClass
 * Adds the className argument to collection elements.
 * @param {string} c
 * @return {!Cash}
 */
Cash.prototype.addClass = function(c) {};

/**
 * after
 * Inserts content or elements after the collection.
 * @param {(!String|!Element)} selector
 * @return {!Cash}
 */
Cash.prototype.after = function(selector) {};

/**
 * append
 * Appends the target element to the each element in the collection.
 * @param {(string|!Cash|!Element)} content
 * @return {!Cash}
 */
Cash.prototype.append = function(content) {};

/**
 * appendTo
 * Adds the elements in a collection to the target element(s).
 * @param {(string|!Cash|!Element)} parent
 * @return {!Cash}
 */
Cash.prototype.appendTo = function(parent) {};

/**
 * attr
 * Without attrValue, returns the attribute value of the first element in the collection.
 * With attrValue, sets the attribute value of each element of the collection.
 * @param {string} name
 * @param {string=} value
 * @return {?|!Cash}
 */
Cash.prototype.attr = function(name, value) {};

/**
 * before
 * Inserts content or elements before the collection.
 * @param {(string|!Element)} selector
 * @return {!Cash}
 */
Cash.prototype.before = function(selector) {};

/**
 * children
 * Without a selector specified, returns a collection of child elements.
 * With a selector, returns child elements that match the selector.
 * @param {string=} selector
 * @return {!Cash}
 */
Cash.prototype.children = function(selector) {};

/**
 * closest
 * Returns the closest matching selector up the DOM tree.
 * @param {string=} selector
 * @return {!Cash}
 */
Cash.prototype.closest = function(selector) {};

/**
 * clone
 * Returns a clone of the collection.
 * @return {!Cash}
 */
Cash.prototype.clone = function() {};

/**
 * css
 * Returns a CSS property value when just property is supplied.
 * Sets a CSS property when property and value are supplied, and set multiple properties when an object is supplied.
 * Properties will be autoprefixed if needed for the user's browser.
 * @param {?|string} prop
 * @param {?=} value
 * @return {?|!Cash}
 */
Cash.prototype.css = function(prop, value) {};

/**
 * data
 * Link some data (string, object, array, etc.) to an element when both key and value are supplied.
 * If only a key is supplied, returns the linked data and falls back to data attribute value if no data is already linked.
 * Multiple data can be set when an object is supplied.
 * @param {?|string} name
 * @param {?=} value
 * @return {?|!Cash}
 */
Cash.prototype.data = function(name, value) {};

/**
 * each
 * Iterates over a collection with callback(value, index, array).
 * @param {!Function} callback
 * @return {!Cash}
 */
Cash.prototype.each = function(callback) {};

/**
 * empty
 * Empties an elements interior markup.
 * @return {!Cash}
 */
Cash.prototype.empty = function() {};

/**
 * eq
 * Returns a collection with the element at index.
 * @param {number} index
 * @return {!Cash}
 */
Cash.prototype.eq = function(index) {};

/**
 * extend
 * Adds properties to the cash collection prototype.
 * @param {?} target
 * @return {?}
 */
Cash.prototype.extend = function(target) {};

/**
 * filter
 * Returns the collection that results from applying the filter method.
 * @param {!Function} selector
 * @return {!Cash}
 */
Cash.prototype.filter = function(selector) {};

/**
 * find
 * Returns selector match descendants from the first element in the collection.
 * @param {string} selector
 * @return {!Cash}
 */
Cash.prototype.find = function(selector) {};

/**
 * first
 * Returns the first element in the collection.
 * @return {!Cash}
 */
Cash.prototype.first = function() {};

/**
 * get
 * Returns the element at the index.
 * @param {number} index
 * @return {!HTMLElement}
 */
Cash.prototype.get = function(index) {};

/**
 * has
 * Returns boolean result of the selector argument against the collection.
 * @param {string} selector
 * @return {boolean}
 */
Cash.prototype.has = function(selector) {};

/**
 * hasClass
 * Returns the boolean result of checking if the first element in the collection has the className attribute.
 * @param {string} c
 * @return {boolean}
 */
Cash.prototype.hasClass = function(c) {};

/**
 * height
 * Returns the height of the element.
 * @return {number}
 */
Cash.prototype.height = function() {};

/**
 * html
 * Returns the HTML text of the first element in the collection, sets the HTML if provided.
 * @param {string=} content
 * @return {string|!Cash}
 */
Cash.prototype.html = function(content) {};

/**
 * index
 * Returns the index of the element in its parent if an element or selector isn't provided.
 * Returns index within element or selector if it is.
 * @param {!Element=} elem
 * @return {number}
 */
Cash.prototype.index = function(elem) {};

/**
 * innerHeight
 * Returns the height of the element + padding.
 * @return {number}
 */
Cash.prototype.innerHeight = function() {};

/**
 * innerWidth
 * Returns the width of the element + padding.
 * @return {number}
 */
Cash.prototype.innerWidth = function() {};

/**
 * insertAfter
 * Inserts collection after specified element.
 * @param {(string|!Cash|!Element)} selector
 * @return {!Cash}
 */
Cash.prototype.insertAfter = function(selector) {};

/**
 * insertBefore
 * Inserts collection before specified element.
 * @param {(string|!Cash|!Element)} selector
 * @return {!Cash}
 */
Cash.prototype.insertBefore = function(selector) {};

/**
 * is
 * Returns whether the provided selector, element or collection matches any element in the collection.
 * @param {(string|!Cash|!Element)} selector
 * @return {boolean}
 */
Cash.prototype.is = function(selector) {};

/**
 * last
 * Returns last element in the collection.
 * @return {!Cash}
 */
Cash.prototype.last = function() {};

/**
 * next
 * Returns next sibling.
 * @return {!Cash}
 */
Cash.prototype.next = function() {};

/**
 * not
 * Filters collection by false match on selector.
 * @param {(string|!Cash|!Element)} selector
 * @return {!Cash}
 */
Cash.prototype.not = function(selector) {};

/**
 * off
 * Removes event listener from collection elements.
 * @param {string} eventName
 * @param {!Function} callback
 * @return {!Cash}
 */
Cash.prototype.off = function(eventName, callback) {};

/**
 * offset
 * Get the coordinates of the first element in a collection relative to the document.
 * @return {!OffsetType}
 */
Cash.prototype.offset = function() {};

/**
 * offsetParent
 * Get the first element's ancestor that's positioned.
 * @return {!OffsetType}
 */
Cash.prototype.offsetParent = function() {};

/**
 * on
 * Adds event listener to collection elements. Event is delegated if delegate is supplied.
 * @param {(string|!Array<string>)} eventName
 * @param {?} delegate
 * @param {!Function=} callback
 * @param {boolean=} runOnce
 * @return {!Cash}
 */
Cash.prototype.on = function(eventName, delegate, callback, runOnce) {};

/**
 * one
 * Adds event listener to collection elements that only triggers once for each element.
 * Event is delegated if delegate is supplied.
 * @param {(string|!Array<string>)} eventName
 * @param {?} delegate
 * @param {!Function=} callback
 * @param {boolean=} runOnce
 * @return {!Cash}
 */
Cash.prototype.one = function(eventName, delegate, callback, runOnce) {};

/**
 * outerHeight
 * Returns the outer height of the element. Includes margins if margin is set to true.
 * @param {boolean=} flag
 * @return {number}
 */
Cash.prototype.outerHeight = function(flag) {};

/**
 * outerWidth
 * Returns the outer width of the element. Includes margins if margin is set to true.
 * @param {boolean=} flag
 * @return {number}
 */
Cash.prototype.outerWidth = function(flag) {};

/**
 * parent
 * Returns parent element.
 * @return {!Cash}
 */
Cash.prototype.parent = function() {};

/**
 * parents
 * Returns collection of elements who are parents of element. Optionally filtering by selector.
 * @param {string=} selector
 * @return {!Cash}
 */
Cash.prototype.parents = function(selector) {};

/**
 * position
 * Get the coordinates of the first element in a collection relative to its offsetParent.
 * @return {!OffsetType}
 */
Cash.prototype.position = function() {};

/**
 * prepend
 * Prepends element to the each element in collection.
 * @param {string} content
 * @return {!Cash}
 */
Cash.prototype.prepend = function(content) {};

/**
 * prependTo
 * Prepends elements in a collection to the target element(s).
 * @param {(string|!Cash|!Element)} parent
 * @return {!Cash}
 */
Cash.prototype.prependTo = function(parent) {};

/**
 * prev
 * Returns the previous adjacent element.
 * @return {!Cash}
 */
Cash.prototype.prev = function() {};

/**
 * prop
 * Returns a property value when just property is supplied.
 * Sets a property when property and value are supplied, and sets multiple properties when an object is supplied.
 * @param {string} name
 * @param {string=} value
 * @return {?|!Cash}
 */
Cash.prototype.prop = function(name, value) {};

/**
 * ready
 * Calls callback method on DOMContentLoaded.
 * @param {!Function} fn
 * @return {void}
 */
Cash.prototype.ready = function(fn) {};

/**
 * remove
 * Removes collection elements from the DOM.
 * @return {!Cash}
 */
Cash.prototype.remove = function() {};

/**
 * removeAttr
 * Removes attribute from collection elements.
 * @param {string} name
 * @return {!Cash}
 */
Cash.prototype.removeAttr = function(name) {};

/**
 * removeClass
 * Removes className from collection elements.
 * Accepts space-separated classNames for removing multiple classes.
 * Providing no arguments will remove all classes.
 * @param {string=} c
 * @return {!Cash}
 */
Cash.prototype.removeClass = function(c) {};

/**
 * removeData
 * Removes linked data and data-attributes from collection elements.
 * @param {string} key
 * @return {!Cash}
 */
Cash.prototype.removeData = function(key) {};

/**
 * removeProp
 * Removes property from collection elements.
 * @param {string} name
 * @return {!Cash}
 */
Cash.prototype.removeProp = function(name) {};

/**
 * serialize
 * When called on a form, serializes and returns form data.
 * @return {string}
 */
Cash.prototype.serialize = function() {};

/**
 * siblings
 * Returns a collection of sibling elements.
 * @return {!Cash}
 */
Cash.prototype.siblings = function() {};

/**
 * text
 * Returns the inner text of the first element in the collection, sets the text if textContent is provided.
 * @param {string=} content
 * @return {string|!Cash}
 */
Cash.prototype.text = function(content) {};

/**
 * toggleClass
 * Adds or removes className from collection elements based on if the element already has the class.
 * Accepts space-separated classNames for toggling multiple classes, and an optional force boolean to ensure classes are added (true) or removed (false).
 * @param {string} c
 * @param {boolean=} state
 * @return {!Cash}
 */
Cash.prototype.toggleClass = function(c, state) {};

/**
 * trigger
 * Triggers supplied event on elements in collection. Data can be passed along as the second parameter.
 * @param {string} eventName
 * @param {?=} data
 * @return {!Cash}
 */
Cash.prototype.trigger = function(eventName, data) {};

/**
 * val
 * Returns an inputs value. If value is supplied, sets all inputs in collection's value to the value argument.
 * @param {string=} value
 * @return {?|!Cash}
 */
Cash.prototype.val = function(value) {};

/**
 * width
 * Returns the width of the element.
 * @return {number}
 */
Cash.prototype.width = function() {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "cash"
/** @const */
tsickle_declare_module.cash = {};

/* TODO: ExportAssignment in tsickle_declare_module.cash */
 /** @type {!CashStatic} */
var cash;
