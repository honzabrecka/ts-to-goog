/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/merge2/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {(!NodeJS.ReadableStream|?)} */
var StreamType;
/**
 * @extends {NodeJS.ReadWriteStream}
 * @record
 * @struct
 */
function Merge2Stream() {}

/**
 * \@summary Add more streams to an existing merged stream
 * 
 * 
 * @param {...(!NodeJS.ReadableStream|?|!Array<(!NodeJS.ReadableStream|?)>)} args
 * @return {?} The merged stream
 */
Merge2Stream.prototype.add = function(args) {};

/**
 * \@summary It will emit 'queueDrain' when all streams merged.
 *             If you set end === false in options, this event give you a notice that
 *             you should add more streams to merge, or end the mergedStream.
 * 
 * 
 * @param {string} event
 * @param {?} listener
 * @return {?} This stream
 */
Merge2Stream.prototype.on = function(event, listener) {};

/**
 * @param {string} event
 * @param {?} listener
 * @return {?}
 */
Merge2Stream.prototype.once = function(event, listener) {};

/**
 * \@summary This function takes an arbitrary number of streams and returns a
 *                 Merge2Stream.
 * 
 * \@description If a DuplexOption is specified, it has to be specified last in the
 *                 argument list
 * 
 * @see { \@link https://github.com/teambition/merge2#api }
 * 
 * 
 * @param {...(!NodeJS.ReadableStream|?|!Array<(!NodeJS.ReadableStream|?)>|!internal.DuplexOptions)} args
 * @return {?} A merged duplex stream
 */
function IMerge2(args) {}

/* TODO: ExportAssignment in  */
