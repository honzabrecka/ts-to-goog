/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rot-js/index.d.ts:

/**
 * @return {T}
 */
Array.prototype.random = function() {};

/**
 * @return {!Array}
 */
Array.prototype.randomize = function() {};

/**
 * @param {number} n
 * @return {number}
 */
Number.prototype.mod = function(n) {};
/**
 * @record
 * @struct
 */
function FormatFunc() {}

/* TODO: CallSignature:  */
 /** @type {!Object<string,string>} */
FormatFunc.prototype.map;
 /** @type {!FormatFunc} */
StringConstructor.prototype.format;
 /** @type {!FormatFunc} */
String.prototype.format;

/**
 * @return {string}
 */
String.prototype.capitalize = function() {};

/**
 * @param {string=} character
 * @param {number=} count
 * @return {string}
 */
String.prototype.lpad = function(character, count) {};

/**
 * @param {string=} character
 * @param {number=} count
 * @return {string}
 */
String.prototype.rpad = function(character, count) {};

/**
 * @return {boolean}
 */
function isSupported() {}
 /** @type {number} */
var DEFAULT_WIDTH;
 /** @type {number} */
var DEFAULT_HEIGHT;
 /** @type {?} */
var DIRS;
 /** @type {number} */
var VK_CANCEL;
 /** @type {number} */
var VK_HELP;
 /** @type {number} */
var VK_BACK_SPACE;
 /** @type {number} */
var VK_TAB;
 /** @type {number} */
var VK_CLEAR;
 /** @type {number} */
var VK_RETURN;
 /** @type {number} */
var VK_ENTER;
 /** @type {number} */
var VK_SHIFT;
 /** @type {number} */
var VK_CONTROL;
 /** @type {number} */
var VK_ALT;
 /** @type {number} */
var VK_PAUSE;
 /** @type {number} */
var VK_CAPS_LOCK;
 /** @type {number} */
var VK_ESCAPE;
 /** @type {number} */
var VK_SPACE;
 /** @type {number} */
var VK_PAGE_UP;
 /** @type {number} */
var VK_PAGE_DOWN;
 /** @type {number} */
var VK_END;
 /** @type {number} */
var VK_HOME;
 /** @type {number} */
var VK_LEFT;
 /** @type {number} */
var VK_UP;
 /** @type {number} */
var VK_RIGHT;
 /** @type {number} */
var VK_DOWN;
 /** @type {number} */
var VK_PRINTSCREEN;
 /** @type {number} */
var VK_INSERT;
 /** @type {number} */
var VK_DELETE;
 /** @type {number} */
var VK_0;
 /** @type {number} */
var VK_1;
 /** @type {number} */
var VK_2;
 /** @type {number} */
var VK_3;
 /** @type {number} */
var VK_4;
 /** @type {number} */
var VK_5;
 /** @type {number} */
var VK_6;
 /** @type {number} */
var VK_7;
 /** @type {number} */
var VK_8;
 /** @type {number} */
var VK_9;
 /** @type {number} */
var VK_COLON;
 /** @type {number} */
var VK_SEMICOLON;
 /** @type {number} */
var VK_LESS_THAN;
 /** @type {number} */
var VK_EQUALS;
 /** @type {number} */
var VK_GREATER_THAN;
 /** @type {number} */
var VK_QUESTION_MARK;
 /** @type {number} */
var VK_AT;
 /** @type {number} */
var VK_A;
 /** @type {number} */
var VK_B;
 /** @type {number} */
var VK_C;
 /** @type {number} */
var VK_D;
 /** @type {number} */
var VK_E;
 /** @type {number} */
var VK_F;
 /** @type {number} */
var VK_G;
 /** @type {number} */
var VK_H;
 /** @type {number} */
var VK_I;
 /** @type {number} */
var VK_J;
 /** @type {number} */
var VK_K;
 /** @type {number} */
var VK_L;
 /** @type {number} */
var VK_M;
 /** @type {number} */
var VK_N;
 /** @type {number} */
var VK_O;
 /** @type {number} */
var VK_P;
 /** @type {number} */
var VK_Q;
 /** @type {number} */
var VK_R;
 /** @type {number} */
var VK_S;
 /** @type {number} */
var VK_T;
 /** @type {number} */
var VK_U;
 /** @type {number} */
var VK_V;
 /** @type {number} */
var VK_W;
 /** @type {number} */
var VK_X;
 /** @type {number} */
var VK_Y;
 /** @type {number} */
var VK_Z;
 /** @type {number} */
var VK_CONTEXT_MENU;
 /** @type {number} */
var VK_NUMPAD0;
 /** @type {number} */
var VK_NUMPAD1;
 /** @type {number} */
var VK_NUMPAD2;
 /** @type {number} */
var VK_NUMPAD3;
 /** @type {number} */
var VK_NUMPAD4;
 /** @type {number} */
var VK_NUMPAD5;
 /** @type {number} */
var VK_NUMPAD6;
 /** @type {number} */
var VK_NUMPAD7;
 /** @type {number} */
var VK_NUMPAD8;
 /** @type {number} */
var VK_NUMPAD9;
 /** @type {number} */
var VK_MULTIPLY;
 /** @type {number} */
var VK_ADD;
 /** @type {number} */
var VK_SEPARATOR;
 /** @type {number} */
var VK_SUBTRACT;
 /** @type {number} */
var VK_DECIMAL;
 /** @type {number} */
var VK_DIVIDE;
 /** @type {number} */
var VK_F1;
 /** @type {number} */
var VK_F2;
 /** @type {number} */
var VK_F3;
 /** @type {number} */
var VK_F4;
 /** @type {number} */
var VK_F5;
 /** @type {number} */
var VK_F6;
 /** @type {number} */
var VK_F7;
 /** @type {number} */
var VK_F8;
 /** @type {number} */
var VK_F9;
 /** @type {number} */
var VK_F10;
 /** @type {number} */
var VK_F11;
 /** @type {number} */
var VK_F12;
 /** @type {number} */
var VK_F13;
 /** @type {number} */
var VK_F14;
 /** @type {number} */
var VK_F15;
 /** @type {number} */
var VK_F16;
 /** @type {number} */
var VK_F17;
 /** @type {number} */
var VK_F18;
 /** @type {number} */
var VK_F19;
 /** @type {number} */
var VK_F20;
 /** @type {number} */
var VK_F21;
 /** @type {number} */
var VK_F22;
 /** @type {number} */
var VK_F23;
 /** @type {number} */
var VK_F24;
 /** @type {number} */
var VK_NUM_LOCK;
 /** @type {number} */
var VK_SCROLL_LOCK;
 /** @type {number} */
var VK_CIRCUMFLEX;
 /** @type {number} */
var VK_EXCLAMATION;
 /** @type {number} */
var VK_DOUBLE_QUOTE;
 /** @type {number} */
var VK_HASH;
 /** @type {number} */
var VK_DOLLAR;
 /** @type {number} */
var VK_PERCENT;
 /** @type {number} */
var VK_AMPERSAND;
 /** @type {number} */
var VK_UNDERSCORE;
 /** @type {number} */
var VK_OPEN_PAREN;
 /** @type {number} */
var VK_CLOSE_PAREN;
 /** @type {number} */
var VK_ASTERISK;
 /** @type {number} */
var VK_PLUS;
 /** @type {number} */
var VK_PIPE;
 /** @type {number} */
var VK_HYPHEN_MINUS;
 /** @type {number} */
var VK_OPEN_CURLY_BRACKET;
 /** @type {number} */
var VK_CLOSE_CURLY_BRACKET;
 /** @type {number} */
var VK_TILDE;
 /** @type {number} */
var VK_COMMA;
 /** @type {number} */
var VK_PERIOD;
 /** @type {number} */
var VK_SLASH;
 /** @type {number} */
var VK_BACK_QUOTE;
 /** @type {number} */
var VK_OPEN_BRACKET;
 /** @type {number} */
var VK_BACK_SLASH;
 /** @type {number} */
var VK_CLOSE_BRACKET;
 /** @type {number} */
var VK_QUOTE;
 /** @type {number} */
var VK_META;
 /** @type {number} */
var VK_ALTGR;
 /** @type {number} */
var VK_WIN;
 /** @type {number} */
var VK_KANA;
 /** @type {number} */
var VK_HANGUL;
 /** @type {number} */
var VK_EISU;
 /** @type {number} */
var VK_JUNJA;
 /** @type {number} */
var VK_FINAL;
 /** @type {number} */
var VK_HANJA;
 /** @type {number} */
var VK_KANJI;
 /** @type {number} */
var VK_CONVERT;
 /** @type {number} */
var VK_NONCONVERT;
 /** @type {number} */
var VK_ACCEPT;
 /** @type {number} */
var VK_MODECHANGE;
 /** @type {number} */
var VK_SELECT;
 /** @type {number} */
var VK_PRINT;
 /** @type {number} */
var VK_EXECUTE;
 /** @type {number} */
var VK_SLEEP;
/**
 * @record
 * @struct
 */
function Size() {}
 /** @type {number} */
Size.prototype.width;
 /** @type {number} */
Size.prototype.height;
/** @const */
var Text = {};
 /** @type {!RegExp} */
Text.RE_COLORS;
 /** @type {number} */
Text.TYPE_BG;
 /** @type {number} */
Text.TYPE_FG;
 /** @type {number} */
Text.TYPE_NEWLINE;
 /** @type {number} */
Text.TYPE_TEXT;

/**
 * @param {string} str
 * @param {number} maxWidth
 * @return {?}
 */
Text.measure = function(str, maxWidth) {};
/**
 * @record
 * @struct
 */
Text.Token = function() {};
 /** @type {number} */
Text.Token.prototype.type;
 /** @type {string} */
Text.Token.prototype.value;

/**
 * @param {string} str
 * @param {number} maxWidth
 * @return {!Array<?>}
 */
Text.tokenize = function(str, maxWidth) {};
/**
 * @record
 * @struct
 */
function RNGable() {}

/**
 * @return {number}
 */
RNGable.prototype.getSeed = function() {};

/**
 * @param {number} seed
 * @return {?}
 */
RNGable.prototype.setSeed = function(seed) {};

/**
 * @return {number}
 */
RNGable.prototype.getUniform = function() {};

/**
 * @param {number} lowerBound
 * @param {number} upperBound
 * @return {number}
 */
RNGable.prototype.getUniformInt = function(lowerBound, upperBound) {};

/**
 * @param {number=} mean
 * @param {number=} stddev
 * @return {number}
 */
RNGable.prototype.getNormal = function(mean, stddev) {};

/**
 * @return {number}
 */
RNGable.prototype.getPercentage = function() {};

/**
 * @template T
 * @param {?} data
 * @return {?}
 */
RNGable.prototype.getWeightedValue = function(data) {};

/**
 * @return {!Array<?>}
 */
RNGable.prototype.getState = function() {};

/**
 * @param {!Array<?>} state
 * @return {?}
 */
RNGable.prototype.setState = function(state) {};

/**
 * @return {?}
 */
RNGable.prototype.clone = function() {};
/** @const */
var RNG = {};

/**
 * @return {number}
 */
RNG.getSeed = function() {};

/**
 * @param {number} seed
 * @return {?}
 */
RNG.setSeed = function(seed) {};

/**
 * @return {number}
 */
RNG.getUniform = function() {};

/**
 * @param {number} lowerBound
 * @param {number} upperBound
 * @return {number}
 */
RNG.getUniformInt = function(lowerBound, upperBound) {};

/**
 * @param {number=} mean
 * @param {number=} stddev
 * @return {number}
 */
RNG.getNormal = function(mean, stddev) {};

/**
 * @return {number}
 */
RNG.getPercentage = function() {};

/**
 * @param {?} data
 * @return {string|?}
 */
RNG.getWeightedValue = function(data) {};

/**
 * @return {!Array<?>}
 */
RNG.getState = function() {};

/**
 * @param {!Array<?>} state
 * @return {?}
 */
RNG.setState = function(state) {};

/**
 * @return {?}
 */
RNG.clone = function() {};
/**
 * @record
 * @struct
 */
function DisplayOptions() {}
 /** @type {number} */
DisplayOptions.prototype.width;
 /** @type {number} */
DisplayOptions.prototype.height;
 /** @type {boolean} */
DisplayOptions.prototype.transpose;
 /** @type {number} */
DisplayOptions.prototype.fontSize;
 /** @type {string} */
DisplayOptions.prototype.fontFamily;
 /** @type {string} */
DisplayOptions.prototype.fontStyle;
 /** @type {string} */
DisplayOptions.prototype.fg;
 /** @type {string} */
DisplayOptions.prototype.bg;
 /** @type {number} */
DisplayOptions.prototype.spacing;
 /** @type {number} */
DisplayOptions.prototype.border;
 /** @type {string} */
DisplayOptions.prototype.layout;
 /** @type {boolean} */
DisplayOptions.prototype.forceSquareRatio;
 /** @type {number} */
DisplayOptions.prototype.tileWidth;
 /** @type {number} */
DisplayOptions.prototype.tileHeight;
 /** @type {?} */
DisplayOptions.prototype.tileMap;
 /** @type {?} */
DisplayOptions.prototype.tileSet;
 /** @type {boolean} */
DisplayOptions.prototype.tileColorize;
 /** @type {string} */
DisplayOptions.prototype.termColor;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function Display(options) {}
 /** @type {?} */
Display.prototype.DEBUG;

/**
 * @return {void}
 */
Display.prototype.clear = function() {};

/**
 * @param {number} availWidth
 * @param {number} availHeight
 * @return {!Array<?>}
 */
Display.prototype.computeSize = function(availWidth, availHeight) {};

/**
 * @param {number} availWidth
 * @param {number} availHeight
 * @return {number}
 */
Display.prototype.computeFontSize = function(availWidth, availHeight) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {(string|!Array<string>)} character
 * @param {string=} fg
 * @param {string=} bg
 * @return {void}
 */
Display.prototype.draw = function(x, y, character, fg, bg) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {string} text
 * @param {number=} maxWidth
 * @return {number}
 */
Display.prototype.drawText = function(x, y, text, maxWidth) {};

/**
 * @param {!UIEvent} e
 * @return {(number|!Array<?>)}
 */
Display.prototype.eventToPosition = function(e) {};

/**
 * @return {!Node}
 */
Display.prototype.getContainer = function() {};

/**
 * @return {?}
 */
Display.prototype.getOptions = function() {};

/**
 * @param {?} options
 * @return {?}
 */
Display.prototype.setOptions = function(options) {};

/** @typedef {?} */
var DigCallback;

/** @typedef {?} */
var DoorCallback;

/** @typedef {?} */
var CanBeDugCallback;

/** @typedef {?} */
var IsWallCallback;

/**
 * @constructor
 * @struct
 * @param {number} width
 * @param {number} height
 */
function Map(width, height) {}

/**
 * @param {?=} callback
 * @return {?}
 */
Map.prototype.create = function(callback) {};
/**
 * @record
 * @struct
 */
function CellularOptions() {}
 /** @type {!Array<number>} */
CellularOptions.prototype.born;
 /** @type {!Array<number>} */
CellularOptions.prototype.survive;
 /** @type {number} */
CellularOptions.prototype.topology;
 /** @type {boolean} */
CellularOptions.prototype.connected;
/**
 * @record
 * @struct
 */
function DiggerOptions() {}
 /** @type {!Array<?>} */
DiggerOptions.prototype.roomWidth;
 /** @type {!Array<?>} */
DiggerOptions.prototype.roomHeight;
 /** @type {!Array<?>} */
DiggerOptions.prototype.corridorLength;
 /** @type {number} */
DiggerOptions.prototype.dugPercentage;
 /** @type {number} */
DiggerOptions.prototype.timeLimit;
/**
 * @record
 * @struct
 */
function UniformOptions() {}
 /** @type {!Array<?>} */
UniformOptions.prototype.roomWidth;
 /** @type {!Array<?>} */
UniformOptions.prototype.roomHeight;
 /** @type {number} */
UniformOptions.prototype.roomDugPercentage;
 /** @type {number} */
UniformOptions.prototype.timeLimit;
/**
 * @record
 * @struct
 */
function RogueOptions() {}
 /** @type {number} */
RogueOptions.prototype.cellWidth;
 /** @type {number} */
RogueOptions.prototype.cellHeight;
 /** @type {!Array<?>} */
RogueOptions.prototype.roomWidth;
 /** @type {!Array<?>} */
RogueOptions.prototype.roomHeight;
/**
 * @record
 * @struct
 */
function RoomOptions() {}
 /** @type {!Array<?>} */
RoomOptions.prototype.roomWidth;
 /** @type {!Array<?>} */
RoomOptions.prototype.roomHeight;
/**
 * @record
 * @struct
 */
function CorridorOptions() {}
 /** @type {!Array<?>} */
CorridorOptions.prototype.corridorLength;

/** @typedef {?} */
var FeatureOptions;
/**
 * @constructor
 * @struct
 */
Map.Arena = function() {};
/**
 * @constructor
 * @struct
 */
Map.DividedMaze = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} width
 * @param {number=} height
 * @param {number=} regularity
 */
Map.IceyMaze = function(width, height, regularity) {};
/**
 * @constructor
 * @struct
 */
Map.EllerMaze = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} width
 * @param {number=} height
 * @param {?=} options
 */
Map.Cellular = function(width, height, options) {};

/**
 * @param {number} probability
 * @return {?}
 */
Map.Cellular.prototype.randomize = function(probability) {};

/**
 * @param {?} options
 * @return {void}
 */
Map.Cellular.prototype.setOptions = function(options) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {?} value
 * @return {void}
 */
Map.Cellular.prototype.set = function(x, y, value) {};

/**
 * @param {?} callback
 * @return {void}
 */
Map.Cellular.prototype.serviceCallback = function(callback) {};

/**
 * @param {?} callback
 * @param {number=} value
 * @param {?=} connectionCallback
 * @return {void}
 */
Map.Cellular.prototype.connect = function(callback, value, connectionCallback) {};
/**
 * @constructor
 * @struct
 */
Map.Dungeon = function() {};

/**
 * @return {!Array<?>}
 */
Map.Dungeon.prototype.getRooms = function() {};

/**
 * @return {!Array<?>}
 */
Map.Dungeon.prototype.getCorridors = function() {};

/**
 * @constructor
 * @struct
 * @param {number=} width
 * @param {number=} height
 * @param {?=} options
 */
Map.Digger = function(width, height, options) {};

/**
 * @constructor
 * @struct
 * @param {number=} width
 * @param {number=} height
 * @param {?=} options
 */
Map.Uniform = function(width, height, options) {};

/**
 * @constructor
 * @struct
 * @param {number=} width
 * @param {number=} height
 * @param {?=} options
 */
Map.Rogue = function(width, height, options) {};
/**
 * @constructor
 * @struct
 */
Map.Feature = function() {};

/**
 * @param {?} canBeDugCallback
 * @return {boolean}
 */
Map.Feature.prototype.isValid = function(canBeDugCallback) {};

/**
 * @param {?} digCallback
 * @return {void}
 */
Map.Feature.prototype.create = function(digCallback) {};

/**
 * @return {void}
 */
Map.Feature.prototype.debug = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} dx
 * @param {number} dy
 * @param {?=} options
 * @return {?}
 */
Map.Feature.createRandomAt = function(x, y, dx, dy, options) {};

/**
 * @constructor
 * @struct
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number=} doorX
 * @param {number=} doorY
 */
Map.Feature.Room = function(x1, y1, x2, y2, doorX, doorY) {};

/**
 * @param {number} availWidth
 * @param {number} availHeight
 * @param {?=} options
 * @return {?}
 */
Map.Feature.Room.createRandom = function(availWidth, availHeight, options) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} dx
 * @param {number} dy
 * @param {?=} options
 * @return {?}
 */
Map.Feature.Room.createRandomAt = function(x, y, dx, dy, options) {};

/**
 * @param {number} cx
 * @param {number} cy
 * @param {?=} options
 * @return {?}
 */
Map.Feature.Room.createRandomCenter = function(cx, cy, options) {};

/**
 * @param {?} digCallback
 * @return {void}
 */
Map.Feature.Room.prototype.create = function(digCallback) {};

/**
 * @return {void}
 */
Map.Feature.Room.prototype.debug = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @return {?}
 */
Map.Feature.Room.prototype.addDoor = function(x, y) {};

/**
 * @param {?} callback
 * @return {?}
 */
Map.Feature.Room.prototype.getDoors = function(callback) {};

/**
 * @return {?}
 */
Map.Feature.Room.prototype.clearDoors = function() {};

/**
 * @param {?} isWallCallback
 * @return {?}
 */
Map.Feature.Room.prototype.addDoors = function(isWallCallback) {};

/**
 * @param {?} isWallCallback
 * @param {?} canBeDugCallback
 * @return {boolean}
 */
Map.Feature.Room.prototype.isValid = function(isWallCallback, canBeDugCallback) {};

/**
 * @return {!Array<?>}
 */
Map.Feature.Room.prototype.getCenter = function() {};

/**
 * @return {number}
 */
Map.Feature.Room.prototype.getLeft = function() {};

/**
 * @return {number}
 */
Map.Feature.Room.prototype.getRight = function() {};

/**
 * @return {number}
 */
Map.Feature.Room.prototype.getTop = function() {};

/**
 * @return {number}
 */
Map.Feature.Room.prototype.getBottom = function() {};

/**
 * @constructor
 * @struct
 * @param {number} startX
 * @param {number} startY
 * @param {number} endX
 * @param {number} endY
 */
Map.Feature.Corridor = function(startX, startY, endX, endY) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} dx
 * @param {number} dy
 * @param {?=} options
 * @return {?}
 */
Map.Feature.Corridor.createRandomAt = function(x, y, dx, dy, options) {};

/**
 * @param {?} digCallback
 * @return {boolean}
 */
Map.Feature.Corridor.prototype.create = function(digCallback) {};

/**
 * @return {void}
 */
Map.Feature.Corridor.prototype.debug = function() {};

/**
 * @param {?} isWallCallback
 * @param {?} canBeDugCallback
 * @return {boolean}
 */
Map.Feature.Corridor.prototype.isValid = function(isWallCallback, canBeDugCallback) {};

/**
 * @param {?} priorityWallCallback
 * @return {void}
 */
Map.Feature.Corridor.prototype.createPriorityWalls = function(priorityWallCallback) {};

/** @typedef {?} */
var LightPassesCallback;

/** @typedef {?} */
var FOVCallback;
/**
 * @record
 * @struct
 */
function FOVOptions() {}
 /** @type {number} */
FOVOptions.prototype.topology;

/**
 * @constructor
 * @struct
 * @param {?} lightPassesCallback
 * @param {?=} options
 */
function FOV(lightPassesCallback, options) {}

/**
 * @param {number} x
 * @param {number} y
 * @param {number} R
 * @param {?} callback
 * @return {void}
 */
FOV.prototype.compute = function(x, y, R, callback) {};
/**
 * @constructor
 * @struct
 */
FOV.DiscreteShadowcasting = function() {};
/**
 * @constructor
 * @struct
 */
FOV.PreciseShadowcasting = function() {};
/**
 * @constructor
 * @struct
 */
FOV.RecursiveShadowcasting = function() {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} R
 * @param {number} dir
 * @param {?} callback
 * @return {void}
 */
FOV.RecursiveShadowcasting.prototype.compute180 = function(x, y, R, dir, callback) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} R
 * @param {number} dir
 * @param {?} callback
 * @return {void}
 */
FOV.RecursiveShadowcasting.prototype.compute90 = function(x, y, R, dir, callback) {};
 /** @type {!Array<!Array<?>>} */
FOV.RecursiveShadowcasting.OCTANTS;

/** @typedef {!Array<?>} */
var ColorArray;
/** @const */
var Color = {};

/**
 * @param {string} str
 * @return {!Array<?>}
 */
Color.fromString = function(str) {};

/**
 * @param {!Array<?>} color1
 * @param {...!Array<?>} colors2
 * @return {!Array<?>}
 */
Color.add = function(color1, colors2) {};

/**
 * @param {!Array<?>} color1
 * @param {...!Array<?>} colors2
 * @return {!Array<?>}
 */
Color.add_ = function(color1, colors2) {};

/**
 * @param {!Array<?>} color1
 * @param {...!Array<?>} colors2
 * @return {!Array<?>}
 */
Color.multiply = function(color1, colors2) {};

/**
 * @param {!Array<?>} color1
 * @param {...!Array<?>} colors2
 * @return {!Array<?>}
 */
Color.multiply_ = function(color1, colors2) {};

/**
 * @param {!Array<?>} color1
 * @param {!Array<?>} color2
 * @param {number} factor
 * @return {!Array<?>}
 */
Color.interpolate = function(color1, color2, factor) {};

/**
 * @param {!Array<?>} color1
 * @param {!Array<?>} color2
 * @param {number} factor
 * @return {!Array<?>}
 */
Color.interpolateHSL = function(color1, color2, factor) {};

/**
 * @param {!Array<?>} color
 * @param {(number|!Array<?>)} diff
 * @return {!Array<?>}
 */
Color.randomize = function(color, diff) {};

/**
 * @param {!Array<?>} color
 * @return {!Array<?>}
 */
Color.rgb2hsl = function(color) {};

/**
 * @param {!Array<?>} color
 * @return {!Array<?>}
 */
Color.hsl2rgb = function(color) {};

/**
 * @param {!Array<?>} color
 * @return {string}
 */
Color.toRGB = function(color) {};

/**
 * @param {!Array<?>} color
 * @return {string}
 */
Color.toHex = function(color) {};

/** @typedef {?} */
var ReflectivityCallback;

/** @typedef {?} */
var LightingCallback;
/**
 * @record
 * @struct
 */
function LightingOptions() {}
 /** @type {number} */
LightingOptions.prototype.passes;
 /** @type {number} */
LightingOptions.prototype.emissionThreshold;
 /** @type {number} */
LightingOptions.prototype.range;

/**
 * @constructor
 * @struct
 * @param {?} reflectivityCallback
 * @param {?=} options
 */
function Lighting(reflectivityCallback, options) {}

/**
 * @param {?} options
 * @return {?}
 */
Lighting.prototype.setOptions = function(options) {};

/**
 * @param {?} fov
 * @return {?}
 */
Lighting.prototype.setFOV = function(fov) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {(string|!Array<?>)} color
 * @return {?}
 */
Lighting.prototype.setLight = function(x, y, color) {};

/**
 * @return {void}
 */
Lighting.prototype.clearLights = function() {};

/**
 * @return {?}
 */
Lighting.prototype.reset = function() {};

/**
 * @param {?} lightingCallback
 * @return {?}
 */
Lighting.prototype.compute = function(lightingCallback) {};

/** @typedef {?} */
var PassableCallback;

/** @typedef {?} */
var PathCallback;
/**
 * @record
 * @struct
 */
function PathOptions() {}
 /** @type {number} */
PathOptions.prototype.topology;

/**
 * @constructor
 * @struct
 * @param {number} toX
 * @param {number} toY
 * @param {?} passableCallback
 * @param {?=} options
 */
function Path(toX, toY, passableCallback, options) {}

/**
 * @param {number} fromX
 * @param {number} fromY
 * @param {?} callback
 * @return {void}
 */
Path.prototype.compute = function(fromX, fromY, callback) {};
/**
 * @constructor
 * @struct
 */
Path.Dijkstra = function() {};
/**
 * @constructor
 * @struct
 */
Path.AStar = function() {};
/**
 * @record
 * @struct
 */
function Noise() {}

/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
Noise.prototype.get = function(x, y) {};

/**
 * @constructor
 * @struct
 * @param {number=} gradients
 */
Noise.Simplex = function(gradients) {};

/**
 * @param {number} xin
 * @param {number} yin
 * @return {number}
 */
Noise.Simplex.prototype.get = function(xin, yin) {};
/**
 * @constructor
 * @struct
 */
function EventQueue() {}

/**
 * @return {number}
 */
EventQueue.prototype.getTime = function() {};

/**
 * @return {void}
 */
EventQueue.prototype.clear = function() {};

/**
 * @param {?} event
 * @param {number} time
 * @return {void}
 */
EventQueue.prototype.add = function(event, time) {};

/**
 * @return {?}
 */
EventQueue.prototype.get = function() {};

/**
 * @param {?} event
 * @return {number}
 */
EventQueue.prototype.getEventTime = function(event) {};

/**
 * @param {?|number} event_or_index
 * @return {boolean}
 */
EventQueue.prototype.remove = function(event_or_index) {};
/**
 * @constructor
 * @struct
 */
function Scheduler() {}

/**
 * @return {number}
 */
Scheduler.prototype.getTime = function() {};

/**
 * @param {?} item
 * @param {boolean} repeat
 * @param {number=} time
 * @return {?}
 */
Scheduler.prototype.add = function(item, repeat, time) {};

/**
 * @param {?} item
 * @return {number}
 */
Scheduler.prototype.getTimeOf = function(item) {};

/**
 * @return {?}
 */
Scheduler.prototype.clear = function() {};

/**
 * @param {?} item
 * @return {?}
 */
Scheduler.prototype.remove = function(item) {};

/**
 * @return {?}
 */
Scheduler.prototype.next = function() {};
/**
 * @constructor
 * @struct
 */
Scheduler.Simple = function() {};
/**
 * @constructor
 * @struct
 */
Scheduler.Speed = function() {};
/**
 * @constructor
 * @struct
 */
Scheduler.Action = function() {};

/**
 * @param {number} time
 * @return {?}
 */
Scheduler.Action.prototype.setDuration = function(time) {};

/**
 * @constructor
 * @struct
 * @param {?} scheduler
 */
function Engine(scheduler) {}

/**
 * @return {?}
 */
Engine.prototype.start = function() {};

/**
 * @return {?}
 */
Engine.prototype.lock = function() {};

/**
 * @return {?}
 */
Engine.prototype.unlock = function() {};
/**
 * @record
 * @struct
 */
function StringGeneratorOptions() {}
 /** @type {boolean} */
StringGeneratorOptions.prototype.words;
 /** @type {number} */
StringGeneratorOptions.prototype.order;
 /** @type {number} */
StringGeneratorOptions.prototype.prior;

/**
 * @constructor
 * @struct
 * @param {?=} options
 */
function StringGenerator(options) {}

/**
 * @return {void}
 */
StringGenerator.prototype.clear = function() {};

/**
 * @return {string}
 */
StringGenerator.prototype.generate = function() {};

/**
 * @param {string} str
 * @return {void}
 */
StringGenerator.prototype.observe = function(str) {};

/**
 * @return {string}
 */
StringGenerator.prototype.getStats = function() {};
