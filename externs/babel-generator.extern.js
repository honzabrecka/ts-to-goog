/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/babel-generator/index.d.ts:

/* TODO: ImportDeclaration in  */

/**
 * Turns an AST into code, maintaining sourcemaps, user preferences, and valid output.
 * @param {?} ast - the abstract syntax tree from which to generate output code.
 * @param {?=} opts - used for specifying options for code generation.
 * @param {(string|?)=} code - the original source code, used for source maps.
 * @return {?} - an object containing the output code and source map.
 */
function generate(ast, opts, code) {}
/**
 * @record
 * @struct
 */
function GeneratorOptions() {}
 /** @type {string} */
GeneratorOptions.prototype.auxiliaryCommentBefore;
 /** @type {string} */
GeneratorOptions.prototype.auxiliaryCommentAfter;
 /** @type {boolean} */
GeneratorOptions.prototype.retainLines;
 /** @type {boolean} */
GeneratorOptions.prototype.comments;
 /** @type {(boolean|string)} */
GeneratorOptions.prototype.compact;
 /** @type {boolean} */
GeneratorOptions.prototype.minified;
 /** @type {boolean} */
GeneratorOptions.prototype.concise;
 /** @type {string} */
GeneratorOptions.prototype.quotes;
 /** @type {string} */
GeneratorOptions.prototype.filename;
 /** @type {boolean} */
GeneratorOptions.prototype.sourceMaps;
 /** @type {string} */
GeneratorOptions.prototype.sourceMapTarget;
 /** @type {string} */
GeneratorOptions.prototype.sourceRoot;
 /** @type {string} */
GeneratorOptions.prototype.sourceFileName;
 /** @type {boolean} */
GeneratorOptions.prototype.jsonCompatibleStrings;

/**
 * Function that takes a comment (as a string) and returns true if the comment should be included in the output.
 * By default, comments are included if `opts.comments` is `true` or if `opts.minifed` is `false` and the comment
 * contains `\@preserve` or `\@license`.
 * @param {string} comment
 * @return {boolean}
 */
GeneratorOptions.prototype.shouldPrintComment = function(comment) {};
/**
 * @record
 * @struct
 */
function GeneratorResult() {}
 /** @type {!Object} */
GeneratorResult.prototype.map;
 /** @type {string} */
GeneratorResult.prototype.code;
