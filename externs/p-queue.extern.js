/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/p-queue/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * @constructor
 * @struct
 * @param {!PQueue.Options<O>=} opts
 */
function PQueue(opts) {}
 /** @type {number} */
PQueue.prototype.size;
 /** @type {number} */
PQueue.prototype.pending;

/**
 * @template T
 * @param {function(): !Promise<T>} fn
 * @param {O=} opts
 * @return {!Promise<T>}
 */
PQueue.prototype.add = function(fn, opts) {};

/**
 * @return {!Promise<void>}
 */
PQueue.prototype.onEmpty = function() {};

/**
 * @return {void}
 */
PQueue.prototype.clear = function() {};
/**
 * @record
 * @struct
 */
PQueue.QueueAddOptions = function() {};

/* TODO: IndexSignature: PQueue */
/**
 * @record
 * @struct
 */
PQueue.QueueClassConstructor = function() {};

/* TODO: ConstructSignature: PQueue */
/**
 * @record
 * @struct
 */
PQueue.QueueClass = function() {};
 /** @type {number} */
PQueue.QueueClass.prototype.size;

/**
 * @param {function(): void} run
 * @param {O=} options
 * @return {void}
 */
PQueue.QueueClass.prototype.enqueue = function(run, options) {};

/**
 * @return {function(): void}
 */
PQueue.QueueClass.prototype.dequeue = function() {};
/**
 * @record
 * @struct
 */
PQueue.Options = function() {};
 /** @type {!PQueue.QueueClassConstructor<O>} */
PQueue.Options.prototype.queueClass;
 /** @type {number} */
PQueue.Options.prototype.concurrency;
/**
 * @record
 * @struct
 */
PQueue.DefaultAddOptions = function() {};
 /** @type {number} */
PQueue.DefaultAddOptions.prototype.priority;

/** @typedef {function(): !Promise<T>} */
PQueue.Task;
