/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/durandal/index.d.ts:
/**
 * @extends {JQueryPromise}
 * @record
 * @struct
 */
function DurandalPromise() {}
/**
 * @extends {JQueryDeferred}
 * @record
 * @struct
 */
function DurandalDeferred() {}
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/system"
/** @const */
tsickle_declare_module.durandal_system = {};
 /** @type {!DurandalSystemModule} */
tsickle_declare_module.durandal_system.theModule;

/* TODO: ExportAssignment in tsickle_declare_module.durandal_system */
/**
 * @record
 * @struct
 */
function DurandalSystemModule() {}
 /** @type {string} */
DurandalSystemModule.prototype.version;
 /** @type {!Function} */
DurandalSystemModule.prototype.noop;

/**
 * Gets the module id for the specified object.
 * @param {?} obj
 * @return {string}
 */
DurandalSystemModule.prototype.getModuleId = function(obj) {};

/**
 * Sets the module id for the specified object.
 * @param {?} obj
 * @param {string} id
 * @return {void}
 */
DurandalSystemModule.prototype.setModuleId = function(obj, id) {};

/**
 * Resolves the default object instance for a module. If the module is an object, the module is returned. If the module is a function, that function is called with `new` and it's result is returned.
 * @param {?} module
 * @return {?}
 */
DurandalSystemModule.prototype.resolveObject = function(module) {};

/**
 * Gets/Sets whether or not Durandal is in debug mode.
 * @param {boolean=} enable
 * @return {boolean}
 */
DurandalSystemModule.prototype.debug = function(enable) {};

/**
 * Logs data to the console. Pass any number of parameters to be logged. Log output is not processed if the framework is not running in debug mode.
 * @param {...?} msgs
 * @return {void}
 */
DurandalSystemModule.prototype.log = function(msgs) {};

/**
 * Logs an error.
 * Logs an error.
 * @param {string|!Error} error
 * @return {void}
 */
DurandalSystemModule.prototype.error = function(error) {};

/**
 * Asserts a condition by throwing an error if the condition fails.
 * @param {boolean} condition
 * @param {string} message
 * @return {void}
 */
DurandalSystemModule.prototype.assert = function(condition, message) {};

/**
 * Creates a deferred object which can be used to create a promise. Optionally pass a function action to perform which will be passed an object used in resolving the promise.
 * @template T
 * @param {function(!DurandalDeferred<T>): void=} action
 * @return {!DurandalDeferred<T>}
 */
DurandalSystemModule.prototype.defer = function(action) {};

/**
 * Creates a simple V4 UUID. This should not be used as a PK in your database. It can be used to generate internal, unique ids. For a more robust solution see [node-uuid](https://github.com/broofa/node-uuid).
 * @return {string}
 */
DurandalSystemModule.prototype.guid = function() {};

/**
 * Uses require.js to obtain a module. This function returns a promise which resolves with the module instance.
 * Uses require.js to obtain an array of modules. This function returns a promise which resolves with the modules instances in an array.
 * Uses require.js to obtain multiple modules. This function returns a promise which resolves with the module instances in an array.
 * @param {...string|!Array<string>} moduleId_or_modules_or_moduleIds
 * @return {!DurandalPromise<?>|!DurandalPromise<!Array<?>>}
 */
DurandalSystemModule.prototype.acquire = function(moduleId_or_modules_or_moduleIds) {};

/**
 * Extends the first object with the properties of the following objects.
 * @param {?} obj
 * @param {...?} extensions
 * @return {?}
 */
DurandalSystemModule.prototype.extend = function(obj, extensions) {};

/**
 * Uses a setTimeout to wait the specified milliseconds.
 * @param {number} milliseconds
 * @return {!DurandalPromise<?>}
 */
DurandalSystemModule.prototype.wait = function(milliseconds) {};

/**
 * Gets all the owned keys of the specified object.
 * @param {?} obj
 * @return {!Array<string>}
 */
DurandalSystemModule.prototype.keys = function(obj) {};

/**
 * Determines if the specified object is an html element.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isElement = function(obj) {};

/**
 * Determines if the specified object is an array.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isArray = function(obj) {};

/**
 * Determines if the specified object is a boolean.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isObject = function(obj) {};

/**
 * Determines if the specified object is a promise.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isPromise = function(obj) {};

/**
 * Determines if the specified object is a function arguments object.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isArguments = function(obj) {};

/**
 * Determines if the specified object is a function.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isFunction = function(obj) {};

/**
 * Determines if the specified object is a string.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isString = function(obj) {};

/**
 * Determines if the specified object is a number.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isNumber = function(obj) {};

/**
 * Determines if the specified object is a date.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isDate = function(obj) {};

/**
 * Determines if the specified object is a boolean.
 * @param {?} obj
 * @return {boolean}
 */
DurandalSystemModule.prototype.isBoolean = function(obj) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/viewEngine"
/** @const */
tsickle_declare_module.durandal_viewEngine = {};
 /** @type {!DurandalViewEngineModule} */
tsickle_declare_module.durandal_viewEngine.theModule;

/* TODO: ExportAssignment in tsickle_declare_module.durandal_viewEngine */
/**
 * @record
 * @struct
 */
function DurandalViewEngineModule() {}
 /** @type {string} */
DurandalViewEngineModule.prototype.viewExtension;
 /** @type {string} */
DurandalViewEngineModule.prototype.viewPlugin;
 /** @type {string} */
DurandalViewEngineModule.prototype.viewPluginParameters;

/**
 * Determines if the url is a url for a view, according to the view engine.
 * @param {string} url
 * @return {boolean}
 */
DurandalViewEngineModule.prototype.isViewUrl = function(url) {};

/**
 * Converts a view url into a view id.
 * @param {string} url
 * @return {string}
 */
DurandalViewEngineModule.prototype.convertViewUrlToViewId = function(url) {};

/**
 * Converts a view id into a full RequireJS path.
 * @param {string} viewId
 * @return {string}
 */
DurandalViewEngineModule.prototype.convertViewIdToRequirePath = function(viewId) {};

/**
 * Parses the view engine recognized markup and returns DOM elements.
 * @param {string} markup
 * @return {!Array<!Node>}
 */
DurandalViewEngineModule.prototype.parseMarkup = function(markup) {};

/**
 * Calls `parseMarkup` and then pipes the results through `ensureSingleElement`.
 * @param {string} markup
 * @return {!HTMLElement}
 */
DurandalViewEngineModule.prototype.processMarkup = function(markup) {};

/**
 * Converts an array of elements into a single element. White space and comments are removed. If a single element does not remain, then the elements are wrapped.
 * @param {!Array<!Node>} allElements
 * @return {!HTMLElement}
 */
DurandalViewEngineModule.prototype.ensureSingleElement = function(allElements) {};

/**
 * Gets the view associated with the id from the cache of parsed views.
 * @param {string} id
 * @return {!HTMLElement}
 */
DurandalViewEngineModule.prototype.tryGetViewFromCache = function(id) {};

/**
 * Puts the view associated with the id into the cache of parsed views.
 * @param {string} id
 * @param {!HTMLElement} view
 * @return {void}
 */
DurandalViewEngineModule.prototype.putViewInCache = function(id, view) {};

/**
 * Creates the view associated with the view id.
 * @param {string} viewId
 * @return {!DurandalPromise<!HTMLElement>}
 */
DurandalViewEngineModule.prototype.createView = function(viewId) {};

/**
 * Called when a view cannot be found to provide the opportunity to locate or generate a fallback view. Mainly used to ease development.
 * @param {string} viewId
 * @param {string} requirePath
 * @param {!Error} err
 * @return {!DurandalPromise<!HTMLElement>}
 */
DurandalViewEngineModule.prototype.createFallbackView = function(viewId, requirePath, err) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/events"
/** @const */
tsickle_declare_module.durandal_events = {};
 /** @type {!DurandalEventModule} */
tsickle_declare_module.durandal_events.theModule;

/* TODO: ExportAssignment in tsickle_declare_module.durandal_events */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/binder"
/** @const */
tsickle_declare_module.durandal_binder = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.durandal_binder.BindingInstruction = function() {};
 /** @type {boolean} */
tsickle_declare_module.durandal_binder.BindingInstruction.prototype.applyBindings;
 /** @type {function(?, !HTMLElement, !BindingInstruction): void} */
tsickle_declare_module.durandal_binder.binding;
 /** @type {function(?, !HTMLElement, !BindingInstruction): void} */
tsickle_declare_module.durandal_binder.bindingComplete;
 /** @type {boolean} */
tsickle_declare_module.durandal_binder.throwOnErrors;

/**
 * Gets the binding instruction that was associated with a view when it was bound.
 * @param {!HTMLElement} view
 * @return {!BindingInstruction}
 */
tsickle_declare_module.durandal_binder.getBindingInstruction = function(view) {};

/**
 * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.
 * @param {!KnockoutBindingContext} bindingContext
 * @param {!HTMLElement} view
 * @param {?=} obj
 * @param {string=} dataAlias
 * @return {!BindingInstruction}
 */
tsickle_declare_module.durandal_binder.bindContext = function(bindingContext, view, obj, dataAlias) {};

/**
 * Binds the view, preserving the existing binding context. Optionally, a new context can be created, parented to the previous context.
 * @param {?} obj
 * @param {!HTMLElement} view
 * @return {!BindingInstruction}
 */
tsickle_declare_module.durandal_binder.bind = function(obj, view) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/activator"
/** @const */
tsickle_declare_module.durandal_activator = {};
 /** @type {!DurandalActivatorSettings} */
tsickle_declare_module.durandal_activator.defaults;

/**
 * Creates a new activator.
 * \@method create
 * @template T
 * @param {T=} initialActiveItem
 * @param {!DurandalActivatorSettings=} settings
 * @return {!DurandalActivator<T>}
 */
tsickle_declare_module.durandal_activator.create = function(initialActiveItem, settings) {};

/**
 * Determines whether or not the provided object is an activator or not.
 * \@method isActivator
 * @param {?} object
 * @return {boolean}
 */
tsickle_declare_module.durandal_activator.isActivator = function(object) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/viewLocator"
/** @const */
tsickle_declare_module.durandal_viewLocator = {};
 /** @type {!DurandalViewLocatorModule} */
tsickle_declare_module.durandal_viewLocator.theModule;

/* TODO: ExportAssignment in tsickle_declare_module.durandal_viewLocator */
/**
 * @record
 * @struct
 */
function DurandalViewLocatorModule() {}

/**
 * Allows you to set up a convention for mapping module folders to view folders. It is a convenience method that customizes `convertModuleIdToViewId` and `translateViewIdToArea` under the covers.
 * @param {string=} modulesPath
 * @param {string=} viewsPath
 * @param {string=} areasPath
 * @return {void}
 */
DurandalViewLocatorModule.prototype.useConvention = function(modulesPath, viewsPath, areasPath) {};

/**
 * Maps an object instance to a view instance.
 * @param {?} obj
 * @param {string} area
 * @param {!Array<!HTMLElement>=} elementsToSearch
 * @return {!DurandalPromise<!HTMLElement>}
 */
DurandalViewLocatorModule.prototype.locateViewForObject = function(obj, area, elementsToSearch) {};

/**
 * Converts a module id into a view id. By default the ids are the same.
 * @param {string} moduleId
 * @return {string}
 */
DurandalViewLocatorModule.prototype.convertModuleIdToViewId = function(moduleId) {};

/**
 * If no view id can be determined, this function is called to genreate one. By default it attempts to determine the object's type and use that.
 * @param {?} obj
 * @return {string}
 */
DurandalViewLocatorModule.prototype.determineFallbackViewId = function(obj) {};

/**
 * Takes a view id and translates it into a particular area. By default, no translation occurs.
 * @param {string} viewId
 * @param {string} area
 * @return {string}
 */
DurandalViewLocatorModule.prototype.translateViewIdToArea = function(viewId, area) {};

/**
 * Locates the specified view.
 * Locates the specified view.
 * @param {!HTMLElement|string} view_or_viewUrlOrId
 * @param {string=} area
 * @param {!Array<!HTMLElement>=} elementsToSearch
 * @return {!DurandalPromise<!HTMLElement>}
 */
DurandalViewLocatorModule.prototype.locateView = function(view_or_viewUrlOrId, area, elementsToSearch) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/composition"
/** @const */
tsickle_declare_module.durandal_composition = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.durandal_composition.CompositionTransation = function() {};

/**
 * Registers a callback which will be invoked when the current composition transaction has completed. The transaction includes all parent and children compositions.
 * @param {!Function} callback
 * @return {void}
 */
tsickle_declare_module.durandal_composition.CompositionTransation.prototype.complete = function(callback) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.durandal_composition.CompositionContext = function() {};
 /** @type {string} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.mode;
 /** @type {!HTMLElement} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.parent;
 /** @type {!HTMLElement} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.activeView;
 /** @type {!KnockoutBindingContext} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.bindingContext;
 /** @type {boolean} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.cacheViews;
 /** @type {!Array<!HTMLElement>} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.viewElements;
 /** @type {?} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.model;
 /** @type {?} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.view;
 /** @type {string} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.area;
 /** @type {boolean} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.preserveContext;
 /** @type {boolean} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.activate;
 /** @type {function(!CompositionContext): !DurandalPromise<!HTMLElement>} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.strategy;
 /** @type {boolean} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.composingNewView;
 /** @type {!HTMLElement} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.child;
 /** @type {function(!HTMLElement, !HTMLElement, !CompositionContext): void} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.binding;
 /** @type {function(!HTMLElement, !HTMLElement, !CompositionContext): void} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.attached;
 /** @type {function(!HTMLElement, !HTMLElement, !CompositionContext): void} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.compositionComplete;
 /** @type {string} */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.transition;

/**
 * @return {void}
 */
tsickle_declare_module.durandal_composition.CompositionContext.prototype.triggerAttach = function() {};

/**
 * Converts a transition name to its moduleId.
 * @param {string} name
 * @return {string}
 */
tsickle_declare_module.durandal_composition.convertTransitionToModuleId = function(name) {};
 /** @type {string} */
tsickle_declare_module.durandal_composition.defaultTransitionName;
 /** @type {!CompositionTransation} */
tsickle_declare_module.durandal_composition.current;

/**
 * Registers a binding handler that will be invoked when the current composition transaction is complete.
 * @param {string} name
 * @param {!KnockoutBindingHandler=} config
 * @param {function(!HTMLElement, ?, ?, ?, !KnockoutBindingContext): ?=} initOptionsFactory
 * @return {void}
 */
tsickle_declare_module.durandal_composition.addBindingHandler = function(name, config, initOptionsFactory) {};

/**
 * Gets an object keyed with all the elements that are replacable parts, found within the supplied elements. The key will be the part name and the value will be the element itself.
 * Gets an object keyed with all the elements that are replacable parts, found within the supplied element. The key will be the part name and the value will be the element itself.
 * @param {!Array<!HTMLElement>|!HTMLElement} elements_or_element
 * @return {?}
 */
tsickle_declare_module.durandal_composition.getParts = function(elements_or_element) {};
 /** @type {function(!CompositionContext): !DurandalPromise<!HTMLElement>} */
tsickle_declare_module.durandal_composition.defaultStrategy;

/**
 * Initiates a composition.
 * @param {!HTMLElement} element
 * @param {!CompositionContext} settings
 * @param {!KnockoutBindingContext} bindingContext
 * @return {void}
 */
tsickle_declare_module.durandal_composition.compose = function(element, settings, bindingContext) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "durandal/app"
/** @const */
tsickle_declare_module.durandal_app = {};
 /** @type {!DurandalAppModule} */
tsickle_declare_module.durandal_app.theModule;

/* TODO: ExportAssignment in tsickle_declare_module.durandal_app */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugins/dialog"
/** @const */
tsickle_declare_module.plugins_dialog = {};

/* TODO: ImportEqualsDeclaration in tsickle_declare_module.plugins_dialog */

/**
 * @constructor
 * @struct
 * @param {string} message
 * @param {string=} title
 * @param {!Array<string>=} options
 * @param {boolean=} autoclose
 * @param {!Object=} settings
 */
tsickle_declare_module.plugins_dialog.Box = function(message, title, options, autoclose, settings) {};
 /** @type {string} */
tsickle_declare_module.plugins_dialog.Box.defaultTitle;
 /** @type {!Array<string>} */
tsickle_declare_module.plugins_dialog.Box.defaultOptions;
 /** @type {string} */
tsickle_declare_module.plugins_dialog.Box.defaultViewMarkup;

/**
 * Selects an option and closes the message box, returning the selected option through the dialog system's promise.
 * @param {string} dialogResult
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.Box.prototype.selectOption = function(dialogResult) {};

/**
 * Provides the view to the composition system.
 * @return {!HTMLElement}
 */
tsickle_declare_module.plugins_dialog.Box.prototype.getView = function() {};

/**
 * Configures a custom view to use when displaying message boxes.
 * \@method setViewUrl
 * @param {string} viewUrl
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.Box.setViewUrl = function(viewUrl) {};

/**
 * Sets the classes and styles used throughout the message box markup.
 * \@method setDefaults
 * @param {!Object} settings
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.Box.setDefaults = function(settings) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.plugins_dialog.DialogContext = function() {};
 /** @type {number} */
tsickle_declare_module.plugins_dialog.DialogContext.prototype.blockoutOpacity;

/**
 * In this function, you are expected to add a DOM element to the tree which will serve as the "host" for the modal's composed view. You must add a property called host to the modalWindow object which references the dom element. It is this host which is passed to the composition module.
 * @param {!Dialog} theDialog
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.DialogContext.prototype.addHost = function(theDialog) {};

/**
 * This function is expected to remove any DOM machinery associated with the specified dialog and do any other necessary cleanup.
 * @param {!Dialog} theDialog
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.DialogContext.prototype.removeHost = function(theDialog) {};

/**
 * This function is called after the modal is fully composed into the DOM, allowing your implementation to do any final modifications, such as positioning or animation. You can obtain the original dialog object by using `getDialog` on context.model.
 * @param {!HTMLElement} child
 * @param {!HTMLElement} parent
 * @param {!CompositionContext} context
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.DialogContext.prototype.compositionComplete = function(child, parent, context) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.plugins_dialog.Dialog = function() {};
 /** @type {!HTMLElement} */
tsickle_declare_module.plugins_dialog.Dialog.prototype.host;
 /** @type {?} */
tsickle_declare_module.plugins_dialog.Dialog.prototype.owner;
 /** @type {!DialogContext} */
tsickle_declare_module.plugins_dialog.Dialog.prototype.context;
 /** @type {!DurandalActivator<?>} */
tsickle_declare_module.plugins_dialog.Dialog.prototype.activator;
 /** @type {!CompositionContext} */
tsickle_declare_module.plugins_dialog.Dialog.prototype.settings;

/**
 * @return {!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_dialog.Dialog.prototype.close = function() {};
 /** @type {!Box} */
tsickle_declare_module.plugins_dialog.MessageBox;
 /** @type {number} */
tsickle_declare_module.plugins_dialog.currentZIndex;

/**
 * Gets the next css zIndex at which a dialog should be displayed.
 * @return {number}
 */
tsickle_declare_module.plugins_dialog.getNextZIndex = function() {};

/**
 * Determines whether or not there are any dialogs open.
 * @return {boolean}
 */
tsickle_declare_module.plugins_dialog.isOpen = function() {};

/**
 * Gets the dialog context by name or returns the default context if no name is specified.
 * @param {string=} name
 * @return {!DialogContext}
 */
tsickle_declare_module.plugins_dialog.getContext = function(name) {};

/**
 * Adds (or replaces) a dialog context.
 * @param {string} name
 * @param {!DialogContext} modalContext
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.addContext = function(name, modalContext) {};

/**
 * Gets the dialog model that is associated with the specified object.
 * @param {?} obj
 * @return {!Dialog}
 */
tsickle_declare_module.plugins_dialog.getDialog = function(obj) {};

/**
 * Closes the dialog associated with the specified object.
 * @param {?} obj
 * @param {...?} results
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.close = function(obj, results) {};

/**
 * Shows a dialog.
 * @param {?} obj
 * @param {?=} activationData
 * @param {string=} context
 * @return {!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_dialog.show = function(obj, activationData, context) {};

/**
 * Shows a message box.
 * Shows a message box.
 * @param {string} message
 * @param {string=} title
 * @param {!Array<string>|!Array<!DialogButton>=} options
 * @param {boolean=} autoclose
 * @param {!Object=} settings
 * @return {!DurandalPromise<string>|!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_dialog.showMessage = function(message, title, options, autoclose, settings) {};

/**
 * Installs this module into Durandal; called by the framework. Adds `app.showDialog` and `app.showMessage` convenience methods.
 * @param {!Object} config
 * @return {void}
 */
tsickle_declare_module.plugins_dialog.install = function(config) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugins/history"
/** @const */
tsickle_declare_module.plugins_history = {};
 /** @type {number} */
tsickle_declare_module.plugins_history.interval;
 /** @type {boolean} */
tsickle_declare_module.plugins_history.active;

/**
 * Gets the true hash value. Cannot use location.hash directly due to a bug in Firefox where location.hash will always be decoded.
 * @param {!Window=} window
 * @return {string}
 */
tsickle_declare_module.plugins_history.getHash = function(window) {};

/**
 * Get the cross-browser normalized URL fragment, either from the URL, the hash, or the override.
 * @param {string} fragment
 * @param {boolean} forcePushState
 * @return {string}
 */
tsickle_declare_module.plugins_history.getFragment = function(fragment, forcePushState) {};

/**
 * Activate the hash change handling, returning `true` if the current URL matches an existing route, and `false` otherwise.
 * @param {!DurandalHistoryOptions} options
 * @return {boolean}
 */
tsickle_declare_module.plugins_history.activate = function(options) {};

/**
 * Disable history, perhaps temporarily. Not useful in a real app, but possibly useful for unit testing Routers.
 * @return {void}
 */
tsickle_declare_module.plugins_history.deactivate = function() {};

/**
 * Checks the current URL to see if it has changed, and if it has, calls `loadUrl`, normalizing across the hidden iframe.
 * @return {boolean}
 */
tsickle_declare_module.plugins_history.checkUrl = function() {};

/**
 * Attempts to load the current URL fragment. A pass-through to options.routeHandler.
 * @return {boolean}
 */
tsickle_declare_module.plugins_history.loadUrl = function() {};

/**
 * Save a fragment into the hash history, or replace the URL state if the
 * 'replace' option is passed. You are responsible for properly URL-encoding
 * the fragment in advance.
 * The options object can contain `trigger: false` if you wish to not have the
 * route callback be fired, or `replace: true`, if
 * you wish to modify the current URL without adding an entry to the history.
 * Save a fragment into the hash history, or replace the URL state if the
 * 'replace' option is passed. You are responsible for properly URL-encoding
 * the fragment in advance.
 * The options object can contain `trigger: false` if you wish to not have the
 * route callback be fired, or `replace: true`, if
 * you wish to modify the current URL without adding an entry to the history.
 * @param {string} fragment
 * @param {boolean|!DurandalNavigationOptions=} trigger_or_options
 * @return {boolean}
 */
tsickle_declare_module.plugins_history.navigate = function(fragment, trigger_or_options) {};

/**
 * Navigates back in the browser history.
 * @return {void}
 */
tsickle_declare_module.plugins_history.navigateBack = function() {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugins/http"
/** @const */
tsickle_declare_module.plugins_http = {};
 /** @type {string} */
tsickle_declare_module.plugins_http.callbackParam;

/**
 * Converts the data to JSON.
 * @param {!Object} data
 * @return {string}
 */
tsickle_declare_module.plugins_http.toJSON = function(data) {};

/**
 * Makes an HTTP GET request.
 * @param {string} url
 * @param {!Object=} query
 * @param {!Object=} headers
 * @return {!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_http.get = function(url, query, headers) {};

/**
 * Makes an JSONP request.
 * @param {string} url
 * @param {!Object=} query
 * @param {string=} callbackParam
 * @param {!Object=} headers
 * @return {!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_http.jsonp = function(url, query, callbackParam, headers) {};

/**
 * Makes an HTTP POST request.
 * @param {string} url
 * @param {!Object} data
 * @param {!Object=} headers
 * @return {!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_http.post = function(url, data, headers) {};

/**
 * Makes an HTTP PUT request.
 * \@method put
 * @param {string} url
 * @param {!Object} data
 * @param {!Object=} headers
 * @return {!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_http.put = function(url, data, headers) {};

/**
 * Makes an HTTP DELETE request.
 * \@method remove
 * @param {string} url
 * @param {!Object=} query
 * @param {!Object=} headers
 * @return {!DurandalPromise<?>}
 */
tsickle_declare_module.plugins_http.remove = function(url, query, headers) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugins/observable"
/** @const */
tsickle_declare_module.plugins_observable = {};

/**
 * @param {?} obj
 * @param {string} property
 * @return {!KnockoutObservable<?>}
 */
tsickle_declare_module.plugins_observable.observable = function(obj, property) {};

/**
 * Converts an entire object into an observable object by re-writing its attributes using ES5 getters and setters. Attributes beginning with '_' or '$' are ignored.
 * @param {?} obj
 * @return {void}
 */
tsickle_declare_module.plugins_observable.observable.convertObject = function(obj) {};

/**
 * Converts a normal property into an observable property using ES5 getters and setters.
 * @param {?} obj
 * @param {string} propertyName
 * @param {?=} original
 * @return {!KnockoutObservable<?>}
 */
tsickle_declare_module.plugins_observable.observable.convertProperty = function(obj, propertyName, original) {};

/**
 * Defines a computed property using ES5 getters and setters.
 * @template T
 * @param {?} obj
 * @param {string} propertyName
 * @param {!KnockoutComputedDefine<T>=} evaluatorOrOptions
 * @return {!KnockoutComputed<T>}
 */
tsickle_declare_module.plugins_observable.observable.defineProperty = function(obj, propertyName, evaluatorOrOptions) {};

/**
 * Installs the plugin into the view model binder's `beforeBind` hook so that objects are automatically converted before being bound.
 * @param {!Object} config
 * @return {void}
 */
tsickle_declare_module.plugins_observable.observable.install = function(config) {};

/* TODO: ExportAssignment in tsickle_declare_module.plugins_observable */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugins/serializer"
/** @const */
tsickle_declare_module.plugins_serializer = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.plugins_serializer.SerializerOptions = function() {};
 /** @type {function(string, ?): ?} */
tsickle_declare_module.plugins_serializer.SerializerOptions.prototype.replacer;
 /** @type {?} */
tsickle_declare_module.plugins_serializer.SerializerOptions.prototype.space;
/**
 * @record
 * @struct
 */
tsickle_declare_module.plugins_serializer.DeserializerOptions = function() {};
 /** @type {function(?): string} */
tsickle_declare_module.plugins_serializer.DeserializerOptions.prototype.getTypeId;
 /** @type {function(string): function(): ?} */
tsickle_declare_module.plugins_serializer.DeserializerOptions.prototype.getConstructor;
 /** @type {function(string, ?): ?} */
tsickle_declare_module.plugins_serializer.DeserializerOptions.prototype.reviver;
 /** @type {string} */
tsickle_declare_module.plugins_serializer.typeAttribute;
 /** @type {?} */
tsickle_declare_module.plugins_serializer.space;

/**
 * The default replacer function used during serialization. By default properties starting with '_' or '$' are removed from the serialized object.
 * @param {string} key
 * @param {?} value
 * @return {?}
 */
tsickle_declare_module.plugins_serializer.replacer = function(key, value) {};

/**
 * Serializes the object.
 * Serializes the object.
 * Serializes the object.
 * @param {?} object
 * @param {string|number|!SerializerOptions=} settings
 * @return {string}
 */
tsickle_declare_module.plugins_serializer.serialize = function(object, settings) {};

/**
 * Gets the type id for an object instance, using the configured `typeAttribute`.
 * @param {?} object
 * @return {string}
 */
tsickle_declare_module.plugins_serializer.getTypeId = function(object) {};
 /** @type {?} */
tsickle_declare_module.plugins_serializer.typeMap;

/**
 * Adds a type id/constructor function mampping to the `typeMap`.
 * @param {string} typeId
 * @param {function(): ?} constructor
 * @return {void}
 */
tsickle_declare_module.plugins_serializer.registerType = function(typeId, constructor) {};

/**
 * The default reviver function used during deserialization. By default is detects type properties on objects and uses them to re-construct the correct object using the provided constructor mapping.
 * @param {string} key
 * @param {?} value
 * @param {function(?): string} getTypeId
 * @param {function(string): function(): ?} getConstructor
 * @return {?}
 */
tsickle_declare_module.plugins_serializer.reviver = function(key, value, getTypeId, getConstructor) {};

/**
 * Deserialize the JSON.
 * @template T
 * @param {string} text
 * @param {!DeserializerOptions=} settings
 * @return {T}
 */
tsickle_declare_module.plugins_serializer.deserialize = function(text, settings) {};

/**
 * Clone the object.
 * @template T
 * @param {T} obj
 * @param {!Object=} settings
 * @return {T}
 */
tsickle_declare_module.plugins_serializer.clone = function(obj, settings) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugins/widget"
/** @const */
tsickle_declare_module.plugins_widget = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.plugins_widget.WidgetSettings = function() {};
 /** @type {string} */
tsickle_declare_module.plugins_widget.WidgetSettings.prototype.kind;
 /** @type {?} */
tsickle_declare_module.plugins_widget.WidgetSettings.prototype.model;
 /** @type {?} */
tsickle_declare_module.plugins_widget.WidgetSettings.prototype.view;

/**
 * Creates a ko binding handler for the specified kind.
 * @param {string} kind
 * @return {void}
 */
tsickle_declare_module.plugins_widget.registerKind = function(kind) {};

/**
 * Maps views and module to the kind identifier if a non-standard pattern is desired.
 * @param {string} kind
 * @param {string=} viewId
 * @param {string=} moduleId
 * @return {void}
 */
tsickle_declare_module.plugins_widget.mapKind = function(kind, viewId, moduleId) {};

/**
 * Maps a kind name to it's module id. First it looks up a custom mapped kind, then falls back to `convertKindToModulePath`.
 * @param {string} kind
 * @return {string}
 */
tsickle_declare_module.plugins_widget.mapKindToModuleId = function(kind) {};

/**
 * Converts a kind name to it's module path. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.
 * @param {string} kind
 * @return {string}
 */
tsickle_declare_module.plugins_widget.convertKindToModulePath = function(kind) {};

/**
 * Maps a kind name to it's view id. First it looks up a custom mapped kind, then falls back to `convertKindToViewPath`.
 * @param {string} kind
 * @return {string}
 */
tsickle_declare_module.plugins_widget.mapKindToViewId = function(kind) {};

/**
 * Converts a kind name to it's view id. Used to conventionally map kinds who aren't explicitly mapped through `mapKind`.
 * @param {string} kind
 * @return {string}
 */
tsickle_declare_module.plugins_widget.convertKindToViewPath = function(kind) {};

/**
 * Creates a widget.
 * @param {!HTMLElement} element
 * @param {!WidgetSettings} settings
 * @param {!KnockoutBindingContext=} bindingContext
 * @return {void}
 */
tsickle_declare_module.plugins_widget.create = function(element, settings, bindingContext) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "plugins/router"
/** @const */
tsickle_declare_module.plugins_router = {};
 /** @type {!DurandalRootRouter} */
tsickle_declare_module.plugins_router.theModule;

/* TODO: ExportAssignment in tsickle_declare_module.plugins_router */
/**
 * @record
 * @struct
 */
function DurandalEventSubscription() {}

/**
 * Attaches a callback to the event subscription.
 * \@chainable
 * @param {!Function} thenCallback
 * @param {?=} context
 * @return {!DurandalEventSubscription}
 */
DurandalEventSubscription.prototype.then = function(thenCallback, context) {};

/**
 * Attaches a callback to the event subscription.
 * \@chainable
 * @param {!Function} thenCallback
 * @param {?=} context
 * @return {!DurandalEventSubscription}
 */
DurandalEventSubscription.prototype.on = function(thenCallback, context) {};

/**
 * Cancels the subscription.
 * \@chainable
 * @return {!DurandalEventSubscription}
 */
DurandalEventSubscription.prototype.off = function() {};
/**
 * @record
 * @struct
 */
function DurandalEventSupport() {}

/**
 * Creates a subscription or registers a callback for the specified event.
 * Creates a subscription or registers a callback for the specified event.
 * @param {string} events
 * @param {!Function=} callback
 * @param {?=} context
 * @return {!DurandalEventSubscription|T}
 */
DurandalEventSupport.prototype.on = function(events, callback, context) {};

/**
 * Removes the callbacks for the specified events.
 * \@chainable
 * @param {string} events
 * @param {!Function} callback
 * @param {?=} context
 * @return {T}
 */
DurandalEventSupport.prototype.off = function(events, callback, context) {};

/**
 * Triggers the specified events.
 * \@chainable
 * @param {string} events
 * @param {...?} eventArgs
 * @return {T}
 */
DurandalEventSupport.prototype.trigger = function(events, eventArgs) {};

/**
 * Creates a function that will trigger the specified events when called. Simplifies proxying jQuery (or other) events through to the events object.
 * @param {string} events
 * @return {!Function}
 */
DurandalEventSupport.prototype.proxy = function(events) {};
/**
 * @record
 * @struct
 */
function DurandalEventModule() {}

/* TODO: ConstructSignature:  */

/**
 * @param {?} targetObject
 * @return {void}
 */
DurandalEventModule.prototype.includeIn = function(targetObject) {};
/**
 * @record
 * @struct
 */
function DialogButton() {}
 /** @type {string} */
DialogButton.prototype.text;
 /** @type {?} */
DialogButton.prototype.value;
/**
 * @extends {DurandalEventSupport}
 * @record
 * @struct
 */
function DurandalAppModule() {}
 /** @type {string} */
DurandalAppModule.prototype.title;

/**
 * Shows a dialog via the dialog plugin.
 * @param {?} obj
 * @param {?=} activationData
 * @param {string=} context
 * @return {!DurandalPromise<?>}
 */
DurandalAppModule.prototype.showDialog = function(obj, activationData, context) {};

/**
 * Closes the dialog associated with the specified object. via the dialog plugin.
 * @param {?} obj
 * @param {...?} results
 * @return {void}
 */
DurandalAppModule.prototype.closeDialog = function(obj, results) {};

/**
 * Shows a message box via the dialog plugin.
 * Shows a message box.
 * @param {string} message
 * @param {string=} title
 * @param {!Array<string>|!Array<!DialogButton>=} options
 * @param {boolean=} autoclose
 * @param {!Object=} settings
 * @return {!DurandalPromise<string>|!DurandalPromise<?>}
 */
DurandalAppModule.prototype.showMessage = function(message, title, options, autoclose, settings) {};

/**
 * Configures one or more plugins to be loaded and installed into the application.
 * \@method configurePlugins
 * @param {!Object} config
 * @param {string=} baseUrl
 * @return {void}
 */
DurandalAppModule.prototype.configurePlugins = function(config, baseUrl) {};

/**
 * Starts the application.
 * @return {!DurandalPromise<?>}
 */
DurandalAppModule.prototype.start = function() {};

/**
 * Sets the root module/view for the application.
 * Sets the root module/view for the application.
 * @param {?} root
 * @param {string=} transition
 * @param {string|!HTMLElement=} applicationHost
 * @return {void}
 */
DurandalAppModule.prototype.setRoot = function(root, transition, applicationHost) {};
/**
 * @record
 * @struct
 */
function DurandalActivatorSettings() {}
 /** @type {boolean} */
DurandalActivatorSettings.prototype.closeOnDeactivate;
 /** @type {!Array<string>} */
DurandalActivatorSettings.prototype.affirmations;

/**
 * Interprets the response of a `canActivate` or `canDeactivate` call using the known affirmative values in the `affirmations` array.
 * @param {?} value
 * @return {boolean}
 */
DurandalActivatorSettings.prototype.interpretResponse = function(value) {};

/**
 * Determines whether or not the current item and the new item are the same.
 * @param {?} currentItem
 * @param {?} newItem
 * @param {?} currentActivationData
 * @param {?} newActivationData
 * @return {boolean}
 */
DurandalActivatorSettings.prototype.areSameItem = function(currentItem, newItem, currentActivationData, newActivationData) {};

/**
 * Called immediately before the new item is activated.
 * @param {?} newItem
 * @return {?}
 */
DurandalActivatorSettings.prototype.beforeActivate = function(newItem) {};

/**
 * Called immediately after the old item is deactivated.
 * @param {?} oldItem
 * @param {boolean} close
 * @param {!Function} setter
 * @return {void}
 */
DurandalActivatorSettings.prototype.afterDeactivate = function(oldItem, close, setter) {};
/**
 * @extends {KnockoutComputed}
 * @record
 * @struct
 */
function DurandalActivator() {}
 /** @type {!DurandalActivatorSettings} */
DurandalActivator.prototype.settings;
 /** @type {!KnockoutObservable<boolean>} */
DurandalActivator.prototype.isActivating;

/**
 * Determines whether or not the specified item can be deactivated.
 * @param {T} item
 * @param {boolean} close
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.canDeactivateItem = function(item, close) {};

/**
 * Deactivates the specified item.
 * @param {T} item
 * @param {boolean} close
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.deactivateItem = function(item, close) {};

/**
 * Determines whether or not the specified item can be activated.
 * @param {T} newItem
 * @param {?=} activationData
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.canActivateItem = function(newItem, activationData) {};

/**
 * Activates the specified item.
 * @param {T} newItem
 * @param {?=} activationData
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.activateItem = function(newItem, activationData) {};

/**
 * Determines whether or not the activator, in its current state, can be activated.
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.canActivate = function() {};

/**
 * Activates the activator, in its current state.
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.activate = function() {};

/**
 * Determines whether or not the activator, in its current state, can be deactivated.
 * @param {boolean} close
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.canDeactivate = function(close) {};

/**
 * Deactivates the activator, in its current state.
 * @param {boolean} close
 * @return {!DurandalPromise<boolean>}
 */
DurandalActivator.prototype.deactivate = function(close) {};

/**
 * Adds canActivate, activate, canDeactivate and deactivate functions to the provided model which pass through to the corresponding functions on the activator.
 * @param {?} includeIn
 * @return {void}
 */
DurandalActivator.prototype.includeIn = function(includeIn) {};

/**
 * Sets up a collection representing a pool of objects which the activator will activate. See below for details. Activators without an item bool always close their values on deactivate. Activators with an items pool only deactivate, but do not close them.
 * @param {!Array<?>} items
 * @return {!DurandalActivator}
 */
DurandalActivator.prototype.forItems = function(items) {};
/**
 * @record
 * @struct
 */
function DurandalHistoryOptions() {}
 /** @type {function(string): void} */
DurandalHistoryOptions.prototype.routeHandler;
 /** @type {string} */
DurandalHistoryOptions.prototype.root;
 /** @type {boolean} */
DurandalHistoryOptions.prototype.hashChange;
 /** @type {boolean} */
DurandalHistoryOptions.prototype.pushState;
 /** @type {boolean} */
DurandalHistoryOptions.prototype.silent;
 /** @type {string} */
DurandalHistoryOptions.prototype.startRoute;
/**
 * @record
 * @struct
 */
function DurandalNavigationOptions() {}
 /** @type {boolean} */
DurandalNavigationOptions.prototype.trigger;
 /** @type {boolean} */
DurandalNavigationOptions.prototype.replace;
/**
 * @record
 * @struct
 */
function DurandalRouteConfiguration() {}
 /** @type {?} */
DurandalRouteConfiguration.prototype.title;
 /** @type {string} */
DurandalRouteConfiguration.prototype.moduleId;
 /** @type {string} */
DurandalRouteConfiguration.prototype.hash;
 /** @type {(string|!Array<string>)} */
DurandalRouteConfiguration.prototype.route;
 /** @type {!RegExp} */
DurandalRouteConfiguration.prototype.routePattern;
 /** @type {!KnockoutComputed<boolean>} */
DurandalRouteConfiguration.prototype.isActive;
 /** @type {?} */
DurandalRouteConfiguration.prototype.nav;
 /** @type {boolean} */
DurandalRouteConfiguration.prototype.hasChildRoutes;
 /** @type {string} */
DurandalRouteConfiguration.prototype.viewUrl;
/**
 * @record
 * @struct
 */
function DurandalRouteInstruction() {}
 /** @type {string} */
DurandalRouteInstruction.prototype.fragment;
 /** @type {string} */
DurandalRouteInstruction.prototype.queryString;
 /** @type {!DurandalRouteConfiguration} */
DurandalRouteInstruction.prototype.config;
 /** @type {!Array<?>} */
DurandalRouteInstruction.prototype.params;
 /** @type {!Object<string,?>} */
DurandalRouteInstruction.prototype.queryParams;
/**
 * @record
 * @struct
 */
function DurandalRelativeRouteSettings() {}
 /** @type {string} */
DurandalRelativeRouteSettings.prototype.moduleId;
 /** @type {string} */
DurandalRelativeRouteSettings.prototype.route;
 /** @type {boolean} */
DurandalRelativeRouteSettings.prototype.fromParent;
 /** @type {string} */
DurandalRelativeRouteSettings.prototype.dynamicHash;
/**
 * @extends {DurandalEventSupport}
 * @record
 * @struct
 */
function DurandalRouterBase() {}
 /** @type {!Array<{routePattern: !RegExp, callback: function(string): void}>} */
DurandalRouterBase.prototype.handlers;
 /** @type {!Array<!DurandalRouteConfiguration>} */
DurandalRouterBase.prototype.routes;
 /** @type {!DurandalActivator<?>} */
DurandalRouterBase.prototype.activeItem;
 /** @type {!KnockoutObservableArray<!DurandalRouteConfiguration>} */
DurandalRouterBase.prototype.navigationModel;
 /** @type {!KnockoutComputed<boolean>} */
DurandalRouterBase.prototype.isNavigating;
 /** @type {!KnockoutObservable<!DurandalRouteInstruction>} */
DurandalRouterBase.prototype.activeInstruction;
 /** @type {function(!Object, !DurandalRouteInstruction): (string|boolean|!DurandalPromise<(string|boolean)>)} */
DurandalRouterBase.prototype.guardRoute;
 /** @type {!DurandalRouter} */
DurandalRouterBase.prototype.parent;

/**
 * Parses a query string into an object.
 * @param {string} queryString
 * @return {!Object}
 */
DurandalRouterBase.prototype.parseQueryString = function(queryString) {};

/**
 * Add a route to be tested when the url fragment changes.
 * @param {!RegExp} routePattern
 * @param {function(string): void} callback
 * @return {void}
 */
DurandalRouterBase.prototype.route = function(routePattern, callback) {};

/**
 * Attempt to load the specified URL fragment. If a route succeeds with a match, returns `true`. If no defined routes matches the fragment, returns `false`.
 * @param {string} fragment
 * @return {boolean}
 */
DurandalRouterBase.prototype.loadUrl = function(fragment) {};

/**
 * Updates the document title based on the activated module instance, the routing instruction and the app.title.
 * @param {!Object} instance
 * @param {!DurandalRouteInstruction} instruction
 * @return {void}
 */
DurandalRouterBase.prototype.updateDocumentTitle = function(instance, instruction) {};

/**
 * Save a fragment into the hash history, or replace the URL state if the
 * 'replace' option is passed. You are responsible for properly URL-encoding
 * the fragment in advance.
 * The options object can contain `trigger: false` if you wish to not have the
 * route callback be fired, or `replace: true`, if
 * you wish to modify the current URL without adding an entry to the history.
 * Save a fragment into the hash history, or replace the URL state if the
 * 'replace' option is passed. You are responsible for properly URL-encoding
 * the fragment in advance.
 * The options object can contain `trigger: false` if you wish to not have the
 * route callback be fired, or `replace: true`, if
 * you wish to modify the current URL without adding an entry to the history.
 * @param {string} fragment
 * @param {boolean|!DurandalNavigationOptions=} trigger_or_options
 * @return {boolean}
 */
DurandalRouterBase.prototype.navigate = function(fragment, trigger_or_options) {};

/**
 * Navigates back in the browser history.
 * @return {void}
 */
DurandalRouterBase.prototype.navigateBack = function() {};

/**
 * Converts a route to a hash suitable for binding to a link's href.
 * @param {string} route
 * @return {string}
 */
DurandalRouterBase.prototype.convertRouteToHash = function(route) {};

/**
 * Converts a route to a module id. This is only called if no module id is supplied as part of the route mapping.
 * @param {string} route
 * @return {string}
 */
DurandalRouterBase.prototype.convertRouteToModuleId = function(route) {};

/**
 * Converts a route to a displayable title. This is only called if no title is specified as part of the route mapping.
 * \@method convertRouteToTitle
 * @param {string} route
 * @return {string}
 */
DurandalRouterBase.prototype.convertRouteToTitle = function(route) {};

/**
 * Maps route patterns to modules.
 * \@chainable
 * Maps route patterns to modules.
 * \@chainable
 * Maps route patterns to modules.
 * \@chainable
 * Maps route patterns to modules.
 * \@chainable
 * Maps route patterns to modules.
 * \@method map
 * \@chainable
 * Maps route patterns to modules.
 * \@chainable
 * Maps route patterns to modules.
 * \@chainable
 * @param {string|!RegExp|!DurandalRouteConfiguration|!Array<!DurandalRouteConfiguration>} route_or_config_or_configs
 * @param {string|!DurandalRouteConfiguration=} moduleId_or_config
 * @return {T}
 */
DurandalRouterBase.prototype.map = function(route_or_config_or_configs, moduleId_or_config) {};

/**
 * Builds an observable array designed to bind a navigation UI to. The model will exist in the `navigationModel` property.
 * \@chainable
 * @param {number=} defaultOrder
 * @return {T}
 */
DurandalRouterBase.prototype.buildNavigationModel = function(defaultOrder) {};

/**
 * Configures the router to map unknown routes to modules at the same path.
 * \@chainable
 * Configures the router use the specified module id for all unknown routes.
 * \@chainable
 * Configures how the router will handle unknown routes.
 * \@chainable
 * Configures how the router will handle unknown routes.
 * \@chainable
 * @param {string|function(!DurandalRouteInstruction): void|!DurandalRouteConfiguration=} notFoundModuleId_or_callback_or_config
 * @param {string=} replaceRoute
 * @return {T}
 */
DurandalRouterBase.prototype.mapUnknownRoutes = function(notFoundModuleId_or_callback_or_config, replaceRoute) {};

/**
 * Resets the router by removing handlers, routes, event handlers and previously configured options.
 * \@chainable
 * @return {T}
 */
DurandalRouterBase.prototype.reset = function() {};

/**
 * Makes all configured routes and/or module ids relative to a certain base url.
 * \@chainable
 * Makes all configured routes and/or module ids relative to a certain base url.
 * \@chainable
 * @param {string|!DurandalRelativeRouteSettings} settings
 * @return {T}
 */
DurandalRouterBase.prototype.makeRelative = function(settings) {};

/**
 * Creates a child router.
 * @return {T}
 */
DurandalRouterBase.prototype.createChildRouter = function() {};
/**
 * @extends {DurandalRouterBase}
 * @record
 * @struct
 */
function DurandalRouter() {}
/**
 * @extends {DurandalRouterBase}
 * @record
 * @struct
 */
function DurandalRootRouter() {}

/**
 * Makes the RegExp generated for routes case sensitive, rather than the default of case insensitive.
 * @return {void}
 */
DurandalRootRouter.prototype.makeRoutesCaseSensitive = function() {};

/**
 * Activates the router and the underlying history tracking mechanism.
 * @param {!DurandalHistoryOptions=} options
 * @return {!DurandalPromise<?>}
 */
DurandalRootRouter.prototype.activate = function(options) {};

/**
 * Disable history, perhaps temporarily. Not useful in a real app, but possibly useful for unit testing Routers.
 * @return {void}
 */
DurandalRootRouter.prototype.deactivate = function() {};

/**
 * Installs the router's custom ko binding handler.
 * @return {void}
 */
DurandalRootRouter.prototype.install = function() {};
