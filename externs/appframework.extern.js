/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/appframework/index.d.ts:
/**
 * @record
 * @struct
 */
function appFrameworkStatic() {}

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */

/* TODO: CallSignature:  */
 /** @type {!Object} */
appFrameworkStatic.prototype.fn;
 /** @type {!appFrameworkAjaxSettings} */
appFrameworkStatic.prototype.ajaxSettings;
 /** @type {{webkit: boolean, android: boolean, androidICS: boolean, ipad: boolean, iphone: boolean, ios7: boolean, webos: boolean, touchpad: boolean, ios: boolean, playbook: boolean, blackberry: boolean, blackberry10: boolean, chrome: boolean, opera: boolean, fennec: boolean, ie: boolean, ieTouch: boolean, supportsTouch: boolean}} */
appFrameworkStatic.prototype.os;
 /** @type {{nativeTouchScroll: boolean, cssPrefix: string, cssTransformStart: string, cssTransformEnd: string}} */
appFrameworkStatic.prototype.feat;

/**
 * Checks to see if the parameter is a $afm object
 * ```
 * var foo=$('#header');
 * $.is$(foo);
 * ```
 * \@title $.is$(param)
 * @param {?} obj
 * @return {boolean}
 */
appFrameworkStatic.prototype.is$ = function(obj) {};

/**
 * Map takes in elements and executes a callback function on each and returns a collection
 * ```
 * $.map([1,2],function(ind){return ind+1});
 * ```
 * \@title $.map(elements,callback)
 * @param {!Array<?>} collection
 * @param {function(?, number): ?} fn
 * @return {!Array<?>}
 */
appFrameworkStatic.prototype.map = function(collection, fn) {};

/**
 * Iterates through elements and executes a callback.  Returns if false
 * ```
 * $.each([1,2],function(ind){console.log(ind);});
 * ```
 * \@title $.each(elements,callback)
 * @param {!Array<?>|?} collection
 * @param {function(number, ?): ?|function(string, ?): ?} fn
 * @return {void}
 */
appFrameworkStatic.prototype.each = function(collection, fn) {};

/**
 * Extends an object with additional arguments
 * ```
 * $.extend({foo:'bar'});
 * $.extend(element,{foo:'bar'});
 * ```
 * \@title $.extend(target,{params})
 * @param {?} target
 * @param {...?} sources
 * @return {?}
 */
appFrameworkStatic.prototype.extend = function(target, sources) {};

/**
 * Checks to see if the parameter is an array
 * ```
 * var arr=[];
 * $.isArray(arr);
 * ```
 * \@example $.isArray([1]);
 * \@title $.isArray(param)
 * @param {?} object
 * @return {boolean}
 */
appFrameworkStatic.prototype.isArray = function(object) {};

/**
 * Checks to see if the parameter is a function
 * ```
 * var func=function(){};
 * $.isFunction(func);
 * ```
 * \@title $.isFunction(param)
 * @param {?} object
 * @return {boolean}
 */
appFrameworkStatic.prototype.isFunction = function(object) {};

/**
 * Checks to see if the parameter is a object
 * ```
 * var foo={bar:'bar'};
 * $.isObject(foo);
 * ```
 * \@title $.isObject(param)
 * @param {?} object
 * @return {boolean}
 */
appFrameworkStatic.prototype.isObject = function(object) {};

/**
 * Execute a jsonP call, allowing cross domain scripting
 * options.url - URL to call
 * options.success - Success function to call
 * options.error - Error function to call
 * ```
 * $.jsonP({url:'mysite.php?callback=?&foo=bar',success:function(){},error:function(){}});
 * ```
 * \@title $.jsonP(options)
 * @param {!appFrameworkAjaxSettings} options
 * @return {!Object}
 */
appFrameworkStatic.prototype.jsonP = function(options) {};

/**
 * Execute an Ajax call with the given options
 * options.type - Type of request
 * options.beforeSend - function to execute before sending the request
 * options.success - success callback
 * options.error - error callback
 * options.complete - complete callback - callled with a success or error
 * options.timeout - timeout to wait for the request
 * options.url - URL to make request against
 * options.contentType - HTTP Request Content Type
 * options.headers - Object of headers to set
 * options.dataType - Data type of request
 * options.data - data to pass into request.  $.param is called on objects
 * ```
 * var opts={
 * type:"GET",
 * success:function(data){},
 * url:"mypage.php",
 * data:{bar:'bar'},
 * }
 * $.ajax(opts);
 * ```
 * \@title $.ajax(options)
 * @param {!appFrameworkAjaxSettings} options
 * @return {!XMLHttpRequest}
 */
appFrameworkStatic.prototype.ajax = function(options) {};

/**
 * Shorthand call to an Ajax GET request
 * ```
 * $.get("mypage.php?foo=bar",function(data){});
 * ```
 * \@title $.get(url,success)
 * @param {string} url
 * @param {function(?, string, !XMLHttpRequest): void} fn
 * @return {!XMLHttpRequest}
 */
appFrameworkStatic.prototype.get = function(url, fn) {};

/**
 * Shorthand call to an Ajax POST request
 * ```
 * $.post("mypage.php",{bar:'bar'},function(data){});
 * ```
 * \@title $.post(url,[data],success,[dataType])
 * @param {string} url
 * @param {function(?, string, !XMLHttpRequest): void|?} fn_or_data
 * @param {string|function(?, string, !XMLHttpRequest): void=} dataType_or_fn
 * @param {string=} dataType
 * @return {!XMLHttpRequest}
 */
appFrameworkStatic.prototype.post = function(url, fn_or_data, dataType_or_fn, dataType) {};

/**
 * Shorthand call to an Ajax request that expects a JSON response
 * ```
 * $.getJSON("mypage.php",{bar:'bar'},function(data){});
 * ```
 * \@title $.getJSON(url,data,success)
 * @param {string} url
 * @param {function(?, string, !XMLHttpRequest): void|?} fn_or_data
 * @param {function(?, string, !XMLHttpRequest): void=} fn
 * @return {!XMLHttpRequest}
 */
appFrameworkStatic.prototype.getJSON = function(url, fn_or_data, fn) {};

/**
 * Converts an object into a key/value par with an optional prefix.  Used for converting objects to a query string
 * ```
 * var obj={
 * foo:'foo',
 * bar:'bar'
 * }
 * var kvp=$.param(obj,'data');
 * ```
 * \@title $.param(object,[prefix];
 * @param {?} object
 * @param {string=} prefix
 * @return {string}
 */
appFrameworkStatic.prototype.param = function(object, prefix) {};

/**
 * Used for backwards compatibility.  Uses native JSON.parse function
 * ```
 * var obj=$.parseJSON("{\"bar\":\"bar\"}");
 * ```
 * \@params {String} string
 * \@title $.parseJSON(string)
 * @param {string} str
 * @return {?}
 */
appFrameworkStatic.prototype.parseJSON = function(str) {};

/**
 * Helper function to convert XML into  the DOM node representation
 * ```
 * var xmlDoc=$.parseXML("<xml><foo>bar</foo></xml>");
 * ```
 * \@title $.parseXML(string)
 * @param {string} str
 * @return {?}
 */
appFrameworkStatic.prototype.parseXML = function(str) {};

/**
 * Utility function to create a psuedo GUID
 * ```
 * var id= $.uuid();
 * ```
 * \@title $.uuid
 * @return {string}
 */
appFrameworkStatic.prototype.uuid = function() {};

/**
 * Gets the css matrix, or creates a fake one
 * ```
 * $.getCssMatrix(domElement)
 * ```
 * @param {!HTMLElement|!appFrameworkCollection} node_or_elem
 * @return {!appFrameworkCssMatrix} matrix with postion
 */
appFrameworkStatic.prototype.getCssMatrix = function(node_or_elem) {};

/**
 * $.create - a faster alertnative to $("<div id='main'>this is some text</div>");
 * ```
 * $.create("div",{id:'main',innerHTML:'this is some text'});
 * $.create("<div id='main'>this is some text</div>");
 * ```
 * \@title $.create(type,[params])
 * @param {string} type
 * @param {?=} params
 * @return {!appFrameworkCollection}
 */
appFrameworkStatic.prototype.create = function(type, params) {};

/**
 * $.query  - a faster alertnative to $("div");
 * ```
 * $.query(".panel");
 * ```
 * \@title $.query(selector,[context])
 * @param {string} selector
 * @param {?=} context
 * @return {!appFrameworkCollection}
 */
appFrameworkStatic.prototype.query = function(selector, context) {};

/**
 * Creates a custom event to be used internally.
 * \@title $.Event(type,props);
 * @param {string} type
 * @param {?} props
 * @return {?}
 */
appFrameworkStatic.prototype.Event = function(type, props) {};

/**
 * Bind an event to an object instead of a DOM Node
 * ```
 * $.bind(this,'event',function(){});
 * ```
 * \@title $.bind(object,event,function);
 * @param {?} object
 * @param {string} event
 * @param {!Function} fn
 * @return {void}
 */
appFrameworkStatic.prototype.bind = function(object, event, fn) {};

/**
 * Trigger an event to an object instead of a DOM Node
 * ```
 * $.trigger(this,'event',arguments);
 * ```
 * \@title $.trigger(object,event,argments);
 * @param {?} object
 * @param {string} event
 * @param {!Array<?>=} args
 * @return {void}
 */
appFrameworkStatic.prototype.trigger = function(object, event, args) {};

/**
 * Unbind an event to an object instead of a DOM Node
 * ```
 * $.unbind(this,'event',function(){});
 * ```
 * \@title $.unbind(object,event,function);
 * @param {?} object
 * @param {string} event
 * @param {!Function} fn
 * @return {void}
 */
appFrameworkStatic.prototype.unbind = function(object, event, fn) {};

/**
 * Creates a proxy function so you can change the 'this' context in the function
 * Update: now also allows multiple argument call or for you to pass your own arguments
 * ```
 * var newObj={foo:bar}
 * $("#main").bind("click",$.proxy(function(evt){console.log(this)},newObj);
 * or
 * ( $.proxy(function(foo, bar){console.log(this+foo+bar)}, newObj) )('foo', 'bar');
 * or
 * ( $.proxy(function(foo, bar){console.log(this+foo+bar)}, newObj, ['foo', 'bar']) )();
 * ```
 * \@title $.proxy(callback,context);
 * @param {!Function} callback
 * @param {?} context
 * @return {void}
 */
appFrameworkStatic.prototype.proxy = function(callback, context) {};

/**
 * Function to clean up node content to prevent memory leaks
 * ```
 * $.cleanUpContent(node,itself,kill)
 * ```
 * \@title $.cleanUpContent(node,itself,kill)
 * @param {!HTMLElement} node
 * @param {boolean=} itself
 * @param {boolean=} kill
 * @return {void}
 */
appFrameworkStatic.prototype.cleanUpContent = function(node, itself, kill) {};

/**
 * This adds a command to execute in the JS stack, but is faster then setTimeout
 * ```
 * $.asap(function,context,args)
 * ```
 * @param {!Function} callback
 * @param {?=} context
 * @param {!Array<?>=} args
 * @return {void}
 */
appFrameworkStatic.prototype.asap = function(callback, context, args) {};

/**
 * this function executes javascript in HTML.
 * ```
 * $.parseJS(content)
 * ```
 * \@title $.parseJS(content);
 * @param {string|!HTMLElement} content
 * @return {void}
 */
appFrameworkStatic.prototype.parseJS = function(content) {};
/**
 * @record
 * @struct
 */
function appFrameworkCollection() {}
 /** @type {number} */
appFrameworkCollection.prototype.length;

/**
 * @param {function(!appFrameworkCollection, !appFrameworkCollection, number, !Array<!appFrameworkCollection>): !appFrameworkCollection} callbackfn
 * @param {!appFrameworkCollection=} initialValue
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.reduce = function(callbackfn, initialValue) {};

/**
 * @param {...!appFrameworkCollection} items
 * @return {number}
 */
appFrameworkCollection.prototype.push = function(items) {};

/**
 * @param {!appFrameworkCollection} searchElement
 * @param {number=} fromIndex
 * @return {number}
 */
appFrameworkCollection.prototype.indexOf = function(searchElement, fromIndex) {};

/**
 * @param {...!appFrameworkCollection} items
 * @return {!Array<!appFrameworkCollection>}
 */
appFrameworkCollection.prototype.concat = function(items) {};

/**
 * @param {number} start
 * @param {number=} end
 * @return {!Array<!appFrameworkCollection>}
 */
appFrameworkCollection.prototype.slice = function(start, end) {};

/**
 * This is a wrapper to $.map on the selected elements
 * ```
 * $().map(function(){this.value+=ind});
 * ```
 * \@title $().map(function)
 * @param {function(number, ?): ?} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.map = function(fn) {};

/**
 * Iterates through all elements and applys a callback function
 * ```
 * $().each(function(){console.log(this.value)});
 * ```
 * \@title $().each(function)
 * @param {function(number, ?): ?} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.each = function(fn) {};

/**
 * @param {function(?, number): ?} fn
 * @return {void}
 */
appFrameworkCollection.prototype.forEach = function(fn) {};

/**
 * This is executed when DOMContentLoaded happens, or after if you've registered for it.
 * ```
 * $(document).ready(function(){console.log('I'm ready');});
 * ```
 * \@title $().ready(function)
 * @param {!Function} fn
 * @return {!appFrameworkStatic}
 */
appFrameworkCollection.prototype.ready = function(fn) {};

/**
 * Searches through the collection and reduces them to elements that match the selector
 * ```
 * $("#foo").find('.bar');
 * $("#foo").find($('.bar'));
 * $("#foo").find($('.bar').get(0));
 * ```
 * \@title $().find(selector)
 * @param {string} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.find = function(selector) {};

/**
 * Gets or sets the innerHTML for the collection.
 * If used as a get, the first elements innerHTML is returned
 * ```
 * $("#foo").html(); //gets the first elements html
 * $("#foo").html('new html');//sets the html
 * $("#foo").html('new html',false); //Do not do memory management cleanup
 * ```
 * \@title $().html([html])
 * @param {string=} html
 * @param {boolean=} cleanup
 * @return {string|!appFrameworkCollection}
 */
appFrameworkCollection.prototype.html = function(html, cleanup) {};

/**
 * Gets or sets the innerText for the collection.
 * If used as a get, the first elements innerText is returned
 * ```
 * $("#foo").text(); //gets the first elements text;
 * $("#foo").text('new text'); //sets the text
 * ```
 * \@title $().text([text])
 * @param {string=} text
 * @return {string|!appFrameworkCollection}
 */
appFrameworkCollection.prototype.text = function(text) {};

/**
 * Gets or sets a css property for the collection
 * If used as a get, the first elements css property is returned
 * This will add px to properties that need it.
 * ```
 * $().css("background"); // Gets the first elements background
 * $().css("background","red")  //Sets the elements background to red
 * ```
 * \@title $().css(attribute,[value])
 * @param {string|?} property_or_properties
 * @param {?=} value
 * @return {?|!appFrameworkCollection}
 */
appFrameworkCollection.prototype.css = function(property_or_properties, value) {};

/**
 * Performs a css vendor specific transform:translate operation on the collection.
 * 
 * ```
 * $("#main").cssTranslate('200px,0,0');
 * ```
 * \@title $().vendorCss(value)
 * @param {string} transform
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.vendorCss = function(transform) {};

/**
 * Gets the computed style of CSS values
 * 
 * ```
 * $("#main").computedStyle('display');
 * ```
 * \@title $().computedStyle()
 * @param {string} css
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.computedStyle = function(css) {};

/**
 * Sets the innerHTML of all elements to an empty string
 * ```
 * $().empty();
 * ```
 * \@title $().empty()
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.empty = function() {};

/**
 * Sets the elements display property to "none".
 * This will also store the old property into an attribute for hide
 * ```
 * $().hide();
 * ```
 * \@title $().hide()
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.hide = function() {};

/**
 * Shows all the elements by setting the css display property
 * We look to see if we were retaining an old style (like table-cell) and restore that, otherwise we set it to block
 * ```
 * $().show();
 * ```
 * \@title $().show()
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.show = function() {};

/**
 * Toggle the visibility of a div
 * ```
 * $().toggle();
 * $().toggle(true); //force showing
 * ```
 * \@title $().toggle([show])
 * @param {boolean=} show
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.toggle = function(show) {};

/**
 * Gets or sets an elements value
 * If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined
 * ```
 * $().value; //Gets the first elements value;
 * $().value="bar"; //Sets all elements value to bar
 * ```
 * \@title $().val([value])
 * @param {string=} value
 * @return {string|!appFrameworkCollection}
 */
appFrameworkCollection.prototype.val = function(value) {};

/**
 * Gets or sets an attribute on an element
 * If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined
 * ```
 * $().attr("foo"); //Gets the first elements 'foo' attribute
 * $().attr("foo","bar");//Sets the elements 'foo' attribute to 'bar'
 * $().attr("foo",{bar:'bar'}) //Adds the object to an internal cache
 * ```
 * \@title $().attr(attribute,[value])
 * @param {string|!Object} attribute_or_attributeHash
 * @param {string|?=} value
 * @return {?|!appFrameworkCollection}
 */
appFrameworkCollection.prototype.attr = function(attribute_or_attributeHash, value) {};

/**
 * Removes an attribute on the elements
 * ```
 * $().removeAttr("foo");
 * ```
 * \@title $().removeAttr(attribute)
 * @param {string} attribute
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.removeAttr = function(attribute) {};

/**
 * Gets or sets a property on an element
 * If used as a getter, we return the first elements value.  If nothing is in the collection, we return undefined
 * ```
 * $().prop("foo"); //Gets the first elements 'foo' property
 * $().prop("foo","bar");//Sets the elements 'foo' property to 'bar'
 * $().prop("foo",{bar:'bar'}) //Adds the object to an internal cache
 * ```
 * \@title $().prop(property,[value])
 * @param {string|!Object} attribute_or_attributeHash
 * @param {string|?=} value
 * @return {?|!appFrameworkCollection}
 */
appFrameworkCollection.prototype.prop = function(attribute_or_attributeHash, value) {};

/**
 * Removes a property on the elements
 * ```
 * $().removeProp("foo");
 * ```
 * \@title $().removeProp(attribute)
 * @param {string} attribute
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.removeProp = function(attribute) {};

/**
 * Removes elements based off a selector
 * ```
 * $().remove();  //Remove all
 * $().remove(".foo");//Remove off a string selector
 * var element=$("#foo").get(0);
 * $().remove(element); //Remove by an element
 * $().remove($(".foo"));  //Remove by a collection
 * ```
 * \@title $().remove(selector)
 * @param {string|!HTMLElement|!Array<?>|!appFrameworkCollection=} selector_or_element_or_elements
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.remove = function(selector_or_element_or_elements) {};

/**
 * Adds a css class to elements.
 * ```
 * $().addClass("selected");
 * ```
 * \@title $().addClass(name)
 * @param {string} className
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.addClass = function(className) {};

/**
 * Removes a css class from elements.
 * ```
 * $().removeClass("foo"); //single class
 * $().removeClass("foo selected");//remove multiple classess
 * ```
 * \@title $().removeClass(name)
 * @param {string} className
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.removeClass = function(className) {};

/**
 * Adds or removes a css class to elements.
 * ```
 * $().toggleClass("selected");
 * ```
 * \@title $().toggleClass(name)
 * @param {string} name
 * @param {boolean=} state
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.toggleClass = function(name, state) {};

/**
 * Replaces a css class on elements.
 * ```
 * $().replaceClass("on", "off");
 * ```
 * \@title $().replaceClass(old, new)
 * @param {string} oldClassName
 * @param {string} newClassName
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.replaceClass = function(oldClassName, newClassName) {};

/**
 * Checks to see if an element has a class.
 * ```
 * $().hasClass('foo');
 * $().hasClass('foo',element);
 * ```
 * \@title $().hasClass(name,[element])
 * @param {string} className
 * @param {!HTMLElement} element
 * @return {boolean}
 */
appFrameworkCollection.prototype.hasClass = function(className, element) {};

/**
 * Appends to the elements
 * We boil everything down to an appframework object and then loop through that.
 * If it's HTML, we create a dom element so we do not break event bindings.
 * if it's a script tag, we evaluate it.
 * ```
 * $().append("<div></div>"); //Creates the object from the string and appends it
 * $().append($("#foo")); //Append an object;
 * ```
 * \@title $().append(element,[insert])
 * @param {?} content
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.append = function(content) {};

/**
 * Appends the current collection to the selector
 * ```
 * $().appendTo("#foo"); //Append an object;
 * ```
 * \@title $().appendTo(element,[insert])
 * @param {?} target
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.appendTo = function(target) {};

/**
 * Prepends the current collection to the selector
 * ```
 * $().prependTo("#foo"); //Prepend an object;
 * ```
 * \@title $().prependTo(element)
 * @param {?} target
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.prependTo = function(target) {};

/**
 * Prepends to the elements
 * This simply calls append and sets insert to true
 * ```
 * $().prepend("<div></div>");//Creates the object from the string and appends it
 * $().prepend($("#foo")); //Prepends an object
 * ```
 * \@title $().prepend(element)
 * @param {?} content
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.prepend = function(content) {};

/**
 * Inserts collection before the target (adjacent)
 * ```
 * $().insertBefore(af("#target"));
 * ```
 * \@title $().insertBefore(target);
 * @param {?} target
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.insertBefore = function(target) {};

/**
 * Inserts collection after the target (adjacent)
 * ```
 * $().insertAfter(af("#target"));
 * ```
 * \@title $().insertAfter(target);
 * @param {?} target
 * @return {void}
 */
appFrameworkCollection.prototype.insertAfter = function(target) {};

/**
 * Returns the raw DOM element.
 * ```
 * $().get(0); //returns the first element
 * $().get(2);// returns the third element
 * ```
 * \@title $().get([index])
 * @param {number=} index
 * @return {!Array<!HTMLElement>|!HTMLElement}
 */
appFrameworkCollection.prototype.get = function(index) {};

/**
 * Returns the offset of the element, including traversing up the tree
 * ```
 * $().offset();
 * ```
 * \@title $().offset()
 * @return {{left: number, top: number, right: number, bottom: number, width: number, height: number}}
 */
appFrameworkCollection.prototype.offset = function() {};

/**
 * returns the height of the element, including padding on IE
 * ```
 * $().height();
 * ```
 * \@title $().height()
 * @return {string}
 */
appFrameworkCollection.prototype.height = function() {};

/**
 * returns the width of the element, including padding on IE
 * ```
 * $().width();
 * ```
 * \@title $().width()
 * @return {string}
 */
appFrameworkCollection.prototype.width = function() {};

/**
 * Returns the parent nodes of the elements based off the selector
 * ```
 * $("#foo").parent('.bar');
 * $("#foo").parent($('.bar'));
 * $("#foo").parent($('.bar').get(0));
 * ```
 * \@title $().parent(selector)
 * @param {?=} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.parent = function(selector) {};

/**
 * Returns the parents of the elements based off the selector (traversing up until html document)
 * ```
 * $("#foo").parents('.bar');
 * $("#foo").parents($('.bar'));
 * $("#foo").parents($('.bar').get(0));
 * ```
 * \@title $().parents(selector)
 * @param {?=} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.parents = function(selector) {};

/**
 * Returns the child nodes of the elements based off the selector
 * ```
 * $("#foo").children('.bar'); //Selector
 * $("#foo").children($('.bar')); //Objects
 * $("#foo").children($('.bar').get(0)); //Single element
 * ```
 * \@title $().children(selector)
 * @param {?=} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.children = function(selector) {};

/**
 * Returns the siblings of the element based off the selector
 * ```
 * $("#foo").siblings('.bar'); //Selector
 * $("#foo").siblings($('.bar')); //Objects
 * $("#foo").siblings($('.bar').get(0)); //Single element
 * ```
 * \@title $().siblings(selector)
 * @param {?=} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.siblings = function(selector) {};

/**
 * Returns the closest element based off the selector and optional context
 * ```
 * $("#foo").closest('.bar'); //Selector
 * $("#foo").closest($('.bar')); //Objects
 * $("#foo").closest($('.bar').get(0)); //Single element
 * ```
 * \@title $().closest(selector,[context]);
 * @param {?=} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.closest = function(selector) {};

/**
 * Filters elements based off the selector
 * ```
 * $("#foo").filter('.bar'); //Selector
 * $("#foo").filter($('.bar')); //Objects
 * $("#foo").filter($('.bar').get(0)); //Single element
 * ```
 * \@title $().filter(selector);
 * @param {?=} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.filter = function(selector) {};

/**
 * Basically the reverse of filter.  Return all elements that do NOT match the selector
 * ```
 * $("#foo").not('.bar'); //Selector
 * $("#foo").not($('.bar')); //Objects
 * $("#foo").not($('.bar').get(0)); //Single element
 * ```
 * \@title $().not(selector);
 * @param {?=} selector
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.not = function(selector) {};

/**
 * Gets or set data-* attribute parameters on elements (when a string)
 * When used as a getter, it's only the first element
 * ```
 * $().data("foo"); //Gets the data-foo attribute for the first element
 * $().data("foo","bar"); //Sets the data-foo attribute for all elements
 * $().data("foo",{bar:'bar'});//object as the data
 * ```
 * \@title $().data(key,[value]);
 * @param {string} attribute
 * @param {string|?=} value
 * @return {?|!appFrameworkCollection}
 */
appFrameworkCollection.prototype.data = function(attribute, value) {};

/**
 * Rolls back the appframework elements when filters were applied
 * This can be used after .not(), .filter(), .children(), .parent()
 * ```
 * $().filter(".panel").end(); //This will return the collection BEFORE filter is applied
 * ```
 * \@title $().end();
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.end = function() {};

/**
 * Clones the nodes in the collection.
 * ```
 * $().clone();// Deep clone of all elements
 * $().clone(false); //Shallow clone
 * ```
 * \@title $().clone();
 * @param {boolean=} deep
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.clone = function(deep) {};

/**
 * Returns the number of elements in the collection
 * ```
 * $().size();
 * ```
 * \@title $().size();
 * @return {number}
 */
appFrameworkCollection.prototype.size = function() {};

/**
 * Serailizes a form into a query string
 * ```
 * $().serialize();
 * ```
 * \@title $().serialize()
 * @return {string}
 */
appFrameworkCollection.prototype.serialize = function() {};

/**
 * Reduce the set of elements based off index
 * ```
 * $().eq(index)
 * ```
 * \@title $().eq(index)
 * @param {number} index
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.eq = function(index) {};

/**
 * Returns the index of the selected element in the collection
 * ```
 * $().index(elem)
 * ```
 * \@title $().index(elem)
 * @param {?=} selector
 * @return {number} integer - index of selected element
 */
appFrameworkCollection.prototype.index = function(selector) {};

/**
 * Returns boolean if the object is a type of the selector
 * ```
 * $().is(selector)
 * ```
 * param {String|Object} selector to act upon
 * \@title $().is(selector)
 * @param {?} selector
 * @return {number} boolean
 */
appFrameworkCollection.prototype.is = function(selector) {};

/**
 * Binds an event to each element in the collection and executes the callback
 * ```
 * $().bind('click',function(){console.log('I clicked '+this.id);});
 * ```
 * \@title $().bind(event,callback)
 * @param {!Object|string} eventHash_or_eventName
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.bind = function(eventHash_or_eventName, fn) {};

/**
 * Unbinds an event to each element in the collection.  If a callback is passed in, we remove just that one, otherwise we remove all callbacks for those events
 * ```
 * $().unbind('click'); //Unbinds all click events
 * $().unbind('click',myFunc); //Unbinds myFunc
 * ```
 * \@title $().unbind(event,[callback]);
 * @param {!Object|string=} eventHash_or_eventName
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.unbind = function(eventHash_or_eventName, fn) {};

/**
 * Binds an event to each element in the collection that will only execute once.  When it executes, we remove the event listener then right away so it no longer happens
 * ```
 * $().one('click',function(){console.log('I was clicked once');});
 * ```
 * \@title $().one(event,callback);
 * @param {!Object|string} eventHash_or_eventName
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection} appframework object
 */
appFrameworkCollection.prototype.one = function(eventHash_or_eventName, fn) {};

/**
 * Delegate an event based off the selector.  The event will be registered at the parent level, but executes on the selector.
 * ```
 * $("#div").delegate("p",'click',callback);
 * ```
 * \@title $().delegate(selector,event,callback)
 * @param {?} selector
 * @param {!Object|string} eventHash_or_eventName
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.delegate = function(selector, eventHash_or_eventName, fn) {};

/**
 * Unbinds events that were registered through delegate.  It acts upon the selector and event.  If a callback is specified, it will remove that one, otherwise it removes all of them.
 * ```
 * $("#div").undelegate("p",'click',callback);//Undelegates callback for the click event
 * $("#div").undelegate("p",'click');//Undelegates all click events
 * ```
 * \@title $().undelegate(selector,event,[callback]);
 * @param {?} selector
 * @param {!Object|string} eventHash_or_eventName
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.undelegate = function(selector, eventHash_or_eventName, fn) {};

/**
 * Similar to delegate, but the function parameter order is easier to understand.
 * If selector is undefined or a function, we just call .bind, otherwise we use .delegate
 * ```
 * $("#div").on("click","p",callback);
 * ```
 * \@title $().on(event,selector,callback);
 * @param {!Object|string} eventHash_or_eventName
 * @param {?|function(!Event): ?|string=} selector_or_fn
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.on = function(eventHash_or_eventName, selector_or_fn, fn) {};

/**
 * Removes event listeners for .on()
 * If selector is undefined or a function, we call unbind, otherwise it's undelegate
 * ```
 * $().off("click","p",callback); //Remove callback function for click events
 * $().off("click","p") //Remove all click events
 * ```
 * \@title $().off(event,selector,[callback])
 * @param {!Object|string} eventHash_or_eventName
 * @param {?|function(!Event): ?|string=} selector_or_fn
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.off = function(eventHash_or_eventName, selector_or_fn, fn) {};

/**
 * This triggers an event to be dispatched.  Usefull for emulating events, etc.
 * ```
 * $().trigger("click",{foo:'bar'});//Trigger the click event and pass in data
 * ```
 * \@title $().trigger(event,data);
 * @param {string|!Object} eventName_or_eventHash
 * @param {?=} data
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.trigger = function(eventName_or_eventHash, data) {};

/**
 * custom events since people want to do $().click instead of $().bind("click")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.click = function(fn) {};

/**
 * custom events since people want to do $().keydown instead of $().bind("keydown")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.keydown = function(fn) {};

/**
 * custom events since people want to do $().keyup instead of $().bind("keyup")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.keyup = function(fn) {};

/**
 * custom events since people want to do $().keypress instead of $().bind("keypress")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.keypress = function(fn) {};

/**
 * custom events since people want to do $().submit instead of $().bind("submit")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.submit = function(fn) {};

/**
 * custom events since people want to do $().load instead of $().bind("load")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.load = function(fn) {};

/**
 * custom events since people want to do $().resize instead of $().bind("resize")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.resize = function(fn) {};

/**
 * custom events since people want to do $().change instead of $().bind("change")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.change = function(fn) {};

/**
 * custom events since people want to do $().select instead of $().bind("select")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.select = function(fn) {};

/**
 * custom events since people want to do $().error instead of $().bind("error")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.error = function(fn) {};

/**
 * custom events since people want to do $().focus instead of $().bind("focus")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.focus = function(fn) {};

/**
 * custom events since people want to do $().blur instead of $().bind("blur")
 * @param {function(!Event): ?=} fn
 * @return {!appFrameworkCollection}
 */
appFrameworkCollection.prototype.blur = function(fn) {};
/**
 * @record
 * @struct
 */
function appFrameworkAjaxSettings() {}
 /** @type {string} */
appFrameworkAjaxSettings.prototype.type;
 /** @type {function(!XMLHttpRequest, !appFrameworkAjaxSettings): boolean} */
appFrameworkAjaxSettings.prototype.beforeSend;
 /** @type {function(?, string, !XMLHttpRequest): void} */
appFrameworkAjaxSettings.prototype.success;
 /** @type {function(!XMLHttpRequest, string, !Error): void} */
appFrameworkAjaxSettings.prototype.error;
 /** @type {function(!XMLHttpRequest, string): void} */
appFrameworkAjaxSettings.prototype.complete;
 /** @type {number} */
appFrameworkAjaxSettings.prototype.timeout;
 /** @type {string} */
appFrameworkAjaxSettings.prototype.url;
 /** @type {string} */
appFrameworkAjaxSettings.prototype.contentType;
 /** @type {?} */
appFrameworkAjaxSettings.prototype.headers;
 /** @type {string} */
appFrameworkAjaxSettings.prototype.dataType;
 /** @type {?} */
appFrameworkAjaxSettings.prototype.data;
 /** @type {?} */
appFrameworkAjaxSettings.prototype.context;
 /** @type {boolean} */
appFrameworkAjaxSettings.prototype.crossDomain;
/**
 * @record
 * @struct
 */
function appFrameworkCssMatrix() {}
 /** @type {number} */
appFrameworkCssMatrix.prototype.a;
 /** @type {number} */
appFrameworkCssMatrix.prototype.b;
 /** @type {number} */
appFrameworkCssMatrix.prototype.c;
 /** @type {number} */
appFrameworkCssMatrix.prototype.d;
 /** @type {number} */
appFrameworkCssMatrix.prototype.e;
 /** @type {number} */
appFrameworkCssMatrix.prototype.f;
 /** @type {function(function(!appFrameworkStatic): void): void} */
var af;
 /** @type {!appFrameworkStatic} */
var $;
