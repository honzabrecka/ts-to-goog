/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/to-markdown/index.d.ts:

/* TODO: ExportAssignment in  */

/**
 * Converts HTML to markdown.
 * @param {string} input
 * @param {!toMarkdown.Options=} options
 * @return {string}
 */
function toMarkdown(input, options) {}

/** @typedef {(string|!Array<string>|function(!HTMLElement): boolean)} */
toMarkdown.Filter;
/**
 * @record
 * @struct
 */
toMarkdown.Options = function() {};
 /** @type {!Array<!toMarkdown.Converter>} */
toMarkdown.Options.prototype.converters;
 /** @type {boolean} */
toMarkdown.Options.prototype.gfm;
/**
 * @record
 * @struct
 */
toMarkdown.Converter = function() {};
 /** @type {(string|!Array<string>|function(!HTMLElement): boolean)} */
toMarkdown.Converter.prototype.filter;

/**
 * @param {string} innerHTML
 * @param {!HTMLElement} node
 * @return {string}
 */
toMarkdown.Converter.prototype.replacement = function(innerHTML, node) {};

/**
 * Returns true / false depending on whether the element is block level.
 * @param {!HTMLElement} node
 * @return {boolean}
 */
toMarkdown.isBlock = function(node) {};

/**
 * Returns true / false depending on whether the element is void.
 * @param {!HTMLElement} node
 * @return {boolean}
 */
toMarkdown.isVoid = function(node) {};

/**
 * Returns the HTML string of an element with its contents converted.
 * @param {!HTMLElement} node
 * @param {string} content
 * @return {boolean}
 */
toMarkdown.outer = function(node, content) {};
