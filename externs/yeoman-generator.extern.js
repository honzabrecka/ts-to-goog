/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/yeoman-generator/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var Callback;
/** @const */
var Base = {};

/**
 * @constructor
 * @struct
 * @param {string} name
 * @param {!Base.MemFsEditor} fs
 * @param {string} configPath
 */
Base.Storage = function(name, fs, configPath) {};

/**
 * @param {!Object} defaults
 * @return {!Object}
 */
Base.Storage.prototype.defaults = function(defaults) {};

/**
 * @param {string} key
 * @return {void}
 */
Base.Storage.prototype.delete = function(key) {};

/**
 * @param {string} key
 * @return {?}
 */
Base.Storage.prototype.get = function(key) {};

/**
 * @return {!Object<string,?>}
 */
Base.Storage.prototype.getAll = function() {};

/**
 * @return {void}
 */
Base.Storage.prototype.save = function() {};

/**
 * @param {string} key
 * @param {?} value
 * @return {?}
 */
Base.Storage.prototype.set = function(key, value) {};
/**
 * @record
 * @struct
 */
Base.InstallOptions = function() {};
 /** @type {boolean} */
Base.InstallOptions.prototype.npm;
 /** @type {boolean} */
Base.InstallOptions.prototype.bower;
 /** @type {boolean} */
Base.InstallOptions.prototype.yarn;
 /** @type {boolean} */
Base.InstallOptions.prototype.skipMessage;
 /** @type {?} */
Base.InstallOptions.prototype.callback;
/**
 * @record
 * @struct
 */
Base.ArgumentConfig = function() {};
 /** @type {string} */
Base.ArgumentConfig.prototype.description;
 /** @type {boolean} */
Base.ArgumentConfig.prototype.required;
 /** @type {boolean} */
Base.ArgumentConfig.prototype.optional;
 /** @type {(!StringConstructor|!NumberConstructor|!ArrayConstructor|!ObjectConstructor)} */
Base.ArgumentConfig.prototype.type;
 /** @type {?} */
Base.ArgumentConfig.prototype.default;
/**
 * @record
 * @struct
 */
Base.OptionConfig = function() {};
 /** @type {string} */
Base.OptionConfig.prototype.alias;
 /** @type {?} */
Base.OptionConfig.prototype.default;
 /** @type {string} */
Base.OptionConfig.prototype.description;
 /** @type {boolean} */
Base.OptionConfig.prototype.hide;
 /** @type {(!StringConstructor|!NumberConstructor|!BooleanConstructor)} */
Base.OptionConfig.prototype.type;
/**
 * @record
 * @struct
 */
Base.MemFsEditor = function() {};

/**
 * @param {string} filepath
 * @param {!Object=} options
 * @return {string}
 */
Base.MemFsEditor.prototype.read = function(filepath, options) {};

/**
 * @param {string} filepath
 * @param {!Object=} defaults
 * @return {?}
 */
Base.MemFsEditor.prototype.readJSON = function(filepath, defaults) {};

/**
 * @param {string} filepath
 * @param {string} contents
 * @return {void}
 */
Base.MemFsEditor.prototype.write = function(filepath, contents) {};

/**
 * @param {string} filepath
 * @param {!Object} contents
 * @param {function(string, ?): ?=} replacer
 * @param {number=} space
 * @return {void}
 */
Base.MemFsEditor.prototype.writeJSON = function(filepath, contents, replacer, space) {};

/**
 * @param {string} filepath
 * @param {!Object} contents
 * @param {function(string, ?): ?=} replacer
 * @param {number=} space
 * @return {void}
 */
Base.MemFsEditor.prototype.extendJSON = function(filepath, contents, replacer, space) {};

/**
 * @param {string} filepath
 * @param {!Object=} options
 * @return {void}
 */
Base.MemFsEditor.prototype.delete = function(filepath, options) {};

/**
 * @param {string} from
 * @param {string} to
 * @param {!Object=} options
 * @return {void}
 */
Base.MemFsEditor.prototype.copy = function(from, to, options) {};

/**
 * @param {string} from
 * @param {string} to
 * @param {!Object} context
 * @param {!Object=} templateOptions
 * @param {!Object=} copyOptions
 * @return {void}
 */
Base.MemFsEditor.prototype.copyTpl = function(from, to, context, templateOptions, copyOptions) {};

/**
 * @param {string} from
 * @param {string} to
 * @param {!Object=} options
 * @return {void}
 */
Base.MemFsEditor.prototype.move = function(from, to, options) {};

/**
 * @param {string} filepath
 * @return {boolean}
 */
Base.MemFsEditor.prototype.exists = function(filepath) {};

/**
 * @param {?|!Array<?>} callback_or_filters
 * @param {?=} callback
 * @return {void}
 */
Base.MemFsEditor.prototype.commit = function(callback_or_filters, callback) {};
 /** @type {!Object} */
Base.prototype.env;
 /** @type {!Object} */
Base.prototype.args;
 /** @type {string} */
Base.prototype.resolved;
 /** @type {string} */
Base.prototype.description;
 /** @type {string} */
Base.prototype.appname;
 /** @type {!Base.Storage} */
Base.prototype.config;
 /** @type {!Base.MemFsEditor} */
Base.prototype.fs;
 /** @type {!Object} */
Base.prototype.options;
 /** @type {{git: {email: function(): string, name: function(): string}, github: {username: function(): string}}} */
Base.prototype.user;

/**
 * @param {?=} protoProps
 * @param {?=} staticProps
 * @return {!Base}
 */
Base.extend = function(protoProps, staticProps) {};

/**
 * @param {string=} message
 * @param {?=} context
 * @return {void}
 */
Base.prototype.log = function(message, context) {};

/**
 * @param {string} name
 * @param {!Base.ArgumentConfig} config
 * @return {Base}
 */
Base.prototype.argument = function(name, config) {};

/**
 * @param {string} namespace
 * @param {!Object<string,?>} options
 * @param {{local: string, link: string}=} settings
 * @return {Base}
 */
Base.prototype.composeWith = function(namespace, options, settings) {};

/**
 * @param {...string} path
 * @return {string}
 */
Base.prototype.destinationPath = function(path) {};

/**
 * @param {string=} rootPath
 * @return {string}
 */
Base.prototype.destinationRoot = function(rootPath) {};

/**
 * @return {string}
 */
Base.prototype.determineAppname = function() {};

/**
 * @param {string} name
 * @param {!Base.OptionConfig} config
 * @return {Base}
 */
Base.prototype.option = function(name, config) {};

/**
 * @param {(!inquirer.Question|!Array<!inquirer.Question>|?<!inquirer.Question>)} questions
 * @return {!Promise<!inquirer.Answers>}
 */
Base.prototype.prompt = function(questions) {};

/**
 * @param {(!Object|!Array<?>)} stream
 * @return {Base}
 */
Base.prototype.registerTransformStream = function(stream) {};

/**
 * @return {string}
 */
Base.prototype.rootGeneratorName = function() {};

/**
 * @return {string}
 */
Base.prototype.rootGeneratorVersion = function() {};

/**
 * @param {?=} cb
 * @return {Base}
 */
Base.prototype.run = function(cb) {};

/**
 * @param {string=} rootPath
 * @return {string}
 */
Base.prototype.sourceRoot = function(rootPath) {};

/**
 * @param {...string} path
 * @return {string}
 */
Base.prototype.templatePath = function(path) {};

/**
 * @return {string}
 */
Base.prototype.argumentsHelp = function() {};

/**
 * @param {string} description
 * @return {Base}
 */
Base.prototype.desc = function(description) {};

/**
 * @return {string}
 */
Base.prototype.help = function() {};

/**
 * @return {string}
 */
Base.prototype.optionsHelp = function() {};

/**
 * @return {string}
 */
Base.prototype.usage = function() {};

/**
 * @param {string} command
 * @param {!Array<string>} args
 * @param {!Object=} opt
 * @return {?}
 */
Base.prototype.spawnCommand = function(command, args, opt) {};

/**
 * @param {string} command
 * @param {!Array<string>} args
 * @param {!Object=} opt
 * @return {?}
 */
Base.prototype.spawnCommandSync = function(command, args, opt) {};

/**
 * @param {(string|!Array<string>)=} component
 * @param {!Object=} options
 * @param {?=} cb
 * @param {!Object=} spawnOptions
 * @return {Base}
 */
Base.prototype.bowerInstall = function(component, options, cb, spawnOptions) {};

/**
 * @param {!Base.InstallOptions=} options
 * @return {Base}
 */
Base.prototype.installDependencies = function(options) {};

/**
 * @param {(string|!Array<string>)=} pkgs
 * @param {!Object=} options
 * @param {?=} cb
 * @param {!Object=} spawnOptions
 * @return {Base}
 */
Base.prototype.npmInstall = function(pkgs, options, cb, spawnOptions) {};

/**
 * @param {string} installer
 * @param {(string|!Array<string>)=} paths
 * @param {!Object=} options
 * @param {?=} cb
 * @param {!Object=} spawnOptions
 * @return {Base}
 */
Base.prototype.runInstall = function(installer, paths, options, cb, spawnOptions) {};

/**
 * @param {(string|!Array<string>)=} pkgs
 * @param {!Object=} options
 * @param {?=} cb
 * @param {!Object=} spawnOptions
 * @return {Base}
 */
Base.prototype.yarnInstall = function(pkgs, options, cb, spawnOptions) {};

/* TODO: ExportAssignment in  */
