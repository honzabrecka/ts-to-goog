/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/cordova-plugin-inappbrowser/index.d.ts:

/** @typedef {string} */
var channel;

/**
 * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.
 * @param {string} url     The URL to load.
 * @param {string=} target  The target in which to load the URL, an optional parameter that defaults to _self.
 * @param {string=} options Options for the InAppBrowser. Optional, defaulting to: location=yes.
 *                 The options string must not contain any blank space, and each feature's
 *                 name/value pairs must be separated by a comma. Feature names are case insensitive.
 * @param {boolean=} replace
 * @return {!InAppBrowser}
 */
Window.prototype.open = function(url, target, options, replace) {};
/**
 * @record
 * @struct
 */
function InAppBrowser() {}

/**
 * @param {!InAppBrowserEvent} type
 * @return {void}
 */
InAppBrowser.prototype.onloadstart = function(type) {};

/**
 * @param {!InAppBrowserEvent} type
 * @return {void}
 */
InAppBrowser.prototype.onloadstop = function(type) {};

/**
 * @param {!InAppBrowserEvent} type
 * @return {void}
 */
InAppBrowser.prototype.onloaderror = function(type) {};

/**
 * @param {!InAppBrowserEvent} type
 * @return {void}
 */
InAppBrowser.prototype.onexit = function(type) {};

/**
 * Adds a listener for an event from the InAppBrowser.
 * @param {string} type      loadstart: event fires when the InAppBrowser starts to load a URL.
 *                  loadstop: event fires when the InAppBrowser finishes loading a URL.
 *                  loaderror: event fires when the InAppBrowser encounters an error when loading a URL.
 *                  exit: event fires when the InAppBrowser window is closed.
 * @param {function(!InAppBrowserEvent): void} callback  the function that executes when the event fires. The function is
 *                  passed an InAppBrowserEvent object as a parameter.
 * @return {void}
 */
InAppBrowser.prototype.addEventListener = function(type, callback) {};

/**
 * Removes a listener for an event from the InAppBrowser.
 * @param {string} type      The event to stop listening for.
 *                  loadstart: event fires when the InAppBrowser starts to load a URL.
 *                  loadstop: event fires when the InAppBrowser finishes loading a URL.
 *                  loaderror: event fires when the InAppBrowser encounters an error when loading a URL.
 *                  exit: event fires when the InAppBrowser window is closed.
 * @param {function(!InAppBrowserEvent): void} callback  the function that executes when the event fires. The function is
 *                  passed an InAppBrowserEvent object as a parameter.
 * @return {void}
 */
InAppBrowser.prototype.removeEventListener = function(type, callback) {};

/**
 * Closes the InAppBrowser window.
 * @return {void}
 */
InAppBrowser.prototype.close = function() {};

/**
 * Hides the InAppBrowser window. Calling this has no effect if the InAppBrowser was already hidden.
 * @return {void}
 */
InAppBrowser.prototype.hide = function() {};

/**
 * Displays an InAppBrowser window that was opened hidden. Calling this has no effect
 * if the InAppBrowser was already visible.
 * @return {void}
 */
InAppBrowser.prototype.show = function() {};

/**
 * Injects JavaScript code into the InAppBrowser window.
 * @param {({code: string}|{file: string})} script    Details of the script to run, specifying either a file or code key.
 * @param {function(?): void} callback  The function that executes after the JavaScript code is injected.
 *                  If the injected script is of type code, the callback executes with
 *                  a single parameter, which is the return value of the script, wrapped in an Array.
 *                  For multi-line scripts, this is the return value of the last statement,
 *                  or the last expression evaluated.
 * @return {void}
 */
InAppBrowser.prototype.executeScript = function(script, callback) {};

/**
 * Injects CSS into the InAppBrowser window.
 * @param {({code: string}|{file: string})} css       Details of the script to run, specifying either a file or code key.
 * @param {function(): void} callback  The function that executes after the CSS is injected.
 * @return {void}
 */
InAppBrowser.prototype.insertCSS = function(css, callback) {};
/**
 * @record
 * @struct
 */
function InAppBrowserEvent() {}
 /** @type {string} */
InAppBrowserEvent.prototype.type;
 /** @type {string} */
InAppBrowserEvent.prototype.url;
 /** @type {number} */
InAppBrowserEvent.prototype.code;
 /** @type {string} */
InAppBrowserEvent.prototype.message;
/**
 * @record
 * @struct
 */
function Cordova() {}
 /** @type {!InAppBrowser} */
Cordova.prototype.InAppBrowser;
