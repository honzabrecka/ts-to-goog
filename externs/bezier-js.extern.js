/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/bezier-js/index.d.ts:
/** @const */
var BezierJs = {};
/**
 * @record
 * @struct
 */
BezierJs.Point = function() {};
 /** @type {number} */
BezierJs.Point.prototype.x;
 /** @type {number} */
BezierJs.Point.prototype.y;
 /** @type {number} */
BezierJs.Point.prototype.z;
/**
 * @extends {BezierJs.Point}
 * @record
 * @struct
 */
BezierJs.Projection = function() {};
 /** @type {number} */
BezierJs.Projection.prototype.t;
 /** @type {number} */
BezierJs.Projection.prototype.d;
/**
 * @record
 * @struct
 */
BezierJs.Inflection = function() {};
 /** @type {!Array<number>} */
BezierJs.Inflection.prototype.x;
 /** @type {!Array<number>} */
BezierJs.Inflection.prototype.y;
 /** @type {!Array<number>} */
BezierJs.Inflection.prototype.z;
 /** @type {!Array<number>} */
BezierJs.Inflection.prototype.values;
/**
 * @extends {BezierJs.Point}
 * @record
 * @struct
 */
BezierJs.Offset = function() {};
 /** @type {!BezierJs.Point} */
BezierJs.Offset.prototype.c;
 /** @type {!BezierJs.Point} */
BezierJs.Offset.prototype.n;
/**
 * @record
 * @struct
 */
BezierJs.Pair = function() {};
 /** @type {!BezierJs.Bezier} */
BezierJs.Pair.prototype.left;
 /** @type {!BezierJs.Bezier} */
BezierJs.Pair.prototype.right;
/**
 * @extends {BezierJs.Pair}
 * @record
 * @struct
 */
BezierJs.Split = function() {};
 /** @type {!Array<!BezierJs.Point>} */
BezierJs.Split.prototype.span;
 /** @type {number} */
BezierJs.Split.prototype._t1;
 /** @type {number} */
BezierJs.Split.prototype._t2;
/**
 * @record
 * @struct
 */
BezierJs.MinMax = function() {};
 /** @type {number} */
BezierJs.MinMax.prototype.min;
 /** @type {number} */
BezierJs.MinMax.prototype.mid;
 /** @type {number} */
BezierJs.MinMax.prototype.max;
 /** @type {number} */
BezierJs.MinMax.prototype.size;
/**
 * @record
 * @struct
 */
BezierJs.BBox = function() {};
 /** @type {!BezierJs.MinMax} */
BezierJs.BBox.prototype.x;
 /** @type {!BezierJs.MinMax} */
BezierJs.BBox.prototype.y;
 /** @type {!BezierJs.MinMax} */
BezierJs.BBox.prototype.z;
/**
 * @record
 * @struct
 */
BezierJs.Line = function() {};
 /** @type {!BezierJs.Point} */
BezierJs.Line.prototype.p1;
 /** @type {!BezierJs.Point} */
BezierJs.Line.prototype.p2;
/**
 * @extends {BezierJs.Point}
 * @record
 * @struct
 */
BezierJs.Arc = function() {};
 /** @type {number} */
BezierJs.Arc.prototype.e;
 /** @type {number} */
BezierJs.Arc.prototype.r;
 /** @type {number} */
BezierJs.Arc.prototype.s;
 /** @type {{start: number, end: number}} */
BezierJs.Arc.prototype.interval;
/**
 * @record
 * @struct
 */
BezierJs.Shape = function() {};
 /** @type {!BezierJs.BezierCap} */
BezierJs.Shape.prototype.startcap;
 /** @type {!BezierJs.Bezier} */
BezierJs.Shape.prototype.forward;
 /** @type {!BezierJs.Bezier} */
BezierJs.Shape.prototype.back;
 /** @type {!BezierJs.BezierCap} */
BezierJs.Shape.prototype.endcap;
 /** @type {!BezierJs.BBox} */
BezierJs.Shape.prototype.bbox;
 /** @type {function(!BezierJs.Shape): (!Array<!Array<string>>|!Array<!Array<number>>)} */
BezierJs.Shape.prototype.intersections;
/**
 * @record
 * @struct
 */
BezierJs.ABC = function() {};
 /** @type {!BezierJs.Point} */
BezierJs.ABC.prototype.A;
 /** @type {!BezierJs.Point} */
BezierJs.ABC.prototype.B;
 /** @type {!BezierJs.Point} */
BezierJs.ABC.prototype.C;
/**
 * @record
 * @struct
 */
BezierJs.Closest = function() {};
 /** @type {number} */
BezierJs.Closest.prototype.mdist;
 /** @type {number} */
BezierJs.Closest.prototype.mpos;

/**
 * @constructor
 * @struct
 * @param {!Array<!BezierJs.Point>|!Array<number>|number|!BezierJs.Point} points_or_coords_or_x1_or_p1
 * @param {number|!BezierJs.Point=} y1_or_p2
 * @param {number|!BezierJs.Point=} x2_or_p3
 * @param {number|!BezierJs.Point=} y2_or_p4
 * @param {number=} x3
 * @param {number=} y3
 * @param {number=} x4
 * @param {number=} y4
 */
BezierJs.Bezier = function(points_or_coords_or_x1_or_p1, y1_or_p2, x2_or_p3, y2_or_p4, x3, y3, x4, y4) {};
 /** @type {?} */
BezierJs.Bezier.prototype._linear;
 /** @type {boolean} */
BezierJs.Bezier.prototype.clockwise;
 /** @type {boolean} */
BezierJs.Bezier.prototype._3d;
 /** @type {number} */
BezierJs.Bezier.prototype._t1;
 /** @type {number} */
BezierJs.Bezier.prototype._t2;
 /** @type {!Array<!BezierJs.Point>} */
BezierJs.Bezier.prototype._lut;
 /** @type {!Array<!Array<!BezierJs.Point>>} */
BezierJs.Bezier.prototype.dpoints;
 /** @type {number} */
BezierJs.Bezier.prototype.order;
 /** @type {!Array<!BezierJs.Point>} */
BezierJs.Bezier.prototype.points;
 /** @type {!Array<string>} */
BezierJs.Bezier.prototype.dims;
 /** @type {number} */
BezierJs.Bezier.prototype.dimlen;

/**
 * @param {string} svgString
 * @return {!BezierJs.Bezier}
 */
BezierJs.Bezier.fromSVG = function(svgString) {};

/**
 * @param {number} n
 * @param {!BezierJs.Point} S
 * @param {!BezierJs.Point} B
 * @param {!BezierJs.Point} E
 * @param {number} t
 * @return {!BezierJs.ABC}
 */
BezierJs.Bezier.getABC = function(n, S, B, E, t) {};

/**
 * @param {!BezierJs.Point} p1
 * @param {!BezierJs.Point} p2
 * @param {!BezierJs.Point} p3
 * @param {number} t
 * @return {!BezierJs.Bezier}
 */
BezierJs.Bezier.quadraticFromPoints = function(p1, p2, p3, t) {};

/**
 * @param {!BezierJs.Point} S
 * @param {!BezierJs.Point} B
 * @param {!BezierJs.Point} E
 * @param {number} t
 * @param {number} d1
 * @return {!BezierJs.Bezier}
 */
BezierJs.Bezier.cubicFromPoints = function(S, B, E, t, d1) {};

/**
 * @return {?}
 */
BezierJs.Bezier.getUtils = function() {};

/**
 * @return {?}
 */
BezierJs.Bezier.prototype.getUtils = function() {};

/**
 * @return {string}
 */
BezierJs.Bezier.prototype.valueOf = function() {};

/**
 * @return {string}
 */
BezierJs.Bezier.prototype.toString = function() {};

/**
 * @return {string}
 */
BezierJs.Bezier.prototype.toSVG = function() {};

/**
 * @return {void}
 */
BezierJs.Bezier.prototype.update = function() {};

/**
 * @return {void}
 */
BezierJs.Bezier.prototype.computedirection = function() {};

/**
 * @return {number}
 */
BezierJs.Bezier.prototype.length = function() {};

/**
 * @param {number=} steps
 * @return {!Array<!BezierJs.Point>}
 */
BezierJs.Bezier.prototype.getLUT = function(steps) {};

/**
 * @param {!BezierJs.Point} point
 * @param {number} error
 * @return {number}
 */
BezierJs.Bezier.prototype.on = function(point, error) {};

/**
 * @param {!BezierJs.Point} point
 * @return {!BezierJs.Projection}
 */
BezierJs.Bezier.prototype.project = function(point) {};

/**
 * @param {number} t
 * @return {!BezierJs.Point}
 */
BezierJs.Bezier.prototype.get = function(t) {};

/**
 * @param {number} idx
 * @return {!BezierJs.Point}
 */
BezierJs.Bezier.prototype.point = function(idx) {};

/**
 * @param {number} t
 * @return {!BezierJs.Point}
 */
BezierJs.Bezier.prototype.compute = function(t) {};

/**
 * @return {!BezierJs.Bezier}
 */
BezierJs.Bezier.prototype.raise = function() {};

/**
 * @param {number} t
 * @return {!BezierJs.Point}
 */
BezierJs.Bezier.prototype.derivative = function(t) {};

/**
 * @return {!Array<number>}
 */
BezierJs.Bezier.prototype.inflections = function() {};

/**
 * @param {number} t
 * @return {!BezierJs.Point}
 */
BezierJs.Bezier.prototype.normal = function(t) {};

/**
 * @param {?} t
 * @return {?}
 */
BezierJs.Bezier.prototype.__normal2 = function(t) {};

/**
 * @param {?} t
 * @return {?}
 */
BezierJs.Bezier.prototype.__normal3 = function(t) {};

/**
 * @param {?} t
 * @return {?}
 */
BezierJs.Bezier.prototype.__normal = function(t) {};

/**
 * @param {number} t
 * @return {!Array<!BezierJs.Point>}
 */
BezierJs.Bezier.prototype.hull = function(t) {};

/**
 * @param {number} t1
 * @param {number=} t2
 * @return {!BezierJs.Split|!BezierJs.Bezier}
 */
BezierJs.Bezier.prototype.split = function(t1, t2) {};

/**
 * @return {!BezierJs.Inflection}
 */
BezierJs.Bezier.prototype.extrema = function() {};

/**
 * @return {!BezierJs.BBox}
 */
BezierJs.Bezier.prototype.bbox = function() {};

/**
 * @param {!BezierJs.Bezier} curve
 * @return {boolean}
 */
BezierJs.Bezier.prototype.overlaps = function(curve) {};

/**
 * @param {number} t
 * @param {number=} d
 * @return {(!BezierJs.Offset|!Array<!BezierJs.Bezier>)}
 */
BezierJs.Bezier.prototype.offset = function(t, d) {};

/**
 * @return {boolean}
 */
BezierJs.Bezier.prototype.simple = function() {};

/**
 * @return {!Array<!BezierJs.Bezier>}
 */
BezierJs.Bezier.prototype.reduce = function() {};

/**
 * @param {!Function|number} d
 * @return {!BezierJs.Bezier}
 */
BezierJs.Bezier.prototype.scale = function(d) {};

/**
 * @param {number} d1
 * @param {number=} d2
 * @param {number=} d3
 * @param {number=} d4
 * @return {!BezierJs.PolyBezier}
 */
BezierJs.Bezier.prototype.outline = function(d1, d2, d3, d4) {};

/**
 * @param {number} d1
 * @param {number} d2
 * @param {number=} curveIntersectionThreshold
 * @return {!Array<!BezierJs.Shape>}
 */
BezierJs.Bezier.prototype.outlineshapes = function(d1, d2, curveIntersectionThreshold) {};

/**
 * @param {!BezierJs.Bezier|!BezierJs.Line} curve
 * @param {number=} curveIntersectionThreshold
 * @return {(!Array<number>|!Array<string>)}
 */
BezierJs.Bezier.prototype.intersects = function(curve, curveIntersectionThreshold) {};

/**
 * @param {!BezierJs.Line} line
 * @return {!Array<number>}
 */
BezierJs.Bezier.prototype.lineIntersects = function(line) {};

/**
 * @param {number=} curveIntersectionThreshold
 * @return {!Array<string>}
 */
BezierJs.Bezier.prototype.selfintersects = function(curveIntersectionThreshold) {};

/**
 * @param {!Array<!BezierJs.Bezier>} c1
 * @param {!Array<!BezierJs.Bezier>} c2
 * @param {number=} curveIntersectionThreshold
 * @return {!Array<string>}
 */
BezierJs.Bezier.prototype.curveintersects = function(c1, c2, curveIntersectionThreshold) {};

/**
 * @param {number=} errorThreshold
 * @return {!Array<!BezierJs.Arc>}
 */
BezierJs.Bezier.prototype.arcs = function(errorThreshold) {};

/**
 * @param {?} pc
 * @param {?} np1
 * @param {?} s
 * @param {?} e
 * @return {?}
 */
BezierJs.Bezier.prototype._error = function(pc, np1, s, e) {};

/**
 * @param {?} errorThreshold
 * @param {?} circles
 * @return {?}
 */
BezierJs.Bezier.prototype._iterate = function(errorThreshold, circles) {};
/**
 * @extends {BezierJs.Bezier}
 * @constructor
 * @struct
 */
BezierJs.BezierCap = function() {};
 /** @type {boolean} */
BezierJs.BezierCap.prototype.virtual;
/** @const */
BezierJs.utils = {};
 /** @type {!Array<number>} */
BezierJs.utils.Tvalues;
 /** @type {!Array<number>} */
BezierJs.utils.Cvalues;

/**
 * @param {number} t
 * @param {!Function} derivativeFn
 * @return {number}
 */
BezierJs.utils.arcfn = function(t, derivativeFn) {};

/**
 * @param {number} v
 * @param {number} m
 * @param {number} M
 * @return {boolean}
 */
BezierJs.utils.between = function(v, m, M) {};

/**
 * @param {number} a
 * @param {number} b
 * @param {number=} precision
 * @return {boolean}
 */
BezierJs.utils.approximately = function(a, b, precision) {};

/**
 * @param {!Function} derivativeFn
 * @return {number}
 */
BezierJs.utils.length = function(derivativeFn) {};

/**
 * @param {number} v
 * @param {number} ds
 * @param {number} de
 * @param {number} ts
 * @param {number} te
 * @return {number}
 */
BezierJs.utils.map = function(v, ds, de, ts, te) {};

/**
 * @param {number} r
 * @param {!BezierJs.Point} v1
 * @param {!BezierJs.Point} v2
 * @return {!BezierJs.Point}
 */
BezierJs.utils.lerp = function(r, v1, v2) {};

/**
 * @param {!BezierJs.Point} p
 * @return {string}
 */
BezierJs.utils.pointToString = function(p) {};

/**
 * @param {!Array<!BezierJs.Point>} points
 * @return {string}
 */
BezierJs.utils.pointsToString = function(points) {};

/**
 * @param {!Object} obj
 * @return {?}
 */
BezierJs.utils.copy = function(obj) {};

/**
 * @param {!BezierJs.Point} o
 * @param {!BezierJs.Point} v1
 * @param {!BezierJs.Point} v2
 * @return {number}
 */
BezierJs.utils.angle = function(o, v1, v2) {};

/**
 * @param {number} v
 * @param {number} d
 * @return {number}
 */
BezierJs.utils.round = function(v, d) {};

/**
 * @param {!BezierJs.Point} p1
 * @param {!BezierJs.Point} p2
 * @return {number}
 */
BezierJs.utils.dist = function(p1, p2) {};

/**
 * @param {!Array<!BezierJs.Point>} LUT
 * @param {!BezierJs.Point} point
 * @return {!BezierJs.Closest}
 */
BezierJs.utils.closest = function(LUT, point) {};

/**
 * @param {number} t
 * @param {number} n
 * @return {number}
 */
BezierJs.utils.abcratio = function(t, n) {};

/**
 * @param {number} t
 * @param {number} n
 * @return {number}
 */
BezierJs.utils.projectionratio = function(t, n) {};

/**
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @param {number} x3
 * @param {number} y3
 * @param {number} x4
 * @param {number} y4
 * @return {!BezierJs.Point}
 */
BezierJs.utils.lli8 = function(x1, y1, x2, y2, x3, y3, x4, y4) {};

/**
 * @param {!BezierJs.Point} p1
 * @param {!BezierJs.Point} p2
 * @param {!BezierJs.Point} p3
 * @param {!BezierJs.Point} p4
 * @return {!BezierJs.Point}
 */
BezierJs.utils.lli4 = function(p1, p2, p3, p4) {};

/**
 * @param {!BezierJs.Offset} v1
 * @param {!BezierJs.Offset} v2
 * @return {!BezierJs.Point}
 */
BezierJs.utils.lli = function(v1, v2) {};

/**
 * @param {!BezierJs.Point} p1
 * @param {!BezierJs.Point} p2
 * @return {!BezierJs.Bezier}
 */
BezierJs.utils.makeline = function(p1, p2) {};

/**
 * @param {!Array<!BezierJs.Bezier>} sections
 * @return {!BezierJs.BBox}
 */
BezierJs.utils.findbbox = function(sections) {};

/**
 * @param {!BezierJs.Shape} s1
 * @param {!BezierJs.BBox} bbox1
 * @param {!BezierJs.Shape} s2
 * @param {!BezierJs.BBox} bbox2
 * @param {number=} curveIntersectionThreshold
 * @return {(!Array<!Array<string>>|!Array<!Array<number>>)}
 */
BezierJs.utils.shapeintersections = function(s1, bbox1, s2, bbox2, curveIntersectionThreshold) {};

/**
 * @param {!BezierJs.Bezier} forward
 * @param {!BezierJs.Bezier} back
 * @param {number=} curveIntersectionThreshold
 * @return {!BezierJs.Shape}
 */
BezierJs.utils.makeshape = function(forward, back, curveIntersectionThreshold) {};

/**
 * @param {!BezierJs.Bezier} curve
 * @param {string} d
 * @param {!Array<number>} list
 * @return {!BezierJs.MinMax}
 */
BezierJs.utils.getminmax = function(curve, d, list) {};

/**
 * @param {!Array<!BezierJs.Point>} points
 * @param {!BezierJs.Line} line
 * @return {!Array<!BezierJs.Point>}
 */
BezierJs.utils.align = function(points, line) {};

/**
 * @param {!Array<!BezierJs.Point>} points
 * @param {!BezierJs.Line} line
 * @return {!Array<number>}
 */
BezierJs.utils.roots = function(points, line) {};

/**
 * @param {!Array<number>} p
 * @return {!Array<number>}
 */
BezierJs.utils.droots = function(p) {};

/**
 * @param {!Array<!BezierJs.Point>} points
 * @return {!Array<number>}
 */
BezierJs.utils.inflections = function(points) {};

/**
 * @param {!BezierJs.BBox} b1
 * @param {!BezierJs.BBox} b2
 * @return {boolean}
 */
BezierJs.utils.bboxoverlap = function(b1, b2) {};

/**
 * @param {!BezierJs.BBox} bbox
 * @param {!BezierJs.BBox} _bbox
 * @return {void}
 */
BezierJs.utils.expandbox = function(bbox, _bbox) {};

/**
 * @param {!BezierJs.Bezier} c1
 * @param {!BezierJs.Bezier} c2
 * @param {number=} curveIntersectionThreshold
 * @return {!Array<string>}
 */
BezierJs.utils.pairiteration = function(c1, c2, curveIntersectionThreshold) {};

/**
 * @param {!BezierJs.Point} p1
 * @param {!BezierJs.Point} p2
 * @param {!BezierJs.Point} p3
 * @return {!BezierJs.Arc}
 */
BezierJs.utils.getccenter = function(p1, p2, p3) {};

/**
 * @constructor
 * @struct
 * @param {!Array<!BezierJs.Bezier>} curves
 */
BezierJs.PolyBezier = function(curves) {};
 /** @type {!Array<!BezierJs.Bezier>} */
BezierJs.PolyBezier.prototype.curves;
 /** @type {?} */
BezierJs.PolyBezier.prototype._3d;
 /** @type {!Array<!BezierJs.Point>} */
BezierJs.PolyBezier.prototype.points;

/**
 * @return {string}
 */
BezierJs.PolyBezier.prototype.valueOf = function() {};

/**
 * @return {string}
 */
BezierJs.PolyBezier.prototype.toString = function() {};

/**
 * @param {!BezierJs.Bezier} curve
 * @return {void}
 */
BezierJs.PolyBezier.prototype.addCurve = function(curve) {};

/**
 * @return {number}
 */
BezierJs.PolyBezier.prototype.length = function() {};

/**
 * @param {number} idx
 * @return {!BezierJs.Bezier}
 */
BezierJs.PolyBezier.prototype.curve = function(idx) {};

/**
 * @return {!BezierJs.BBox}
 */
BezierJs.PolyBezier.prototype.bbox = function() {};

/**
 * @param {number} d
 * @return {!BezierJs.PolyBezier}
 */
BezierJs.PolyBezier.prototype.offset = function(d) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "bezier-js"
/** @const */
tsickle_declare_module.bezier_js = {};

/* TODO: ExportAssignment in tsickle_declare_module.bezier_js */
