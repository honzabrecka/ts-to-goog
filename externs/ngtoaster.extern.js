/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ngtoaster/index.d.ts:

/* TODO: ExportAssignment in  */

/* TODO: NamespaceExportDeclaration in  */
/** @const */
var ngtoaster = {};
/**
 * @record
 * @struct
 */
ngtoaster.IToasterService = function() {};
 /** @type {!ngtoaster.IToast} */
ngtoaster.IToasterService.prototype.toast;

/**
 * @param {!ngtoaster.IPopParams|string=} params_or_type
 * @param {string=} title
 * @param {string=} body
 * @param {number=} timeout
 * @param {string=} bodyOutputType
 * @param {!EventListener=} clickHandler
 * @param {number=} toasterId
 * @param {boolean=} showCloseButton
 * @return {void}
 */
ngtoaster.IToasterService.prototype.pop = function(params_or_type, title, body, timeout, bodyOutputType, clickHandler, toasterId, showCloseButton) {};

/**
 * @param {!ngtoaster.IPopParams|string=} params_or_title
 * @param {string=} body
 * @param {number=} timeout
 * @param {string=} bodyOutputType
 * @param {!EventListener=} clickHandler
 * @param {number=} toasterId
 * @return {void}
 */
ngtoaster.IToasterService.prototype.error = function(params_or_title, body, timeout, bodyOutputType, clickHandler, toasterId) {};

/**
 * @param {!ngtoaster.IPopParams|string=} params_or_title
 * @param {string=} body
 * @param {number=} timeout
 * @param {string=} bodyOutputType
 * @param {!EventListener=} clickHandler
 * @param {number=} toasterId
 * @return {void}
 */
ngtoaster.IToasterService.prototype.info = function(params_or_title, body, timeout, bodyOutputType, clickHandler, toasterId) {};

/**
 * @param {!ngtoaster.IPopParams|string=} params_or_title
 * @param {string=} body
 * @param {number=} timeout
 * @param {string=} bodyOutputType
 * @param {!EventListener=} clickHandler
 * @param {number=} toasterId
 * @return {void}
 */
ngtoaster.IToasterService.prototype.wait = function(params_or_title, body, timeout, bodyOutputType, clickHandler, toasterId) {};

/**
 * @param {!ngtoaster.IPopParams|string=} params_or_title
 * @param {string=} body
 * @param {number=} timeout
 * @param {string=} bodyOutputType
 * @param {!EventListener=} clickHandler
 * @param {number=} toasterId
 * @return {void}
 */
ngtoaster.IToasterService.prototype.success = function(params_or_title, body, timeout, bodyOutputType, clickHandler, toasterId) {};

/**
 * @param {!ngtoaster.IPopParams|string=} params_or_title
 * @param {string=} body
 * @param {number=} timeout
 * @param {string=} bodyOutputType
 * @param {!EventListener=} clickHandler
 * @param {number=} toasterId
 * @return {void}
 */
ngtoaster.IToasterService.prototype.warning = function(params_or_title, body, timeout, bodyOutputType, clickHandler, toasterId) {};

/**
 * @return {void}
 */
ngtoaster.IToasterService.prototype.clear = function() {};
/**
 * @record
 * @struct
 */
ngtoaster.IToasterEventRegistry = function() {};

/**
 * @return {void}
 */
ngtoaster.IToasterEventRegistry.prototype.setup = function() {};

/**
 * @param {!ngtoaster.IToastEventListener} onNewToast
 * @return {void}
 */
ngtoaster.IToasterEventRegistry.prototype.subscribeToNewToastEvent = function(onNewToast) {};

/**
 * @param {!ngtoaster.IToastEventListener} onClearToasts
 * @return {void}
 */
ngtoaster.IToasterEventRegistry.prototype.subscribeToClearToastsEvent = function(onClearToasts) {};

/**
 * @param {!ngtoaster.IToastEventListener} onNewToast
 * @return {void}
 */
ngtoaster.IToasterEventRegistry.prototype.unsubscribeToNewToastEvent = function(onNewToast) {};

/**
 * @param {!ngtoaster.IToastEventListener} onClearToasts
 * @return {void}
 */
ngtoaster.IToasterEventRegistry.prototype.unsubscribeToClearToastsEvent = function(onClearToasts) {};
/**
 * @extends {ngtoaster.IToast}
 * @record
 * @struct
 */
ngtoaster.IPopParams = function() {};
 /** @type {number} */
ngtoaster.IPopParams.prototype.toasterId;
/**
 * @record
 * @struct
 */
ngtoaster.IToastEventListener = function() {};

/* TODO: CallSignature: ngtoaster */
/**
 * @record
 * @struct
 */
ngtoaster.IToast = function() {};
 /** @type {string} */
ngtoaster.IToast.prototype.type;
 /** @type {string} */
ngtoaster.IToast.prototype.title;
 /** @type {string} */
ngtoaster.IToast.prototype.body;
 /** @type {number} */
ngtoaster.IToast.prototype.timeout;
 /** @type {string} */
ngtoaster.IToast.prototype.bodyOutputType;
 /** @type {!EventListener} */
ngtoaster.IToast.prototype.clickHandler;
 /** @type {boolean} */
ngtoaster.IToast.prototype.showCloseButton;
/**
 * @record
 * @struct
 */
ngtoaster.IToasterConfig = function() {};
 /** @type {number} */
ngtoaster.IToasterConfig.prototype.limit;

/* TODO: PropertySignature: ngtoaster.'tap-to-dismiss' */

/* TODO: PropertySignature: ngtoaster.'close-button' */

/* TODO: PropertySignature: ngtoaster.'newest-on-top' */

/* TODO: PropertySignature: ngtoaster.'time-out' */

/* TODO: PropertySignature: ngtoaster.'icon-classes' */

/* TODO: PropertySignature: ngtoaster.'body-output-type' */

/* TODO: PropertySignature: ngtoaster.'body-template' */

/* TODO: PropertySignature: ngtoaster.'icon-class' */

/* TODO: PropertySignature: ngtoaster.'position-class' */

/* TODO: PropertySignature: ngtoaster.'title-class' */

/* TODO: PropertySignature: ngtoaster.'message-class' */

/* TODO: PropertySignature: ngtoaster.'prevent-duplicates' */

/* TODO: PropertySignature: ngtoaster.'mouseover-timer-stop' */
/**
 * @record
 * @struct
 */
ngtoaster.IIconClasses = function() {};
 /** @type {string} */
ngtoaster.IIconClasses.prototype.error;
 /** @type {string} */
ngtoaster.IIconClasses.prototype.info;
 /** @type {string} */
ngtoaster.IIconClasses.prototype.wait;
 /** @type {string} */
ngtoaster.IIconClasses.prototype.success;
 /** @type {string} */
ngtoaster.IIconClasses.prototype.warning;
