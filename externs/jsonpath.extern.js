/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jsonpath/index.d.ts:

/** @typedef {(string|number)} */
var PathComponent;

/**
 * Find elements in `obj` matching `pathExpression`. Returns an array of elements that
 * satisfy the provided JSONPath expression,or an empty array if none were matched.
 * Returns only first `count` elements if specified.
 * @param {?} obj
 * @param {string} pathExpression
 * @param {number=} count
 * @return {!Array<?>}
 */
function query(obj, pathExpression, count) {}

/**
 * Find paths to elements in `obj` matching `pathExpression`. Returns an array of
 * element paths that satisfy the provided JSONPath expression. Each path is itself an
 * array of keys representing the location within `obj` of the matching element. Returns
 * only first `count` paths if specified.
 * @param {?} obj
 * @param {string} pathExpression
 * @param {number=} count
 * @return {!Array<!Array<(string|number)>>}
 */
function paths(obj, pathExpression, count) {}

/**
 * Find elements and their corresponding paths in `obj` matching `pathExpression`.
 * Returns an array of node objects where each node has a `path` containing an array of
 * keys representing the location within `obj`, and a `value` pointing to the matched
 * element. Returns only first `count` nodes if specified.
 * @param {?} obj
 * @param {string} pathExpression
 * @param {number=} count
 * @return {!Array<{path: !Array<(string|number)>, value: ?}>}
 */
function nodes(obj, pathExpression, count) {}

/**
 * Returns the value of the first element matching `pathExpression`. If `newValue` is
 * provided, sets the value of the first matching element and returns the new value.
 * @template T
 * @param {?} obj
 * @param {string} pathExpression
 * @param {T=} newValue
 * @return {?|T}
 */
function value(obj, pathExpression, newValue) {}

/**
 * Returns the parent of the first matching element.
 * @param {?} obj
 * @param {string} pathExpression
 * @return {?}
 */
function parent(obj, pathExpression) {}

/**
 * Runs the supplied function `fn` on each matching element, and replaces each
 * matching element with the return value from the function. The function accepts the
 * value of the matching element as its only parameter. Returns matching nodes with
 * their updated values.
 * @param {?} obj
 * @param {string} pathExpression
 * @param {function(?): ?} fn
 * @return {!Array<{path: !Array<(string|number)>, value: ?}>}
 */
function apply(obj, pathExpression, fn) {}

/**
 * Parse the provided JSONPath expression into path components and their associated
 * operations.
 * @param {string} pathExpression
 * @return {!Array<?>}
 */
function parse(pathExpression) {}

/**
 * Returns a path expression in string form, given a path. The supplied path may either
 * be a flat array of keys, as returned by `jp.nodes` for example, or may alternatively be a
 * fully parsed path expression in the form of an array of path components as returned
 * by `jp.parse`.
 * @param {!Array<(string|number)>} path
 * @return {string}
 */
function stringify(path) {}

/* TODO: NamespaceExportDeclaration in  */
