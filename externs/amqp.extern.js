/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/amqp/index.d.ts:

/* TODO: ImportDeclaration in  */

/* TODO: ImportDeclaration in  */

/** @typedef {?} */
var Callback;
/**
 * @record
 * @struct
 */
function AMQPClient() {}

/**
 * @param {string} routingKey
 * @param {?} body
 * @param {!Object} options
 * @param {?} callback
 * @return {void}
 */
AMQPClient.prototype.publish = function(routingKey, body, options, callback) {};

/**
 * @return {void}
 */
AMQPClient.prototype.disconnect = function() {};

/**
 * @param {string} queueName
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {?}
 */
AMQPClient.prototype.queue = function(queueName, callback_or_options, callback) {};

/**
 * @param {?|string=} callback_or_exchangeName
 * @param {?=} callback_or_options
 * @param {?=} callback
 * @return {?}
 */
AMQPClient.prototype.exchange = function(callback_or_exchangeName, callback_or_options, callback) {};
/**
 * @record
 * @struct
 */
function AMQPQueue() {}

/**
 * @param {?} callback_or_options
 * @param {?=} callback
 * @return {void}
 */
AMQPQueue.prototype.subscribe = function(callback_or_options, callback) {};

/**
 * @param {string} consumerTag
 * @return {void}
 */
AMQPQueue.prototype.unsubscribe = function(consumerTag) {};

/**
 * @param {string} exchangeName_or_routingKey
 * @param {string|?=} routingKey_or_callback
 * @param {?=} callback
 * @return {void}
 */
AMQPQueue.prototype.bind = function(exchangeName_or_routingKey, routingKey_or_callback, callback) {};

/**
 * @param {string} exchangeName_or_routingKey
 * @param {string=} routingKey
 * @return {void}
 */
AMQPQueue.prototype.unbind = function(exchangeName_or_routingKey, routingKey) {};

/**
 * @param {string} exchangeName_or_routingKey
 * @param {string=} routingKey
 * @return {void}
 */
AMQPQueue.prototype.bind_headers = function(exchangeName_or_routingKey, routingKey) {};

/**
 * @param {string} exchangeName_or_routingKey
 * @param {string=} routingKey
 * @return {void}
 */
AMQPQueue.prototype.unbind_headers = function(exchangeName_or_routingKey, routingKey) {};

/**
 * @param {boolean} reject
 * @param {boolean=} requeue
 * @return {void}
 */
AMQPQueue.prototype.shift = function(reject, requeue) {};

/**
 * @param {?=} options
 * @return {void}
 */
AMQPQueue.prototype.destroy = function(options) {};
/**
 * @record
 * @struct
 */
function AMQPExchange() {}

/**
 * @param {string} event
 * @param {?} callback
 * @return {?}
 */
AMQPExchange.prototype.on = function(event, callback) {};

/**
 * @param {string} routingKey
 * @param {(!Object|?)} message
 * @param {?} options
 * @param {?=} callback
 * @return {void}
 */
AMQPExchange.prototype.publish = function(routingKey, message, options, callback) {};

/**
 * ifUnused default: true
 * 
 * Deletes an exchange.
 * 
 * If the optional boolean second argument is set, the server will only delete the exchange if it has no queue bindings.
 * 
 * If the exchange has queue bindings the server does not delete it but raises a channel exception instead
 * @param {boolean} ifUnused
 * @return {void}
 */
AMQPExchange.prototype.destroy = function(ifUnused) {};

/**
 * @param {string} sourceExchange
 * @param {string} routingKey
 * @param {?=} callback
 * @return {void}
 */
AMQPExchange.prototype.bind = function(sourceExchange, routingKey, callback) {};

/**
 * @param {string} sourceExchange
 * @param {string} routingKey
 * @param {?=} callback
 * @return {void}
 */
AMQPExchange.prototype.unbind = function(sourceExchange, routingKey, callback) {};

/**
 * @param {string} exchange
 * @param {string} routing
 * @param {?=} callback
 * @return {void}
 */
AMQPExchange.prototype.bind_headers = function(exchange, routing, callback) {};

/**
 * @param {?} options
 * @return {?}
 */
function createConnection(options) {}
/**
 * @record
 * @struct
 */
function DeliveryInfo() {}
 /** @type {string} */
DeliveryInfo.prototype.contentType;
 /** @type {string} */
DeliveryInfo.prototype.consumerTag;
 /** @type {!Uint8Array} */
DeliveryInfo.prototype.deliveryTag;
 /** @type {string} */
DeliveryInfo.prototype.exchange;
 /** @type {string} */
DeliveryInfo.prototype.queue;
 /** @type {boolean} */
DeliveryInfo.prototype.redelivered;
 /** @type {string} */
DeliveryInfo.prototype.routingKey;
/**
 * @extends {DeliveryInfo}
 * @record
 * @struct
 */
function Ack() {}

/**
 * @param {boolean} all
 * @return {void}
 */
Ack.prototype.acknowledge = function(all) {};

/**
 * @param {boolean} requeue
 * @return {void}
 */
Ack.prototype.reject = function(requeue) {};
/**
 * @record
 * @struct
 */
function ConnectionOptions() {}
 /** @type {string} */
ConnectionOptions.prototype.host;
 /** @type {string} */
ConnectionOptions.prototype.url;
 /** @type {number} */
ConnectionOptions.prototype.port;
 /** @type {string} */
ConnectionOptions.prototype.login;
 /** @type {string} */
ConnectionOptions.prototype.passowrd;
 /** @type {number} */
ConnectionOptions.prototype.connectionTimeout;
 /** @type {string} */
ConnectionOptions.prototype.authMechanism;
 /** @type {string} */
ConnectionOptions.prototype.vhost;
 /** @type {boolean} */
ConnectionOptions.prototype.noDelay;
 /** @type {?} */
ConnectionOptions.prototype.ssl;
 /** @type {string} */
ConnectionOptions.prototype.product;
 /** @type {string} */
ConnectionOptions.prototype.platform;
 /** @type {string} */
ConnectionOptions.prototype.version;
 /** @type {string} */
ConnectionOptions.prototype.defaultExchangeName;
 /** @type {boolean} */
ConnectionOptions.prototype.reconnect;
 /** @type {string} */
ConnectionOptions.prototype.reconnectBackoffStrategy;
 /** @type {number} */
ConnectionOptions.prototype.reconnectExponentialLimit;
 /** @type {number} */
ConnectionOptions.prototype.reconnectBackoffTime;
/**
 * @record
 * @struct
 */
function QueueOptions() {}
 /** @type {boolean} */
QueueOptions.prototype.passive;
 /** @type {boolean} */
QueueOptions.prototype.durable;
 /** @type {boolean} */
QueueOptions.prototype.exclusive;
 /** @type {boolean} */
QueueOptions.prototype.autoDelete;
 /** @type {boolean} */
QueueOptions.prototype.noDeclare;
 /** @type {?} */
QueueOptions.prototype.arguments;
 /** @type {boolean} */
QueueOptions.prototype.closeChannelOnUnsubscribe;
/**
 * @record
 * @struct
 */
function ExchangeOptions() {}
 /** @type {string} */
ExchangeOptions.prototype.type;
 /** @type {boolean} */
ExchangeOptions.prototype.passive;
 /** @type {boolean} */
ExchangeOptions.prototype.durable;
 /** @type {boolean} */
ExchangeOptions.prototype.autoDelete;
 /** @type {boolean} */
ExchangeOptions.prototype.noDeclare;
 /** @type {boolean} */
ExchangeOptions.prototype.confirm;
 /** @type {?} */
ExchangeOptions.prototype.arguments;
/**
 * @record
 * @struct
 */
function SubscribeOptions() {}
 /** @type {boolean} */
SubscribeOptions.prototype.exclusive;
 /** @type {boolean} */
SubscribeOptions.prototype.ack;
 /** @type {number} */
SubscribeOptions.prototype.prefetchCount;
 /** @type {boolean} */
SubscribeOptions.prototype.routingKeyInPayload;
 /** @type {boolean} */
SubscribeOptions.prototype.deliveryKeyInPayload;
/**
 * @record
 * @struct
 */
function DestroyOptions() {}
 /** @type {boolean} */
DestroyOptions.prototype.ifUnused;
 /** @type {boolean} */
DestroyOptions.prototype.ifEmpty;

/** @typedef {?} */
var SubscribeCallback;
/**
 * @record
 * @struct
 */
function QueueCallback() {}
 /** @type {string} */
QueueCallback.prototype.name;
 /** @type {?} */
QueueCallback.prototype.consumerTagListeners;
 /** @type {?} */
QueueCallback.prototype.consumerTagOptions;
 /** @type {?} */
QueueCallback.prototype.options;
 /** @type {string} */
QueueCallback.prototype.state;
 /** @type {number} */
QueueCallback.prototype.channel;
/**
 * @record
 * @struct
 */
function ExchangePublishOptions() {}
 /** @type {boolean} */
ExchangePublishOptions.prototype.mandatory;
 /** @type {boolean} */
ExchangePublishOptions.prototype.immediate;
 /** @type {string} */
ExchangePublishOptions.prototype.contentType;
 /** @type {string} */
ExchangePublishOptions.prototype.contentEncoding;
 /** @type {?} */
ExchangePublishOptions.prototype.headers;
 /** @type {number} */
ExchangePublishOptions.prototype.deliveryMode;
 /** @type {number} */
ExchangePublishOptions.prototype.priority;
 /** @type {string} */
ExchangePublishOptions.prototype.correlationId;
 /** @type {string} */
ExchangePublishOptions.prototype.replyTo;
 /** @type {string} */
ExchangePublishOptions.prototype.expiration;
 /** @type {string} */
ExchangePublishOptions.prototype.messageId;
 /** @type {string} */
ExchangePublishOptions.prototype.timestamp;
 /** @type {string} */
ExchangePublishOptions.prototype.type;
 /** @type {string} */
ExchangePublishOptions.prototype.userId;
 /** @type {string} */
ExchangePublishOptions.prototype.appId;
