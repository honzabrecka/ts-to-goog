/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/polymer/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var polymer = {};

/** @typedef {(!StringConstructor|!ObjectConstructor|!BooleanConstructor|!NumberConstructor|!DateConstructor|!ArrayConstructor)} */
polymer.PropConstructorType;
/**
 * @record
 * @struct
 */
polymer.PropObjectType = function() {};
 /** @type {(!StringConstructor|!ObjectConstructor|!BooleanConstructor|!NumberConstructor|!DateConstructor|!ArrayConstructor)} */
polymer.PropObjectType.prototype.type;
 /** @type {(string|number|boolean|!Object|!Function)} */
polymer.PropObjectType.prototype.value;
 /** @type {boolean} */
polymer.PropObjectType.prototype.reflectToAttribute;
 /** @type {boolean} */
polymer.PropObjectType.prototype.readOnly;
 /** @type {boolean} */
polymer.PropObjectType.prototype.notify;
 /** @type {string} */
polymer.PropObjectType.prototype.computed;
 /** @type {string} */
polymer.PropObjectType.prototype.observer;
/**
 * @record
 * @struct
 */
polymer.Base = function() {};

/* TODO: IndexSignature: polymer */
 /** @type {!Object<string,?>} */
polymer.Base.prototype.hostAttributes;
 /** @type {!Array<!Object>} */
polymer.Base.prototype.behaviors;
 /** @type {string} */
polymer.Base.prototype.extends;
 /** @type {!Object<string,(!StringConstructor|!ObjectConstructor|!BooleanConstructor|!NumberConstructor|!DateConstructor|!ArrayConstructor|!polymer.PropObjectType)>} */
polymer.Base.prototype.properties;
 /** @type {string} */
polymer.Base.prototype.is;
 /** @type {?} */
polymer.Base.prototype.$;
 /** @type {!Object<string,string>} */
polymer.Base.prototype.listeners;
 /** @type {!Array<string>} */
polymer.Base.prototype.observers;

/**
 * @param {string} name
 * @return {void}
 */
polymer.Base.prototype.reflectPropertiesToAttribute = function(name) {};

/**
 * @param {?} value
 * @param {string} attribute
 * @param {!Element=} node
 * @return {void}
 */
polymer.Base.prototype.serializeValueToAttribute = function(value, attribute, node) {};

/**
 * @param {string} value
 * @param {!NumberConstructor|!BooleanConstructor|!ObjectConstructor|!ArrayConstructor|!DateConstructor|!StringConstructor} type
 * @return {number|boolean|!Object|!Array<?>|!Date|string}
 */
polymer.Base.prototype.deserialize = function(value, type) {};

/**
 * @param {?} value
 * @return {string}
 */
polymer.Base.prototype.serialize = function(value) {};

/**
 * @param {...?} args
 * @return {void}
 */
polymer.Base.prototype.factoryImpl = function(args) {};

/**
 * @param {string} jobName
 * @param {!Function} callback
 * @param {number} wait
 * @return {void}
 */
polymer.Base.prototype.debounce = function(jobName, callback, wait) {};

/**
 * @param {string} jobName
 * @return {boolean}
 */
polymer.Base.prototype.isDebouncerActive = function(jobName) {};

/**
 * @param {string} jobName
 * @return {void}
 */
polymer.Base.prototype.flushDebouncer = function(jobName) {};

/**
 * @param {string} jobName
 * @return {void}
 */
polymer.Base.prototype.cancelDebouncer = function(jobName) {};

/**
 * @param {string} tag
 * @return {!Object}
 */
polymer.Base.prototype.getNativePrototype = function(tag) {};

/**
 * @param {string} property
 * @return {!Object}
 */
polymer.Base.prototype.getPropertyInfo = function(property) {};

/**
 * @return {void}
 */
polymer.Base.prototype.ready = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.attachedCallback = function() {};

/**
 * @return {!Element}
 */
polymer.Base.prototype.domHost = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.distributeContent = function() {};

/**
 * @param {string} selector
 * @param {!Element=} node
 * @return {boolean}
 */
polymer.Base.prototype.elementMatches = function(selector, node) {};

/**
 * @param {!HTMLElement} template
 * @return {!DocumentFragment}
 */
polymer.Base.prototype.instanceTemplate = function(template) {};

/**
 * @param {!Element} node
 * @param {string} eventName
 * @param {string} methodName
 * @return {void}
 */
polymer.Base.prototype.listen = function(node, eventName, methodName) {};

/**
 * @param {!Element} node
 * @param {string} eventName
 * @param {string} methodName
 * @return {void}
 */
polymer.Base.prototype.unlisten = function(node, eventName, methodName) {};

/**
 * @param {string} direction
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.Base.prototype.setScrollDirection = function(direction, node) {};

/**
 * @param {string} path
 * @param {?} value
 * @param {?} fromAbove
 * @return {void}
 */
polymer.Base.prototype.notifyPath = function(path, value, fromAbove) {};

/**
 * @template Value
 * @param {(string|!Array<(string|number)>)} path
 * @param {Value} value
 * @param {!Object=} root
 * @return {void}
 */
polymer.Base.prototype.set = function(path, value, root) {};

/**
 * @param {(string|!Array<(string|number)>)} path
 * @param {!Object=} root
 * @return {?}
 */
polymer.Base.prototype.get = function(path, root) {};

/**
 * @param {string} to
 * @param {string=} from
 * @return {void}
 */
polymer.Base.prototype.linkPaths = function(to, from) {};

/**
 * @param {string} path
 * @return {void}
 */
polymer.Base.prototype.unlinkPaths = function(path) {};

/**
 * @param {string} path
 * @param {...?} item
 * @return {number}
 */
polymer.Base.prototype.push = function(path, item) {};

/**
 * @param {string} path
 * @return {?}
 */
polymer.Base.prototype.pop = function(path) {};

/**
 * @param {string} path
 * @param {number} index
 * @param {number} removeCount
 * @param {...?} item
 * @return {number}
 */
polymer.Base.prototype.splice = function(path, index, removeCount, item) {};

/**
 * @param {string} path
 * @return {?}
 */
polymer.Base.prototype.shift = function(path) {};

/**
 * @param {string} path
 * @param {...?} item
 * @return {number}
 */
polymer.Base.prototype.unshift = function(path, item) {};

/**
 * @param {string} url
 * @return {string}
 */
polymer.Base.prototype.resolveUrl = function(url) {};

/**
 * @param {!Element} container
 * @param {boolean} shouldObserve
 * @return {void}
 */
polymer.Base.prototype.scopeSubtree = function(container, shouldObserve) {};

/**
 * @param {string} selector
 * @return {!Element}
 */
polymer.Base.prototype.$$ = function(selector) {};

/**
 * @param {string} name
 * @param {boolean=} bool
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.Base.prototype.toggleClass = function(name, bool, node) {};

/**
 * @param {string} name
 * @param {boolean=} bool
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.Base.prototype.toggleAttribute = function(name, bool, node) {};

/**
 * @param {string} name
 * @param {!HTMLElement} toElement
 * @param {!HTMLElement} fromElement
 * @return {void}
 */
polymer.Base.prototype.classFollows = function(name, toElement, fromElement) {};

/**
 * @param {string} name
 * @param {!HTMLElement} toElement
 * @param {!HTMLElement} fromElement
 * @return {void}
 */
polymer.Base.prototype.attributeFollows = function(name, toElement, fromElement) {};

/**
 * @param {string} selector
 * @return {!Array<!Node>}
 */
polymer.Base.prototype.getContentChildNodes = function(selector) {};

/**
 * @param {string} selector
 * @return {!Array<!HTMLElement>}
 */
polymer.Base.prototype.getContentChildren = function(selector) {};

/**
 * @param {string} type
 * @param {?=} detail
 * @param {!Object=} options
 * @return {!CustomEvent}
 */
polymer.Base.prototype.fire = function(type, detail, options) {};

/**
 * @param {function(): void} callback
 * @param {number=} waitTime
 * @return {number}
 */
polymer.Base.prototype.async = function(callback, waitTime) {};

/**
 * @param {number} handle
 * @return {void}
 */
polymer.Base.prototype.cancelAsync = function(handle) {};

/**
 * @param {(string|!Array<?>)} path
 * @param {?} item
 * @return {!Array<?>}
 */
polymer.Base.prototype.arrayDelete = function(path, item) {};

/**
 * @param {string} transform
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.Base.prototype.transform = function(transform, node) {};

/**
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {!HTMLElement=} node
 * @return {void}
 */
polymer.Base.prototype.translate3d = function(x, y, z, node) {};

/**
 * @param {string} href
 * @param {!Function=} onload
 * @param {!Function=} onerror
 * @return {!HTMLLinkElement}
 */
polymer.Base.prototype.importHref = function(href, onload, onerror) {};

/**
 * @param {string} tag
 * @param {!Object} props
 * @return {!Element}
 */
polymer.Base.prototype.create = function(tag, props) {};

/**
 * @param {!HTMLElement} node
 * @return {boolean}
 */
polymer.Base.prototype.isLightDescendant = function(node) {};

/**
 * @param {!HTMLElement} node
 * @return {boolean}
 */
polymer.Base.prototype.isLocalDescendant = function(node) {};

/**
 * @return {void}
 */
polymer.Base.prototype.updateStyles = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.registerCallback = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.createdCallback = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.detachedCallback = function() {};

/**
 * @param {string} name
 * @return {void}
 */
polymer.Base.prototype.attributeChangedCallback = function(name) {};

/**
 * @param {!Object} prototype
 * @param {!Object} api
 * @return {!Object}
 */
polymer.Base.prototype.extend = function(prototype, api) {};

/**
 * @param {!Object} target
 * @param {!Object} source
 * @return {!Object}
 */
polymer.Base.prototype.mixin = function(target, source) {};

/**
 * @param {string} name
 * @param {!Object} source
 * @param {!Object} target
 * @return {void}
 */
polymer.Base.prototype.copyOwnProperty = function(name, source, target) {};

/**
 * @return {void}
 */
polymer.Base.prototype.beforeRegister = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.registered = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.created = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.attached = function() {};

/**
 * @return {void}
 */
polymer.Base.prototype.detached = function() {};

/**
 * @param {string} name
 * @param {?} oldValue
 * @param {?} newValue
 * @return {void}
 */
polymer.Base.prototype.attributeChanged = function(name, oldValue, newValue) {};
/**
 * @record
 * @struct
 */
polymer.DomApiStatic = function() {};

/* TODO: CallSignature: polymer */

/* TODO: CallSignature: polymer */

/**
 * @return {void}
 */
polymer.DomApiStatic.prototype.flush = function() {};
/**
 * @record
 * @struct
 */
polymer.DomApi = function() {};
 /** @type {!Array<!Node>} */
polymer.DomApi.prototype.childNodes;
 /** @type {!Array<!Element>} */
polymer.DomApi.prototype.children;
 /** @type {!Node} */
polymer.DomApi.prototype.parentNode;
 /** @type {!Node} */
polymer.DomApi.prototype.firstChild;
 /** @type {!Node} */
polymer.DomApi.prototype.lastChild;
 /** @type {!Node} */
polymer.DomApi.prototype.nextSibling;
 /** @type {!Node} */
polymer.DomApi.prototype.previousSibling;
 /** @type {!Element} */
polymer.DomApi.prototype.firstElementChild;
 /** @type {!Element} */
polymer.DomApi.prototype.lastElementChild;
 /** @type {!Element} */
polymer.DomApi.prototype.nextElementSibling;
 /** @type {!Element} */
polymer.DomApi.prototype.previousElementSibling;
 /** @type {string} */
polymer.DomApi.prototype.textContent;
 /** @type {string} */
polymer.DomApi.prototype.innerHTML;

/**
 * @param {!Node} node
 * @return {!Node}
 */
polymer.DomApi.prototype.appendChild = function(node) {};

/**
 * @param {!Node} node
 * @param {!Node=} refNode
 * @return {!Node}
 */
polymer.DomApi.prototype.insertBefore = function(node, refNode) {};

/**
 * @param {!Node} node
 * @return {!Node}
 */
polymer.DomApi.prototype.removeChild = function(node) {};

/**
 * @param {!Node} node
 * @param {!Node} refNode
 * @return {!Node}
 */
polymer.DomApi.prototype.replaceChild = function(node, refNode) {};

/**
 * @return {!Node}
 */
polymer.DomApi.prototype.getOwnerRoot = function() {};

/**
 * @param {string} selector
 * @return {!Node}
 */
polymer.DomApi.prototype.querySelector = function(selector) {};

/**
 * @param {string} selector
 * @return {!Array<!Node>}
 */
polymer.DomApi.prototype.querySelectorAll = function(selector) {};

/**
 * @return {!Array<!Node>}
 */
polymer.DomApi.prototype.getDestinationInsertionPoints = function() {};

/**
 * @return {!Array<!Node>}
 */
polymer.DomApi.prototype.getDistributedNodes = function() {};

/**
 * @param {string} selector
 * @return {!Array<!Node>}
 */
polymer.DomApi.prototype.queryDistributedElements = function(selector) {};

/**
 * @param {string} name
 * @param {?} value
 * @return {void}
 */
polymer.DomApi.prototype.setAttribute = function(name, value) {};

/**
 * @param {string} name
 * @return {void}
 */
polymer.DomApi.prototype.removeAttribute = function(name) {};
/**
 * @record
 * @struct
 */
polymer.EventApi = function() {};
 /** @type {!EventTarget} */
polymer.EventApi.prototype.rootTarget;
 /** @type {!EventTarget} */
polymer.EventApi.prototype.localTarget;
 /** @type {!Array<!Node>} */
polymer.EventApi.prototype.path;
/**
 * @record
 * @struct
 */
polymer.Settings = function() {};
 /** @type {boolean} */
polymer.Settings.prototype.hasNativeCSSProperties;
 /** @type {boolean} */
polymer.Settings.prototype.hasNativeImports;
 /** @type {boolean} */
polymer.Settings.prototype.hasShadow;
 /** @type {boolean} */
polymer.Settings.prototype.nativeShadow;
 /** @type {boolean} */
polymer.Settings.prototype.useNativeCSSProperties;
 /** @type {boolean} */
polymer.Settings.prototype.useNativeCustomElements;
 /** @type {boolean} */
polymer.Settings.prototype.useNativeImports;
 /** @type {boolean} */
polymer.Settings.prototype.useNativeShadow;
 /** @type {boolean} */
polymer.Settings.prototype.usePolyfillProto;
 /** @type {boolean} */
polymer.Settings.prototype.useShadow;
 /** @type {boolean} */
polymer.Settings.prototype.wantShadow;
/**
 * @record
 * @struct
 */
polymer.RenderStatus = function() {};

/**
 * @param {!Element} element
 * @param {!Function} fn
 * @param {?=} args
 * @return {void}
 */
polymer.RenderStatus.prototype.afterNextRender = function(element, fn, args) {};

/**
 * @return {boolean}
 */
polymer.RenderStatus.prototype.hasRendered = function() {};

/**
 * @param {!Function} cb
 * @return {void}
 */
polymer.RenderStatus.prototype.whenReady = function(cb) {};
/**
 * @extends {polymer.RenderStatus}
 * @record
 * @struct
 */
polymer.ImportStatus = function() {};

/**
 * @param {!Function} cb
 * @return {void}
 */
polymer.ImportStatus.prototype.whenLoaded = function(cb) {};
/**
 * @record
 * @struct
 */
polymer.PolymerStatic = function() {};
 /** @type {!polymer.Settings} */
polymer.PolymerStatic.prototype.Settings;
 /** @type {!polymer.Base} */
polymer.PolymerStatic.prototype.Base;
 /** @type {!polymer.DomApiStatic} */
polymer.PolymerStatic.prototype.dom;

/* TODO: CallSignature: polymer */
 /** @type {!polymer.RenderStatus} */
polymer.PolymerStatic.prototype.RenderStatus;
 /** @type {!polymer.ImportStatus} */
polymer.PolymerStatic.prototype.ImportStatus;

/**
 * @param {string} element
 * @return {boolean}
 */
polymer.PolymerStatic.prototype.isInstance = function(element) {};

/**
 * @param {(!polymer.Base|function(new: (!polymer.Base)): ?)} prototype
 * @return {?}
 */
polymer.PolymerStatic.prototype.Class = function(prototype) {};
 /** @type {!polymer.PolymerStatic} */
var Polymer;
