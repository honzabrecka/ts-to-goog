/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/jpm/index.d.ts:
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/base64"
/** @const */
tsickle_declare_module.sdk_base__ = {};

/**
 * Creates a base-64 encoded ASCII string from a string of binary data
 * @param {string} data the data to encode
 * @param {string=} charset The charset of the string to encode (optional). The only accepted value is "utf-8".
 *        In order to encode and decode Unicode strings, the charset parameter needs to be set
 * @return {string}
 */
tsickle_declare_module.sdk_base__.encode = function(data, charset) {};

/**
 *
 * @param {string} data the encoded data
 * @param {string=} charset
 * @return {string}
 */
tsickle_declare_module.sdk_base__.decode = function(data, charset) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/clipboard"
/** @const */
tsickle_declare_module.sdk_clipboard = {};

/**
 * get the contents of the system clipboard
 * @param {string=} datatype [text|html|image] Retrieve the clipboard contents only if matching this type
 * @return {string}
 */
tsickle_declare_module.sdk_clipboard.get = function(datatype) {};

/**
 * Replace the contents of the user's clipboard with the provided data
 * @param {string} data The data to put on the clipboard
 * @param {string=} datatype [text|html|image] The type of the data
 * @return {void}
 */
tsickle_declare_module.sdk_clipboard.set = function(data, datatype) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/context-menu"
/** @const */
tsickle_declare_module.sdk_context_menu = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_context_menu.Context = function() {};
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.PageContext;

/* TODO: CallSignature: tsickle_declare_module.sdk_context_menu */
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.SelectionContext;

/* TODO: CallSignature: tsickle_declare_module.sdk_context_menu */
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.SelectorContext;

/* TODO: CallSignature: tsickle_declare_module.sdk_context_menu */
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.URLContext;

/* TODO: CallSignature: tsickle_declare_module.sdk_context_menu */
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.PredicateContext;

/* TODO: CallSignature: tsickle_declare_module.sdk_context_menu */
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_context_menu.ItemContext = function() {};
 /** @type {function(!Context): void} */
tsickle_declare_module.sdk_context_menu.ItemContext.prototype.add;
 /** @type {function(!Context): void} */
tsickle_declare_module.sdk_context_menu.ItemContext.prototype.remove;
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_context_menu.Item = function() {};
 /** @type {!ItemContext} */
tsickle_declare_module.sdk_context_menu.Item.prototype.context;
 /** @type {function(): void} */
tsickle_declare_module.sdk_context_menu.Item.prototype.destroy;
 /** @type {string} */
tsickle_declare_module.sdk_context_menu.Item.prototype.label;
 /** @type {(string|!URL)} */
tsickle_declare_module.sdk_context_menu.Item.prototype.image;
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.Item.prototype.data;
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.Item.prototype.parentMenu;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_context_menu.Item.prototype.contentScript;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_context_menu.Item.prototype.contentScriptFile;

/**
 * A menu item
 * @param {{label: string, image: string, accessKey: string, context: (!Context|!Array<!Context>), contentScript: string, contentScriptFile: string, data: ?, onMessage: function(?): ?}} options
 * @return {?}
 */
tsickle_declare_module.sdk_context_menu.Item = function(options) {};

/**
 * A menu separator
 * @return {?}
 */
tsickle_declare_module.sdk_context_menu.Separator = function() {};
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.Separator.prototype.parentMenu;
 /** @type {function(): void} */
tsickle_declare_module.sdk_context_menu.Separator.prototype.destroy;
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_context_menu.Menu = function() {};
 /** @type {function(?): void} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.addItem;
 /** @type {function(?): void} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.removeItem;
 /** @type {function(): void} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.destroy;
 /** @type {string} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.label;
 /** @type {!Array<?>} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.items;
 /** @type {(string|!URL)} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.image;
 /** @type {!ItemContext} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.context;
 /** @type {?} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.parentMenu;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.contentScript;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_context_menu.Menu.prototype.contentScriptFile;

/** @typedef {?} */
tsickle_declare_module.sdk_context_menu.ItemMenuSeparator;

/**
 * A labeled menu item that expands into a submenu
 * \@contructor
 * @param {{label: string, items: !Array<?>, image: string, context: !Array<!Context>, contentScript: (string|!Array<string>), contentScriptFile: (string|!Array<string>), onMessage: function(?): void}} options
 * @return {?}
 */
tsickle_declare_module.sdk_context_menu.Menu = function(options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/hotkeys"
/** @const */
tsickle_declare_module.sdk_hotkeys = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_hotkeys.Hotkey = function() {};
 /** @type {function(): void} */
tsickle_declare_module.sdk_hotkeys.Hotkey.prototype.destroy;

/**
 * \@contructor 
 * Hotkey
 * Used to define a hotkey combination passing it the combination and a function to be called when the user 
 * presses that combination
 * @param {{combo: string, onPress: function(): void}} options
 * @return {?}
 */
tsickle_declare_module.sdk_hotkeys.Hotkey = function(options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/indexed-db"
/** @const */
tsickle_declare_module.sdk_indexed_db = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_indexed_db.IndexedImpl = function() {};
 /** @type {!IDBFactory} */
tsickle_declare_module.sdk_indexed_db.IndexedImpl.prototype.indexedDB;
 /** @type {!IDBKeyRange} */
tsickle_declare_module.sdk_indexed_db.IndexedImpl.prototype.IDBKeyRange;
 /** @type {!DOMException} */
tsickle_declare_module.sdk_indexed_db.IndexedImpl.prototype.DOMException;

/* TODO: ExportAssignment in tsickle_declare_module.sdk_indexed_db */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/l10n"
/** @const */
tsickle_declare_module.sdk_l__n = {};

/**
 * This function takes a string parameter which it uses as an identifier to look up and return a localized string in
 * the locale currently set for Firefox. Localized strings are supplied by the add-on developer in .properties
 * files stored in the add-ons "locale" directory
 * See {\@link https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/l10n}
 * @param {string} identifier An identifier for the localization of a particular string in the current locale
 * @param {number=} count If you're supplying different localizations for a string for singular or plural forms,
 *              this parameter is the number of items there are in this case
 * @param {...string} placeholder If you do not include the count parameter, you can supply one or more placeholder strings that
 *                    are to be inserted into the translated string at locations defined by the translator
 * @return {string}
 */
tsickle_declare_module.sdk_l__n.get = function(identifier, count, placeholder) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/notifications"
/** @const */
tsickle_declare_module.sdk_notifications = {};

/**
 * @param {{title: string, text: string, iconURL: string, onClick: function(string): ?, data: string}} options
 * @return {void}
 */
tsickle_declare_module.sdk_notifications.notify = function(options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/page-mod"
/** @const */
tsickle_declare_module.sdk_page_mod = {};

/**
 * @param {{include: (string|!RegExp|!Array<string>|!Array<!RegExp>), contentScript: (string|!Array<string>), contentScriptFile: (string|!Array<string>), contentStyle: (string|!Array<string>), contentStyleFile: (string|!Array<string>), contentScriptOptions: ?, attachTo: (string|!Array<string>), contentScriptWhen: string, exclude: (string|!Array<string>), onAttach: function(!FFAddonSDK.ContentWorker): ?, onError: function(!Error): ?}} options
 * @return {?}
 */
tsickle_declare_module.sdk_page_mod.PageMod = function(options) {};

/** @typedef {string} */
tsickle_declare_module.sdk_page_mod.attachmentMode;
 /** @type {function(): void} */
tsickle_declare_module.sdk_page_mod.PageMod.prototype.destroy;
 /** @type {(string|!RegExp|!Array<string>|!Array<!RegExp>)} */
tsickle_declare_module.sdk_page_mod.PageMod.prototype.include;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/page-worker"
/** @const */
tsickle_declare_module.sdk_page_worker = {};

/**
 * @param {{contentURL: string, contentScript: (string|!Array<string>), contentScriptFile: (string|!Array<string>), contentScriptWhen: string, onMessage: function(string): ?, allow: {script: boolean}, contentScriptOptions: ?, include: (string|!RegExp|!Array<string>|!Array<!RegExp>)}} options
 * @return {!PageWorker}
 */
tsickle_declare_module.sdk_page_worker.Page = function(options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_page_worker.PageWorker = function() {};
 /** @type {!FFAddonSDK.Port} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.port;
 /** @type {string} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.contentURL;
 /** @type {function(): void} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.destroy;
 /** @type {function(string): void} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.postMessage;
 /** @type {function(string, function((!Error|string)): ?): void} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.on;
 /** @type {function(string, !Function): void} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.removeListener;
 /** @type {{script: boolean}} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.allow;
 /** @type {(string|!RegExp|!Array<string>|!Array<!RegExp>)} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.include;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.contentScriptFile;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_page_worker.PageWorker.prototype.contentScript;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/panel"
/** @const */
tsickle_declare_module.sdk_panel = {};

/**
 * @param {{contentURL: (string|!URL), width: number, height: number, contentScript: (string|!Array<string>), contentScriptFile: (string|!Array<string>), contentScriptWhen: string, contentScriptOptions: ?, contentStyle: (string|!Array<string>), contentStyleFile: (string|!Array<string>), position: (!FFAddonSDK.ToggleButton|!FFAddonSDK.Widget|{top: number, right: number, bottom: number, left: number}), allow: {script: boolean}, focus: boolean, contextMenu: boolean, onMessage: function(string): ?, onShow: function(): ?, onHide: function(): ?, onError: function(!Error): ?}} options
 * @return {?}
 */
tsickle_declare_module.sdk_panel.Panel = function(options) {};
 /** @type {function({width: number, height: number, position: (!FFAddonSDK.ToggleButton|!FFAddonSDK.Widget|{top: number, right: number, bottom: number, left: number}), focus: boolean}): void} */
tsickle_declare_module.sdk_panel.Panel.prototype.show;
 /** @type {function(): void} */
tsickle_declare_module.sdk_panel.Panel.prototype.hide;
 /** @type {function(number, number): void} */
tsickle_declare_module.sdk_panel.Panel.prototype.resize;
 /** @type {function(): void} */
tsickle_declare_module.sdk_panel.Panel.prototype.destroy;
 /** @type {function(string): void} */
tsickle_declare_module.sdk_panel.Panel.prototype.postMessage;
 /** @type {function(string, function(?): ?): void} */
tsickle_declare_module.sdk_panel.Panel.prototype.on;
 /** @type {function(string, !Function): void} */
tsickle_declare_module.sdk_panel.Panel.prototype.removeListener;
 /** @type {!FFAddonSDK.Port} */
tsickle_declare_module.sdk_panel.Panel.prototype.port;
 /** @type {boolean} */
tsickle_declare_module.sdk_panel.Panel.prototype.isShowing;
 /** @type {number} */
tsickle_declare_module.sdk_panel.Panel.prototype.height;
 /** @type {number} */
tsickle_declare_module.sdk_panel.Panel.prototype.width;
 /** @type {boolean} */
tsickle_declare_module.sdk_panel.Panel.prototype.focus;
 /** @type {(string|!URL)} */
tsickle_declare_module.sdk_panel.Panel.prototype.contentURL;
 /** @type {{script: boolean}} */
tsickle_declare_module.sdk_panel.Panel.prototype.allow;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_panel.Panel.prototype.contentScriptFile;
 /** @type {(string|!Array<string>)} */
tsickle_declare_module.sdk_panel.Panel.prototype.contentScript;
 /** @type {string} */
tsickle_declare_module.sdk_panel.Panel.prototype.contentScriptWhen;
 /** @type {?} */
tsickle_declare_module.sdk_panel.Panel.prototype.contentScriptOptions;

/** @typedef {(!FFAddonSDK.ToggleButton|!FFAddonSDK.Widget|{top: number, right: number, bottom: number, left: number})} */
tsickle_declare_module.sdk_panel.PanelPosition;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/passwords"
/** @const */
tsickle_declare_module.sdk_passwords = {};

/**
 * This function is used to retrieve a credential, or a list of credentials, stored in the Password Manager
 * @param {{onComplete: function(!Array<!Credential>): ?, username: string, url: string, password: string, formSubmitURL: string, realm: string, usernameField: string, passwordField: string, onError: function(!FFAddonSDK.NSIException): ?}} options
 * @return {void}
 */
tsickle_declare_module.sdk_passwords.search = function(options) {};

/**
 * This function is used to store a credential in the Password Manager.
 * It takes an options object as an argument: this contains all the properties for the new credential.
 * As different sorts of credentials contain different properties, the appropriate options differ depending
 * on the sort of credential being stored
 * @param {?} options
 * @return {void}
 */
tsickle_declare_module.sdk_passwords.store = function(options) {};

/**
 * Removes a stored credential
 * @param {?} options
 * @return {void}
 */
tsickle_declare_module.sdk_passwords.remove = function(options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_passwords.Credential = function() {};
 /** @type {string} */
tsickle_declare_module.sdk_passwords.Credential.prototype.username;
 /** @type {string} */
tsickle_declare_module.sdk_passwords.Credential.prototype.password;
 /** @type {string} */
tsickle_declare_module.sdk_passwords.Credential.prototype.url;
 /** @type {string} */
tsickle_declare_module.sdk_passwords.Credential.prototype.formSubmitURL;
 /** @type {string} */
tsickle_declare_module.sdk_passwords.Credential.prototype.realm;
 /** @type {string} */
tsickle_declare_module.sdk_passwords.Credential.prototype.usernameField;
 /** @type {string} */
tsickle_declare_module.sdk_passwords.Credential.prototype.passwordField;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/private-browsing"
/** @const */
tsickle_declare_module.sdk_private_browsing = {};

/**
 * @param {(!FFAddonSDK.ContentWorker|!FFAddonSDK.Tab|!FFAddonSDK.BrowserWindow)} object
 * @return {boolean}
 */
tsickle_declare_module.sdk_private_browsing.isPrivate = function(object) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/querystring"
/** @const */
tsickle_declare_module.sdk_querystring = {};

/**
 * Serializes an object containing name:value pairs into a query string
 * @param {!Object} object {Object} The data to convert to a query string
 * @param {string=} separator
 * @param {string=} assignment
 * @return {string}
 */
tsickle_declare_module.sdk_querystring.stringify = function(object, separator, assignment) {};

/**
 * Parse a query string into an object containing name:value pairs
 * @param {string} querystring
 * @param {string=} separator
 * @param {string=} assignment
 * @return {!Object}
 */
tsickle_declare_module.sdk_querystring.parse = function(querystring, separator, assignment) {};

/**
 * The escape function used by stringify to encodes a string safely matching RFC 3986 for
 * application/x-www-form-urlencoded
 * @param {string} query
 * @return {string}
 */
tsickle_declare_module.sdk_querystring.escape = function(query) {};

/**
 * The unescape function used by parse to decode a string safely
 * @param {string} query
 * @return {string}
 */
tsickle_declare_module.sdk_querystring.unescape = function(query) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/request"
/** @const */
tsickle_declare_module.sdk_request = {};

/**
 * This constructor creates a request object that can be used to make network requests
 * @template ResponseType
 * @param {{url: (string|!FFAddonSDK.SDKURL), onComplete: function(!Response): ?, headers: !Object, content: (string|!Object), contentType: string, anonymous: boolean, overrideMimeType: string}|{url: (string|!FFAddonSDK.SDKURL), onComplete: function(!STResponse<ResponseType>): ?, headers: !Object, content: (string|!Object), contentType: string, anonymous: boolean, overrideMimeType: string}} options
 * @return {?|!STRequest<ResponseType>}
 */
tsickle_declare_module.sdk_request.Request = function(options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_request.BaseRequest = function() {};
 /** @type {function(): void} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.get;
 /** @type {function(): void} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.post;
 /** @type {function(): void} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.head;
 /** @type {function(): void} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.put;
 /** @type {function(): void} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.delete;
 /** @type {(string|!FFAddonSDK.SDKURL)} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.url;
 /** @type {!Object} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.headers;
 /** @type {string} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.content;
 /** @type {string} */
tsickle_declare_module.sdk_request.BaseRequest.prototype.contentType;
 /** @type {!Response} */
tsickle_declare_module.sdk_request.Request.prototype.response;
/**
 * @extends {BaseRequest}
 * @record
 * @struct
 */
tsickle_declare_module.sdk_request.STRequest = function() {};
 /** @type {!STResponse<ResponseType>} */
tsickle_declare_module.sdk_request.STRequest.prototype.response;
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_request.BaseResponse = function() {};
 /** @type {string} */
tsickle_declare_module.sdk_request.BaseResponse.prototype.url;
 /** @type {string} */
tsickle_declare_module.sdk_request.BaseResponse.prototype.text;
 /** @type {number} */
tsickle_declare_module.sdk_request.BaseResponse.prototype.status;
 /** @type {string} */
tsickle_declare_module.sdk_request.BaseResponse.prototype.statusText;
 /** @type {!Object} */
tsickle_declare_module.sdk_request.BaseResponse.prototype.headers;
 /** @type {boolean} */
tsickle_declare_module.sdk_request.BaseResponse.prototype.anonymous;
/**
 * @extends {BaseResponse}
 * @record
 * @struct
 */
tsickle_declare_module.sdk_request.Response = function() {};
 /** @type {!Object} */
tsickle_declare_module.sdk_request.Response.prototype.json;
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_request.STResponse = function() {};
 /** @type {T} */
tsickle_declare_module.sdk_request.STResponse.prototype.json;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/selection"
/** @const */
tsickle_declare_module.sdk_selection = {};

/**
 * @param {string} event
 * @param {function(): ?} handler
 * @return {void}
 */
tsickle_declare_module.sdk_selection.on = function(event, handler) {};

/**
 * @param {string} event
 * @param {!Function} handler
 * @return {void}
 */
tsickle_declare_module.sdk_selection.removeListener = function(event, handler) {};
 /** @type {string} */
tsickle_declare_module.sdk_selection.text;
 /** @type {string} */
tsickle_declare_module.sdk_selection.html;
 /** @type {boolean} */
tsickle_declare_module.sdk_selection.isContiguous;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/self"
/** @const */
tsickle_declare_module.sdk_self = {};
 /** @type {string} */
tsickle_declare_module.sdk_self.uri;
 /** @type {string} */
tsickle_declare_module.sdk_self.id;
 /** @type {string} */
tsickle_declare_module.sdk_self.name;
 /** @type {string} */
tsickle_declare_module.sdk_self.version;
 /** @type {string} */
tsickle_declare_module.sdk_self.loadReason;
 /** @type {boolean} */
tsickle_declare_module.sdk_self.isPrivateBrowsingSupported;
/** @const */
tsickle_declare_module.sdk_self.data = {};

/**
 * The data.load() method returns the contents of an embedded data file, as a string.
 * It is most useful for data that will be modified or parsed in some way, such as JSON, XML, plain text,
 * or perhaps an HTML template. For data that can be displayed directly in a content frame, use data.url()
 * @param {string} name The filename to be read, relative to the package's data directory.
 *             Each package that uses the self module will see its own data directory
 * @return {string}
 */
tsickle_declare_module.sdk_self.data.load = function(name) {};

/**
 * The data.url() method returns a resource:// url that points at an embedded data file.
 * It is most useful for data that can be displayed directly in a content frame.
 * The url can be passed to a content frame constructor, such as the {\@link Panel}
 * @param {string} name
 * @return {string}
 */
tsickle_declare_module.sdk_self.data.url = function(name) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/simple-prefs"
/** @const */
tsickle_declare_module.sdk_simple_prefs = {};

/**
 * Registers an event listener that will be called when a preference is changed
 * @param {string} prefName The name of the preference to watch for changes. Empty name '' listens for all preferences
 * @param {function(string): ?} listener
 * @return {void}
 */
tsickle_declare_module.sdk_simple_prefs.on = function(prefName, listener) {};

/**
 * Unregisters an event listener for the specified preference
 * @param {string} prefName
 * @param {!Function} listener
 * @return {void}
 */
tsickle_declare_module.sdk_simple_prefs.removeListener = function(prefName, listener) {};
 /** @type {!Object} */
tsickle_declare_module.sdk_simple_prefs.prefs;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/simple-storage"
/** @const */
tsickle_declare_module.sdk_simple_storage = {};
 /** @type {?} */
tsickle_declare_module.sdk_simple_storage.storage;
 /** @type {number} */
tsickle_declare_module.sdk_simple_storage.quotaUsage;

/**
 * @param {string} event
 * @param {function(): ?} handler
 * @return {void}
 */
tsickle_declare_module.sdk_simple_storage.on = function(event, handler) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/system"
/** @const */
tsickle_declare_module.sdk_system = {};

/**
 * Quits the host application with the specified code
 * @param {number} code
 * @return {void}
 */
tsickle_declare_module.sdk_system.exit = function(code) {};

/**
 * Firefox enables you to get the path to certain "special" directories, such as the desktop or the profile directory.
 * This function exposes that functionality to add-on authors
 * @param {string} id see [\@link https://developer.mozilla.org/en-US/docs/Code_snippets/File_I_O#Getting_files_in_special_directories}
 * @return {string}
 */
tsickle_declare_module.sdk_system.pathFor = function(id) {};
 /** @type {?} */
tsickle_declare_module.sdk_system.env;
 /** @type {string} */
tsickle_declare_module.sdk_system.platform;
 /** @type {string} */
tsickle_declare_module.sdk_system.architecture;
 /** @type {string} */
tsickle_declare_module.sdk_system.compiler;
 /** @type {string} */
tsickle_declare_module.sdk_system.build;
 /** @type {string} */
tsickle_declare_module.sdk_system.id;
 /** @type {string} */
tsickle_declare_module.sdk_system.name;
 /** @type {string} */
tsickle_declare_module.sdk_system.version;
 /** @type {string} */
tsickle_declare_module.sdk_system.platformVersion;
 /** @type {string} */
tsickle_declare_module.sdk_system.vendor;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/tabs"
/** @const */
tsickle_declare_module.sdk_tabs = {};

/**
 * Opens a new tab. The new tab will open in the active window or in a new window, depending on the inNewWindow option
 * @param {(string|{url: string, inNewWindow: boolean, inBackground: boolean, isPinned: boolean, onOpen: function(!FFAddonSDK.Tab): ?, onClose: function(!FFAddonSDK.Tab): ?, onReady: function(!FFAddonSDK.Tab): ?, onLoad: function(!FFAddonSDK.Tab): ?, onPageShow: function(!FFAddonSDK.Tab): ?, onActivate: function(!FFAddonSDK.Tab): ?, onDeactivate: function(!FFAddonSDK.Tab): ?})} options String URL to be opened in the new tab or an options object
 * @return {void}
 */
tsickle_declare_module.sdk_tabs.open = function(options) {};

/**
 * @param {string} event
 * @param {function(!FFAddonSDK.Tab): ?} handler
 * @return {void}
 */
tsickle_declare_module.sdk_tabs.on = function(event, handler) {};
 /** @type {!FFAddonSDK.Tab} */
tsickle_declare_module.sdk_tabs.activeTab;
 /** @type {number} */
tsickle_declare_module.sdk_tabs.length;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/timers"
/** @const */
tsickle_declare_module.sdk_timers = {};

/**
 * Schedules callback to be called in ms milliseconds. Any additional arguments are passed straight through to the callback
 * @param {function(!Array<?>): ?} callback
 * @param {number} timeoutMS
 * @return {number}
 */
tsickle_declare_module.sdk_timers.setTimeout = function(callback, timeoutMS) {};

/**
 * Given an ID returned from setTimeout(), prevents the callback with the ID from being called (if it hasn't yet been called)
 * @param {number} timerID
 * @return {void}
 */
tsickle_declare_module.sdk_timers.clearTimeout = function(timerID) {};

/**
 * Schedules callback to be called repeatedly every ms milliseconds
 * Any additional arguments are passed straight through to the callback
 * @param {function(!Array<?>): ?} callback
 * @param {number} timeoutMS
 * @return {number}
 */
tsickle_declare_module.sdk_timers.setInterval = function(callback, timeoutMS) {};

/**
 * Given an ID returned from setInterval(), prevents the callback with the ID from being called again
 * @param {number} intervalID
 * @return {void}
 */
tsickle_declare_module.sdk_timers.clearInterval = function(intervalID) {};

/** @typedef {number} */
tsickle_declare_module.sdk_timers.TIMEOUT_ID;

/** @typedef {number} */
tsickle_declare_module.sdk_timers.INTERVAL_ID;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/ui/button/action"
/** @const */
tsickle_declare_module.sdk_ui_button_action = {};

/**
 * Creates an action button
 * @param {{id: string, label: string, icon: (string|{16: string, 32: string, 64: string}), onClick: function(!FFAddonSDK.ActionButton): ?, onChange: function(!FFAddonSDK.ActionButtonState): ?, disabled: boolean, badge: (string|number), badgeColor: string}} options
 * @return {!FFAddonSDK.ActionButton}
 */
tsickle_declare_module.sdk_ui_button_action.ActionButton = function(options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/ui/button/toggle"
/** @const */
tsickle_declare_module.sdk_ui_button_toggle = {};

/**
 * Creates a toggle button
 * @param {{id: string, label: string, icon: (string|{16: string, 32: string, 64: string}), onChange: function(!FFAddonSDK.ToggleButtonState): ?, onClick: function(!FFAddonSDK.ToggleButtonState): ?, badge: (string|number), badgeColor: string, disabled: boolean, checked: boolean}} options
 * @return {!FFAddonSDK.ToggleButton}
 */
tsickle_declare_module.sdk_ui_button_toggle.ToggleButton = function(options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/ui/frame"
/** @const */
tsickle_declare_module.sdk_ui_frame = {};

/**
 * Creates a frame. Once created, the frame needs to be added to a toolbar for it to be visible
 * @param {{url: string, name: string, onMessage: function(!FFAddonSDK.FrameEvent): ?, onReady: function(!FFAddonSDK.FrameEvent): ?, onLoad: function(!FFAddonSDK.FrameEvent): ?, onAttach: function(!FFAddonSDK.FrameEvent): ?, onDetach: function(!FFAddonSDK.FrameEvent): ?}} options
 * @return {!FFAddonSDK.Frame}
 */
tsickle_declare_module.sdk_ui_frame.Frame = function(options) {};
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/ui/toolbar"
/** @const */
tsickle_declare_module.sdk_ui_toolbar = {};

/**
 * @param {{title: string, items: !Array<(!FFAddonSDK.ToggleButton|!FFAddonSDK.ActionButton|!FFAddonSDK.Frame)>, hidden: boolean, onAttach: function(?): ?, onDetach: function(?): ?, onShow: function(?): ?, onHide: function(?): ?}} options
 * @return {?}
 */
tsickle_declare_module.sdk_ui_toolbar.Toolbar = function(options) {};
 /** @type {string} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.title;
 /** @type {!Array<(!FFAddonSDK.ToggleButton|!FFAddonSDK.ActionButton|!FFAddonSDK.Frame)>} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.items;
 /** @type {boolean} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.hidden;
 /** @type {function(string, function(?): ?): void} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.on;
 /** @type {function(string, function(?): ?): void} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.once;
 /** @type {function(string, !Function): void} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.removeListener;
 /** @type {function(string, !Function): void} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.off;
 /** @type {function(): void} */
tsickle_declare_module.sdk_ui_toolbar.Toolbar.prototype.destroy;

/** @typedef {(!FFAddonSDK.ToggleButton|!FFAddonSDK.ActionButton|!FFAddonSDK.Frame)} */
tsickle_declare_module.sdk_ui_toolbar.ToolbarItem;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/ui/sidebar"
/** @const */
tsickle_declare_module.sdk_ui_sidebar = {};

/**
 * @param {{id: string, title: string, url: string, onShow: function(): ?, onHide: function(): ?, onAttach: function(!SidebarWorker): ?, onDetach: function(): ?, onReady: function(!SidebarWorker): ?}} options
 * @return {?}
 */
tsickle_declare_module.sdk_ui_sidebar.Sidebar = function(options) {};
 /** @type {string} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.id;
 /** @type {string} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.title;
 /** @type {string} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.url;
 /** @type {function(!FFAddonSDK.BrowserWindow): void} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.show;
 /** @type {function(!FFAddonSDK.BrowserWindow): void} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.hide;
 /** @type {function(string, function(!SidebarWorker): ?): void} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.on;
 /** @type {function(string, function(!SidebarWorker): ?): void} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.once;
 /** @type {function(string, !Function): void} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.removeListener;
 /** @type {function(): void} */
tsickle_declare_module.sdk_ui_sidebar.Sidebar.prototype.dispose;
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_ui_sidebar.SidebarWorker = function() {};
 /** @type {!FFAddonSDK.Port} */
tsickle_declare_module.sdk_ui_sidebar.SidebarWorker.prototype.port;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/url"
/** @const */
tsickle_declare_module.sdk_url = {};

/**
 * The URL constructor creates an object that represents a URL, verifying that the provided string is a valid URL in the process.
 * Any API in the SDK which has a URL parameter will accept URL objects, not raw strings, unless otherwise noted
 * @param {string} source A string to be converted into a URL. If source is not a valid URI, this constructor will throw an exception
 * @param {string=} base Used to resolve relative source URLs into absolute ones
 * @return {!FFAddonSDK.SDKURL}
 */
tsickle_declare_module.sdk_url.URL = function(source, base) {};

/**
 * The DataURL constructor creates an object that represents a data: URL,
 * verifying that the provided string is a valid data: URL in the process
 * @param {string} uri A string to be parsed as Data URL. If is not a valid URI, this constructor will throw an exception
 * @return {?}
 */
tsickle_declare_module.sdk_url.DataURL = function(uri) {};

/**
 * Attempts to convert the given URL to a native file path. This function will automatically attempt to resolve
 * non-file protocols, such as the resource: protocol, to their place on the file system.
 * An exception is raised if the URL can't be converted; otherwise, the native file path is returned as a string
 * @param {!FFAddonSDK.SDKURL} url
 * @return {string}
 */
tsickle_declare_module.sdk_url.toFilename = function(url) {};

/**
 * Converts the given native file path to a file: URL
 * @param {string} url
 * @return {string}
 */
tsickle_declare_module.sdk_url.toFileName = function(url) {};

/**
 * Checks the validity of a URI. isValidURI("http://mozilla.org") would return true,
 * whereas isValidURI("mozilla.org") would return false
 * @param {string} uri
 * @return {boolean}
 */
tsickle_declare_module.sdk_url.isValidURI = function(uri) {};

/**
 * Returns the top-level domain for the given URL: that is, the highest-level domain under which individual domains may be registered
 * @param {string} url
 * @return {string}
 */
tsickle_declare_module.sdk_url.getTLD = function(url) {};
 /** @type {function(): string} */
tsickle_declare_module.sdk_url.DataURL.prototype.toString;
 /** @type {string} */
tsickle_declare_module.sdk_url.DataURL.prototype.mimeType;
 /** @type {!Object} */
tsickle_declare_module.sdk_url.DataURL.prototype.parameters;
 /** @type {string} */
tsickle_declare_module.sdk_url.DataURL.prototype.base64;
 /** @type {string} */
tsickle_declare_module.sdk_url.DataURL.prototype.data;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "sdk/windows"
/** @const */
tsickle_declare_module.sdk_windows = {};
 /** @type {!BrowserWindows} */
tsickle_declare_module.sdk_windows.browserWindows;
/**
 * @record
 * @struct
 */
tsickle_declare_module.sdk_windows.BrowserWindows = function() {};
 /** @type {function((string|{url: string, isPrivate: boolean, onOpen: function(!FFAddonSDK.BrowserWindow): ?, onClose: function(!FFAddonSDK.BrowserWindow): ?, onActivate: function(!FFAddonSDK.BrowserWindow): ?, onDeactivate: function(!FFAddonSDK.BrowserWindow): ?})): !FFAddonSDK.BrowserWindow} */
tsickle_declare_module.sdk_windows.BrowserWindows.prototype.open;
 /** @type {function(string, function(!FFAddonSDK.BrowserWindow): ?): void} */
tsickle_declare_module.sdk_windows.BrowserWindows.prototype.on;
 /** @type {!FFAddonSDK.BrowserWindow} */
tsickle_declare_module.sdk_windows.BrowserWindows.prototype.activeWindow;
/** @const */
var FFAddonSDK = {};
/**
 * @record
 * @struct
 */
FFAddonSDK.BrowserWindow = function() {};
 /** @type {string} */
FFAddonSDK.BrowserWindow.prototype.title;
 /** @type {function(): void} */
FFAddonSDK.BrowserWindow.prototype.activate;
 /** @type {function(function(): void): void} */
FFAddonSDK.BrowserWindow.prototype.close;
 /** @type {!Array<!FFAddonSDK.Tab>} */
FFAddonSDK.BrowserWindow.prototype.tabs;
/**
 * @record
 * @struct
 */
FFAddonSDK.SDKURL = function() {};
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.scheme;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.userPass;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.host;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.port;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.path;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.hostname;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.pathname;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.hash;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.href;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.origin;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.protocol;
 /** @type {string} */
FFAddonSDK.SDKURL.prototype.search;
 /** @type {function(): string} */
FFAddonSDK.SDKURL.prototype.toString;
 /** @type {function(): string} */
FFAddonSDK.SDKURL.prototype.toJSON;
/**
 * @record
 * @struct
 */
FFAddonSDK.FrameEvent = function() {};
 /** @type {string} */
FFAddonSDK.FrameEvent.prototype.origin;
 /** @type {!FFAddonSDK.Frame} */
FFAddonSDK.FrameEvent.prototype.source;
 /** @type {?} */
FFAddonSDK.FrameEvent.prototype.data;
/**
 * @record
 * @struct
 */
FFAddonSDK.Frame = function() {};
 /** @type {!URL} */
FFAddonSDK.Frame.prototype.url;
 /** @type {function(string, string): void} */
FFAddonSDK.Frame.prototype.postMessage;
 /** @type {function(string, function(!FFAddonSDK.FrameEvent): ?): void} */
FFAddonSDK.Frame.prototype.on;
 /** @type {function(string, function(!FFAddonSDK.FrameEvent): ?): void} */
FFAddonSDK.Frame.prototype.once;
 /** @type {function(string, !Function): void} */
FFAddonSDK.Frame.prototype.removeListener;
 /** @type {function(string, !Function): void} */
FFAddonSDK.Frame.prototype.off;
 /** @type {function(): void} */
FFAddonSDK.Frame.prototype.destroy;

/** @typedef {(string|{16: string, 32: string, 64: string})} */
FFAddonSDK.Icon;
/**
 * @record
 * @struct
 */
FFAddonSDK.ToggleButtonState = function() {};
 /** @type {string} */
FFAddonSDK.ToggleButtonState.prototype.id;
 /** @type {string} */
FFAddonSDK.ToggleButtonState.prototype.label;
 /** @type {string} */
FFAddonSDK.ToggleButtonState.prototype.badge;
 /** @type {boolean} */
FFAddonSDK.ToggleButtonState.prototype.checked;
 /** @type {boolean} */
FFAddonSDK.ToggleButtonState.prototype.disabled;
/**
 * @extends {FFAddonSDK.ToggleButtonState}
 * @record
 * @struct
 */
FFAddonSDK.ToggleButton = function() {};
 /** @type {function(): void} */
FFAddonSDK.ToggleButton.prototype.click;
 /** @type {function(string, function(!FFAddonSDK.ToggleButtonState): ?): void} */
FFAddonSDK.ToggleButton.prototype.on;
 /** @type {function(string, function(!FFAddonSDK.ToggleButtonState): ?): void} */
FFAddonSDK.ToggleButton.prototype.once;
 /** @type {function(string, !Function): void} */
FFAddonSDK.ToggleButton.prototype.removeListener;
 /** @type {function((!FFAddonSDK.ToggleButton|!FFAddonSDK.Tab|!FFAddonSDK.BrowserWindow|string), {disabled: boolean, label: string, icon: (string|{16: string, 32: string, 64: string}), checked: boolean, badge: (string|number), badgeColor: string}): !FFAddonSDK.ToggleButtonState} */
FFAddonSDK.ToggleButton.prototype.state;
 /** @type {function(): void} */
FFAddonSDK.ToggleButton.prototype.destroy;
/**
 * @record
 * @struct
 */
FFAddonSDK.ActionButtonState = function() {};
 /** @type {string} */
FFAddonSDK.ActionButtonState.prototype.id;
 /** @type {string} */
FFAddonSDK.ActionButtonState.prototype.label;
 /** @type {boolean} */
FFAddonSDK.ActionButtonState.prototype.disabled;
 /** @type {(string|{16: string, 32: string, 64: string})} */
FFAddonSDK.ActionButtonState.prototype.icon;
 /** @type {(string|number)} */
FFAddonSDK.ActionButtonState.prototype.badge;
 /** @type {string} */
FFAddonSDK.ActionButtonState.prototype.badgeColor;
/**
 * @extends {FFAddonSDK.ActionButtonState}
 * @record
 * @struct
 */
FFAddonSDK.ActionButton = function() {};
 /** @type {function((!FFAddonSDK.Tab|!FFAddonSDK.BrowserWindow|!FFAddonSDK.ActionButton|string), {disabled: boolean, label: string, icon: (string|{16: string, 32: string, 64: string})}): !FFAddonSDK.ActionButtonState} */
FFAddonSDK.ActionButton.prototype.state;
 /** @type {function(): void} */
FFAddonSDK.ActionButton.prototype.click;
 /** @type {function(): void} */
FFAddonSDK.ActionButton.prototype.destroy;
 /** @type {function(string, function(!FFAddonSDK.ActionButtonState): ?): void} */
FFAddonSDK.ActionButton.prototype.on;
 /** @type {function(string, function(!FFAddonSDK.ActionButtonState): ?): void} */
FFAddonSDK.ActionButton.prototype.once;
 /** @type {function(string, !Function): void} */
FFAddonSDK.ActionButton.prototype.removeListener;
/**
 * @record
 * @struct
 */
FFAddonSDK.Tab = function() {};
 /** @type {string} */
FFAddonSDK.Tab.prototype.title;
 /** @type {string} */
FFAddonSDK.Tab.prototype.url;
 /** @type {string} */
FFAddonSDK.Tab.prototype.id;
 /** @type {string} */
FFAddonSDK.Tab.prototype.favicon;
 /** @type {string} */
FFAddonSDK.Tab.prototype.contentType;
 /** @type {number} */
FFAddonSDK.Tab.prototype.index;
 /** @type {boolean} */
FFAddonSDK.Tab.prototype.isPinned;
 /** @type {!FFAddonSDK.BrowserWindow} */
FFAddonSDK.Tab.prototype.window;
 /** @type {string} */
FFAddonSDK.Tab.prototype.readyState;
 /** @type {function(string, function(!FFAddonSDK.Tab): ?): void} */
FFAddonSDK.Tab.prototype.on;
 /** @type {function({contentScript: (string|!Array<string>), contentScriptFile: (string|!Array<string>), contentScriptOptions: !Object, onMessage: function(string): ?, onError: function(!Error): ?}): !FFAddonSDK.ContentWorker} */
FFAddonSDK.Tab.prototype.attach;
 /** @type {function(): void} */
FFAddonSDK.Tab.prototype.activate;
 /** @type {function(): void} */
FFAddonSDK.Tab.prototype.pin;
 /** @type {function(): void} */
FFAddonSDK.Tab.prototype.unpin;
 /** @type {function(function(): ?): void} */
FFAddonSDK.Tab.prototype.close;
 /** @type {function(): void} */
FFAddonSDK.Tab.prototype.reload;
 /** @type {function(): string} */
FFAddonSDK.Tab.prototype.getThumbnail;
/**
 * @record
 * @struct
 */
FFAddonSDK.Port = function() {};
 /** @type {function(string, ?): void} */
FFAddonSDK.Port.prototype.emit;
 /** @type {function(string, function(?): ?): void} */
FFAddonSDK.Port.prototype.on;
/**
 * @record
 * @struct
 */
FFAddonSDK.ContentWorker = function() {};

/* TODO: ConstructSignature: FFAddonSDK */
 /** @type {!URL} */
FFAddonSDK.ContentWorker.prototype.url;
 /** @type {!FFAddonSDK.Port} */
FFAddonSDK.ContentWorker.prototype.port;
 /** @type {!FFAddonSDK.Tab} */
FFAddonSDK.ContentWorker.prototype.tab;
 /** @type {function(string, function(): ?): void} */
FFAddonSDK.ContentWorker.prototype.on;
 /** @type {function(?): void} */
FFAddonSDK.ContentWorker.prototype.postMessage;
 /** @type {function(): void} */
FFAddonSDK.ContentWorker.prototype.destroy;
/**
 * @record
 * @struct
 */
FFAddonSDK.Widget = function() {};
/**
 * @record
 * @struct
 */
FFAddonSDK.NSIException = function() {};
 /** @type {number} */
FFAddonSDK.NSIException.prototype.lineNumber;
 /** @type {number} */
FFAddonSDK.NSIException.prototype.columnNumber;
 /** @type {?} */
FFAddonSDK.NSIException.prototype.data;
 /** @type {string} */
FFAddonSDK.NSIException.prototype.filename;
 /** @type {!FFAddonSDK.NSIException} */
FFAddonSDK.NSIException.prototype.inner;
 /** @type {?} */
FFAddonSDK.NSIException.prototype.location;
 /** @type {string} */
FFAddonSDK.NSIException.prototype.message;
 /** @type {string} */
FFAddonSDK.NSIException.prototype.name;
 /** @type {?} */
FFAddonSDK.NSIException.prototype.result;
 /** @type {function(): string} */
FFAddonSDK.NSIException.prototype.toString;
