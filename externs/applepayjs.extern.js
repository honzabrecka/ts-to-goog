/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/applepayjs/index.d.ts:

/**
 * @constructor
 * @struct
 * Creates a new instance of the ApplePaySession class.
 * @param {number} version - The version of the ApplePay JS API you are using.
 * @param {!ApplePayJS.ApplePayPaymentRequest} paymentRequest - An Apple​Pay​Payment​Request object that contains the information that is displayed on the Apple Pay payment sheet.
 */
function ApplePaySession(version, paymentRequest) {}
 /** @type {function(!ApplePayJS.Event): void} */
ApplePaySession.prototype.oncancel;
 /** @type {function(!ApplePayJS.ApplePayPaymentAuthorizedEvent): void} */
ApplePaySession.prototype.onpaymentauthorized;
 /** @type {function(!ApplePayJS.ApplePayPaymentMethodSelectedEvent): void} */
ApplePaySession.prototype.onpaymentmethodselected;
 /** @type {function(!ApplePayJS.ApplePayShippingContactSelectedEvent): void} */
ApplePaySession.prototype.onshippingcontactselected;
 /** @type {function(!ApplePayJS.ApplePayShippingMethodSelectedEvent): void} */
ApplePaySession.prototype.onshippingmethodselected;
 /** @type {function(!ApplePayJS.ApplePayValidateMerchantEvent): void} */
ApplePaySession.prototype.onvalidatemerchant;
 /** @type {number} */
ApplePaySession.STATUS_SUCCESS;
 /** @type {number} */
ApplePaySession.STATUS_FAILURE;
 /** @type {number} */
ApplePaySession.STATUS_INVALID_BILLING_POSTAL_ADDRESS;
 /** @type {number} */
ApplePaySession.STATUS_INVALID_SHIPPING_POSTAL_ADDRESS;
 /** @type {number} */
ApplePaySession.STATUS_INVALID_SHIPPING_CONTACT;
 /** @type {number} */
ApplePaySession.STATUS_PIN_INCORRECT;
 /** @type {number} */
ApplePaySession.STATUS_PIN_LOCKOUT;
 /** @type {number} */
ApplePaySession.STATUS_PIN_REQUIRED;

/**
 * Indicates whether or not the device supports Apple Pay.
 * @return {boolean} true if the device supports making payments with Apple Pay; otherwise, false.
 */
ApplePaySession.canMakePayments = function() {};

/**
 * Indicates whether or not the device supports Apple Pay and if the user has an active card in Wallet.
 * @param {string} merchantIdentifier - The merchant ID received when the merchant enrolled in Apple Pay.
 * @return {!Promise<boolean>} true if the device supports Apple Pay and there is at least one active card in Wallet; otherwise, false.
 */
ApplePaySession.canMakePaymentsWithActiveCard = function(merchantIdentifier) {};

/**
 * Displays the Set up Apple Pay button.
 * @param {string} merchantIdentifier - The merchant ID received when the merchant enrolled in Apple Pay.
 * @return {!Promise<boolean>} A boolean value indicating whether setup was successful.
 */
ApplePaySession.openPaymentSetup = function(merchantIdentifier) {};

/**
 * Verifies if a web browser supports a given Apple Pay JS API version.
 * @param {number} version - A number representing the Apple Pay JS API version being checked. The initial version is 1.
 * @return {boolean} A boolean value indicating whether the web browser supports the given API version. Returns false if the web browser does not support the specified version.
 */
ApplePaySession.supportsVersion = function(version) {};

/**
 * Aborts the current Apple Pay session.
 * @return {void}
 */
ApplePaySession.prototype.abort = function() {};

/**
 * Begins the merchant validation process.
 * @return {void}
 */
ApplePaySession.prototype.begin = function() {};

/**
 * Call after the merchant has been validated.
 * @param {?} merchantSession - An opaque message session object.
 * @return {void}
 */
ApplePaySession.prototype.completeMerchantValidation = function(merchantSession) {};

/**
 * Call when a payment has been authorized.
 * @param {number} status - The status of the payment.
 * @return {void}
 */
ApplePaySession.prototype.completePayment = function(status) {};

/**
 * Call after a payment method has been selected.
 * @param {!ApplePayJS.ApplePayLineItem} newTotal - An Apple​Pay​Line​Item dictionary representing the total price for the purchase.
 * @param {!Array<!ApplePayJS.ApplePayLineItem>} newLineItems - A sequence of Apple​Pay​Line​Item dictionaries.
 * @return {void}
 */
ApplePaySession.prototype.completePaymentMethodSelection = function(newTotal, newLineItems) {};

/**
 * Call after a shipping contact has been selected.
 * @param {number} status - The status of the shipping contact update.
 * @param {!Array<!ApplePayJS.ApplePayShippingMethod>} newShippingMethods - A sequence of ApplePayShippingMethod dictionaries.
 * @param {!ApplePayJS.ApplePayLineItem} newTotal - An Apple​Pay​Line​Item dictionary representing the total price for the purchase.
 * @param {!Array<!ApplePayJS.ApplePayLineItem>} newLineItems - A sequence of Apple​Pay​Line​Item dictionaries.
 * @return {void}
 */
ApplePaySession.prototype.completeShippingContactSelection = function(status, newShippingMethods, newTotal, newLineItems) {};

/**
 * Call after the shipping method has been selected.
 * @param {number} status - The status of the shipping method update.
 * @param {!ApplePayJS.ApplePayLineItem} newTotal - An Apple​Pay​Line​Item dictionary representing the total price for the purchase.
 * @param {!Array<!ApplePayJS.ApplePayLineItem>} newLineItems - A sequence of Apple​Pay​Line​Item dictionaries.
 * @return {void}
 */
ApplePaySession.prototype.completeShippingMethodSelection = function(status, newTotal, newLineItems) {};
/** @const */
var ApplePayJS = {};
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayLineItem = function() {};
 /** @type {string} */
ApplePayJS.ApplePayLineItem.prototype.label;
 /** @type {string} */
ApplePayJS.ApplePayLineItem.prototype.amount;
 /** @type {string} */
ApplePayJS.ApplePayLineItem.prototype.type;
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayPayment = function() {};
 /** @type {!ApplePayJS.ApplePayPaymentToken} */
ApplePayJS.ApplePayPayment.prototype.token;
 /** @type {!ApplePayJS.ApplePayPaymentContact} */
ApplePayJS.ApplePayPayment.prototype.billingContact;
 /** @type {!ApplePayJS.ApplePayPaymentContact} */
ApplePayJS.ApplePayPayment.prototype.shippingContact;
/**
 * @extends {ApplePayJS.Event}
 * @constructor
 * @struct
 */
ApplePayJS.ApplePayPaymentAuthorizedEvent = function() {};
 /** @type {!ApplePayJS.ApplePayPayment} */
ApplePayJS.ApplePayPaymentAuthorizedEvent.prototype.payment;
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayPaymentContact = function() {};
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.emailAddress;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.familyName;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.givenName;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.phoneNumber;
 /** @type {!Array<string>} */
ApplePayJS.ApplePayPaymentContact.prototype.addressLines;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.locality;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.administrativeArea;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.postalCode;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.country;
 /** @type {string} */
ApplePayJS.ApplePayPaymentContact.prototype.countryCode;
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayPaymentMethod = function() {};
 /** @type {string} */
ApplePayJS.ApplePayPaymentMethod.prototype.displayName;
 /** @type {string} */
ApplePayJS.ApplePayPaymentMethod.prototype.network;
 /** @type {string} */
ApplePayJS.ApplePayPaymentMethod.prototype.type;
 /** @type {!ApplePayJS.ApplePayPaymentPass} */
ApplePayJS.ApplePayPaymentMethod.prototype.paymentPass;
/**
 * @extends {ApplePayJS.Event}
 * @constructor
 * @struct
 */
ApplePayJS.ApplePayPaymentMethodSelectedEvent = function() {};
 /** @type {!ApplePayJS.ApplePayPaymentMethod} */
ApplePayJS.ApplePayPaymentMethodSelectedEvent.prototype.paymentMethod;
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayPaymentPass = function() {};
 /** @type {string} */
ApplePayJS.ApplePayPaymentPass.prototype.primaryAccountIdentifier;
 /** @type {string} */
ApplePayJS.ApplePayPaymentPass.prototype.primaryAccountNumberSuffix;
 /** @type {string} */
ApplePayJS.ApplePayPaymentPass.prototype.deviceAccountIdentifier;
 /** @type {string} */
ApplePayJS.ApplePayPaymentPass.prototype.deviceAccountNumberSuffix;
 /** @type {string} */
ApplePayJS.ApplePayPaymentPass.prototype.activationState;
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayPaymentRequest = function() {};
 /** @type {string} */
ApplePayJS.ApplePayPaymentRequest.prototype.countryCode;
 /** @type {string} */
ApplePayJS.ApplePayPaymentRequest.prototype.currencyCode;
 /** @type {!Array<!ApplePayJS.ApplePayLineItem>} */
ApplePayJS.ApplePayPaymentRequest.prototype.lineItems;
 /** @type {!Array<string>} */
ApplePayJS.ApplePayPaymentRequest.prototype.merchantCapabilities;
 /** @type {!Array<string>} */
ApplePayJS.ApplePayPaymentRequest.prototype.supportedNetworks;
 /** @type {!ApplePayJS.ApplePayLineItem} */
ApplePayJS.ApplePayPaymentRequest.prototype.total;
 /** @type {!ApplePayJS.ApplePayPaymentContact} */
ApplePayJS.ApplePayPaymentRequest.prototype.billingContact;
 /** @type {!Array<string>} */
ApplePayJS.ApplePayPaymentRequest.prototype.requiredBillingContactFields;
 /** @type {!Array<string>} */
ApplePayJS.ApplePayPaymentRequest.prototype.requiredShippingContactFields;
 /** @type {!ApplePayJS.ApplePayPaymentContact} */
ApplePayJS.ApplePayPaymentRequest.prototype.shippingContact;
 /** @type {!Array<!ApplePayJS.ApplePayShippingMethod>} */
ApplePayJS.ApplePayPaymentRequest.prototype.shippingMethods;
 /** @type {string} */
ApplePayJS.ApplePayPaymentRequest.prototype.shippingType;
 /** @type {string} */
ApplePayJS.ApplePayPaymentRequest.prototype.applicationData;
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayPaymentToken = function() {};
 /** @type {?} */
ApplePayJS.ApplePayPaymentToken.prototype.paymentData;
 /** @type {!ApplePayJS.ApplePayPaymentMethod} */
ApplePayJS.ApplePayPaymentToken.prototype.paymentMethod;
 /** @type {string} */
ApplePayJS.ApplePayPaymentToken.prototype.transactionIdentifier;
/**
 * @extends {ApplePayJS.Event}
 * @constructor
 * @struct
 */
ApplePayJS.ApplePayShippingContactSelectedEvent = function() {};
 /** @type {!ApplePayJS.ApplePayPaymentContact} */
ApplePayJS.ApplePayShippingContactSelectedEvent.prototype.shippingContact;
/**
 * @record
 * @struct
 */
ApplePayJS.ApplePayShippingMethod = function() {};
 /** @type {string} */
ApplePayJS.ApplePayShippingMethod.prototype.label;
 /** @type {string} */
ApplePayJS.ApplePayShippingMethod.prototype.detail;
 /** @type {string} */
ApplePayJS.ApplePayShippingMethod.prototype.amount;
 /** @type {string} */
ApplePayJS.ApplePayShippingMethod.prototype.identifier;
/**
 * @extends {ApplePayJS.Event}
 * @constructor
 * @struct
 */
ApplePayJS.ApplePayShippingMethodSelectedEvent = function() {};
 /** @type {!ApplePayJS.ApplePayShippingMethod} */
ApplePayJS.ApplePayShippingMethodSelectedEvent.prototype.shippingMethod;
/**
 * @extends {ApplePayJS.Event}
 * @constructor
 * @struct
 */
ApplePayJS.ApplePayValidateMerchantEvent = function() {};
 /** @type {string} */
ApplePayJS.ApplePayValidateMerchantEvent.prototype.validationURL;
/**
 * @constructor
 * @struct
 */
ApplePayJS.Event = function() {};
 /** @type {boolean} */
ApplePayJS.Event.prototype.bubbles;
 /** @type {boolean} */
ApplePayJS.Event.prototype.cancelBubble;
 /** @type {boolean} */
ApplePayJS.Event.prototype.cancelable;
 /** @type {boolean} */
ApplePayJS.Event.prototype.composed;
 /** @type {!EventTarget} */
ApplePayJS.Event.prototype.currentTarget;
 /** @type {boolean} */
ApplePayJS.Event.prototype.defaultPrevented;
 /** @type {number} */
ApplePayJS.Event.prototype.eventPhase;
 /** @type {boolean} */
ApplePayJS.Event.prototype.isTrusted;
 /** @type {boolean} */
ApplePayJS.Event.prototype.returnValue;
 /** @type {!EventTarget} */
ApplePayJS.Event.prototype.srcElement;
 /** @type {!EventTarget} */
ApplePayJS.Event.prototype.target;
 /** @type {string} */
ApplePayJS.Event.prototype.timeStamp;
 /** @type {string} */
ApplePayJS.Event.prototype.type;
 /** @type {number} */
ApplePayJS.Event.AT_TARGET;
 /** @type {number} */
ApplePayJS.Event.BLUR;
 /** @type {number} */
ApplePayJS.Event.BUBBLING_PHASE;
 /** @type {number} */
ApplePayJS.Event.CAPTURING_PHASE;
 /** @type {number} */
ApplePayJS.Event.CHANGE;
 /** @type {number} */
ApplePayJS.Event.CLICK;
 /** @type {number} */
ApplePayJS.Event.DBLCLICK;
 /** @type {number} */
ApplePayJS.Event.DRAGDROP;
 /** @type {number} */
ApplePayJS.Event.FOCUS;
 /** @type {number} */
ApplePayJS.Event.KEYDOWN;
 /** @type {number} */
ApplePayJS.Event.KEYPRESS;
 /** @type {number} */
ApplePayJS.Event.KEYUP;
 /** @type {number} */
ApplePayJS.Event.MOUSEDOWN;
 /** @type {number} */
ApplePayJS.Event.MOUSEDRAG;
 /** @type {number} */
ApplePayJS.Event.MOUSEMOVE;
 /** @type {number} */
ApplePayJS.Event.MOUSEOUT;
 /** @type {number} */
ApplePayJS.Event.MOUSEOVER;
 /** @type {number} */
ApplePayJS.Event.MOUSEUP;
 /** @type {number} */
ApplePayJS.Event.NONE;
 /** @type {number} */
ApplePayJS.Event.SELECT;

/**
 * @return {!Array<!Node>}
 */
ApplePayJS.Event.prototype.composedPath = function() {};

/**
 * @param {string=} type
 * @param {boolean=} bubbles
 * @param {boolean=} cancelable
 * @return {void}
 */
ApplePayJS.Event.prototype.initEvent = function(type, bubbles, cancelable) {};

/**
 * @return {void}
 */
ApplePayJS.Event.prototype.preventDefault = function() {};

/**
 * @return {void}
 */
ApplePayJS.Event.prototype.stopImmediatePropagation = function() {};

/**
 * @return {void}
 */
ApplePayJS.Event.prototype.stopPropagation = function() {};
