/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/json-pointer/index.d.ts:

/**
 * @param {!Object} object
 * @return {!JSON_Pointer.JSON_PointerWrap}
 */
function JSON_Pointer(object) {}

/**
 *  Looks up a JSON pointer in an object.
 * @param {!Object} object
 * @param {string} pointer
 * @return {?}
 */
JSON_Pointer.get = function(object, pointer) {};

/**
 *  Set a value for a JSON pointer on object.
 * @param {!Object} object
 * @param {string} pointer
 * @param {?} value
 * @return {void}
 */
JSON_Pointer.set = function(object, pointer, value) {};

/**
 *  Removes an attribute of object referenced by pointer
 * @param {!Object} object
 * @param {string} pointer
 * @return {void}
 */
JSON_Pointer.remove = function(object, pointer) {};

/**
 *  Creates a dictionary object (pointer -> value).
 * @param {!Object} object
 * @return {!Object}
 */
JSON_Pointer.dict = function(object) {};

/**
 *  Just like: each(pointer.dict(obj), iterator);
 * @param {!Object} object
 * @param {function(?, string): void} iterator
 * @return {void}
 */
JSON_Pointer.walk = function(object, iterator) {};

/**
 *  Tests if an object has a value for a JSON pointer.
 * @param {!Object} object
 * @param {string} pointer
 * @return {boolean}
 */
JSON_Pointer.has = function(object, pointer) {};

/**
 *  Escapes a reference token.
 * @param {string} str
 * @return {string}
 */
JSON_Pointer.escape = function(str) {};

/**
 *  Unescape a reference token.
 * @param {string} str
 * @return {string}
 */
JSON_Pointer.unescape = function(str) {};

/**
 *  Converts a JSON pointer into an array of reference tokens.
 * @param {string} str
 * @return {!Array<string>}
 */
JSON_Pointer.parse = function(str) {};

/**
 *  Builds a json pointer from an array of reference tokens.
 * @param {!Array<string>} str
 * @return {string}
 */
JSON_Pointer.compile = function(str) {};
/**
 * @record
 * @struct
 */
JSON_Pointer.JSON_PointerWrap = function() {};

/**
 *  Looks up a JSON pointer in an object.
 * @param {string} pointer
 * @return {?}
 */
JSON_Pointer.JSON_PointerWrap.prototype.get = function(pointer) {};

/**
 *  Set a value for a JSON pointer on object.
 * @param {string} pointer
 * @param {?} value
 * @return {void}
 */
JSON_Pointer.JSON_PointerWrap.prototype.set = function(pointer, value) {};

/**
 *  Removes an attribute of object referenced by pointer
 * @param {string} pointer
 * @return {void}
 */
JSON_Pointer.JSON_PointerWrap.prototype.remove = function(pointer) {};

/**
 *  Creates a dictionary object (pointer -> value).
 * @return {!Object}
 */
JSON_Pointer.JSON_PointerWrap.prototype.dict = function() {};

/**
 *  Just like: each(pointer.dict(obj), iterator);
 * @param {function(?, string): void} iterator
 * @return {void}
 */
JSON_Pointer.JSON_PointerWrap.prototype.walk = function(iterator) {};

/**
 *  Tests if an object has a value for a JSON pointer.
 * @param {string} pointer
 * @return {boolean}
 */
JSON_Pointer.JSON_PointerWrap.prototype.has = function(pointer) {};

/* TODO: ExportAssignment in  */
