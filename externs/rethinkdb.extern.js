/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rethinkdb/index.d.ts:

/* TODO: ImportDeclaration in  */
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "rethinkdb"
/** @const */
tsickle_declare_module.rethinkdb = {};

/**
 * Create a new connection to the database server.
 * 
 * See: https://rethinkdb.com/api/javascript/connect/
 * @param {!ConnectionOptions|string} opts_or_host
 * @param {function(!ReqlDriverError, !Connection): void=} cb
 * @return {void|!Promise<!Connection>}
 */
tsickle_declare_module.rethinkdb.connect = function(opts_or_host, cb) {};

/**
 * @param {string} name
 * @return {!Operation<!CreateResult>}
 */
tsickle_declare_module.rethinkdb.dbCreate = function(name) {};

/**
 * @param {string} name
 * @return {!Operation<!DropResult>}
 */
tsickle_declare_module.rethinkdb.dbDrop = function(name) {};

/**
 * @return {!Operation<!Array<string>>}
 */
tsickle_declare_module.rethinkdb.dbList = function() {};

/**
 * @param {string} name
 * @return {!Db}
 */
tsickle_declare_module.rethinkdb.db = function(name) {};

/**
 * @param {string} name
 * @param {{useOutdated: boolean}=} options
 * @return {!Table}
 */
tsickle_declare_module.rethinkdb.table = function(name, options) {};

/**
 * @param {string} property
 * @return {!Sort}
 */
tsickle_declare_module.rethinkdb.asc = function(property) {};

/**
 * @param {string} property
 * @return {!Sort}
 */
tsickle_declare_module.rethinkdb.desc = function(property) {};
 /** @type {!Aggregator} */
tsickle_declare_module.rethinkdb.count;

/**
 * @param {string} prop
 * @return {!Aggregator}
 */
tsickle_declare_module.rethinkdb.sum = function(prop) {};

/**
 * @param {string} prop
 * @return {!Aggregator}
 */
tsickle_declare_module.rethinkdb.avg = function(prop) {};
 /** @type {!Row} */
tsickle_declare_module.rethinkdb.row;

/**
 * @param {?} stuff
 * @return {!Expression<?>}
 */
tsickle_declare_module.rethinkdb.expr = function(stuff) {};

/**
 * @return {!Expression<!Time>}
 */
tsickle_declare_module.rethinkdb.now = function() {};

/**
 * @param {!Expression<boolean>} test
 * @param {!Expression<?>} trueBranch
 * @param {!Expression<?>} falseBranch
 * @return {!Expression<?>}
 */
tsickle_declare_module.rethinkdb.branch = function(test, trueBranch, falseBranch) {};

/**
 * Create a javascript expression.
 * 
 * @param {string} jsString
 * @param {{timeout: number}=} opts
 * @return {!Operation<?>}
 */
tsickle_declare_module.rethinkdb.js = function(jsString, opts) {};

/**
 * Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to uuid as an argument, the UUID will be deterministic, derived from the string’s SHA-1 hash.
 * 
 * RethinkDB’s UUIDs are standards-compliant. Without the optional argument, a version 4 random UUID will be generated; with that argument, a version 5 UUID will be generated, using a fixed namespace UUID of 91461c99-f89d-49d2-af96-d8e2e14e9b58.
 * @param {string=} input
 * @return {!Operation<string>}
 */
tsickle_declare_module.rethinkdb.uuid = function(input) {};
/**
 * @constructor
 * @struct
 */
tsickle_declare_module.rethinkdb.Cursor = function() {};

/**
 * @return {boolean}
 */
tsickle_declare_module.rethinkdb.Cursor.prototype.hasNext = function() {};

/**
 * @template T
 * @param {function(!Error, ?): void|function(!Error, T): void|function(!Error, ?): boolean|function(!Error, T): boolean} cb
 * @param {function(): void=} done
 * @return {void}
 */
tsickle_declare_module.rethinkdb.Cursor.prototype.each = function(cb, done) {};

/**
 * @template T
 * @param {function(!Error, ?): void|function(!Error, T): void} cb
 * @return {void}
 */
tsickle_declare_module.rethinkdb.Cursor.prototype.next = function(cb) {};

/**
 * @template T
 * @param {function(!Error, !Array<?>): void|function(!Error, !Array<T>): void=} cb
 * @return {void|!Promise<!Array<?>>|!Promise<!Array<T>>}
 */
tsickle_declare_module.rethinkdb.Cursor.prototype.toArray = function(cb) {};

/**
 * @param {function(!Error): void=} cb
 * @return {void|!Promise<void>}
 */
tsickle_declare_module.rethinkdb.Cursor.prototype.close = function(cb) {};
/**
 * @extends {Expression}
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Row = function() {};

/* TODO: CallSignature: tsickle_declare_module.rethinkdb */
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.ConnectionOptions = function() {};
 /** @type {string} */
tsickle_declare_module.rethinkdb.ConnectionOptions.prototype.host;
 /** @type {number} */
tsickle_declare_module.rethinkdb.ConnectionOptions.prototype.port;
 /** @type {string} */
tsickle_declare_module.rethinkdb.ConnectionOptions.prototype.db;
 /** @type {string} */
tsickle_declare_module.rethinkdb.ConnectionOptions.prototype.user;
 /** @type {string} */
tsickle_declare_module.rethinkdb.ConnectionOptions.prototype.password;
 /** @type {number} */
tsickle_declare_module.rethinkdb.ConnectionOptions.prototype.timeout;
 /** @type {!ConnectionOptions} */
tsickle_declare_module.rethinkdb.ConnectionOptions.prototype.ssl;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.NoReplyWait = function() {};
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.NoReplyWait.prototype.noreplyWait;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Connection = function() {};
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.Connection.prototype.open;

/**
 * @param {function(!Error): void|!NoReplyWait=} cb_or_opts
 * @param {function(!Error): void=} cb
 * @return {void|!Promise<void>}
 */
tsickle_declare_module.rethinkdb.Connection.prototype.close = function(cb_or_opts, cb) {};

/**
 * @param {function(!Error, !Connection): void|!NoReplyWait=} cb_or_opts
 * @param {function(!Error, !Connection): void=} cb
 * @return {void|!Promise<!Connection>}
 */
tsickle_declare_module.rethinkdb.Connection.prototype.reconnect = function(cb_or_opts, cb) {};

/**
 * @param {string} dbName
 * @return {void}
 */
tsickle_declare_module.rethinkdb.Connection.prototype.use = function(dbName) {};

/**
 * @param {string} event
 * @param {!Function} cb
 * @return {void}
 */
tsickle_declare_module.rethinkdb.Connection.prototype.addListener = function(event, cb) {};

/**
 * @param {string} event
 * @param {!Function} cb
 * @return {void}
 */
tsickle_declare_module.rethinkdb.Connection.prototype.on = function(event, cb) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Db = function() {};

/**
 * @param {string} name
 * @param {!TableOptions=} options
 * @return {!Operation<!CreateResult>}
 */
tsickle_declare_module.rethinkdb.Db.prototype.tableCreate = function(name, options) {};

/**
 * @param {string} name
 * @return {!Operation<!DropResult>}
 */
tsickle_declare_module.rethinkdb.Db.prototype.tableDrop = function(name) {};

/**
 * @return {!Operation<!Array<string>>}
 */
tsickle_declare_module.rethinkdb.Db.prototype.tableList = function() {};

/**
 * @param {string} name
 * @param {!GetTableOptions=} options
 * @return {!Table}
 */
tsickle_declare_module.rethinkdb.Db.prototype.table = function(name, options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.TableOptions = function() {};
 /** @type {string} */
tsickle_declare_module.rethinkdb.TableOptions.prototype.primary_key;
 /** @type {string} */
tsickle_declare_module.rethinkdb.TableOptions.prototype.durability;
 /** @type {number} */
tsickle_declare_module.rethinkdb.TableOptions.prototype.cache_size;
 /** @type {string} */
tsickle_declare_module.rethinkdb.TableOptions.prototype.datacenter;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.GetTableOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.GetTableOptions.prototype.useOutdated;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Writeable = function() {};

/**
 * @param {!Object} obj
 * @param {!UpdateOptions=} options
 * @return {!Operation<!WriteResult>}
 */
tsickle_declare_module.rethinkdb.Writeable.prototype.update = function(obj, options) {};

/**
 * @param {!Object|!ExpressionFunction<?>} obj_or_expr
 * @param {!UpdateOptions=} options
 * @return {!Operation<!WriteResult>}
 */
tsickle_declare_module.rethinkdb.Writeable.prototype.replace = function(obj_or_expr, options) {};

/**
 * @param {!UpdateOptions=} options
 * @return {!Operation<!WriteResult>}
 */
tsickle_declare_module.rethinkdb.Writeable.prototype.delete = function(options) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.ChangesOptions = function() {};
 /** @type {(number|boolean)} */
tsickle_declare_module.rethinkdb.ChangesOptions.prototype.squash;
 /** @type {number} */
tsickle_declare_module.rethinkdb.ChangesOptions.prototype.changefeedQueueSize;
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.ChangesOptions.prototype.includeInitial;
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.ChangesOptions.prototype.includeStates;
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.ChangesOptions.prototype.includeOffsets;
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.ChangesOptions.prototype.includeTypes;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.HasFields = function() {};

/**
 * Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value.
 * 
 * `hasFields` lets you test for nested fields in objects. If the value of a field is itself a set of key/value pairs, you can test for the presence of specific keys.
 * 
 * See: https://rethinkdb.com/api/javascript/has_fields/
 * Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object `{'a': 1,'b': 2,'c': null}` has the fields `a` and `b`.
 * 
 * When applied to a single object, `hasFields` returns `true` if the object has the fields and `false` if it does not. When applied to a sequence, it will return a new sequence (an array or stream) containing the elements that have the specified fields.
 * 
 * See: https://rethinkdb.com/api/javascript/has_fields/
 * @param {...!BooleanMap|string} selector_or_fields
 * @return {T}
 */
tsickle_declare_module.rethinkdb.HasFields.prototype.hasFields = function(selector_or_fields) {};
/**
 * @extends {Sequence}
 * @extends {HasFields}
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Table = function() {};

/**
 * @param {string} name
 * @param {!ExpressionFunction<?>=} index
 * @return {!Operation<!CreateResult>}
 */
tsickle_declare_module.rethinkdb.Table.prototype.indexCreate = function(name, index) {};

/**
 * @param {string} name
 * @return {!Operation<!DropResult>}
 */
tsickle_declare_module.rethinkdb.Table.prototype.indexDrop = function(name) {};

/**
 * @return {!Operation<!Array<string>>}
 */
tsickle_declare_module.rethinkdb.Table.prototype.indexList = function() {};

/**
 * @param {!Array<?>|?} obj
 * @param {!InsertOptions=} options
 * @return {!Operation<!WriteResult>}
 */
tsickle_declare_module.rethinkdb.Table.prototype.insert = function(obj, options) {};

/**
 * @param {string} key
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Table.prototype.get = function(key) {};

/**
 * @param {...string} key_or_keys
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Table.prototype.getAll = function(key_or_keys) {};
/**
 * @extends {Operation}
 * @extends {Writeable}
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Sequence = function() {};

/**
 * @param {?} lower
 * @param {?} upper
 * @param {!Index=} index
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.between = function(lower, upper, index) {};

/**
 * @param {!ExpressionFunction<boolean>|!Expression<boolean>|!Object<string,?>} rql_or_obj
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.filter = function(rql_or_obj) {};

/**
 * Turn a query into a changefeed, an infinite stream of objects representing
 * changes to the query’s results as they occur. A changefeed may return changes
 * to a table or an individual document (a “point” changefeed). Commands such as
 * filter or `map` may be used before the changes command to transform or filter
 * the output, and many commands that operate on sequences can be chained after
 * `changes`.
 * 
 * See: https://rethinkdb.com/api/javascript/changes/
 * @param {!ChangesOptions=} opts
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.changes = function(opts) {};

/**
 * @param {!Sequence} sequence
 * @param {!JoinFunction<boolean>} join
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.innerJoin = function(sequence, join) {};

/**
 * @param {!Sequence} sequence
 * @param {!JoinFunction<boolean>} join
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.outerJoin = function(sequence, join) {};

/**
 * @param {string|!ExpressionFunction<?>} leftAttribute
 * @param {!Sequence} rightSequence
 * @param {!Index=} index
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.eqJoin = function(leftAttribute, rightSequence, index) {};

/**
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.zip = function() {};

/**
 * @param {!ExpressionFunction<?>} transform
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.map = function(transform) {};

/**
 * @param {...?} selectors
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.withFields = function(selectors) {};

/**
 * @param {!ExpressionFunction<?>} transform
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.concatMap = function(transform) {};

/**
 * @param {...string|!Sort} keys_or_sorts
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.orderBy = function(keys_or_sorts) {};

/**
 * @param {number} n
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.skip = function(n) {};

/**
 * @param {number} n
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.limit = function(n) {};

/**
 * @param {number} start
 * @param {number=} end
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.slice = function(start, end) {};

/**
 * @param {number} n
 * @return {!Expression<?>}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.nth = function(n) {};

/**
 * @param {?} obj
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.indexesOf = function(obj) {};

/**
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.isEmpty = function() {};

/**
 * @param {!Sequence} sequence
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.union = function(sequence) {};

/**
 * @param {number} n
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.sample = function(n) {};

/**
 * @param {!ReduceFunction<?>} r
 * @param {?=} base
 * @return {!Expression<?>}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.reduce = function(r, base) {};

/**
 * @return {!Expression<number>}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.count = function() {};

/**
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.distinct = function() {};

/**
 * @param {!ExpressionFunction<?>} group
 * @param {!ExpressionFunction<?>} map
 * @param {!ReduceFunction<?>} reduce
 * @param {?=} base
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.groupedMapReduce = function(group, map, reduce, base) {};

/**
 * @param {...!Aggregator} aggregators
 * @return {!Expression<!Object>}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.groupBy = function(aggregators) {};

/**
 * @param {string} prop
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.contains = function(prop) {};

/**
 * @param {...string} props
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.pluck = function(props) {};

/**
 * @param {...string} props
 * @return {!Sequence}
 */
tsickle_declare_module.rethinkdb.Sequence.prototype.without = function(props) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.ExpressionFunction = function() {};

/* TODO: CallSignature: tsickle_declare_module.rethinkdb */
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.JoinFunction = function() {};

/* TODO: CallSignature: tsickle_declare_module.rethinkdb */
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.ReduceFunction = function() {};

/* TODO: CallSignature: tsickle_declare_module.rethinkdb */
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.InsertOptions = function() {};
 /** @type {(string|function(string, ?, ?): ?)} */
tsickle_declare_module.rethinkdb.InsertOptions.prototype.conflict;
 /** @type {string} */
tsickle_declare_module.rethinkdb.InsertOptions.prototype.durability;
 /** @type {(boolean|string)} */
tsickle_declare_module.rethinkdb.InsertOptions.prototype.returnChanges;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.UpdateOptions = function() {};
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.UpdateOptions.prototype.nonAtomic;
 /** @type {string} */
tsickle_declare_module.rethinkdb.UpdateOptions.prototype.durability;
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.UpdateOptions.prototype.returnChanges;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.WriteResult = function() {};
 /** @type {number} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.inserted;
 /** @type {number} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.replaced;
 /** @type {number} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.unchanged;
 /** @type {number} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.errors;
 /** @type {number} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.deleted;
 /** @type {number} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.skipped;
 /** @type {!Error} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.first_error;
 /** @type {!Array<string>} */
tsickle_declare_module.rethinkdb.WriteResult.prototype.generated_keys;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.JoinResult = function() {};
 /** @type {?} */
tsickle_declare_module.rethinkdb.JoinResult.prototype.left;
 /** @type {?} */
tsickle_declare_module.rethinkdb.JoinResult.prototype.right;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.CreateResult = function() {};
 /** @type {number} */
tsickle_declare_module.rethinkdb.CreateResult.prototype.created;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.DropResult = function() {};
 /** @type {number} */
tsickle_declare_module.rethinkdb.DropResult.prototype.dropped;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Index = function() {};
 /** @type {string} */
tsickle_declare_module.rethinkdb.Index.prototype.index;
 /** @type {string} */
tsickle_declare_module.rethinkdb.Index.prototype.left_bound;
 /** @type {string} */
tsickle_declare_module.rethinkdb.Index.prototype.right_bound;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.BooleanMap = function() {};

/* TODO: IndexSignature: tsickle_declare_module.rethinkdb */
/**
 * @extends {Writeable}
 * @extends {Operation}
 * @extends {HasFields}
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Expression = function() {};

/* TODO: CallSignature: tsickle_declare_module.rethinkdb */

/**
 * @param {!Expression<!Object>} query
 * @return {!Expression<!Object>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.merge = function(query) {};

/**
 * @param {string} prop
 * @return {!Expression<!Object>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.append = function(prop) {};

/**
 * @param {string} prop
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.contains = function(prop) {};

/**
 * @param {(boolean|!Expression<boolean>)} b
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.and = function(b) {};

/**
 * @param {(boolean|!Expression<boolean>)} b
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.or = function(b) {};

/**
 * @param {?} v
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.eq = function(v) {};

/**
 * @param {?} v
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.ne = function(v) {};

/**
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.not = function() {};

/**
 * @param {T} value
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.gt = function(value) {};

/**
 * @param {T} value
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.ge = function(value) {};

/**
 * @param {T} value
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.lt = function(value) {};

/**
 * @param {T} value
 * @return {!Expression<boolean>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.le = function(value) {};

/**
 * @param {number} n
 * @return {!Expression<number>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.add = function(n) {};

/**
 * Subtract two numbers.
 * 
 * See: https://rethinkdb.com/api/javascript/sub/
 * 
 * Example:
 * 
 *     r.expr(2).sub(2).run(conn, callback)
 * Retrieve how many seconds elapsed between today and `date`.
 * 
 * See: https://rethinkdb.com/api/javascript/sub/
 * 
 * Example:
 * 
 *     r.now().sub(365 * 24 * 60 * 60)
 * @param {number|!Time} n_or_date
 * @param {...number} numbers
 * @return {!Expression<number>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.sub = function(n_or_date, numbers) {};

/**
 * @param {number} n
 * @return {!Expression<number>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.mul = function(n) {};

/**
 * @param {number} n
 * @return {!Expression<number>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.div = function(n) {};

/**
 * @param {number} n
 * @return {!Expression<number>}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.mod = function(n) {};

/**
 * @param {T} value
 * @return {!Expression}
 */
tsickle_declare_module.rethinkdb.Expression.prototype.default = function(value) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.OperationOptions = function() {};
 /** @type {string} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.readMode;
 /** @type {string} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.timeFormat;
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.profile;
 /** @type {string} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.durability;
 /** @type {string} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.groupFormat;
 /** @type {boolean} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.noreply;
 /** @type {string} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.db;
 /** @type {number} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.arrayLimit;
 /** @type {string} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.binaryFormat;
 /** @type {number} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.minBatchRows;
 /** @type {number} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.maxBatchRows;
 /** @type {number} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.maxBatchBytes;
 /** @type {number} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.maxBatchSeconds;
 /** @type {number} */
tsickle_declare_module.rethinkdb.OperationOptions.prototype.firstBatchScaledownFactor;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Operation = function() {};

/**
 * Run a query on a connection. The callback will get either an error, a single JSON result, or a cursor, depending on the query.
 * 
 * See: https://rethinkdb.com/api/javascript/run/
 * @param {!Connection} conn
 * @param {!OperationOptions|function(!Error, T): void=} opts_or_cb
 * @param {function(!Error, T): void=} cb
 * @return {void|!Promise<T>}
 */
tsickle_declare_module.rethinkdb.Operation.prototype.run = function(conn, opts_or_cb, cb) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Aggregator = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Sort = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.ReqlType = function() {};
 /** @type {string} */
tsickle_declare_module.rethinkdb.ReqlType.prototype.$reql_type$;
/**
 * @extends {ReqlType}
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Time = function() {};
 /** @type {string} */
tsickle_declare_module.rethinkdb.Time.prototype.$reql_type$;
 /** @type {number} */
tsickle_declare_module.rethinkdb.Time.prototype.epoch_time;
 /** @type {string} */
tsickle_declare_module.rethinkdb.Time.prototype.timezone;
/**
 * @extends {ReqlType}
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.Binary = function() {};
 /** @type {string} */
tsickle_declare_module.rethinkdb.Binary.prototype.$reql_type$;
 /** @type {string} */
tsickle_declare_module.rethinkdb.Binary.prototype.data;
/**
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.ReqlError = function() {};
/**
 * @extends {ReqlError}
 * @record
 * @struct
 */
tsickle_declare_module.rethinkdb.ReqlDriverError = function() {};
