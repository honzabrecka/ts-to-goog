/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/microgears/index.d.ts:
/** @const */
var microgears = {};
/**
 * @record
 * @struct
 */
microgears.Service = function() {};
 /** @type {string} */
microgears.Service.prototype.name;
 /** @type {boolean} */
microgears.Service.prototype.async;
 /** @type {string} */
microgears.Service.prototype.pathname;
 /** @type {string} */
microgears.Service.prototype.namespace;
/**
 * @record
 * @struct
 */
microgears.MetaInformation = function() {};
 /** @type {string} */
microgears.MetaInformation.prototype.serviceName;
 /** @type {string} */
microgears.MetaInformation.prototype.methodName;
 /** @type {string} */
microgears.MetaInformation.prototype.serviceNameSpace;
 /** @type {?} */
microgears.MetaInformation.prototype.extra;
/**
 * @record
 * @struct
 */
microgears.Plugin = function() {};
 /** @type {string} */
microgears.Plugin.prototype.name;

/**
 * @param {!Array<?>} args
 * @param {!microgears.MetaInformation} metaInfo
 * @return {!Array<?>}
 */
microgears.Plugin.prototype.beforeChain = function(args, metaInfo) {};

/**
 * @template T
 * @param {T} result
 * @param {!microgears.MetaInformation} metaInfo
 * @return {T}
 */
microgears.Plugin.prototype.afterChain = function(result, metaInfo) {};

/**
 * @param {!microgears.Service} service
 * @return {!microgears.Service}
 */
microgears.addService = function(service) {};

/**
 * @param {!microgears.Plugin} plugin
 * @return {void}
 */
microgears.addPlugin = function(plugin) {};

/* TODO: ExportAssignment in  */
