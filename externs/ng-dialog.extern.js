/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/ng-dialog/index.d.ts:

/* TODO: ImportDeclaration in  */

/** @typedef {!dialog.IDialogService} */
var IDialogService;

/** @typedef {!dialog.IDialogOpenResult} */
var IDialogOpenResult;

/** @typedef {!dialog.IDialogClosePromise} */
var IDialogClosePromise;

/** @typedef {!dialog.IDialogProvider} */
var IDialogProvider;

/** @typedef {!dialog.IDialogScope} */
var IDialogScope;

/** @typedef {!dialog.IDialogConfirmScope} */
var IDialogConfirmScope;

/** @typedef {!dialog.IDialogOptions} */
var IDialogOptions;

/** @typedef {!dialog.IDialogOpenOptions} */
var IDialogOpenOptions;

/** @typedef {!dialog.IDialogOpenConfirmOptions} */
var IDialogOpenConfirmOptions;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "angular"
/** @const */
tsickle_declare_module.angular.dialog = {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogService = function() {};

/**
 * @return {!dialog.IDialogOptions}
 */
tsickle_declare_module.angular.dialog.IDialogService.prototype.getDefaults = function() {};

/**
 * @param {!dialog.IDialogOpenOptions} options
 * @return {!dialog.IDialogOpenResult}
 */
tsickle_declare_module.angular.dialog.IDialogService.prototype.open = function(options) {};

/**
 * @param {!dialog.IDialogOpenConfirmOptions} options
 * @return {!angular.IPromise<?>}
 */
tsickle_declare_module.angular.dialog.IDialogService.prototype.openConfirm = function(options) {};

/**
 * Determine whether the specified dialog is open or not.
 * @param {string} id Dialog id to check for.
 * @return {boolean}
 */
tsickle_declare_module.angular.dialog.IDialogService.prototype.isOpen = function(id) {};

/**
 * @param {string} id
 * @param {?=} value
 * @return {void}
 */
tsickle_declare_module.angular.dialog.IDialogService.prototype.close = function(id, value) {};

/**
 * @param {?=} value
 * @return {void}
 */
tsickle_declare_module.angular.dialog.IDialogService.prototype.closeAll = function(value) {};

/**
 * @return {!Array<string>}
 */
tsickle_declare_module.angular.dialog.IDialogService.prototype.getOpenDialogs = function() {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogOpenResult = function() {};
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOpenResult.prototype.id;
 /** @type {function(?): void} */
tsickle_declare_module.angular.dialog.IDialogOpenResult.prototype.close;
 /** @type {!angular.IPromise<!dialog.IDialogClosePromise>} */
tsickle_declare_module.angular.dialog.IDialogOpenResult.prototype.closePromise;
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogClosePromise = function() {};
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogClosePromise.prototype.id;
 /** @type {?} */
tsickle_declare_module.angular.dialog.IDialogClosePromise.prototype.value;
/**
 * @extends {angular.IServiceProvider}
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogProvider = function() {};

/**
 * Default options for the dialogs.
 * @param {!dialog.IDialogOptions} defaultOptions
 * @return {void}
 */
tsickle_declare_module.angular.dialog.IDialogProvider.prototype.setDefaults = function(defaultOptions) {};

/**
 * Adds an additional listener on every $locationChangeSuccess event and gets update version of html into dialog.
 * May be useful in some rare cases when you're dependant on DOM changes, defaults to false.
 * @param {boolean} force
 * @return {void}
 */
tsickle_declare_module.angular.dialog.IDialogProvider.prototype.setForceHtmlReload = function(force) {};

/**
 * Adds additional listener on every $locationChangeSuccess event and gets updated version of body into dialog.
 * Maybe useful in some rare cases when you're dependant on DOM changes, defaults to false. Use it in module's
 * config as provider instance:
 * @param {boolean} force
 * @return {void}
 */
tsickle_declare_module.angular.dialog.IDialogProvider.prototype.setForceBodyReload = function(force) {};
/**
 * @extends {angular.IScope}
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogScope = function() {};
 /** @type {(string|!Object|!Array<?>)} */
tsickle_declare_module.angular.dialog.IDialogScope.prototype.ngDialogData;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogScope.prototype.ngDialogId;

/**
 * This allows you to close dialog straight from handler in a popup element.
 * @param {?=} value Any value passed to this function will be attached to the object which resolves on the close promise for this dialog.
 * For dialogs opened with the openConfirm() method the value is used as the reject reason.
 * @return {void}
 */
tsickle_declare_module.angular.dialog.IDialogScope.prototype.closeThisDialog = function(value) {};
/**
 * @extends {dialog.IDialogScope}
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogConfirmScope = function() {};

/**
 * Use this method to close the dialog and resolve the promise that was returned when opening the modal.
 * 
 * The function accepts a single optional parameter which is used as the value of the resolved promise.
 * @param {?=} value
 * @return {void}
 */
tsickle_declare_module.angular.dialog.IDialogConfirmScope.prototype.confirm = function(value) {};
/**
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogOptions = function() {};
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.className;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.appendClassName;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.disableAnimation;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.overlay;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.showClose;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.closeByEscape;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.closeByDocument;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.closeByNavigation;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.plain;
 /** @type {(string|number)} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.name;
 /** @type {(string|!Function)} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.preCloseCallback;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.cache;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.appendTo;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.trapFocus;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.preserveFocus;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.ariaAuto;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.ariaRole;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.ariaLabelledById;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.ariaLabelledBySelector;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.ariaDescribedById;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.ariaDescribedBySelector;
 /** @type {(string|number)} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.width;
 /** @type {(string|number)} */
tsickle_declare_module.angular.dialog.IDialogOptions.prototype.height;
/**
 * @extends {dialog.IDialogOptions}
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogOpenOptions = function() {};
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOpenOptions.prototype.template;
 /** @type {?} */
tsickle_declare_module.angular.dialog.IDialogOpenOptions.prototype.controller;
 /** @type {string} */
tsickle_declare_module.angular.dialog.IDialogOpenOptions.prototype.controllerAs;
 /** @type {boolean} */
tsickle_declare_module.angular.dialog.IDialogOpenOptions.prototype.bindToController;
 /** @type {!dialog.IDialogScope} */
tsickle_declare_module.angular.dialog.IDialogOpenOptions.prototype.scope;
 /** @type {!Object<string,(string|!Function)>} */
tsickle_declare_module.angular.dialog.IDialogOpenOptions.prototype.resolve;
 /** @type {(string|!Object|!Array<?>)} */
tsickle_declare_module.angular.dialog.IDialogOpenOptions.prototype.data;
/**
 * @extends {dialog.IDialogOpenOptions}
 * @record
 * @struct
 */
tsickle_declare_module.angular.dialog.IDialogOpenConfirmOptions = function() {};
 /** @type {!dialog.IDialogConfirmScope} */
tsickle_declare_module.angular.dialog.IDialogOpenConfirmOptions.prototype.scope;
