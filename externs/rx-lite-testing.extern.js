/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/rx-lite-testing/index.d.ts:
/**
 * @extends {Rx.VirtualTimeScheduler}
 * @record
 * @struct
 */
Rx.TestScheduler = function() {};

/**
 * @template T
 * @param {...!Rx.Recorded} records
 * @return {?<T>}
 */
Rx.TestScheduler.prototype.createColdObservable = function(records) {};

/**
 * @template T
 * @param {...!Rx.Recorded} records
 * @return {?<T>}
 */
Rx.TestScheduler.prototype.createHotObservable = function(records) {};

/**
 * @template T
 * @return {?<T>}
 */
Rx.TestScheduler.prototype.createObserver = function() {};

/**
 * @template T
 * @param {function(): ?<T>} create
 * @param {number} createdAt
 * @param {number} subscribedAt
 * @param {number} disposedAt
 * @return {?<T>}
 */
Rx.TestScheduler.prototype.startWithTiming = function(create, createdAt, subscribedAt, disposedAt) {};

/**
 * @template T
 * @param {function(): ?<T>} create
 * @param {number} disposedAt
 * @return {?<T>}
 */
Rx.TestScheduler.prototype.startWithDispose = function(create, disposedAt) {};

/**
 * @template T
 * @param {function(): ?<T>} create
 * @return {?<T>}
 */
Rx.TestScheduler.prototype.startWithCreate = function(create) {};
 /** @type {function(new: (?)): ?} */
Rx.TestScheduler;

/**
 * @constructor
 * @struct
 * @param {number} time
 * @param {?} value
 * @param {function(?, ?): boolean=} equalityComparer
 */
Rx.Recorded = function(time, value, equalityComparer) {};
 /** @type {number} */
Rx.Recorded.prototype.time;
 /** @type {?} */
Rx.Recorded.prototype.value;

/**
 * @param {!Rx.Recorded} other
 * @return {boolean}
 */
Rx.Recorded.prototype.equals = function(other) {};

/**
 * @return {string}
 */
Rx.Recorded.prototype.toString = function() {};
 /** @type {{created: number, subscribed: number, disposed: number, onNext: function(number, ?): !Rx.Recorded, onError: function(number, ?): !Rx.Recorded, onCompleted: function(number): !Rx.Recorded, subscribe: function(number, number): !Rx.Subscription}} */
Rx.ReactiveTest;

/**
 * @constructor
 * @struct
 * @param {number} subscribeAt
 * @param {number=} unsubscribeAt
 */
Rx.Subscription = function(subscribeAt, unsubscribeAt) {};

/**
 * @param {!Rx.Subscription} other
 * @return {boolean}
 */
Rx.Subscription.prototype.equals = function(other) {};
/**
 * @record
 * @struct
 */
Rx.MockObserver = function() {};
 /** @type {!Array<!Rx.Recorded>} */
Rx.MockObserver.prototype.messages;
/**
 * @extends {Rx.ObserverStatic}
 * @record
 * @struct
 */
Rx.MockObserverStatic = function() {};

/* TODO: ConstructSignature: Rx */
 /** @type {!Rx.MockObserverStatic} */
Rx.MockObserver;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "rx-lite-testing"
/** @const */
tsickle_declare_module.rx_lite_testing = {};

/* TODO: ExportAssignment in tsickle_declare_module.rx_lite_testing */
