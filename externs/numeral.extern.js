/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/numeral/index.d.ts:
/**
 * @record
 * @struct
 */
function NumeralJSLocale() {}
 /** @type {{thousands: string, decimal: string}} */
NumeralJSLocale.prototype.delimiters;
 /** @type {{thousand: string, million: string, billion: string, trillion: string}} */
NumeralJSLocale.prototype.abbreviations;
 /** @type {{symbol: string}} */
NumeralJSLocale.prototype.currency;

/**
 * @param {number} num
 * @return {string}
 */
NumeralJSLocale.prototype.ordinal = function(num) {};

/** @typedef {function(number): number} */
var RoundingFunction;
/**
 * @record
 * @struct
 */
function NumeralJsFormat() {}
 /** @type {{format: !RegExp, unformat: !RegExp}} */
NumeralJsFormat.prototype.regexps;
 /** @type {function(?, string, function(number): number): string} */
NumeralJsFormat.prototype.format;
 /** @type {function(string): number} */
NumeralJsFormat.prototype.unformat;

/** @typedef {string} */
var RegisterType;
/**
 * @record
 * @struct
 */
function Numeral() {}

/* TODO: CallSignature:  */
 /** @type {string} */
Numeral.prototype.version;
 /** @type {boolean} */
Numeral.prototype.isNumeral;

/**
 * This function sets the current locale.  If no arguments are passed in,
 * it will simply return the current global locale key.
 * @param {string=} key
 * @return {string}
 */
Numeral.prototype.locale = function(key) {};

/**
 * Registers a language definition or a custom format definition.
 * 
 * @param {string} what Allowed values are: either 'format' or 'locale'
 * @param {string} key The key of the registerd type, e.g. 'de' for a german locale definition
 * @param {(!NumeralJSLocale|!NumeralJsFormat)} value The locale definition or the format definitiion
 * @return {(!NumeralJSLocale|!NumeralJsFormat)}
 */
Numeral.prototype.register = function(what, key, value) {};

/**
 * @param {string} format
 * @return {void}
 */
Numeral.prototype.zeroFormat = function(format) {};

/**
 * @param {string} format
 * @return {void}
 */
Numeral.prototype.nullFormat = function(format) {};

/**
 * @param {string} format
 * @return {void}
 */
Numeral.prototype.defaultFormat = function(format) {};

/**
 * @return {!Numeral}
 */
Numeral.prototype.clone = function() {};

/**
 * @param {string=} inputString
 * @param {function(number): number=} roundingFunction
 * @return {string}
 */
Numeral.prototype.format = function(inputString, roundingFunction) {};

/**
 * @param {string=} inputString
 * @return {string}
 */
Numeral.prototype.formatCurrency = function(inputString) {};

/**
 * @param {string} inputString
 * @return {number}
 */
Numeral.prototype.unformat = function(inputString) {};

/**
 * @return {number}
 */
Numeral.prototype.value = function() {};

/**
 * @return {number}
 */
Numeral.prototype.valueOf = function() {};

/**
 * @param {?} value
 * @return {!Numeral}
 */
Numeral.prototype.set = function(value) {};

/**
 * @param {?} value
 * @return {!Numeral}
 */
Numeral.prototype.add = function(value) {};

/**
 * @param {?} value
 * @return {!Numeral}
 */
Numeral.prototype.subtract = function(value) {};

/**
 * @param {?} value
 * @return {!Numeral}
 */
Numeral.prototype.multiply = function(value) {};

/**
 * @param {?} value
 * @return {!Numeral}
 */
Numeral.prototype.divide = function(value) {};

/**
 * @param {?} value
 * @return {number}
 */
Numeral.prototype.difference = function(value) {};

/**
 * @param {?} value
 * @param {?} culture
 * @return {boolean}
 */
Numeral.prototype.validate = function(value, culture) {};
 /** @type {!Numeral} */
var numeral;
/** @const */
var tsickle_declare_module = {};
// Derived from: declare module "numeral"
/** @const */
tsickle_declare_module.numeral = {};

/* TODO: ExportAssignment in tsickle_declare_module.numeral */
