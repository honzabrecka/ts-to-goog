/**
 * @externs
 * @suppress {duplicate,checkTypes}
 */
// NOTE: generated by tsickle, do not edit.
// externs from d/node-pg-migrate/index.d.ts:
/**
 * @record
 * @struct
 */
function ColumnDefinition() {}
 /** @type {string} */
ColumnDefinition.prototype.type;
 /** @type {boolean} */
ColumnDefinition.prototype.unique;
 /** @type {boolean} */
ColumnDefinition.prototype.primaryKey;
 /** @type {boolean} */
ColumnDefinition.prototype.notNull;
 /** @type {string} */
ColumnDefinition.prototype.check;
 /** @type {string} */
ColumnDefinition.prototype.references;
 /** @type {string} */
ColumnDefinition.prototype.onDelete;
 /** @type {string} */
ColumnDefinition.prototype.onUpdate;
/**
 * @record
 * @struct
 */
function ColumnOptions() {}
 /** @type {string} */
ColumnOptions.prototype.type;
 /** @type {(string|?)} */
ColumnOptions.prototype.default;
 /** @type {boolean} */
ColumnOptions.prototype.notNull;
 /** @type {boolean} */
ColumnOptions.prototype.allowNull;
/**
 * @record
 * @struct
 */
function CreateIndexOptions() {}
 /** @type {string} */
CreateIndexOptions.prototype.name;
 /** @type {boolean} */
CreateIndexOptions.prototype.unique;
 /** @type {string} */
CreateIndexOptions.prototype.where;
 /** @type {boolean} */
CreateIndexOptions.prototype.concurrently;
 /** @type {string} */
CreateIndexOptions.prototype.method;
/**
 * @record
 * @struct
 */
function ColumnDefinitions() {}

/* TODO: IndexSignature:  */

/** @typedef {(string|?)} */
var TableDescriptor;
/**
 * @record
 * @struct
 */
function MigrationBuilder() {}

/**
 * @param {(string|!Array<string>)} extension
 * @return {void}
 */
MigrationBuilder.prototype.addExtension = function(extension) {};

/**
 * @param {(string|!Array<string>)} extension
 * @return {void}
 */
MigrationBuilder.prototype.createExtension = function(extension) {};

/**
 * @param {(string|!Array<string>)} extension
 * @return {void}
 */
MigrationBuilder.prototype.dropExtension = function(extension) {};

/**
 * @param {(string|?)} tableName
 * @param {?} columns
 * @param {?=} options
 * @return {void}
 */
MigrationBuilder.prototype.createTable = function(tableName, columns, options) {};

/**
 * @param {(string|?)} tableName
 * @return {void}
 */
MigrationBuilder.prototype.dropTable = function(tableName) {};

/**
 * @param {(string|?)} tablename
 * @param {(string|?)} new_tablename
 * @return {void}
 */
MigrationBuilder.prototype.renameTable = function(tablename, new_tablename) {};

/**
 * @param {(string|?)} tablename
 * @param {?} new_columns
 * @return {void}
 */
MigrationBuilder.prototype.addColumn = function(tablename, new_columns) {};

/**
 * @param {(string|?)} tablename
 * @param {?} new_columns
 * @return {void}
 */
MigrationBuilder.prototype.addColumns = function(tablename, new_columns) {};

/**
 * @param {(string|?)} tablename
 * @param {(!Array<string>|?)} columns
 * @return {void}
 */
MigrationBuilder.prototype.dropColumn = function(tablename, columns) {};

/**
 * @param {(string|?)} tablename
 * @param {(!Array<string>|?)} columns
 * @return {void}
 */
MigrationBuilder.prototype.dropColumns = function(tablename, columns) {};

/**
 * @param {(string|?)} tablename
 * @param {string} old_column_name
 * @param {string} new_column_name
 * @return {void}
 */
MigrationBuilder.prototype.renameColumn = function(tablename, old_column_name, new_column_name) {};

/**
 * @param {(string|?)} tableName
 * @param {string} columnName
 * @param {?} options
 * @return {void}
 */
MigrationBuilder.prototype.alterColumn = function(tableName, columnName, options) {};

/**
 * @param {(string|?)} tablename
 * @param {string} constraint_name
 * @param {string} expression
 * @return {void}
 */
MigrationBuilder.prototype.addConstraint = function(tablename, constraint_name, expression) {};

/**
 * @param {(string|?)} tablename
 * @param {string} constraint_name
 * @param {string} expression
 * @return {void}
 */
MigrationBuilder.prototype.createConstraint = function(tablename, constraint_name, expression) {};

/**
 * @param {(string|?)} tablename
 * @param {string} constraint_name
 * @return {void}
 */
MigrationBuilder.prototype.dropConstraint = function(tablename, constraint_name) {};

/**
 * @param {string} type_name
 * @param {(!Array<string>|?)} values
 * @return {void}
 */
MigrationBuilder.prototype.addType = function(type_name, values) {};

/**
 * @param {string} type_name
 * @param {(!Array<string>|?)} values
 * @return {void}
 */
MigrationBuilder.prototype.createType = function(type_name, values) {};

/**
 * @param {string} type_name
 * @return {void}
 */
MigrationBuilder.prototype.dropType = function(type_name) {};

/**
 * @param {(string|?)} tableName
 * @param {(string|!Array<string>)} columns
 * @param {?=} options
 * @return {void}
 */
MigrationBuilder.prototype.createIndex = function(tableName, columns, options) {};

/**
 * @param {(string|?)} tableName
 * @param {(string|!Array<string>)} columns
 * @param {?=} options
 * @return {void}
 */
MigrationBuilder.prototype.dropIndex = function(tableName, columns, options) {};

/**
 * @param {(string|?)} tableName
 * @param {(string|!Array<string>)} columns
 * @param {?=} options
 * @return {void}
 */
MigrationBuilder.prototype.addIndex = function(tableName, columns, options) {};

/**
 * @param {string} sql
 * @param {!Object=} args
 * @return {void}
 */
MigrationBuilder.prototype.sql = function(sql, args) {};

/**
 * @param {string} sql
 * @return {?}
 */
MigrationBuilder.prototype.func = function(sql) {};

/**
 * @constructor
 * @struct
 * @param {string} str
 */
function PgLiteral(str) {}

/**
 * @param {string} str
 * @return {?}
 */
PgLiteral.create = function(str) {};
